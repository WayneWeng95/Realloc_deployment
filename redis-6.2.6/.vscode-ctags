!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(CPP_OBJS)	deps/jemalloc/Makefile	/^$(CPP_OBJS) $(CPP_PIC_OBJS) $(TESTS_CPP_OBJS): %.$(O):$/;"	t
$(CPP_OBJS)	deps/jemalloc/Makefile	/^$(CPP_OBJS) $(C_SYM_OBJS) $(C_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS): CPPFLAGS += -DDLLEXPORT$/;"	t
$(CPP_OBJS)	deps/jemalloc/Makefile	/^$(CPP_OBJS): $(objroot)src\/%.$(O): $(srcroot)src\/%.cpp$/;"	t
$(CPP_OBJS)	deps/jemalloc/Makefile	/^$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEG/;"	t
$(CPP_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(CPP_OBJS)	deps/jemalloc/Makefile.in	/^$(CPP_OBJS) $(CPP_PIC_OBJS) $(TESTS_CPP_OBJS): %.$(O):$/;"	t
$(CPP_OBJS)	deps/jemalloc/Makefile.in	/^$(CPP_OBJS) $(C_SYM_OBJS) $(C_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS): CPPFLAGS += -DDLLEXPORT$/;"	t
$(CPP_OBJS)	deps/jemalloc/Makefile.in	/^$(CPP_OBJS): $(objroot)src\/%.$(O): $(srcroot)src\/%.cpp$/;"	t
$(CPP_OBJS)	deps/jemalloc/Makefile.in	/^$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEG/;"	t
$(CPP_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(CPP_PIC_OBJS)	deps/jemalloc/Makefile	/^$(CPP_OBJS) $(CPP_PIC_OBJS) $(TESTS_CPP_OBJS): %.$(O):$/;"	t
$(CPP_PIC_OBJS)	deps/jemalloc/Makefile	/^$(CPP_PIC_OBJS): $(objroot)src\/%.pic.$(O): $(srcroot)src\/%.cpp$/;"	t
$(CPP_PIC_OBJS)	deps/jemalloc/Makefile	/^$(CPP_PIC_OBJS): CXXFLAGS += $(PIC_CFLAGS)$/;"	t
$(CPP_PIC_OBJS)	deps/jemalloc/Makefile	/^$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEG/;"	t
$(CPP_PIC_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(CPP_PIC_OBJS)	deps/jemalloc/Makefile.in	/^$(CPP_OBJS) $(CPP_PIC_OBJS) $(TESTS_CPP_OBJS): %.$(O):$/;"	t
$(CPP_PIC_OBJS)	deps/jemalloc/Makefile.in	/^$(CPP_PIC_OBJS): $(objroot)src\/%.pic.$(O): $(srcroot)src\/%.cpp$/;"	t
$(CPP_PIC_OBJS)	deps/jemalloc/Makefile.in	/^$(CPP_PIC_OBJS): CXXFLAGS += $(PIC_CFLAGS)$/;"	t
$(CPP_PIC_OBJS)	deps/jemalloc/Makefile.in	/^$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEG/;"	t
$(CPP_PIC_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(C_JET_OBJS)	deps/jemalloc/Makefile	/^$(CPP_OBJS) $(C_SYM_OBJS) $(C_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS): CPPFLAGS += -DDLLEXPORT$/;"	t
$(C_JET_OBJS)	deps/jemalloc/Makefile	/^$(C_JET_OBJS) $(C_TESTLIB_UNIT_OBJS) $(C_TESTLIB_STRESS_OBJS) $(TESTS_UNIT_OBJS) $(TESTS_STRESS_/;"	t
$(C_JET_OBJS)	deps/jemalloc/Makefile	/^$(C_JET_OBJS): $(objroot)src\/%.jet.$(O): $(srcroot)src\/%.c$/;"	t
$(C_JET_OBJS)	deps/jemalloc/Makefile	/^$(C_JET_OBJS): CPPFLAGS += -DJEMALLOC_JET$/;"	t
$(C_JET_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(C_JET_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_/;"	t
$(C_JET_OBJS)	deps/jemalloc/Makefile.in	/^$(CPP_OBJS) $(C_SYM_OBJS) $(C_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS): CPPFLAGS += -DDLLEXPORT$/;"	t
$(C_JET_OBJS)	deps/jemalloc/Makefile.in	/^$(C_JET_OBJS) $(C_TESTLIB_UNIT_OBJS) $(C_TESTLIB_STRESS_OBJS) $(TESTS_UNIT_OBJS) $(TESTS_STRESS_/;"	t
$(C_JET_OBJS)	deps/jemalloc/Makefile.in	/^$(C_JET_OBJS): $(objroot)src\/%.jet.$(O): $(srcroot)src\/%.c$/;"	t
$(C_JET_OBJS)	deps/jemalloc/Makefile.in	/^$(C_JET_OBJS): CPPFLAGS += -DJEMALLOC_JET$/;"	t
$(C_JET_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(C_JET_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_/;"	t
$(C_JET_SYMS)	deps/jemalloc/Makefile	/^$(C_JET_SYMS): $(objroot)src\/%.jet.sym: $(objroot)src\/%.jet.sym.$(O)$/;"	t
$(C_JET_SYMS)	deps/jemalloc/Makefile	/^$(C_JET_SYMS): %.sym:$/;"	t
$(C_JET_SYMS)	deps/jemalloc/Makefile.in	/^$(C_JET_SYMS): $(objroot)src\/%.jet.sym: $(objroot)src\/%.jet.sym.$(O)$/;"	t
$(C_JET_SYMS)	deps/jemalloc/Makefile.in	/^$(C_JET_SYMS): %.sym:$/;"	t
$(C_JET_SYM_OBJS)	deps/jemalloc/Makefile	/^$(CPP_OBJS) $(C_SYM_OBJS) $(C_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS): CPPFLAGS += -DDLLEXPORT$/;"	t
$(C_JET_SYM_OBJS)	deps/jemalloc/Makefile	/^$(C_JET_SYM_OBJS): $(objroot)src\/%.jet.sym.$(O): $(srcroot)src\/%.c$/;"	t
$(C_JET_SYM_OBJS)	deps/jemalloc/Makefile	/^$(C_JET_SYM_OBJS): CPPFLAGS += -DJEMALLOC_JET -DJEMALLOC_NO_PRIVATE_NAMESPACE$/;"	t
$(C_JET_SYM_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(C_JET_SYM_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_/;"	t
$(C_JET_SYM_OBJS)	deps/jemalloc/Makefile.in	/^$(CPP_OBJS) $(C_SYM_OBJS) $(C_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS): CPPFLAGS += -DDLLEXPORT$/;"	t
$(C_JET_SYM_OBJS)	deps/jemalloc/Makefile.in	/^$(C_JET_SYM_OBJS): $(objroot)src\/%.jet.sym.$(O): $(srcroot)src\/%.c$/;"	t
$(C_JET_SYM_OBJS)	deps/jemalloc/Makefile.in	/^$(C_JET_SYM_OBJS): CPPFLAGS += -DJEMALLOC_JET -DJEMALLOC_NO_PRIVATE_NAMESPACE$/;"	t
$(C_JET_SYM_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(C_JET_SYM_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_/;"	t
$(C_OBJS)	deps/jemalloc/Makefile	/^$(CPP_OBJS) $(C_SYM_OBJS) $(C_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS): CPPFLAGS += -DDLLEXPORT$/;"	t
$(C_OBJS)	deps/jemalloc/Makefile	/^$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEG/;"	t
$(C_OBJS)	deps/jemalloc/Makefile	/^$(C_OBJS): $(objroot)src\/%.$(O): $(srcroot)src\/%.c$/;"	t
$(C_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(C_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_/;"	t
$(C_OBJS)	deps/jemalloc/Makefile.in	/^$(CPP_OBJS) $(C_SYM_OBJS) $(C_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS): CPPFLAGS += -DDLLEXPORT$/;"	t
$(C_OBJS)	deps/jemalloc/Makefile.in	/^$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEG/;"	t
$(C_OBJS)	deps/jemalloc/Makefile.in	/^$(C_OBJS): $(objroot)src\/%.$(O): $(srcroot)src\/%.c$/;"	t
$(C_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(C_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_/;"	t
$(C_PIC_OBJS)	deps/jemalloc/Makefile	/^$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEG/;"	t
$(C_PIC_OBJS)	deps/jemalloc/Makefile	/^$(C_PIC_OBJS): $(objroot)src\/%.pic.$(O): $(srcroot)src\/%.c$/;"	t
$(C_PIC_OBJS)	deps/jemalloc/Makefile	/^$(C_PIC_OBJS): CFLAGS += $(PIC_CFLAGS)$/;"	t
$(C_PIC_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(C_PIC_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_/;"	t
$(C_PIC_OBJS)	deps/jemalloc/Makefile.in	/^$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEG/;"	t
$(C_PIC_OBJS)	deps/jemalloc/Makefile.in	/^$(C_PIC_OBJS): $(objroot)src\/%.pic.$(O): $(srcroot)src\/%.c$/;"	t
$(C_PIC_OBJS)	deps/jemalloc/Makefile.in	/^$(C_PIC_OBJS): CFLAGS += $(PIC_CFLAGS)$/;"	t
$(C_PIC_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(C_PIC_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_/;"	t
$(C_SYMS)	deps/jemalloc/Makefile	/^$(C_SYMS): $(objroot)src\/%.sym: $(objroot)src\/%.sym.$(O)$/;"	t
$(C_SYMS)	deps/jemalloc/Makefile	/^$(C_SYMS): %.sym:$/;"	t
$(C_SYMS)	deps/jemalloc/Makefile.in	/^$(C_SYMS): $(objroot)src\/%.sym: $(objroot)src\/%.sym.$(O)$/;"	t
$(C_SYMS)	deps/jemalloc/Makefile.in	/^$(C_SYMS): %.sym:$/;"	t
$(C_SYM_OBJS)	deps/jemalloc/Makefile	/^$(CPP_OBJS) $(C_SYM_OBJS) $(C_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS): CPPFLAGS += -DDLLEXPORT$/;"	t
$(C_SYM_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(C_SYM_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_/;"	t
$(C_SYM_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS): $(objroot)src\/%.sym.$(O): $(srcroot)src\/%.c$/;"	t
$(C_SYM_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS): CPPFLAGS += -DJEMALLOC_NO_PRIVATE_NAMESPACE$/;"	t
$(C_SYM_OBJS)	deps/jemalloc/Makefile.in	/^$(CPP_OBJS) $(C_SYM_OBJS) $(C_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS): CPPFLAGS += -DDLLEXPORT$/;"	t
$(C_SYM_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(C_SYM_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_/;"	t
$(C_SYM_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS): $(objroot)src\/%.sym.$(O): $(srcroot)src\/%.c$/;"	t
$(C_SYM_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS): CPPFLAGS += -DJEMALLOC_NO_PRIVATE_NAMESPACE$/;"	t
$(C_TESTLIB_INTEGRATION_OBJS)	deps/jemalloc/Makefile	/^$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEG/;"	t
$(C_TESTLIB_INTEGRATION_OBJS)	deps/jemalloc/Makefile	/^$(C_TESTLIB_INTEGRATION_OBJS): $(objroot)test\/src\/%.integration.$(O): $(srcroot)test\/src\/%.c$/;"	t
$(C_TESTLIB_INTEGRATION_OBJS)	deps/jemalloc/Makefile	/^$(C_TESTLIB_INTEGRATION_OBJS): CPPFLAGS += -DJEMALLOC_INTEGRATION_TEST$/;"	t
$(C_TESTLIB_INTEGRATION_OBJS)	deps/jemalloc/Makefile.in	/^$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEG/;"	t
$(C_TESTLIB_INTEGRATION_OBJS)	deps/jemalloc/Makefile.in	/^$(C_TESTLIB_INTEGRATION_OBJS): $(objroot)test\/src\/%.integration.$(O): $(srcroot)test\/src\/%.c$/;"	t
$(C_TESTLIB_INTEGRATION_OBJS)	deps/jemalloc/Makefile.in	/^$(C_TESTLIB_INTEGRATION_OBJS): CPPFLAGS += -DJEMALLOC_INTEGRATION_TEST$/;"	t
$(C_TESTLIB_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(C_TESTLIB_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_/;"	t
$(C_TESTLIB_OBJS)	deps/jemalloc/Makefile	/^$(C_TESTLIB_OBJS): CPPFLAGS += -I$(srcroot)test\/include -I$(objroot)test\/include$/;"	t
$(C_TESTLIB_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(C_TESTLIB_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_/;"	t
$(C_TESTLIB_OBJS)	deps/jemalloc/Makefile.in	/^$(C_TESTLIB_OBJS): CPPFLAGS += -I$(srcroot)test\/include -I$(objroot)test\/include$/;"	t
$(C_TESTLIB_STRESS_OBJS)	deps/jemalloc/Makefile	/^$(C_JET_OBJS) $(C_TESTLIB_UNIT_OBJS) $(C_TESTLIB_STRESS_OBJS) $(TESTS_UNIT_OBJS) $(TESTS_STRESS_/;"	t
$(C_TESTLIB_STRESS_OBJS)	deps/jemalloc/Makefile	/^$(C_TESTLIB_STRESS_OBJS): $(objroot)test\/src\/%.stress.$(O): $(srcroot)test\/src\/%.c$/;"	t
$(C_TESTLIB_STRESS_OBJS)	deps/jemalloc/Makefile	/^$(C_TESTLIB_STRESS_OBJS): CPPFLAGS += -DJEMALLOC_STRESS_TEST -DJEMALLOC_STRESS_TESTLIB$/;"	t
$(C_TESTLIB_STRESS_OBJS)	deps/jemalloc/Makefile.in	/^$(C_JET_OBJS) $(C_TESTLIB_UNIT_OBJS) $(C_TESTLIB_STRESS_OBJS) $(TESTS_UNIT_OBJS) $(TESTS_STRESS_/;"	t
$(C_TESTLIB_STRESS_OBJS)	deps/jemalloc/Makefile.in	/^$(C_TESTLIB_STRESS_OBJS): $(objroot)test\/src\/%.stress.$(O): $(srcroot)test\/src\/%.c$/;"	t
$(C_TESTLIB_STRESS_OBJS)	deps/jemalloc/Makefile.in	/^$(C_TESTLIB_STRESS_OBJS): CPPFLAGS += -DJEMALLOC_STRESS_TEST -DJEMALLOC_STRESS_TESTLIB$/;"	t
$(C_TESTLIB_UNIT_OBJS)	deps/jemalloc/Makefile	/^$(C_JET_OBJS) $(C_TESTLIB_UNIT_OBJS) $(C_TESTLIB_STRESS_OBJS) $(TESTS_UNIT_OBJS) $(TESTS_STRESS_/;"	t
$(C_TESTLIB_UNIT_OBJS)	deps/jemalloc/Makefile	/^$(C_TESTLIB_UNIT_OBJS): $(objroot)test\/src\/%.unit.$(O): $(srcroot)test\/src\/%.c$/;"	t
$(C_TESTLIB_UNIT_OBJS)	deps/jemalloc/Makefile	/^$(C_TESTLIB_UNIT_OBJS): CPPFLAGS += -DJEMALLOC_UNIT_TEST$/;"	t
$(C_TESTLIB_UNIT_OBJS)	deps/jemalloc/Makefile.in	/^$(C_JET_OBJS) $(C_TESTLIB_UNIT_OBJS) $(C_TESTLIB_STRESS_OBJS) $(TESTS_UNIT_OBJS) $(TESTS_STRESS_/;"	t
$(C_TESTLIB_UNIT_OBJS)	deps/jemalloc/Makefile.in	/^$(C_TESTLIB_UNIT_OBJS): $(objroot)test\/src\/%.unit.$(O): $(srcroot)test\/src\/%.c$/;"	t
$(C_TESTLIB_UNIT_OBJS)	deps/jemalloc/Makefile.in	/^$(C_TESTLIB_UNIT_OBJS): CPPFLAGS += -DJEMALLOC_UNIT_TEST$/;"	t
$(C_UTIL_INTEGRATION_OBJS)	deps/jemalloc/Makefile	/^$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEG/;"	t
$(C_UTIL_INTEGRATION_OBJS)	deps/jemalloc/Makefile	/^$(C_UTIL_INTEGRATION_OBJS): $(objroot)src\/%.integration.$(O): $(srcroot)src\/%.c$/;"	t
$(C_UTIL_INTEGRATION_OBJS)	deps/jemalloc/Makefile.in	/^$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEG/;"	t
$(C_UTIL_INTEGRATION_OBJS)	deps/jemalloc/Makefile.in	/^$(C_UTIL_INTEGRATION_OBJS): $(objroot)src\/%.integration.$(O): $(srcroot)src\/%.c$/;"	t
$(DYLIBNAME)	deps/hiredis/Makefile	/^$(DYLIBNAME): $(OBJ)$/;"	t
$(LUAC_T)	deps/lua/src/Makefile	/^$(LUAC_T): $(LUAC_O) $(LUA_A)$/;"	t
$(LUA_A)	deps/lua/src/Makefile	/^$(LUA_A): $(CORE_O) $(LIB_O)$/;"	t
$(LUA_T)	deps/lua/src/Makefile	/^$(LUA_T): $(LUA_O) $(LUA_A)$/;"	t
$(MALLOC_CONF)	deps/jemalloc/Makefile	/^	$(MALLOC_CONF)="prof:true" $(SHELL) $(objroot)test\/test.sh $(TESTS_INTEGRATION:$(srcroot)%.c=$/;"	m
$(MALLOC_CONF)	deps/jemalloc/Makefile	/^	$(MALLOC_CONF)="prof:true,prof_active:false" $(SHELL) $(objroot)test\/test.sh $(TESTS_INTEGRATI/;"	m
$(MALLOC_CONF)	deps/jemalloc/Makefile.in	/^	$(MALLOC_CONF)="prof:true" $(SHELL) $(objroot)test\/test.sh $(TESTS_INTEGRATION:$(srcroot)%.c=$/;"	m
$(MALLOC_CONF)	deps/jemalloc/Makefile.in	/^	$(MALLOC_CONF)="prof:true,prof_active:false" $(SHELL) $(objroot)test\/test.sh $(TESTS_INTEGRATI/;"	m
$(PKGCONFNAME)	deps/hiredis/Makefile	/^$(PKGCONFNAME): hiredis.h$/;"	t
$(PLATS)	deps/lua/Makefile	/^$(PLATS) clean:$/;"	t
$(REDIS_BENCHMARK_NAME)	src/Makefile	/^$(REDIS_BENCHMARK_NAME): $(REDIS_BENCHMARK_OBJ)$/;"	t
$(REDIS_CHECK_AOF_NAME)	src/Makefile	/^$(REDIS_CHECK_AOF_NAME): $(REDIS_SERVER_NAME)$/;"	t
$(REDIS_CHECK_RDB_NAME)	src/Makefile	/^$(REDIS_CHECK_RDB_NAME): $(REDIS_SERVER_NAME)$/;"	t
$(REDIS_CLI_NAME)	src/Makefile	/^$(REDIS_CLI_NAME): $(REDIS_CLI_OBJ)$/;"	t
$(REDIS_SENTINEL_NAME)	src/Makefile	/^$(REDIS_SENTINEL_NAME): $(REDIS_SERVER_NAME)$/;"	t
$(REDIS_SERVER_NAME)	src/Makefile	/^$(REDIS_SERVER_NAME): $(REDIS_SERVER_OBJ)$/;"	t
$(SSL_DYLIBNAME)	deps/hiredis/Makefile	/^$(SSL_DYLIBNAME): $(SSL_OBJ)$/;"	t
$(SSL_PKGCONFNAME)	deps/hiredis/Makefile	/^$(SSL_PKGCONFNAME): hiredis_ssl.h$/;"	t
$(SSL_STLIBNAME)	deps/hiredis/Makefile	/^$(SSL_STLIBNAME): $(SSL_OBJ)$/;"	t
$(STATIC_LIBS)	deps/jemalloc/Makefile	/^$(STATIC_LIBS):$/;"	t
$(STATIC_LIBS)	deps/jemalloc/Makefile.in	/^$(STATIC_LIBS):$/;"	t
$(STLIBNAME)	deps/hiredis/Makefile	/^$(STLIBNAME): $(OBJ)$/;"	t
$(TESTS_CPP_OBJS)	deps/jemalloc/Makefile	/^$(CPP_OBJS) $(CPP_PIC_OBJS) $(TESTS_CPP_OBJS): %.$(O):$/;"	t
$(TESTS_CPP_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(TESTS_CPP_OBJS)	deps/jemalloc/Makefile	/^$(TESTS_CPP_OBJS): $(objroot)test\/%.$(O): $(srcroot)test\/%.cpp$/;"	t
$(TESTS_CPP_OBJS)	deps/jemalloc/Makefile	/^$(TESTS_CPP_OBJS): CPPFLAGS += -I$(srcroot)test\/include -I$(objroot)test\/include$/;"	t
$(TESTS_CPP_OBJS)	deps/jemalloc/Makefile	/^$(TESTS_OBJS) $(TESTS_CPP_OBJS): $(objroot)test\/include\/test\/jemalloc_test.h$/;"	t
$(TESTS_CPP_OBJS)	deps/jemalloc/Makefile.in	/^$(CPP_OBJS) $(CPP_PIC_OBJS) $(TESTS_CPP_OBJS): %.$(O):$/;"	t
$(TESTS_CPP_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(TESTS_CPP_OBJS)	deps/jemalloc/Makefile.in	/^$(TESTS_CPP_OBJS): $(objroot)test\/%.$(O): $(srcroot)test\/%.cpp$/;"	t
$(TESTS_CPP_OBJS)	deps/jemalloc/Makefile.in	/^$(TESTS_CPP_OBJS): CPPFLAGS += -I$(srcroot)test\/include -I$(objroot)test\/include$/;"	t
$(TESTS_CPP_OBJS)	deps/jemalloc/Makefile.in	/^$(TESTS_OBJS) $(TESTS_CPP_OBJS): $(objroot)test\/include\/test\/jemalloc_test.h$/;"	t
$(TESTS_INTEGRATION_CPP_OBJS)	deps/jemalloc/Makefile	/^$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEG/;"	t
$(TESTS_INTEGRATION_CPP_OBJS)	deps/jemalloc/Makefile	/^$(TESTS_INTEGRATION_CPP_OBJS): CPPFLAGS += -DJEMALLOC_INTEGRATION_CPP_TEST$/;"	t
$(TESTS_INTEGRATION_CPP_OBJS)	deps/jemalloc/Makefile.in	/^$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEG/;"	t
$(TESTS_INTEGRATION_CPP_OBJS)	deps/jemalloc/Makefile.in	/^$(TESTS_INTEGRATION_CPP_OBJS): CPPFLAGS += -DJEMALLOC_INTEGRATION_CPP_TEST$/;"	t
$(TESTS_INTEGRATION_OBJS)	deps/jemalloc/Makefile	/^$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEG/;"	t
$(TESTS_INTEGRATION_OBJS)	deps/jemalloc/Makefile	/^$(TESTS_INTEGRATION_OBJS): CPPFLAGS += -DJEMALLOC_INTEGRATION_TEST$/;"	t
$(TESTS_INTEGRATION_OBJS)	deps/jemalloc/Makefile.in	/^$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEG/;"	t
$(TESTS_INTEGRATION_OBJS)	deps/jemalloc/Makefile.in	/^$(TESTS_INTEGRATION_OBJS): CPPFLAGS += -DJEMALLOC_INTEGRATION_TEST$/;"	t
$(TESTS_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(TESTS_OBJS)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_/;"	t
$(TESTS_OBJS)	deps/jemalloc/Makefile	/^$(TESTS_OBJS) $(TESTS_CPP_OBJS): $(objroot)test\/include\/test\/jemalloc_test.h$/;"	t
$(TESTS_OBJS)	deps/jemalloc/Makefile	/^$(TESTS_OBJS): $(objroot)test\/%.$(O): $(srcroot)test\/%.c$/;"	t
$(TESTS_OBJS)	deps/jemalloc/Makefile	/^$(TESTS_OBJS): CPPFLAGS += -I$(srcroot)test\/include -I$(objroot)test\/include$/;"	t
$(TESTS_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS/;"	t
$(TESTS_OBJS)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_/;"	t
$(TESTS_OBJS)	deps/jemalloc/Makefile.in	/^$(TESTS_OBJS) $(TESTS_CPP_OBJS): $(objroot)test\/include\/test\/jemalloc_test.h$/;"	t
$(TESTS_OBJS)	deps/jemalloc/Makefile.in	/^$(TESTS_OBJS): $(objroot)test\/%.$(O): $(srcroot)test\/%.c$/;"	t
$(TESTS_OBJS)	deps/jemalloc/Makefile.in	/^$(TESTS_OBJS): CPPFLAGS += -I$(srcroot)test\/include -I$(objroot)test\/include$/;"	t
$(TESTS_STRESS_OBJS)	deps/jemalloc/Makefile	/^$(C_JET_OBJS) $(C_TESTLIB_UNIT_OBJS) $(C_TESTLIB_STRESS_OBJS) $(TESTS_UNIT_OBJS) $(TESTS_STRESS_/;"	t
$(TESTS_STRESS_OBJS)	deps/jemalloc/Makefile	/^$(TESTS_STRESS_OBJS): CPPFLAGS += -DJEMALLOC_STRESS_TEST$/;"	t
$(TESTS_STRESS_OBJS)	deps/jemalloc/Makefile.in	/^$(C_JET_OBJS) $(C_TESTLIB_UNIT_OBJS) $(C_TESTLIB_STRESS_OBJS) $(TESTS_UNIT_OBJS) $(TESTS_STRESS_/;"	t
$(TESTS_STRESS_OBJS)	deps/jemalloc/Makefile.in	/^$(TESTS_STRESS_OBJS): CPPFLAGS += -DJEMALLOC_STRESS_TEST$/;"	t
$(TESTS_UNIT_OBJS)	deps/jemalloc/Makefile	/^$(C_JET_OBJS) $(C_TESTLIB_UNIT_OBJS) $(C_TESTLIB_STRESS_OBJS) $(TESTS_UNIT_OBJS) $(TESTS_STRESS_/;"	t
$(TESTS_UNIT_OBJS)	deps/jemalloc/Makefile	/^$(TESTS_UNIT_OBJS): CPPFLAGS += -DJEMALLOC_UNIT_TEST$/;"	t
$(TESTS_UNIT_OBJS)	deps/jemalloc/Makefile.in	/^$(C_JET_OBJS) $(C_TESTLIB_UNIT_OBJS) $(C_TESTLIB_STRESS_OBJS) $(TESTS_UNIT_OBJS) $(TESTS_STRESS_/;"	t
$(TESTS_UNIT_OBJS)	deps/jemalloc/Makefile.in	/^$(TESTS_UNIT_OBJS): CPPFLAGS += -DJEMALLOC_UNIT_TEST$/;"	t
$(cfghdrs_out)	deps/jemalloc/Makefile	/^$(cfgoutputs_out) $(cfghdrs_out) : $(objroot)config.stamp$/;"	t
$(cfghdrs_out)	deps/jemalloc/Makefile.in	/^$(cfgoutputs_out) $(cfghdrs_out) : $(objroot)config.stamp$/;"	t
$(cfgoutputs_out)	deps/jemalloc/Makefile	/^$(cfgoutputs_out) $(cfghdrs_out) : $(objroot)config.stamp$/;"	t
$(cfgoutputs_out)	deps/jemalloc/Makefile.in	/^$(cfgoutputs_out) $(cfghdrs_out) : $(objroot)config.stamp$/;"	t
$(objroot)config.stamp	deps/jemalloc/Makefile	/^$(objroot)config.stamp : $(cfgoutputs_in) $(cfghdrs_in) $(srcroot)configure$/;"	t
$(objroot)config.stamp	deps/jemalloc/Makefile.in	/^$(objroot)config.stamp : $(cfgoutputs_in) $(cfghdrs_in) $(srcroot)configure$/;"	t
$(objroot)config.status	deps/jemalloc/Makefile	/^$(objroot)config.status : $(srcroot)configure$/;"	t
$(objroot)config.status	deps/jemalloc/Makefile.in	/^$(objroot)config.status : $(srcroot)configure$/;"	t
$(objroot)doc/%.3	deps/jemalloc/Makefile	/^$(objroot)doc\/%.3 : $(objroot)doc\/%.xml $(srcroot)doc\/stylesheet.xsl $(objroot)doc\/manpages./;"	t
$(objroot)doc/%.3	deps/jemalloc/Makefile.in	/^$(objroot)doc\/%.3 : $(objroot)doc\/%.xml $(srcroot)doc\/stylesheet.xsl $(objroot)doc\/manpages./;"	t
$(objroot)doc/%.html	deps/jemalloc/Makefile	/^$(objroot)doc\/%.html : $(objroot)doc\/%.xml $(srcroot)doc\/stylesheet.xsl $(objroot)doc\/html.x/;"	t
$(objroot)doc/%.html	deps/jemalloc/Makefile.in	/^$(objroot)doc\/%.html : $(objroot)doc\/%.xml $(srcroot)doc\/stylesheet.xsl $(objroot)doc\/html.x/;"	t
$(objroot)include/jemalloc/internal/private_namespace.gen.h	deps/jemalloc/Makefile	/^$(objroot)include\/jemalloc\/internal\/private_namespace.gen.h: $(C_SYMS)$/;"	t
$(objroot)include/jemalloc/internal/private_namespace.gen.h	deps/jemalloc/Makefile.in	/^$(objroot)include\/jemalloc\/internal\/private_namespace.gen.h: $(C_SYMS)$/;"	t
$(objroot)include/jemalloc/internal/private_namespace_jet.gen.h	deps/jemalloc/Makefile	/^$(objroot)include\/jemalloc\/internal\/private_namespace_jet.gen.h: $(C_JET_SYMS)$/;"	t
$(objroot)include/jemalloc/internal/private_namespace_jet.gen.h	deps/jemalloc/Makefile.in	/^$(objroot)include\/jemalloc\/internal\/private_namespace_jet.gen.h: $(C_JET_SYMS)$/;"	t
$(objroot)lib/$(LIBJEMALLOC).$(A)	deps/jemalloc/Makefile	/^$(objroot)lib\/$(LIBJEMALLOC).$(A) : $(C_OBJS) $(CPP_OBJS)$/;"	t
$(objroot)lib/$(LIBJEMALLOC).$(A)	deps/jemalloc/Makefile.in	/^$(objroot)lib\/$(LIBJEMALLOC).$(A) : $(C_OBJS) $(CPP_OBJS)$/;"	t
$(objroot)lib/$(LIBJEMALLOC).$(SOREV)	deps/jemalloc/Makefile	/^$(objroot)lib\/$(LIBJEMALLOC).$(SOREV) : $(if $(PIC_CFLAGS),$(C_PIC_OBJS),$(C_OBJS)) $(if $(PIC_/;"	t
$(objroot)lib/$(LIBJEMALLOC).$(SOREV)	deps/jemalloc/Makefile.in	/^$(objroot)lib\/$(LIBJEMALLOC).$(SOREV) : $(if $(PIC_CFLAGS),$(C_PIC_OBJS),$(C_OBJS)) $(if $(PIC_/;"	t
$(objroot)lib/$(LIBJEMALLOC)_pic.$(A)	deps/jemalloc/Makefile	/^$(objroot)lib\/$(LIBJEMALLOC)_pic.$(A) : $(C_PIC_OBJS) $(CPP_PIC_OBJS)$/;"	t
$(objroot)lib/$(LIBJEMALLOC)_pic.$(A)	deps/jemalloc/Makefile.in	/^$(objroot)lib\/$(LIBJEMALLOC)_pic.$(A) : $(C_PIC_OBJS) $(CPP_PIC_OBJS)$/;"	t
$(objroot)lib/$(LIBJEMALLOC)_s.$(A)	deps/jemalloc/Makefile	/^$(objroot)lib\/$(LIBJEMALLOC)_s.$(A) : $(C_OBJS) $(CPP_OBJS)$/;"	t
$(objroot)lib/$(LIBJEMALLOC)_s.$(A)	deps/jemalloc/Makefile.in	/^$(objroot)lib\/$(LIBJEMALLOC)_s.$(A) : $(C_OBJS) $(CPP_OBJS)$/;"	t
$(objroot)src/%.$(O)	deps/jemalloc/Makefile	/^$(CPP_OBJS): $(objroot)src\/%.$(O): $(srcroot)src\/%.cpp$/;"	t
$(objroot)src/%.$(O)	deps/jemalloc/Makefile	/^$(C_OBJS): $(objroot)src\/%.$(O): $(srcroot)src\/%.c$/;"	t
$(objroot)src/%.$(O)	deps/jemalloc/Makefile.in	/^$(CPP_OBJS): $(objroot)src\/%.$(O): $(srcroot)src\/%.cpp$/;"	t
$(objroot)src/%.$(O)	deps/jemalloc/Makefile.in	/^$(C_OBJS): $(objroot)src\/%.$(O): $(srcroot)src\/%.c$/;"	t
$(objroot)src/%.integration.$(O)	deps/jemalloc/Makefile	/^$(C_UTIL_INTEGRATION_OBJS): $(objroot)src\/%.integration.$(O): $(srcroot)src\/%.c$/;"	t
$(objroot)src/%.integration.$(O)	deps/jemalloc/Makefile.in	/^$(C_UTIL_INTEGRATION_OBJS): $(objroot)src\/%.integration.$(O): $(srcroot)src\/%.c$/;"	t
$(objroot)src/%.jet.$(O)	deps/jemalloc/Makefile	/^$(C_JET_OBJS): $(objroot)src\/%.jet.$(O): $(srcroot)src\/%.c$/;"	t
$(objroot)src/%.jet.$(O)	deps/jemalloc/Makefile.in	/^$(C_JET_OBJS): $(objroot)src\/%.jet.$(O): $(srcroot)src\/%.c$/;"	t
$(objroot)src/%.jet.sym	deps/jemalloc/Makefile	/^$(C_JET_SYMS): $(objroot)src\/%.jet.sym: $(objroot)src\/%.jet.sym.$(O)$/;"	t
$(objroot)src/%.jet.sym	deps/jemalloc/Makefile.in	/^$(C_JET_SYMS): $(objroot)src\/%.jet.sym: $(objroot)src\/%.jet.sym.$(O)$/;"	t
$(objroot)src/%.jet.sym.$(O)	deps/jemalloc/Makefile	/^$(C_JET_SYM_OBJS): $(objroot)src\/%.jet.sym.$(O): $(srcroot)src\/%.c$/;"	t
$(objroot)src/%.jet.sym.$(O)	deps/jemalloc/Makefile.in	/^$(C_JET_SYM_OBJS): $(objroot)src\/%.jet.sym.$(O): $(srcroot)src\/%.c$/;"	t
$(objroot)src/%.pic.$(O)	deps/jemalloc/Makefile	/^$(CPP_PIC_OBJS): $(objroot)src\/%.pic.$(O): $(srcroot)src\/%.cpp$/;"	t
$(objroot)src/%.pic.$(O)	deps/jemalloc/Makefile	/^$(C_PIC_OBJS): $(objroot)src\/%.pic.$(O): $(srcroot)src\/%.c$/;"	t
$(objroot)src/%.pic.$(O)	deps/jemalloc/Makefile.in	/^$(CPP_PIC_OBJS): $(objroot)src\/%.pic.$(O): $(srcroot)src\/%.cpp$/;"	t
$(objroot)src/%.pic.$(O)	deps/jemalloc/Makefile.in	/^$(C_PIC_OBJS): $(objroot)src\/%.pic.$(O): $(srcroot)src\/%.c$/;"	t
$(objroot)src/%.sym	deps/jemalloc/Makefile	/^$(C_SYMS): $(objroot)src\/%.sym: $(objroot)src\/%.sym.$(O)$/;"	t
$(objroot)src/%.sym	deps/jemalloc/Makefile.in	/^$(C_SYMS): $(objroot)src\/%.sym: $(objroot)src\/%.sym.$(O)$/;"	t
$(objroot)src/%.sym.$(O)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS): $(objroot)src\/%.sym.$(O): $(srcroot)src\/%.c$/;"	t
$(objroot)src/%.sym.$(O)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS): $(objroot)src\/%.sym.$(O): $(srcroot)src\/%.c$/;"	t
$(objroot)test/%.$(O)	deps/jemalloc/Makefile	/^$(TESTS_CPP_OBJS): $(objroot)test\/%.$(O): $(srcroot)test\/%.cpp$/;"	t
$(objroot)test/%.$(O)	deps/jemalloc/Makefile	/^$(TESTS_OBJS): $(objroot)test\/%.$(O): $(srcroot)test\/%.c$/;"	t
$(objroot)test/%.$(O)	deps/jemalloc/Makefile.in	/^$(TESTS_CPP_OBJS): $(objroot)test\/%.$(O): $(srcroot)test\/%.cpp$/;"	t
$(objroot)test/%.$(O)	deps/jemalloc/Makefile.in	/^$(TESTS_OBJS): $(objroot)test\/%.$(O): $(srcroot)test\/%.c$/;"	t
$(objroot)test/integration/%$(EXE)	deps/jemalloc/Makefile	/^$(objroot)test\/integration\/%$(EXE): $(objroot)test\/integration\/%.$(O) $(C_TESTLIB_INTEGRATIO/;"	t
$(objroot)test/integration/%$(EXE)	deps/jemalloc/Makefile.in	/^$(objroot)test\/integration\/%$(EXE): $(objroot)test\/integration\/%.$(O) $(C_TESTLIB_INTEGRATIO/;"	t
$(objroot)test/integration/cpp/%$(EXE)	deps/jemalloc/Makefile	/^$(objroot)test\/integration\/cpp\/%$(EXE): $(objroot)test\/integration\/cpp\/%.$(O) $(C_TESTLIB_/;"	t
$(objroot)test/integration/cpp/%$(EXE)	deps/jemalloc/Makefile.in	/^$(objroot)test\/integration\/cpp\/%$(EXE): $(objroot)test\/integration\/cpp\/%.$(O) $(C_TESTLIB_/;"	t
$(objroot)test/src/%.integration.$(O)	deps/jemalloc/Makefile	/^$(C_TESTLIB_INTEGRATION_OBJS): $(objroot)test\/src\/%.integration.$(O): $(srcroot)test\/src\/%.c$/;"	t
$(objroot)test/src/%.integration.$(O)	deps/jemalloc/Makefile.in	/^$(C_TESTLIB_INTEGRATION_OBJS): $(objroot)test\/src\/%.integration.$(O): $(srcroot)test\/src\/%.c$/;"	t
$(objroot)test/src/%.stress.$(O)	deps/jemalloc/Makefile	/^$(C_TESTLIB_STRESS_OBJS): $(objroot)test\/src\/%.stress.$(O): $(srcroot)test\/src\/%.c$/;"	t
$(objroot)test/src/%.stress.$(O)	deps/jemalloc/Makefile.in	/^$(C_TESTLIB_STRESS_OBJS): $(objroot)test\/src\/%.stress.$(O): $(srcroot)test\/src\/%.c$/;"	t
$(objroot)test/src/%.unit.$(O)	deps/jemalloc/Makefile	/^$(C_TESTLIB_UNIT_OBJS): $(objroot)test\/src\/%.unit.$(O): $(srcroot)test\/src\/%.c$/;"	t
$(objroot)test/src/%.unit.$(O)	deps/jemalloc/Makefile.in	/^$(C_TESTLIB_UNIT_OBJS): $(objroot)test\/src\/%.unit.$(O): $(srcroot)test\/src\/%.c$/;"	t
$(objroot)test/stress/%$(EXE)	deps/jemalloc/Makefile	/^$(objroot)test\/stress\/%$(EXE): $(objroot)test\/stress\/%.$(O) $(C_JET_OBJS) $(C_TESTLIB_STRESS/;"	t
$(objroot)test/stress/%$(EXE)	deps/jemalloc/Makefile.in	/^$(objroot)test\/stress\/%$(EXE): $(objroot)test\/stress\/%.$(O) $(C_JET_OBJS) $(C_TESTLIB_STRESS/;"	t
$(objroot)test/unit/%$(EXE)	deps/jemalloc/Makefile	/^$(objroot)test\/unit\/%$(EXE): $(objroot)test\/unit\/%.$(O) $(C_JET_OBJS) $(C_TESTLIB_UNIT_OBJS)$/;"	t
$(objroot)test/unit/%$(EXE)	deps/jemalloc/Makefile.in	/^$(objroot)test\/unit\/%$(EXE): $(objroot)test\/unit\/%.$(O) $(C_JET_OBJS) $(C_TESTLIB_UNIT_OBJS)$/;"	t
$(srcroot)config.stamp.in	deps/jemalloc/Makefile	/^$(srcroot)config.stamp.in : $(srcroot)configure.ac$/;"	t
$(srcroot)config.stamp.in	deps/jemalloc/Makefile.in	/^$(srcroot)config.stamp.in : $(srcroot)configure.ac$/;"	t
$(srcroot)configure	deps/jemalloc/Makefile	/^$(srcroot)configure : $(srcroot)configure.ac$/;"	t
$(srcroot)configure	deps/jemalloc/Makefile.in	/^$(srcroot)configure : $(srcroot)configure.ac$/;"	t
%.$(O)	deps/jemalloc/Makefile	/^$(CPP_OBJS) $(CPP_PIC_OBJS) $(TESTS_CPP_OBJS): %.$(O):$/;"	t
%.$(O)	deps/jemalloc/Makefile	/^$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_/;"	t
%.$(O)	deps/jemalloc/Makefile.in	/^$(CPP_OBJS) $(CPP_PIC_OBJS) $(TESTS_CPP_OBJS): %.$(O):$/;"	t
%.$(O)	deps/jemalloc/Makefile.in	/^$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_/;"	t
%.$(SO)	deps/jemalloc/Makefile	/^%.$(SO) : %.$(SOREV)$/;"	t
%.$(SO)	deps/jemalloc/Makefile.in	/^%.$(SO) : %.$(SOREV)$/;"	t
%.h	deps/jemalloc/Makefile	/^%.h: %.gen.h$/;"	t
%.h	deps/jemalloc/Makefile.in	/^%.h: %.gen.h$/;"	t
%.o	src/Makefile	/^%.o: %.c .make-prerequisites$/;"	t
%.so	tests/modules/Makefile	/^%.so: %.xo$/;"	t
%.sym	deps/jemalloc/Makefile	/^$(C_JET_SYMS): %.sym:$/;"	t
%.sym	deps/jemalloc/Makefile	/^$(C_SYMS): %.sym:$/;"	t
%.sym	deps/jemalloc/Makefile.in	/^$(C_JET_SYMS): %.sym:$/;"	t
%.sym	deps/jemalloc/Makefile.in	/^$(C_SYMS): %.sym:$/;"	t
%.xo	tests/modules/Makefile	/^%.xo: %.c ..\/..\/src\/redismodule.h$/;"	t
.c.o	deps/hdr_histogram/Makefile	/^.c.o:$/;"	t
.c.o	deps/hiredis/Makefile	/^.c.o:$/;"	t
.c.o	deps/linenoise/Makefile	/^.c.o:$/;"	t
.c.xo	src/modules/Makefile	/^.c.xo:$/;"	t
.make-cflags	deps/Makefile	/^.make-cflags: distclean$/;"	t
.make-ldflags	deps/Makefile	/^.make-ldflags: distclean$/;"	t
.make-prerequisites	deps/Makefile	/^.make-prerequisites: .make-cflags$/;"	t
.make-prerequisites	deps/Makefile	/^.make-prerequisites: .make-ldflags$/;"	t
.make-prerequisites	deps/Makefile	/^.make-prerequisites:$/;"	t
.make-prerequisites	src/Makefile	/^.make-prerequisites: persist-settings$/;"	t
.make-prerequisites	src/Makefile	/^.make-prerequisites:$/;"	t
32bit	deps/hiredis/Makefile	/^32bit:$/;"	t
32bit	src/Makefile	/^32bit:$/;"	t
32bit	tests/modules/Makefile	/^32bit:$/;"	t
32bit-vars	deps/hiredis/Makefile	/^32bit-vars:$/;"	t
A	deps/jemalloc/Makefile	/^A := a$/;"	m
A	deps/jemalloc/Makefile.in	/^A := @a@$/;"	m
A0	src/rand.c	/^#define A0	/;"	d	file:
A1	src/rand.c	/^#define A1	/;"	d	file:
A2	src/rand.c	/^#define A2	/;"	d	file:
ABI	deps/jemalloc/Makefile	/^ABI := elf$/;"	m
ABI	deps/jemalloc/Makefile.in	/^ABI := @abi@$/;"	m
ACLAddAllowedSubcommand	src/acl.c	/^void ACLAddAllowedSubcommand(user *u, unsigned long id, const char *sub) {$/;"	f	typeref:typename:void
ACLAppendUserForLoading	src/acl.c	/^int ACLAppendUserForLoading(sds *argv, int argc, int *argc_err) {$/;"	f	typeref:typename:int
ACLAuthenticateUser	src/acl.c	/^int ACLAuthenticateUser(client *c, robj *username, robj *password) {$/;"	f	typeref:typename:int
ACLCategoryItem	src/acl.c	/^struct ACLCategoryItem {$/;"	s	file:
ACLCheckAllPerm	src/acl.c	/^int ACLCheckAllPerm(client *c, int *idxptr) {$/;"	f	typeref:typename:int
ACLCheckCommandPerm	src/acl.c	/^int ACLCheckCommandPerm(client *c, int *keyidxptr) {$/;"	f	typeref:typename:int
ACLCheckPasswordHash	src/acl.c	/^int ACLCheckPasswordHash(unsigned char *hash, int hashlen) {$/;"	f	typeref:typename:int
ACLCheckPubsubChannelPerm	src/acl.c	/^int ACLCheckPubsubChannelPerm(sds channel, list *allowed, int literal) {$/;"	f	typeref:typename:int
ACLCheckPubsubPerm	src/acl.c	/^int ACLCheckPubsubPerm(client *c, int idx, int count, int literal, int *idxptr) {$/;"	f	typeref:typename:int
ACLCheckUserCredentials	src/acl.c	/^int ACLCheckUserCredentials(robj *username, robj *password) {$/;"	f	typeref:typename:int
ACLClearCommandID	src/acl.c	/^void ACLClearCommandID(void) {$/;"	f	typeref:typename:void
ACLCommandCategories	src/acl.c	/^} ACLCommandCategories[] = {$/;"	v	typeref:struct:ACLCategoryItem[]
ACLCopyUser	src/acl.c	/^void ACLCopyUser(user *dst, user *src) {$/;"	f	typeref:typename:void
ACLCountCategoryBitsForUser	src/acl.c	/^int ACLCountCategoryBitsForUser(user *u, unsigned long *on, unsigned long *off,$/;"	f	typeref:typename:int
ACLCreateUnlinkedUser	src/acl.c	/^user *ACLCreateUnlinkedUser(void) {$/;"	f	typeref:typename:user *
ACLCreateUser	src/acl.c	/^user *ACLCreateUser(const char *name, size_t namelen) {$/;"	f	typeref:typename:user *
ACLDescribeUser	src/acl.c	/^sds ACLDescribeUser(user *u) {$/;"	f	typeref:typename:sds
ACLDescribeUserCommandRules	src/acl.c	/^sds ACLDescribeUserCommandRules(user *u) {$/;"	f	typeref:typename:sds
ACLFreeLogEntry	src/acl.c	/^void ACLFreeLogEntry(void *leptr) {$/;"	f	typeref:typename:void
ACLFreeUser	src/acl.c	/^void ACLFreeUser(user *u) {$/;"	f	typeref:typename:void
ACLFreeUserAndKillClients	src/acl.c	/^void ACLFreeUserAndKillClients(user *u) {$/;"	f	typeref:typename:void
ACLFreeUsersSet	src/acl.c	/^void ACLFreeUsersSet(rax *users) {$/;"	f	typeref:typename:void
ACLGetCommandBitCoordinates	src/acl.c	/^int ACLGetCommandBitCoordinates(uint64_t id, uint64_t *word, uint64_t *bit) {$/;"	f	typeref:typename:int
ACLGetCommandCategoryFlagByName	src/acl.c	/^uint64_t ACLGetCommandCategoryFlagByName(const char *name) {$/;"	f	typeref:typename:uint64_t
ACLGetCommandID	src/acl.c	/^unsigned long ACLGetCommandID(const char *cmdname) {$/;"	f	typeref:typename:unsigned long
ACLGetUserByName	src/acl.c	/^user *ACLGetUserByName(const char *name, size_t namelen) {$/;"	f	typeref:typename:user *
ACLGetUserCommandBit	src/acl.c	/^int ACLGetUserCommandBit(user *u, unsigned long id) {$/;"	f	typeref:typename:int
ACLHashPassword	src/acl.c	/^sds ACLHashPassword(unsigned char *cleartext, size_t len) {$/;"	f	typeref:typename:sds
ACLInit	src/acl.c	/^void ACLInit(void) {$/;"	f	typeref:typename:void
ACLInitDefaultUser	src/acl.c	/^void ACLInitDefaultUser(void) {$/;"	f	typeref:typename:void
ACLKillPubsubClientsIfNeeded	src/acl.c	/^void ACLKillPubsubClientsIfNeeded(user *u, list *upcoming) {$/;"	f	typeref:typename:void
ACLListDupSds	src/acl.c	/^void *ACLListDupSds(void *item) {$/;"	f	typeref:typename:void *
ACLListFreeSds	src/acl.c	/^void ACLListFreeSds(void *item) {$/;"	f	typeref:typename:void
ACLListMatchSds	src/acl.c	/^int ACLListMatchSds(void *a, void *b) {$/;"	f	typeref:typename:int
ACLLoadConfiguredUsers	src/acl.c	/^int ACLLoadConfiguredUsers(void) {$/;"	f	typeref:typename:int
ACLLoadFromFile	src/acl.c	/^sds ACLLoadFromFile(const char *filename) {$/;"	f	typeref:typename:sds
ACLLoadUsersAtStartup	src/acl.c	/^void ACLLoadUsersAtStartup(void) {$/;"	f	typeref:typename:void
ACLLog	src/acl.c	/^list *ACLLog;       \/* Our security log, the user is able to inspect that$/;"	v	typeref:typename:list *
ACLLogEntry	src/acl.c	/^typedef struct ACLLogEntry {$/;"	s	file:
ACLLogEntry	src/acl.c	/^} ACLLogEntry;$/;"	t	typeref:struct:ACLLogEntry	file:
ACLLogMatchEntry	src/acl.c	/^int ACLLogMatchEntry(ACLLogEntry *a, ACLLogEntry *b) {$/;"	f	typeref:typename:int
ACLLookupCommand	src/acl.c	/^struct redisCommand *ACLLookupCommand(const char *name) {$/;"	f	typeref:struct:redisCommand *
ACLResetSubcommands	src/acl.c	/^void ACLResetSubcommands(user *u) {$/;"	f	typeref:typename:void
ACLResetSubcommandsForCommand	src/acl.c	/^void ACLResetSubcommandsForCommand(user *u, unsigned long id) {$/;"	f	typeref:typename:void
ACLSaveToFile	src/acl.c	/^int ACLSaveToFile(const char *filename) {$/;"	f	typeref:typename:int
ACLSetUser	src/acl.c	/^int ACLSetUser(user *u, const char *op, ssize_t oplen) {$/;"	f	typeref:typename:int
ACLSetUserCommandBit	src/acl.c	/^void ACLSetUserCommandBit(user *u, unsigned long id, int value) {$/;"	f	typeref:typename:void
ACLSetUserCommandBitsForCategory	src/acl.c	/^int ACLSetUserCommandBitsForCategory(user *u, const char *category, int value) {$/;"	f	typeref:typename:int
ACLSetUserStringError	src/acl.c	/^const char *ACLSetUserStringError(void) {$/;"	f	typeref:typename:const char *
ACLStringHasSpaces	src/acl.c	/^int ACLStringHasSpaces(const char *s, size_t len) {$/;"	f	typeref:typename:int
ACLUpdateDefaultUserPassword	src/acl.c	/^void ACLUpdateDefaultUserPassword(sds password) {$/;"	f	typeref:typename:void
ACLUserCanExecuteFutureCommands	src/acl.c	/^int ACLUserCanExecuteFutureCommands(user *u) {$/;"	f	typeref:typename:int
ACLUserFlag	src/acl.c	/^struct ACLUserFlag {$/;"	s	file:
ACLUserFlags	src/acl.c	/^} ACLUserFlags[] = {$/;"	v	typeref:struct:ACLUserFlag[]
ACL_DENIED_AUTH	src/server.h	/^#define ACL_DENIED_AUTH /;"	d
ACL_DENIED_CHANNEL	src/server.h	/^#define ACL_DENIED_CHANNEL /;"	d
ACL_DENIED_CMD	src/server.h	/^#define ACL_DENIED_CMD /;"	d
ACL_DENIED_KEY	src/server.h	/^#define ACL_DENIED_KEY /;"	d
ACL_LOG_CTX_LUA	src/acl.c	/^#define ACL_LOG_CTX_LUA /;"	d	file:
ACL_LOG_CTX_MULTI	src/acl.c	/^#define ACL_LOG_CTX_MULTI /;"	d	file:
ACL_LOG_CTX_TOPLEVEL	src/acl.c	/^#define ACL_LOG_CTX_TOPLEVEL /;"	d	file:
ACL_LOG_GROUPING_MAX_TIME_DELTA	src/acl.c	/^#define ACL_LOG_GROUPING_MAX_TIME_DELTA /;"	d	file:
ACL_OK	src/server.h	/^#define ACL_OK /;"	d
ACTIVE_EXPIRE_CYCLE_ACCEPTABLE_STALE	src/expire.c	/^#define ACTIVE_EXPIRE_CYCLE_ACCEPTABLE_STALE /;"	d	file:
ACTIVE_EXPIRE_CYCLE_FAST	src/server.h	/^#define ACTIVE_EXPIRE_CYCLE_FAST /;"	d
ACTIVE_EXPIRE_CYCLE_FAST_DURATION	src/expire.c	/^#define ACTIVE_EXPIRE_CYCLE_FAST_DURATION /;"	d	file:
ACTIVE_EXPIRE_CYCLE_KEYS_PER_LOOP	src/expire.c	/^#define ACTIVE_EXPIRE_CYCLE_KEYS_PER_LOOP /;"	d	file:
ACTIVE_EXPIRE_CYCLE_SLOW	src/server.h	/^#define ACTIVE_EXPIRE_CYCLE_SLOW /;"	d
ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC	src/expire.c	/^#define ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC /;"	d	file:
ADDEQU	src/rand.c	/^#define ADDEQU(/;"	d	file:
AE_ALL_EVENTS	src/ae.h	/^#define AE_ALL_EVENTS /;"	d
AE_BARRIER	src/ae.h	/^#define AE_BARRIER /;"	d
AE_CALL_AFTER_SLEEP	src/ae.h	/^#define AE_CALL_AFTER_SLEEP /;"	d
AE_CALL_BEFORE_SLEEP	src/ae.h	/^#define AE_CALL_BEFORE_SLEEP /;"	d
AE_DELETED_EVENT_ID	src/ae.h	/^#define AE_DELETED_EVENT_ID /;"	d
AE_DONT_WAIT	src/ae.h	/^#define AE_DONT_WAIT /;"	d
AE_ERR	src/ae.h	/^#define AE_ERR /;"	d
AE_FILE_EVENTS	src/ae.h	/^#define AE_FILE_EVENTS /;"	d
AE_NOMORE	src/ae.h	/^#define AE_NOMORE /;"	d
AE_NONE	src/ae.h	/^#define AE_NONE /;"	d
AE_NOTUSED	src/ae.h	/^#define AE_NOTUSED(/;"	d
AE_OK	src/ae.h	/^#define AE_OK /;"	d
AE_READABLE	src/ae.h	/^#define AE_READABLE /;"	d
AE_TIME_EVENTS	src/ae.h	/^#define AE_TIME_EVENTS /;"	d
AE_WRITABLE	src/ae.h	/^#define AE_WRITABLE /;"	d
AF_LOCAL	src/anet.h	/^#define AF_LOCAL /;"	d
AGGRESIVE	src/Config.h	/^#define AGGRESIVE /;"	d
ALIAS	deps/jemalloc/src/jemalloc.c	/^#    define ALIAS(/;"	d	file:
ALIGN	src/switchrealloc.c	/^#define ALIGN(/;"	d	file:
ALIGNMENT_ADDR2BASE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define ALIGNMENT_ADDR2BASE(/;"	d
ALIGNMENT_ADDR2OFFSET	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define ALIGNMENT_ADDR2OFFSET(/;"	d
ALIGNMENT_CEILING	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define ALIGNMENT_CEILING(/;"	d
ALLOW_EMPTY_STRING	src/config.c	/^#define ALLOW_EMPTY_STRING /;"	d	file:
ALL_A	deps/lua/src/Makefile	/^ALL_A= $(LUA_A)$/;"	m
ALL_O	deps/lua/src/Makefile	/^ALL_O= $(CORE_O) $(LIB_O) $(LUA_O) $(LUAC_O)$/;"	m
ALL_T	deps/lua/src/Makefile	/^ALL_T= $(LUA_A) $(LUA_T) $(LUAC_T)$/;"	m
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params11213.h	/^    #define ALTI_MSK	/;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params1279.h	/^    #define ALTI_MSK	/;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params132049.h	/^    #define ALTI_MSK	/;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params19937.h	/^    #define ALTI_MSK	/;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params216091.h	/^    #define ALTI_MSK	/;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params2281.h	/^    #define ALTI_MSK	/;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params4253.h	/^    #define ALTI_MSK	/;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params44497.h	/^    #define ALTI_MSK	/;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params607.h	/^    #define ALTI_MSK	/;"	d
ALTI_MSK	deps/jemalloc/test/include/test/SFMT-params86243.h	/^    #define ALTI_MSK	/;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params11213.h	/^    #define ALTI_MSK64	/;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params11213.h	/^    #define ALTI_MSK64 /;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params1279.h	/^    #define ALTI_MSK64	/;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params1279.h	/^    #define ALTI_MSK64 /;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params132049.h	/^    #define ALTI_MSK64	/;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params132049.h	/^    #define ALTI_MSK64 /;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params19937.h	/^    #define ALTI_MSK64	/;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params19937.h	/^    #define ALTI_MSK64 /;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params216091.h	/^    #define ALTI_MSK64	/;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params216091.h	/^    #define ALTI_MSK64 /;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params2281.h	/^    #define ALTI_MSK64	/;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params2281.h	/^    #define ALTI_MSK64 /;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params4253.h	/^    #define ALTI_MSK64	/;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params4253.h	/^    #define ALTI_MSK64 /;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params44497.h	/^    #define ALTI_MSK64	/;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params44497.h	/^    #define ALTI_MSK64 /;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params607.h	/^    #define ALTI_MSK64	/;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params607.h	/^    #define ALTI_MSK64 /;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params86243.h	/^    #define ALTI_MSK64	/;"	d
ALTI_MSK64	deps/jemalloc/test/include/test/SFMT-params86243.h	/^    #define ALTI_MSK64 /;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params11213.h	/^    #define ALTI_SL1	/;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params1279.h	/^    #define ALTI_SL1	/;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params132049.h	/^    #define ALTI_SL1	/;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params19937.h	/^    #define ALTI_SL1	/;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params216091.h	/^    #define ALTI_SL1	/;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params2281.h	/^    #define ALTI_SL1	/;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params4253.h	/^    #define ALTI_SL1	/;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params44497.h	/^    #define ALTI_SL1	/;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params607.h	/^    #define ALTI_SL1	/;"	d
ALTI_SL1	deps/jemalloc/test/include/test/SFMT-params86243.h	/^    #define ALTI_SL1	/;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params11213.h	/^    #define ALTI_SL2_PERM	/;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params11213.h	/^    #define ALTI_SL2_PERM /;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params1279.h	/^    #define ALTI_SL2_PERM	/;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params1279.h	/^    #define ALTI_SL2_PERM /;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params132049.h	/^    #define ALTI_SL2_PERM	/;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params132049.h	/^    #define ALTI_SL2_PERM /;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params19937.h	/^    #define ALTI_SL2_PERM	/;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params19937.h	/^    #define ALTI_SL2_PERM /;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params216091.h	/^    #define ALTI_SL2_PERM	/;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params216091.h	/^    #define ALTI_SL2_PERM /;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params2281.h	/^    #define ALTI_SL2_PERM	/;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params2281.h	/^    #define ALTI_SL2_PERM /;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params4253.h	/^    #define ALTI_SL2_PERM	/;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params4253.h	/^    #define ALTI_SL2_PERM /;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params44497.h	/^    #define ALTI_SL2_PERM	/;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params44497.h	/^    #define ALTI_SL2_PERM /;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params607.h	/^    #define ALTI_SL2_PERM	/;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params607.h	/^    #define ALTI_SL2_PERM /;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params86243.h	/^    #define ALTI_SL2_PERM	/;"	d
ALTI_SL2_PERM	deps/jemalloc/test/include/test/SFMT-params86243.h	/^    #define ALTI_SL2_PERM /;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params11213.h	/^    #define ALTI_SL2_PERM64	/;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params11213.h	/^    #define ALTI_SL2_PERM64 /;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params1279.h	/^    #define ALTI_SL2_PERM64	/;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params1279.h	/^    #define ALTI_SL2_PERM64 /;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params132049.h	/^    #define ALTI_SL2_PERM64	/;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params132049.h	/^    #define ALTI_SL2_PERM64 /;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params19937.h	/^    #define ALTI_SL2_PERM64	/;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params19937.h	/^    #define ALTI_SL2_PERM64 /;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params216091.h	/^    #define ALTI_SL2_PERM64	/;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params216091.h	/^    #define ALTI_SL2_PERM64 /;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params2281.h	/^    #define ALTI_SL2_PERM64	/;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params2281.h	/^    #define ALTI_SL2_PERM64 /;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params4253.h	/^    #define ALTI_SL2_PERM64	/;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params4253.h	/^    #define ALTI_SL2_PERM64 /;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params44497.h	/^    #define ALTI_SL2_PERM64	/;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params44497.h	/^    #define ALTI_SL2_PERM64 /;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params607.h	/^    #define ALTI_SL2_PERM64	/;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params607.h	/^    #define ALTI_SL2_PERM64 /;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params86243.h	/^    #define ALTI_SL2_PERM64	/;"	d
ALTI_SL2_PERM64	deps/jemalloc/test/include/test/SFMT-params86243.h	/^    #define ALTI_SL2_PERM64 /;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params11213.h	/^    #define ALTI_SR1	/;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params1279.h	/^    #define ALTI_SR1	/;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params132049.h	/^    #define ALTI_SR1	/;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params19937.h	/^    #define ALTI_SR1	/;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params216091.h	/^    #define ALTI_SR1	/;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params2281.h	/^    #define ALTI_SR1	/;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params4253.h	/^    #define ALTI_SR1	/;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params44497.h	/^    #define ALTI_SR1	/;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params607.h	/^    #define ALTI_SR1	/;"	d
ALTI_SR1	deps/jemalloc/test/include/test/SFMT-params86243.h	/^    #define ALTI_SR1	/;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params11213.h	/^    #define ALTI_SR2_PERM	/;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params11213.h	/^    #define ALTI_SR2_PERM /;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params1279.h	/^    #define ALTI_SR2_PERM	/;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params1279.h	/^    #define ALTI_SR2_PERM /;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params132049.h	/^    #define ALTI_SR2_PERM	/;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params132049.h	/^    #define ALTI_SR2_PERM /;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params19937.h	/^    #define ALTI_SR2_PERM	/;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params19937.h	/^    #define ALTI_SR2_PERM /;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params216091.h	/^    #define ALTI_SR2_PERM	/;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params216091.h	/^    #define ALTI_SR2_PERM /;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params2281.h	/^    #define ALTI_SR2_PERM	/;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params2281.h	/^    #define ALTI_SR2_PERM /;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params4253.h	/^    #define ALTI_SR2_PERM	/;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params4253.h	/^    #define ALTI_SR2_PERM /;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params44497.h	/^    #define ALTI_SR2_PERM	/;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params44497.h	/^    #define ALTI_SR2_PERM /;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params607.h	/^    #define ALTI_SR2_PERM	/;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params607.h	/^    #define ALTI_SR2_PERM /;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params86243.h	/^    #define ALTI_SR2_PERM	/;"	d
ALTI_SR2_PERM	deps/jemalloc/test/include/test/SFMT-params86243.h	/^    #define ALTI_SR2_PERM /;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params11213.h	/^    #define ALTI_SR2_PERM64	/;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params11213.h	/^    #define ALTI_SR2_PERM64 /;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params1279.h	/^    #define ALTI_SR2_PERM64	/;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params1279.h	/^    #define ALTI_SR2_PERM64 /;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params132049.h	/^    #define ALTI_SR2_PERM64	/;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params132049.h	/^    #define ALTI_SR2_PERM64 /;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params19937.h	/^    #define ALTI_SR2_PERM64	/;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params19937.h	/^    #define ALTI_SR2_PERM64 /;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params216091.h	/^    #define ALTI_SR2_PERM64	/;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params216091.h	/^    #define ALTI_SR2_PERM64 /;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params2281.h	/^    #define ALTI_SR2_PERM64	/;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params2281.h	/^    #define ALTI_SR2_PERM64 /;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params4253.h	/^    #define ALTI_SR2_PERM64	/;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params4253.h	/^    #define ALTI_SR2_PERM64 /;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params44497.h	/^    #define ALTI_SR2_PERM64	/;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params44497.h	/^    #define ALTI_SR2_PERM64 /;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params607.h	/^    #define ALTI_SR2_PERM64	/;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params607.h	/^    #define ALTI_SR2_PERM64 /;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params86243.h	/^    #define ALTI_SR2_PERM64	/;"	d
ALTI_SR2_PERM64	deps/jemalloc/test/include/test/SFMT-params86243.h	/^    #define ALTI_SR2_PERM64 /;"	d
ALTI_SWAP	deps/jemalloc/test/include/test/SFMT-alti.h	/^#define ALTI_SWAP /;"	d
AL_START_HEAD	src/adlist.h	/^#define AL_START_HEAD /;"	d
AL_START_HEAD	src/quicklist.h	/^#define AL_START_HEAD /;"	d
AL_START_TAIL	src/adlist.h	/^#define AL_START_TAIL /;"	d
AL_START_TAIL	src/quicklist.h	/^#define AL_START_TAIL /;"	d
ANET_CONNECT_BE_BINDING	src/anet.c	/^#define ANET_CONNECT_BE_BINDING /;"	d	file:
ANET_CONNECT_NONBLOCK	src/anet.c	/^#define ANET_CONNECT_NONBLOCK /;"	d	file:
ANET_CONNECT_NONE	src/anet.c	/^#define ANET_CONNECT_NONE /;"	d	file:
ANET_ERR	src/anet.h	/^#define ANET_ERR /;"	d
ANET_ERR_LEN	src/anet.h	/^#define ANET_ERR_LEN /;"	d
ANET_H	src/anet.h	/^#define ANET_H$/;"	d
ANET_IP_ONLY	src/anet.h	/^#define ANET_IP_ONLY /;"	d
ANET_NONE	src/anet.h	/^#define ANET_NONE /;"	d
ANET_OK	src/anet.h	/^#define ANET_OK /;"	d
ANNOTATE_HAPPENS_AFTER	src/atomicvar.h	/^#define ANNOTATE_HAPPENS_AFTER(/;"	d
ANNOTATE_HAPPENS_BEFORE	src/atomicvar.h	/^#define ANNOTATE_HAPPENS_BEFORE(/;"	d
AOF_FSYNC_ALWAYS	src/server.h	/^#define AOF_FSYNC_ALWAYS /;"	d
AOF_FSYNC_EVERYSEC	src/server.h	/^#define AOF_FSYNC_EVERYSEC /;"	d
AOF_FSYNC_NO	src/server.h	/^#define AOF_FSYNC_NO /;"	d
AOF_OFF	src/server.h	/^#define AOF_OFF /;"	d
AOF_ON	src/server.h	/^#define AOF_ON /;"	d
AOF_READ_DIFF_INTERVAL_BYTES	src/server.h	/^#define AOF_READ_DIFF_INTERVAL_BYTES /;"	d
AOF_REWRITE_ITEMS_PER_CMD	src/server.h	/^#define AOF_REWRITE_ITEMS_PER_CMD /;"	d
AOF_RW_BUF_BLOCK_SIZE	src/aof.c	/^#define AOF_RW_BUF_BLOCK_SIZE /;"	d	file:
AOF_WAIT_REWRITE	src/server.h	/^#define AOF_WAIT_REWRITE /;"	d
AOF_WRITE_LOG_ERROR_RATE	src/aof.c	/^#define AOF_WRITE_LOG_ERROR_RATE /;"	d	file:
APPEND_C	deps/jemalloc/src/malloc_io.c	/^#define APPEND_C(/;"	d	file:
APPEND_PADDED_S	deps/jemalloc/src/malloc_io.c	/^#define APPEND_PADDED_S(/;"	d	file:
APPEND_S	deps/jemalloc/src/malloc_io.c	/^#define APPEND_S(/;"	d	file:
AR	deps/Makefile	/^AR=ar$/;"	m
AR	deps/jemalloc/Makefile	/^AR = ar$/;"	m
AR	deps/jemalloc/Makefile.in	/^AR = @AR@$/;"	m
AR	deps/lua/src/Makefile	/^AR= ar rcu$/;"	m
ARENA_IND_AUTOMATIC	deps/jemalloc/src/jemalloc.c	/^#define ARENA_IND_AUTOMATIC /;"	d	file:
ARENA_RESET_PROF_C_	deps/jemalloc/test/unit/arena_reset_prof.c	/^#define ARENA_RESET_PROF_C_$/;"	d	file:
ARFLAGS	deps/Makefile	/^ARFLAGS=rc$/;"	m
ARFLAGS	deps/jemalloc/Makefile	/^ARFLAGS = crus$/;"	m
ARFLAGS	deps/jemalloc/Makefile.in	/^ARFLAGS = @ARFLAGS@$/;"	m
ASSERT_BUFSIZE	deps/jemalloc/test/include/test/test.h	/^#define ASSERT_BUFSIZE	/;"	d
ASSERT_INTEGRITY	src/listpack.c	/^#define ASSERT_INTEGRITY(/;"	d	file:
ASSERT_INTEGRITY_LEN	src/listpack.c	/^#define ASSERT_INTEGRITY_LEN(/;"	d	file:
ASSERT_NO_SIZE_OVERFLOW	src/zmalloc.c	/^#define ASSERT_NO_SIZE_OVERFLOW(/;"	d	file:
ATOMIC_ACQUIRE	deps/jemalloc/include/jemalloc/internal/atomic.h	/^#define ATOMIC_ACQUIRE /;"	d
ATOMIC_ACQ_REL	deps/jemalloc/include/jemalloc/internal/atomic.h	/^#define ATOMIC_ACQ_REL /;"	d
ATOMIC_CONCAT	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^#define ATOMIC_CONCAT(/;"	d
ATOMIC_INIT	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	/^#define ATOMIC_INIT(/;"	d
ATOMIC_INIT	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^#define ATOMIC_INIT(/;"	d
ATOMIC_INIT	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^#define ATOMIC_INIT(/;"	d
ATOMIC_INIT	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^#define ATOMIC_INIT(/;"	d
ATOMIC_INLINE	deps/jemalloc/include/jemalloc/internal/atomic.h	/^#define ATOMIC_INLINE /;"	d
ATOMIC_INTERLOCKED_NAME	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^#define ATOMIC_INTERLOCKED_NAME(/;"	d
ATOMIC_INTERLOCKED_REPR	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^#define ATOMIC_INTERLOCKED_REPR(/;"	d
ATOMIC_INTERLOCKED_SUFFIX	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^#define ATOMIC_INTERLOCKED_SUFFIX(/;"	d
ATOMIC_INTERLOCKED_SUFFIX_0	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^#define ATOMIC_INTERLOCKED_SUFFIX_0 /;"	d
ATOMIC_INTERLOCKED_SUFFIX_1	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^#define ATOMIC_INTERLOCKED_SUFFIX_1 /;"	d
ATOMIC_INTERLOCKED_SUFFIX_2	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^#define ATOMIC_INTERLOCKED_SUFFIX_2$/;"	d
ATOMIC_INTERLOCKED_SUFFIX_3	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^#define ATOMIC_INTERLOCKED_SUFFIX_3 /;"	d
ATOMIC_RAW_CONCAT	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^#define ATOMIC_RAW_CONCAT(/;"	d
ATOMIC_RELAXED	deps/jemalloc/include/jemalloc/internal/atomic.h	/^#define ATOMIC_RELAXED /;"	d
ATOMIC_RELEASE	deps/jemalloc/include/jemalloc/internal/atomic.h	/^#define ATOMIC_RELEASE /;"	d
ATOMIC_SEQ_CST	deps/jemalloc/include/jemalloc/internal/atomic.h	/^#define ATOMIC_SEQ_CST /;"	d
AUTOCONF	deps/jemalloc/Makefile	/^AUTOCONF := \/usr\/bin\/autoconf$/;"	m
AUTOCONF	deps/jemalloc/Makefile.in	/^AUTOCONF := @AUTOCONF@$/;"	m
AUXMARK	deps/lua/src/loadlib.c	/^#define AUXMARK	/;"	d	file:
AVOID_ERRNO	src/lzfP.h	/^# define AVOID_ERRNO /;"	d
AWK	deps/jemalloc/Makefile	/^AWK := gawk$/;"	m
AWK	deps/jemalloc/Makefile.in	/^AWK := @AWK@$/;"	m
AddReplyFromClient	src/networking.c	/^void AddReplyFromClient(client *dst, client *src) {$/;"	f	typeref:typename:void
Arith	deps/lua/src/lvm.c	/^static void Arith (lua_State *L, StkId ra, const TValue *rb,$/;"	f	typeref:typename:void	file:
AuthAsyncCommand_RedisCommand	src/modules/helloacl.c	/^int AuthAsyncCommand_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
AuthGlobalCommand_RedisCommand	src/modules/helloacl.c	/^int AuthGlobalCommand_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
Auth_AuthModuleUser	tests/modules/auth.c	/^int Auth_AuthModuleUser(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
Auth_AuthRealUser	tests/modules/auth.c	/^int Auth_AuthRealUser(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
Auth_ChangeCount	tests/modules/auth.c	/^int Auth_ChangeCount(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
Auth_CreateModuleUser	tests/modules/auth.c	/^int Auth_CreateModuleUser(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
AutoMemEntry	src/module.c	/^struct AutoMemEntry {$/;"	s	file:
BACKGROUND_THREAD_DEFAULT	deps/jemalloc/src/background_thread.c	/^#define BACKGROUND_THREAD_DEFAULT /;"	d	file:
BACKGROUND_THREAD_INDEFINITE_SLEEP	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^#define BACKGROUND_THREAD_INDEFINITE_SLEEP /;"	d
BACKSPACE	deps/linenoise/linenoise.c	/^	BACKSPACE =  127    \/* Backspace *\/$/;"	e	enum:KEY_ACTION	file:
BAD_SAR	deps/lua/src/lua_bit.c	/^#define BAD_SAR	/;"	d	file:
BASE_AUTO_THP_THRESHOLD	deps/jemalloc/include/jemalloc/internal/base_types.h	/^#define BASE_AUTO_THP_THRESHOLD /;"	d
BASE_AUTO_THP_THRESHOLD_A0	deps/jemalloc/include/jemalloc/internal/base_types.h	/^#define BASE_AUTO_THP_THRESHOLD_A0 /;"	d
BASIC_CI_SIZE	deps/lua/src/lstate.h	/^#define BASIC_CI_SIZE /;"	d
BASIC_STACK_SIZE	deps/lua/src/lstate.h	/^#define BASIC_STACK_SIZE /;"	d
BFOVERFLOW_FAIL	src/bitops.c	/^#define BFOVERFLOW_FAIL /;"	d	file:
BFOVERFLOW_SAT	src/bitops.c	/^#define BFOVERFLOW_SAT /;"	d	file:
BFOVERFLOW_WRAP	src/bitops.c	/^#define BFOVERFLOW_WRAP /;"	d	file:
BIG	deps/lua/src/lua_struct.c	/^#define BIG	/;"	d	file:
BIG_ENDIAN	src/config.h	/^#define	BIG_ENDIAN	/;"	d
BIG_ENDIAN	src/config.h	/^#define BIG_ENDIAN /;"	d
BIG_ENDIAN64	deps/jemalloc/test/src/SFMT.c	/^#define BIG_ENDIAN64 /;"	d	file:
BILLION	deps/jemalloc/src/nstime.c	/^#define BILLION	/;"	d	file:
BILLION	deps/jemalloc/test/unit/nstime.c	/^#define BILLION	/;"	d	file:
BIN	deps/lua/etc/Makefile	/^BIN= $(TOP)\/src$/;"	m
BINCOLOR	deps/Makefile	/^BINCOLOR="\\033[37;1m"$/;"	m
BINCOLOR	src/Makefile	/^BINCOLOR="\\033[37;1m"$/;"	m
BINDIR	deps/jemalloc/Makefile	/^BINDIR := $(DESTDIR)\/usr\/local\/bin$/;"	m
BINDIR	deps/jemalloc/Makefile.in	/^BINDIR := $(DESTDIR)@BINDIR@$/;"	m
BINS	deps/jemalloc/Makefile	/^BINS := $(objroot)bin\/jemalloc-config $(objroot)bin\/jemalloc.sh $(objroot)bin\/jeprof$/;"	m
BINS	deps/jemalloc/Makefile.in	/^BINS := $(objroot)bin\/jemalloc-config $(objroot)bin\/jemalloc.sh $(objroot)bin\/jeprof$/;"	m
BIN_INFO_bin_no	deps/jemalloc/src/bin.c	/^#define BIN_INFO_bin_no(/;"	d	file:
BIN_INFO_bin_yes	deps/jemalloc/src/bin.c	/^#define BIN_INFO_bin_yes(/;"	d	file:
BIO_AOF_FSYNC	src/bio.h	/^#define BIO_AOF_FSYNC /;"	d
BIO_CLOSE_FILE	src/bio.h	/^#define BIO_CLOSE_FILE /;"	d
BIO_LAZY_FREE	src/bio.h	/^#define BIO_LAZY_FREE /;"	d
BIO_NUM_OPS	src/bio.h	/^#define BIO_NUM_OPS /;"	d
BITFIELDOP_GET	src/bitops.c	/^#define BITFIELDOP_GET /;"	d	file:
BITFIELDOP_INCRBY	src/bitops.c	/^#define BITFIELDOP_INCRBY /;"	d	file:
BITFIELDOP_SET	src/bitops.c	/^#define BITFIELDOP_SET /;"	d	file:
BITFIELD_FLAG_NONE	src/bitops.c	/^#define BITFIELD_FLAG_NONE /;"	d	file:
BITFIELD_FLAG_READONLY	src/bitops.c	/^#define BITFIELD_FLAG_READONLY /;"	d	file:
BITMAP_BITS2GROUPS	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_BITS2GROUPS(/;"	d
BITMAP_GROUPS	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#  define BITMAP_GROUPS(/;"	d
BITMAP_GROUPS	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_GROUPS(/;"	d
BITMAP_GROUPS_1_LEVEL	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_GROUPS_1_LEVEL(/;"	d
BITMAP_GROUPS_2_LEVEL	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_GROUPS_2_LEVEL(/;"	d
BITMAP_GROUPS_3_LEVEL	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_GROUPS_3_LEVEL(/;"	d
BITMAP_GROUPS_4_LEVEL	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_GROUPS_4_LEVEL(/;"	d
BITMAP_GROUPS_5_LEVEL	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_GROUPS_5_LEVEL(/;"	d
BITMAP_GROUPS_L0	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_GROUPS_L0(/;"	d
BITMAP_GROUPS_L1	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_GROUPS_L1(/;"	d
BITMAP_GROUPS_L2	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_GROUPS_L2(/;"	d
BITMAP_GROUPS_L3	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_GROUPS_L3(/;"	d
BITMAP_GROUPS_L4	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_GROUPS_L4(/;"	d
BITMAP_GROUPS_MAX	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#  define BITMAP_GROUPS_MAX	/;"	d
BITMAP_GROUPS_MAX	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_GROUPS_MAX	/;"	d
BITMAP_GROUP_NBITS	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_GROUP_NBITS	/;"	d
BITMAP_GROUP_NBITS_MASK	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_GROUP_NBITS_MASK	/;"	d
BITMAP_INFO_INITIALIZER	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_INFO_INITIALIZER(/;"	d
BITMAP_MAXBITS	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_MAXBITS	/;"	d
BITMAP_MAX_LEVELS	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define BITMAP_MAX_LEVELS	/;"	d
BITMAP_USE_TREE	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#  define BITMAP_USE_TREE$/;"	d
BITOP_AND	src/bitops.c	/^#define BITOP_AND /;"	d	file:
BITOP_NOT	src/bitops.c	/^#define BITOP_NOT /;"	d	file:
BITOP_OR	src/bitops.c	/^#define BITOP_OR /;"	d	file:
BITOP_XOR	src/bitops.c	/^#define BITOP_XOR /;"	d	file:
BITRK	deps/lua/src/lopcodes.h	/^#define BITRK	/;"	d
BITS_32	deps/lua/src/lua_cmsgpack.c	/^    #define BITS_32 /;"	d	file:
BIT_OP	deps/lua/src/lua_bit.c	/^#define BIT_OP(/;"	d	file:
BIT_SH	deps/lua/src/lua_bit.c	/^#define BIT_SH(/;"	d	file:
BIT_UTIL_INLINE	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^#define BIT_UTIL_INLINE /;"	d
BLACKBIT	deps/lua/src/lgc.h	/^#define BLACKBIT	/;"	d
BLOCKED_LIST	src/server.h	/^#define BLOCKED_LIST /;"	d
BLOCKED_MODULE	src/server.h	/^#define BLOCKED_MODULE /;"	d
BLOCKED_NONE	src/server.h	/^#define BLOCKED_NONE /;"	d
BLOCKED_NUM	src/server.h	/^#define BLOCKED_NUM /;"	d
BLOCKED_PAUSE	src/server.h	/^#define BLOCKED_PAUSE /;"	d
BLOCKED_STREAM	src/server.h	/^#define BLOCKED_STREAM /;"	d
BLOCKED_WAIT	src/server.h	/^#define BLOCKED_WAIT /;"	d
BLOCKED_ZSET	src/server.h	/^#define BLOCKED_ZSET /;"	d
BLOCK_SIZE	deps/jemalloc/test/unit/SFMT.c	/^#define BLOCK_SIZE /;"	d	file:
BLOCK_SIZE64	deps/jemalloc/test/unit/SFMT.c	/^#define BLOCK_SIZE64 /;"	d	file:
BRET	deps/lua/src/lua_bit.c	/^#define BRET(/;"	d	file:
BT_COUNT_CHECK_INTERVAL	deps/jemalloc/test/unit/prof_accum.c	/^#define BT_COUNT_CHECK_INTERVAL	/;"	d	file:
BT_FRAME	deps/jemalloc/src/prof.c	/^#define BT_FRAME(/;"	d	file:
BUFERROR_BUF	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^#define BUFERROR_BUF	/;"	d
BUFLEN	deps/jemalloc/test/unit/malloc_io.c	/^#define BUFLEN	/;"	d	file:
BUFSIZE	src/sha1.c	/^#define BUFSIZE /;"	d	file:
BUF_SIZE	deps/jemalloc/include/jemalloc/internal/emitter.h	/^#define BUF_SIZE /;"	d
BUILD_WITH_SYSTEMD	src/Makefile	/^	BUILD_WITH_SYSTEMD=yes$/;"	m
BUILD_WITH_SYSTEMD	src/Makefile	/^BUILD_WITH_SYSTEMD=no$/;"	m
BYTE	src/sha256.h	/^typedef uint8_t BYTE;   \/\/ 8-bit byte$/;"	t	typeref:typename:uint8_t
BYTE_ORDER	src/config.h	/^#define BYTE_ORDER	/;"	d
BYTE_ORDER	src/config.h	/^#define BYTE_ORDER /;"	d
BenchmarkDictType	src/dict.c	/^dictType BenchmarkDictType = {$/;"	v	typeref:typename:dictType
BinOpr	deps/lua/src/lcode.h	/^typedef enum BinOpr {$/;"	g
BinOpr	deps/lua/src/lcode.h	/^} BinOpr;$/;"	t	typeref:enum:BinOpr
BitNum	deps/lua/src/lua_bit.c	/^} BitNum;$/;"	t	typeref:union:__anonc7e4cb99010a	file:
BlockCnt	deps/lua/src/lparser.c	/^typedef struct BlockCnt {$/;"	s	file:
BlockCnt	deps/lua/src/lparser.c	/^} BlockCnt;$/;"	t	typeref:struct:BlockCnt	file:
BlockDebug_ThreadMain	tests/modules/blockonbackground.c	/^void *BlockDebug_ThreadMain(void *arg) {$/;"	f	typeref:typename:void *
Block_RedisCommand	tests/modules/blockonbackground.c	/^int Block_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
C	src/rand.c	/^#define C	/;"	d	file:
C11_ATOMIC	src/Makefile	/^C11_ATOMIC := $(shell sh -c 'echo "\\#include <stdatomic.h>" > foo.c; \\$/;"	m
CACHELINE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define CACHELINE	/;"	d
CACHELINE_CEILING	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define CACHELINE_CEILING(/;"	d
CACHELINE_MASK	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define CACHELINE_MASK	/;"	d
CAP_POSITION	deps/lua/src/lstrlib.c	/^#define CAP_POSITION	/;"	d	file:
CAP_UNFINISHED	deps/lua/src/lstrlib.c	/^#define CAP_UNFINISHED	/;"	d	file:
CARRY	src/rand.c	/^#define CARRY(/;"	d	file:
CC	deps/hiredis/Makefile	/^CC:=$(shell sh -c 'type $${CC%% *} >\/dev\/null 2>\/dev\/null && echo $(CC) || echo gcc')$/;"	m
CC	deps/jemalloc/Makefile	/^CC := gcc$/;"	m
CC	deps/jemalloc/Makefile.in	/^CC := @CC@$/;"	m
CC	deps/lua/etc/Makefile	/^CC= gcc$/;"	m
CC	deps/lua/src/Makefile	/^CC?= gcc$/;"	m
CCCOLOR	deps/Makefile	/^CCCOLOR="\\033[34m"$/;"	m
CCCOLOR	src/Makefile	/^CCCOLOR="\\033[34m"$/;"	m
CC_FORCE	src/redis-cli.c	/^#define CC_FORCE /;"	d	file:
CC_MM	deps/jemalloc/Makefile	/^CC_MM = 1$/;"	m
CC_MM	deps/jemalloc/Makefile.in	/^CC_MM = @CC_MM@$/;"	m
CC_QUIET	src/redis-cli.c	/^#define CC_QUIET /;"	d	file:
CCallS	deps/lua/src/lapi.c	/^struct CCallS {  \/* data to `f_Ccall' *\/$/;"	s	file:
CClosure	deps/lua/src/lobject.h	/^typedef struct CClosure {$/;"	s
CClosure	deps/lua/src/lobject.h	/^} CClosure;$/;"	t	typeref:struct:CClosure
CFLAGS	deps/jemalloc/Makefile	/^CFLAGS := $(strip $(CONFIGURE_CFLAGS) $(SPECIFIED_CFLAGS) $(EXTRA_CFLAGS))$/;"	m
CFLAGS	deps/jemalloc/Makefile.in	/^CFLAGS := $(strip $(CONFIGURE_CFLAGS) $(SPECIFIED_CFLAGS) $(EXTRA_CFLAGS))$/;"	m
CFLAGS	deps/lua/etc/Makefile	/^CFLAGS= -O2 -Wall -I$(INC) $(MYCFLAGS)$/;"	m
CFLAGS	deps/lua/src/Makefile	/^CFLAGS= -O2 -Wall $(MYCFLAGS)$/;"	m
CH	src/sha256.c	/^#define CH(/;"	d	file:
CHAR64LONG16	src/sha1.c	/^    } CHAR64LONG16;$/;"	t	function:SHA1Transform	typeref:union:SHA1Transform::__anon790f1a3a010a	file:
CHECK_DELETED	deps/hiredis/adapters/libevent.h	/^    #define CHECK_DELETED(/;"	d
CHECK_INPUT	src/lzfP.h	/^# define CHECK_INPUT /;"	d
CHILD	deps/jemalloc/src/ctl.c	/^#define CHILD(/;"	d	file:
CHILD_COW_DUTY_CYCLE	src/server.h	/^#define CHILD_COW_DUTY_CYCLE /;"	d
CHILD_INFO_TYPE_AOF_COW_SIZE	src/server.h	/^    CHILD_INFO_TYPE_AOF_COW_SIZE,$/;"	e	enum:childInfoType
CHILD_INFO_TYPE_CURRENT_INFO	src/server.h	/^    CHILD_INFO_TYPE_CURRENT_INFO,$/;"	e	enum:childInfoType
CHILD_INFO_TYPE_MODULE_COW_SIZE	src/server.h	/^    CHILD_INFO_TYPE_MODULE_COW_SIZE$/;"	e	enum:childInfoType
CHILD_INFO_TYPE_RDB_COW_SIZE	src/server.h	/^    CHILD_INFO_TYPE_RDB_COW_SIZE,$/;"	e	enum:childInfoType
CHILD_TYPE_AOF	src/server.h	/^#define CHILD_TYPE_AOF /;"	d
CHILD_TYPE_LDB	src/server.h	/^#define CHILD_TYPE_LDB /;"	d
CHILD_TYPE_MODULE	src/server.h	/^#define CHILD_TYPE_MODULE /;"	d
CHILD_TYPE_NONE	src/server.h	/^#define CHILD_TYPE_NONE /;"	d
CHILD_TYPE_RDB	src/server.h	/^#define CHILD_TYPE_RDB /;"	d
CIRCULAR_TYPE	src/geohash.h	/^#define CIRCULAR_TYPE /;"	d
CJSON_MODNAME	deps/lua/src/lua_cjson.c	/^#define CJSON_MODNAME /;"	d	file:
CJSON_VERSION	deps/lua/src/lua_cjson.c	/^#define CJSON_VERSION /;"	d	file:
CLASSIC	deps/hdr_histogram/hdr_histogram.h	/^    CLASSIC,$/;"	e	enum:__anon905d92fb0203
CLASSIC_FOOTER	deps/hdr_histogram/hdr_histogram.c	/^static const char CLASSIC_FOOTER[] =$/;"	v	typeref:typename:const char[]	file:
CLIENTS_CRON_MIN_ITERATIONS	src/server.c	/^#define CLIENTS_CRON_MIN_ITERATIONS /;"	d	file:
CLIENTS_PEAK_MEM_USAGE_SLOTS	src/server.c	/^#define CLIENTS_PEAK_MEM_USAGE_SLOTS /;"	d	file:
CLIENT_ASKING	src/server.h	/^#define CLIENT_ASKING /;"	d
CLIENT_BLOCKED	src/server.h	/^#define CLIENT_BLOCKED /;"	d
CLIENT_CLOSE_AFTER_COMMAND	src/server.h	/^#define CLIENT_CLOSE_AFTER_COMMAND /;"	d
CLIENT_CLOSE_AFTER_REPLY	src/server.h	/^#define CLIENT_CLOSE_AFTER_REPLY /;"	d
CLIENT_CLOSE_ASAP	src/server.h	/^#define CLIENT_CLOSE_ASAP /;"	d
CLIENT_DENY_BLOCKING	src/server.h	/^#define CLIENT_DENY_BLOCKING /;"	d
CLIENT_DIRTY_CAS	src/server.h	/^#define CLIENT_DIRTY_CAS /;"	d
CLIENT_DIRTY_EXEC	src/server.h	/^#define CLIENT_DIRTY_EXEC /;"	d
CLIENT_FORCE_AOF	src/server.h	/^#define CLIENT_FORCE_AOF /;"	d
CLIENT_FORCE_REPL	src/server.h	/^#define CLIENT_FORCE_REPL /;"	d
CLIENT_GET_EVENTLOOP	src/redis-benchmark.c	/^#define CLIENT_GET_EVENTLOOP(/;"	d	file:
CLIENT_ID_AOF	src/server.h	/^#define CLIENT_ID_AOF /;"	d
CLIENT_IN_TO_TABLE	src/server.h	/^#define CLIENT_IN_TO_TABLE /;"	d
CLIENT_LUA	src/server.h	/^#define CLIENT_LUA /;"	d
CLIENT_LUA_DEBUG	src/server.h	/^#define CLIENT_LUA_DEBUG /;"	d
CLIENT_LUA_DEBUG_SYNC	src/server.h	/^#define CLIENT_LUA_DEBUG_SYNC /;"	d
CLIENT_MASTER	src/server.h	/^#define CLIENT_MASTER /;"	d
CLIENT_MASTER_FORCE_REPLY	src/server.h	/^#define CLIENT_MASTER_FORCE_REPLY /;"	d
CLIENT_MODULE	src/server.h	/^#define CLIENT_MODULE /;"	d
CLIENT_MONITOR	src/server.h	/^#define CLIENT_MONITOR /;"	d
CLIENT_MULTI	src/server.h	/^#define CLIENT_MULTI /;"	d
CLIENT_PAUSE_ALL	src/server.h	/^    CLIENT_PAUSE_ALL      \/* Pause all commands *\/$/;"	e	enum:__anon3ef696e90303
CLIENT_PAUSE_OFF	src/server.h	/^    CLIENT_PAUSE_OFF = 0, \/* Pause no commands *\/$/;"	e	enum:__anon3ef696e90303
CLIENT_PAUSE_WRITE	src/server.h	/^    CLIENT_PAUSE_WRITE,   \/* Pause write commands *\/$/;"	e	enum:__anon3ef696e90303
CLIENT_PENDING_COMMAND	src/server.h	/^#define CLIENT_PENDING_COMMAND /;"	d
CLIENT_PENDING_READ	src/server.h	/^#define CLIENT_PENDING_READ /;"	d
CLIENT_PENDING_WRITE	src/server.h	/^#define CLIENT_PENDING_WRITE /;"	d
CLIENT_PREVENT_AOF_PROP	src/server.h	/^#define CLIENT_PREVENT_AOF_PROP /;"	d
CLIENT_PREVENT_PROP	src/server.h	/^#define CLIENT_PREVENT_PROP /;"	d
CLIENT_PREVENT_REPL_PROP	src/server.h	/^#define CLIENT_PREVENT_REPL_PROP /;"	d
CLIENT_PRE_PSYNC	src/server.h	/^#define CLIENT_PRE_PSYNC /;"	d
CLIENT_PROTECTED	src/server.h	/^#define CLIENT_PROTECTED /;"	d
CLIENT_PROTOCOL_ERROR	src/server.h	/^#define CLIENT_PROTOCOL_ERROR /;"	d
CLIENT_PUBSUB	src/server.h	/^#define CLIENT_PUBSUB /;"	d
CLIENT_READONLY	src/server.h	/^#define CLIENT_READONLY /;"	d
CLIENT_REPLY_OFF	src/server.h	/^#define CLIENT_REPLY_OFF /;"	d
CLIENT_REPLY_SKIP	src/server.h	/^#define CLIENT_REPLY_SKIP /;"	d
CLIENT_REPLY_SKIP_NEXT	src/server.h	/^#define CLIENT_REPLY_SKIP_NEXT /;"	d
CLIENT_REPL_RDBONLY	src/server.h	/^#define CLIENT_REPL_RDBONLY /;"	d
CLIENT_SLAVE	src/server.h	/^#define CLIENT_SLAVE /;"	d
CLIENT_ST_KEYLEN	src/timeout.c	/^#define CLIENT_ST_KEYLEN /;"	d	file:
CLIENT_TRACKING	src/server.h	/^#define CLIENT_TRACKING /;"	d
CLIENT_TRACKING_BCAST	src/server.h	/^#define CLIENT_TRACKING_BCAST /;"	d
CLIENT_TRACKING_BROKEN_REDIR	src/server.h	/^#define CLIENT_TRACKING_BROKEN_REDIR /;"	d
CLIENT_TRACKING_CACHING	src/server.h	/^#define CLIENT_TRACKING_CACHING /;"	d
CLIENT_TRACKING_NOLOOP	src/server.h	/^#define CLIENT_TRACKING_NOLOOP /;"	d
CLIENT_TRACKING_OPTIN	src/server.h	/^#define CLIENT_TRACKING_OPTIN /;"	d
CLIENT_TRACKING_OPTOUT	src/server.h	/^#define CLIENT_TRACKING_OPTOUT /;"	d
CLIENT_TYPE_COUNT	src/server.h	/^#define CLIENT_TYPE_COUNT /;"	d
CLIENT_TYPE_MASTER	src/server.h	/^#define CLIENT_TYPE_MASTER /;"	d
CLIENT_TYPE_NORMAL	src/server.h	/^#define CLIENT_TYPE_NORMAL /;"	d
CLIENT_TYPE_OBUF_COUNT	src/server.h	/^#define CLIENT_TYPE_OBUF_COUNT /;"	d
CLIENT_TYPE_PUBSUB	src/server.h	/^#define CLIENT_TYPE_PUBSUB /;"	d
CLIENT_TYPE_SLAVE	src/server.h	/^#define CLIENT_TYPE_SLAVE /;"	d
CLIENT_UNBLOCKED	src/server.h	/^#define CLIENT_UNBLOCKED /;"	d
CLIENT_UNIX_SOCKET	src/server.h	/^#define CLIENT_UNIX_SOCKET /;"	d
CLI_HELP_COMMAND	src/redis-cli.c	/^#define CLI_HELP_COMMAND /;"	d	file:
CLI_HELP_GROUP	src/redis-cli.c	/^#define CLI_HELP_GROUP /;"	d	file:
CLUSTERMSG_FLAG0_FORCEACK	src/cluster.h	/^#define CLUSTERMSG_FLAG0_FORCEACK /;"	d
CLUSTERMSG_FLAG0_PAUSED	src/cluster.h	/^#define CLUSTERMSG_FLAG0_PAUSED /;"	d
CLUSTERMSG_MIN_LEN	src/cluster.h	/^#define CLUSTERMSG_MIN_LEN /;"	d
CLUSTERMSG_TYPE_COUNT	src/cluster.h	/^#define CLUSTERMSG_TYPE_COUNT /;"	d
CLUSTERMSG_TYPE_FAIL	src/cluster.h	/^#define CLUSTERMSG_TYPE_FAIL /;"	d
CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK	src/cluster.h	/^#define CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK /;"	d
CLUSTERMSG_TYPE_FAILOVER_AUTH_REQUEST	src/cluster.h	/^#define CLUSTERMSG_TYPE_FAILOVER_AUTH_REQUEST /;"	d
CLUSTERMSG_TYPE_MEET	src/cluster.h	/^#define CLUSTERMSG_TYPE_MEET /;"	d
CLUSTERMSG_TYPE_MFSTART	src/cluster.h	/^#define CLUSTERMSG_TYPE_MFSTART /;"	d
CLUSTERMSG_TYPE_MODULE	src/cluster.h	/^#define CLUSTERMSG_TYPE_MODULE /;"	d
CLUSTERMSG_TYPE_PING	src/cluster.h	/^#define CLUSTERMSG_TYPE_PING /;"	d
CLUSTERMSG_TYPE_PONG	src/cluster.h	/^#define CLUSTERMSG_TYPE_PONG /;"	d
CLUSTERMSG_TYPE_PUBLISH	src/cluster.h	/^#define CLUSTERMSG_TYPE_PUBLISH /;"	d
CLUSTERMSG_TYPE_UPDATE	src/cluster.h	/^#define CLUSTERMSG_TYPE_UPDATE /;"	d
CLUSTER_BLACKLIST_TTL	src/cluster.c	/^#define CLUSTER_BLACKLIST_TTL /;"	d	file:
CLUSTER_BROADCAST_ALL	src/cluster.c	/^#define CLUSTER_BROADCAST_ALL /;"	d	file:
CLUSTER_BROADCAST_LOCAL_SLAVES	src/cluster.c	/^#define CLUSTER_BROADCAST_LOCAL_SLAVES /;"	d	file:
CLUSTER_CANT_FAILOVER_DATA_AGE	src/cluster.h	/^#define CLUSTER_CANT_FAILOVER_DATA_AGE /;"	d
CLUSTER_CANT_FAILOVER_EXPIRED	src/cluster.h	/^#define CLUSTER_CANT_FAILOVER_EXPIRED /;"	d
CLUSTER_CANT_FAILOVER_NONE	src/cluster.h	/^#define CLUSTER_CANT_FAILOVER_NONE /;"	d
CLUSTER_CANT_FAILOVER_RELOG_PERIOD	src/cluster.h	/^#define CLUSTER_CANT_FAILOVER_RELOG_PERIOD /;"	d
CLUSTER_CANT_FAILOVER_WAITING_DELAY	src/cluster.h	/^#define CLUSTER_CANT_FAILOVER_WAITING_DELAY /;"	d
CLUSTER_CANT_FAILOVER_WAITING_VOTES	src/cluster.h	/^#define CLUSTER_CANT_FAILOVER_WAITING_VOTES /;"	d
CLUSTER_FAIL	src/cluster.h	/^#define CLUSTER_FAIL /;"	d
CLUSTER_FAILOVER_DELAY	src/cluster.h	/^#define CLUSTER_FAILOVER_DELAY /;"	d
CLUSTER_FAIL_REPORT_VALIDITY_MULT	src/cluster.h	/^#define CLUSTER_FAIL_REPORT_VALIDITY_MULT /;"	d
CLUSTER_FAIL_UNDO_TIME_ADD	src/cluster.h	/^#define CLUSTER_FAIL_UNDO_TIME_ADD /;"	d
CLUSTER_FAIL_UNDO_TIME_MULT	src/cluster.h	/^#define CLUSTER_FAIL_UNDO_TIME_MULT /;"	d
CLUSTER_JOIN_CHECK_AFTER	src/redis-cli.c	/^#define CLUSTER_JOIN_CHECK_AFTER /;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_AUTOWEIGHTS	src/redis-cli.c	/^#define CLUSTER_MANAGER_CMD_FLAG_AUTOWEIGHTS /;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_CHECK_OWNERS	src/redis-cli.c	/^#define CLUSTER_MANAGER_CMD_FLAG_CHECK_OWNERS /;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_COLOR	src/redis-cli.c	/^#define CLUSTER_MANAGER_CMD_FLAG_COLOR /;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_COPY	src/redis-cli.c	/^#define CLUSTER_MANAGER_CMD_FLAG_COPY /;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_EMPTYMASTER	src/redis-cli.c	/^#define CLUSTER_MANAGER_CMD_FLAG_EMPTYMASTER /;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_FIX	src/redis-cli.c	/^#define CLUSTER_MANAGER_CMD_FLAG_FIX /;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_FIX_WITH_UNREACHABLE_MASTERS	src/redis-cli.c	/^#define CLUSTER_MANAGER_CMD_FLAG_FIX_WITH_UNREACHABLE_MASTERS /;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_MASTERS_ONLY	src/redis-cli.c	/^#define CLUSTER_MANAGER_CMD_FLAG_MASTERS_ONLY /;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_REPLACE	src/redis-cli.c	/^#define CLUSTER_MANAGER_CMD_FLAG_REPLACE /;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_SIMULATE	src/redis-cli.c	/^#define CLUSTER_MANAGER_CMD_FLAG_SIMULATE /;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_SLAVE	src/redis-cli.c	/^#define CLUSTER_MANAGER_CMD_FLAG_SLAVE /;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_SLAVES_ONLY	src/redis-cli.c	/^#define CLUSTER_MANAGER_CMD_FLAG_SLAVES_ONLY /;"	d	file:
CLUSTER_MANAGER_CMD_FLAG_YES	src/redis-cli.c	/^#define CLUSTER_MANAGER_CMD_FLAG_YES /;"	d	file:
CLUSTER_MANAGER_COMMAND	src/redis-cli.c	/^#define CLUSTER_MANAGER_COMMAND(/;"	d	file:
CLUSTER_MANAGER_FLAG_DISCONNECT	src/redis-cli.c	/^#define CLUSTER_MANAGER_FLAG_DISCONNECT /;"	d	file:
CLUSTER_MANAGER_FLAG_FAIL	src/redis-cli.c	/^#define CLUSTER_MANAGER_FLAG_FAIL /;"	d	file:
CLUSTER_MANAGER_FLAG_FRIEND	src/redis-cli.c	/^#define CLUSTER_MANAGER_FLAG_FRIEND /;"	d	file:
CLUSTER_MANAGER_FLAG_MYSELF	src/redis-cli.c	/^#define CLUSTER_MANAGER_FLAG_MYSELF /;"	d	file:
CLUSTER_MANAGER_FLAG_NOADDR	src/redis-cli.c	/^#define CLUSTER_MANAGER_FLAG_NOADDR /;"	d	file:
CLUSTER_MANAGER_FLAG_SLAVE	src/redis-cli.c	/^#define CLUSTER_MANAGER_FLAG_SLAVE /;"	d	file:
CLUSTER_MANAGER_INVALID_HOST_ARG	src/redis-cli.c	/^#define CLUSTER_MANAGER_INVALID_HOST_ARG /;"	d	file:
CLUSTER_MANAGER_LOG_LVL_ERR	src/redis-cli.c	/^#define CLUSTER_MANAGER_LOG_LVL_ERR /;"	d	file:
CLUSTER_MANAGER_LOG_LVL_INFO	src/redis-cli.c	/^#define CLUSTER_MANAGER_LOG_LVL_INFO /;"	d	file:
CLUSTER_MANAGER_LOG_LVL_SUCCESS	src/redis-cli.c	/^#define CLUSTER_MANAGER_LOG_LVL_SUCCESS /;"	d	file:
CLUSTER_MANAGER_LOG_LVL_WARN	src/redis-cli.c	/^#define CLUSTER_MANAGER_LOG_LVL_WARN /;"	d	file:
CLUSTER_MANAGER_MASTERS_COUNT	src/redis-cli.c	/^#define CLUSTER_MANAGER_MASTERS_COUNT(/;"	d	file:
CLUSTER_MANAGER_MIGRATE_PIPELINE	src/redis-cli.c	/^#define CLUSTER_MANAGER_MIGRATE_PIPELINE /;"	d	file:
CLUSTER_MANAGER_MIGRATE_TIMEOUT	src/redis-cli.c	/^#define CLUSTER_MANAGER_MIGRATE_TIMEOUT /;"	d	file:
CLUSTER_MANAGER_MODE	src/redis-cli.c	/^#define CLUSTER_MANAGER_MODE(/;"	d	file:
CLUSTER_MANAGER_NODE_ARRAY_FREE	src/redis-cli.c	/^#define CLUSTER_MANAGER_NODE_ARRAY_FREE(/;"	d	file:
CLUSTER_MANAGER_OPT_COLD	src/redis-cli.c	/^#define CLUSTER_MANAGER_OPT_COLD /;"	d	file:
CLUSTER_MANAGER_OPT_GETFRIENDS	src/redis-cli.c	/^#define CLUSTER_MANAGER_OPT_GETFRIENDS /;"	d	file:
CLUSTER_MANAGER_OPT_QUIET	src/redis-cli.c	/^#define CLUSTER_MANAGER_OPT_QUIET /;"	d	file:
CLUSTER_MANAGER_OPT_UPDATE	src/redis-cli.c	/^#define CLUSTER_MANAGER_OPT_UPDATE /;"	d	file:
CLUSTER_MANAGER_OPT_VERBOSE	src/redis-cli.c	/^#define CLUSTER_MANAGER_OPT_VERBOSE /;"	d	file:
CLUSTER_MANAGER_PRINT_REPLY_ERROR	src/redis-cli.c	/^#define CLUSTER_MANAGER_PRINT_REPLY_ERROR(/;"	d	file:
CLUSTER_MANAGER_REBALANCE_THRESHOLD	src/redis-cli.c	/^#define CLUSTER_MANAGER_REBALANCE_THRESHOLD /;"	d	file:
CLUSTER_MANAGER_SLOTS	src/redis-cli.c	/^#define CLUSTER_MANAGER_SLOTS /;"	d	file:
CLUSTER_MAX_REJOIN_DELAY	src/cluster.c	/^#define CLUSTER_MAX_REJOIN_DELAY /;"	d	file:
CLUSTER_MF_PAUSE_MULT	src/cluster.h	/^#define CLUSTER_MF_PAUSE_MULT /;"	d
CLUSTER_MF_TIMEOUT	src/cluster.h	/^#define CLUSTER_MF_TIMEOUT /;"	d
CLUSTER_MIN_REJOIN_DELAY	src/cluster.c	/^#define CLUSTER_MIN_REJOIN_DELAY /;"	d	file:
CLUSTER_MODULE_FLAG_NONE	src/cluster.h	/^#define CLUSTER_MODULE_FLAG_NONE /;"	d
CLUSTER_MODULE_FLAG_NO_FAILOVER	src/cluster.h	/^#define CLUSTER_MODULE_FLAG_NO_FAILOVER /;"	d
CLUSTER_MODULE_FLAG_NO_REDIRECTION	src/cluster.h	/^#define CLUSTER_MODULE_FLAG_NO_REDIRECTION /;"	d
CLUSTER_NAMELEN	src/cluster.h	/^#define CLUSTER_NAMELEN /;"	d
CLUSTER_NODE_FAIL	src/cluster.h	/^#define CLUSTER_NODE_FAIL /;"	d
CLUSTER_NODE_HANDSHAKE	src/cluster.h	/^#define CLUSTER_NODE_HANDSHAKE /;"	d
CLUSTER_NODE_MASTER	src/cluster.h	/^#define CLUSTER_NODE_MASTER /;"	d
CLUSTER_NODE_MEET	src/cluster.h	/^#define CLUSTER_NODE_MEET /;"	d
CLUSTER_NODE_MIGRATE_TO	src/cluster.h	/^#define CLUSTER_NODE_MIGRATE_TO /;"	d
CLUSTER_NODE_MYSELF	src/cluster.h	/^#define CLUSTER_NODE_MYSELF /;"	d
CLUSTER_NODE_NOADDR	src/cluster.h	/^#define CLUSTER_NODE_NOADDR /;"	d
CLUSTER_NODE_NOFAILOVER	src/cluster.h	/^#define CLUSTER_NODE_NOFAILOVER /;"	d
CLUSTER_NODE_NULL_NAME	src/cluster.h	/^#define CLUSTER_NODE_NULL_NAME /;"	d
CLUSTER_NODE_PFAIL	src/cluster.h	/^#define CLUSTER_NODE_PFAIL /;"	d
CLUSTER_NODE_SLAVE	src/cluster.h	/^#define CLUSTER_NODE_SLAVE /;"	d
CLUSTER_OK	src/cluster.h	/^#define CLUSTER_OK /;"	d
CLUSTER_PORT_INCR	src/cluster.h	/^#define CLUSTER_PORT_INCR /;"	d
CLUSTER_PROTO_VER	src/cluster.h	/^#define CLUSTER_PROTO_VER /;"	d
CLUSTER_REDIR_ASK	src/cluster.h	/^#define CLUSTER_REDIR_ASK /;"	d
CLUSTER_REDIR_CROSS_SLOT	src/cluster.h	/^#define CLUSTER_REDIR_CROSS_SLOT /;"	d
CLUSTER_REDIR_DOWN_RO_STATE	src/cluster.h	/^#define CLUSTER_REDIR_DOWN_RO_STATE /;"	d
CLUSTER_REDIR_DOWN_STATE	src/cluster.h	/^#define CLUSTER_REDIR_DOWN_STATE /;"	d
CLUSTER_REDIR_DOWN_UNBOUND	src/cluster.h	/^#define CLUSTER_REDIR_DOWN_UNBOUND /;"	d
CLUSTER_REDIR_MOVED	src/cluster.h	/^#define CLUSTER_REDIR_MOVED /;"	d
CLUSTER_REDIR_NONE	src/cluster.h	/^#define CLUSTER_REDIR_NONE /;"	d
CLUSTER_REDIR_UNSTABLE	src/cluster.h	/^#define CLUSTER_REDIR_UNSTABLE /;"	d
CLUSTER_SLAVE_MIGRATION_DELAY	src/cluster.h	/^#define CLUSTER_SLAVE_MIGRATION_DELAY /;"	d
CLUSTER_SLOTS	src/cluster.h	/^#define CLUSTER_SLOTS /;"	d
CLUSTER_SLOTS	src/redis-benchmark.c	/^#define CLUSTER_SLOTS /;"	d	file:
CLUSTER_TODO_FSYNC_CONFIG	src/cluster.h	/^#define CLUSTER_TODO_FSYNC_CONFIG /;"	d
CLUSTER_TODO_HANDLE_FAILOVER	src/cluster.h	/^#define CLUSTER_TODO_HANDLE_FAILOVER /;"	d
CLUSTER_TODO_HANDLE_MANUALFAILOVER	src/cluster.h	/^#define CLUSTER_TODO_HANDLE_MANUALFAILOVER /;"	d
CLUSTER_TODO_SAVE_CONFIG	src/cluster.h	/^#define CLUSTER_TODO_SAVE_CONFIG /;"	d
CLUSTER_TODO_UPDATE_STATE	src/cluster.h	/^#define CLUSTER_TODO_UPDATE_STATE /;"	d
CLUSTER_WRITABLE_DELAY	src/cluster.c	/^#define CLUSTER_WRITABLE_DELAY /;"	d	file:
CMD_ADMIN	src/server.h	/^#define CMD_ADMIN /;"	d
CMD_ASKING	src/server.h	/^#define CMD_ASKING /;"	d
CMD_CALL_FULL	src/server.h	/^#define CMD_CALL_FULL /;"	d
CMD_CALL_NONE	src/server.h	/^#define CMD_CALL_NONE /;"	d
CMD_CALL_NOWRAP	src/server.h	/^#define CMD_CALL_NOWRAP /;"	d
CMD_CALL_PROPAGATE	src/server.h	/^#define CMD_CALL_PROPAGATE /;"	d
CMD_CALL_PROPAGATE_AOF	src/server.h	/^#define CMD_CALL_PROPAGATE_AOF /;"	d
CMD_CALL_PROPAGATE_REPL	src/server.h	/^#define CMD_CALL_PROPAGATE_REPL /;"	d
CMD_CALL_SLOWLOG	src/server.h	/^#define CMD_CALL_SLOWLOG /;"	d
CMD_CALL_STATS	src/server.h	/^#define CMD_CALL_STATS /;"	d
CMD_CATEGORY_ADMIN	src/server.h	/^#define CMD_CATEGORY_ADMIN /;"	d
CMD_CATEGORY_BITMAP	src/server.h	/^#define CMD_CATEGORY_BITMAP /;"	d
CMD_CATEGORY_BLOCKING	src/server.h	/^#define CMD_CATEGORY_BLOCKING /;"	d
CMD_CATEGORY_CONNECTION	src/server.h	/^#define CMD_CATEGORY_CONNECTION /;"	d
CMD_CATEGORY_DANGEROUS	src/server.h	/^#define CMD_CATEGORY_DANGEROUS /;"	d
CMD_CATEGORY_FAST	src/server.h	/^#define CMD_CATEGORY_FAST /;"	d
CMD_CATEGORY_GEO	src/server.h	/^#define CMD_CATEGORY_GEO /;"	d
CMD_CATEGORY_HASH	src/server.h	/^#define CMD_CATEGORY_HASH /;"	d
CMD_CATEGORY_HYPERLOGLOG	src/server.h	/^#define CMD_CATEGORY_HYPERLOGLOG /;"	d
CMD_CATEGORY_KEYSPACE	src/server.h	/^#define CMD_CATEGORY_KEYSPACE /;"	d
CMD_CATEGORY_LIST	src/server.h	/^#define CMD_CATEGORY_LIST /;"	d
CMD_CATEGORY_PUBSUB	src/server.h	/^#define CMD_CATEGORY_PUBSUB /;"	d
CMD_CATEGORY_READ	src/server.h	/^#define CMD_CATEGORY_READ /;"	d
CMD_CATEGORY_SCRIPTING	src/server.h	/^#define CMD_CATEGORY_SCRIPTING /;"	d
CMD_CATEGORY_SET	src/server.h	/^#define CMD_CATEGORY_SET /;"	d
CMD_CATEGORY_SLOW	src/server.h	/^#define CMD_CATEGORY_SLOW /;"	d
CMD_CATEGORY_SORTEDSET	src/server.h	/^#define CMD_CATEGORY_SORTEDSET /;"	d
CMD_CATEGORY_STREAM	src/server.h	/^#define CMD_CATEGORY_STREAM /;"	d
CMD_CATEGORY_STRING	src/server.h	/^#define CMD_CATEGORY_STRING /;"	d
CMD_CATEGORY_TRANSACTION	src/server.h	/^#define CMD_CATEGORY_TRANSACTION /;"	d
CMD_CATEGORY_WRITE	src/server.h	/^#define CMD_CATEGORY_WRITE /;"	d
CMD_DENYOOM	src/server.h	/^#define CMD_DENYOOM /;"	d
CMD_FAST	src/server.h	/^#define CMD_FAST /;"	d
CMD_LOADING	src/server.h	/^#define CMD_LOADING /;"	d
CMD_MAY_REPLICATE	src/server.h	/^#define CMD_MAY_REPLICATE /;"	d
CMD_MODULE	src/server.h	/^#define CMD_MODULE /;"	d
CMD_MODULE_GETKEYS	src/server.h	/^#define CMD_MODULE_GETKEYS /;"	d
CMD_MODULE_NO_CLUSTER	src/server.h	/^#define CMD_MODULE_NO_CLUSTER /;"	d
CMD_NOSCRIPT	src/server.h	/^#define CMD_NOSCRIPT /;"	d
CMD_NO_AUTH	src/server.h	/^#define CMD_NO_AUTH /;"	d
CMD_PUBSUB	src/server.h	/^#define CMD_PUBSUB /;"	d
CMD_RANDOM	src/server.h	/^#define CMD_RANDOM /;"	d
CMD_READONLY	src/server.h	/^#define CMD_READONLY /;"	d
CMD_SKIP_MONITOR	src/server.h	/^#define CMD_SKIP_MONITOR /;"	d
CMD_SKIP_SLOWLOG	src/server.h	/^#define CMD_SKIP_SLOWLOG /;"	d
CMD_SORT_FOR_SCRIPT	src/server.h	/^#define CMD_SORT_FOR_SCRIPT /;"	d
CMD_STALE	src/server.h	/^#define CMD_STALE /;"	d
CMD_WRITE	src/server.h	/^#define CMD_WRITE /;"	d
COL	deps/jemalloc/src/stats.c	/^#define COL(/;"	d	file:
COM	src/geohash_helper.c	/^#define COM /;"	d	file:
COMMAND_GET	src/t_string.c	/^#define COMMAND_GET /;"	d	file:
COMMAND_SET	src/t_string.c	/^#define COMMAND_SET /;"	d	file:
COMPRESS_MAX	src/quicklist.c	/^#define COMPRESS_MAX /;"	d	file:
CONFIGURE_CFLAGS	deps/jemalloc/Makefile	/^CONFIGURE_CFLAGS := -std=gnu11 -Wall -Wsign-compare -Wundef -Wno-format-zero-length -pipe -g3 -f/;"	m
CONFIGURE_CFLAGS	deps/jemalloc/Makefile.in	/^CONFIGURE_CFLAGS := @CONFIGURE_CFLAGS@$/;"	m
CONFIGURE_CXXFLAGS	deps/jemalloc/Makefile	/^CONFIGURE_CXXFLAGS := -Wall -g3 -fvisibility=hidden -O3$/;"	m
CONFIGURE_CXXFLAGS	deps/jemalloc/Makefile.in	/^CONFIGURE_CXXFLAGS := @CONFIGURE_CXXFLAGS@$/;"	m
CONFIG_AUTHPASS_MAX_LEN	src/server.h	/^#define CONFIG_AUTHPASS_MAX_LEN /;"	d
CONFIG_BGSAVE_RETRY_DELAY	src/server.h	/^#define CONFIG_BGSAVE_RETRY_DELAY /;"	d
CONFIG_BINDADDR_MAX	src/server.h	/^#define CONFIG_BINDADDR_MAX /;"	d
CONFIG_DEFAULT_CLUSTER_CONFIG_FILE	src/server.h	/^#define CONFIG_DEFAULT_CLUSTER_CONFIG_FILE /;"	d
CONFIG_DEFAULT_HZ	src/server.h	/^#define CONFIG_DEFAULT_HZ /;"	d
CONFIG_DEFAULT_LOGFILE	src/server.h	/^#define CONFIG_DEFAULT_LOGFILE /;"	d
CONFIG_DEFAULT_PID_FILE	src/server.h	/^#define CONFIG_DEFAULT_PID_FILE /;"	d
CONFIG_DEFAULT_PROC_TITLE_TEMPLATE	src/server.h	/^#define CONFIG_DEFAULT_PROC_TITLE_TEMPLATE /;"	d
CONFIG_DEFAULT_UNIX_SOCKET_PERM	src/server.h	/^#define CONFIG_DEFAULT_UNIX_SOCKET_PERM /;"	d
CONFIG_FDSET_INCR	src/server.h	/^#define CONFIG_FDSET_INCR /;"	d
CONFIG_LATENCY_HISTOGRAM_INSTANT_MAX_VALUE	src/redis-benchmark.c	/^#define CONFIG_LATENCY_HISTOGRAM_INSTANT_MAX_VALUE /;"	d	file:
CONFIG_LATENCY_HISTOGRAM_MAX_VALUE	src/redis-benchmark.c	/^#define CONFIG_LATENCY_HISTOGRAM_MAX_VALUE /;"	d	file:
CONFIG_LATENCY_HISTOGRAM_MIN_VALUE	src/redis-benchmark.c	/^#define CONFIG_LATENCY_HISTOGRAM_MIN_VALUE /;"	d	file:
CONFIG_MAX_HZ	src/server.h	/^#define CONFIG_MAX_HZ /;"	d
CONFIG_MAX_LINE	src/server.h	/^#define CONFIG_MAX_LINE /;"	d
CONFIG_MIN_HZ	src/server.h	/^#define CONFIG_MIN_HZ /;"	d
CONFIG_MIN_RESERVED_FDS	src/server.h	/^#define CONFIG_MIN_RESERVED_FDS /;"	d
CONFIG_OOM_BGCHILD	src/server.h	/^#define CONFIG_OOM_BGCHILD /;"	d
CONFIG_OOM_COUNT	src/server.h	/^#define CONFIG_OOM_COUNT /;"	d
CONFIG_OOM_MASTER	src/server.h	/^#define CONFIG_OOM_MASTER /;"	d
CONFIG_OOM_REPLICA	src/server.h	/^#define CONFIG_OOM_REPLICA /;"	d
CONFIG_REPL_BACKLOG_MIN_SIZE	src/server.h	/^#define CONFIG_REPL_BACKLOG_MIN_SIZE /;"	d
CONFIG_REPL_SYNCIO_TIMEOUT	src/server.h	/^#define CONFIG_REPL_SYNCIO_TIMEOUT /;"	d
CONFIG_RUN_ID_SIZE	src/server.h	/^#define CONFIG_RUN_ID_SIZE /;"	d
CONFIG_WRITE_BOOL	deps/jemalloc/src/stats.c	/^#define CONFIG_WRITE_BOOL(/;"	d	file:
CONF_HANDLE_BOOL	deps/jemalloc/src/jemalloc.c	/^#define CONF_HANDLE_BOOL(/;"	d	file:
CONF_HANDLE_CHAR_P	deps/jemalloc/src/jemalloc.c	/^#define CONF_HANDLE_CHAR_P(/;"	d	file:
CONF_HANDLE_SIZE_T	deps/jemalloc/src/jemalloc.c	/^#define CONF_HANDLE_SIZE_T(/;"	d	file:
CONF_HANDLE_SSIZE_T	deps/jemalloc/src/jemalloc.c	/^#define CONF_HANDLE_SSIZE_T(/;"	d	file:
CONF_HANDLE_T_U	deps/jemalloc/src/jemalloc.c	/^#define CONF_HANDLE_T_U(/;"	d	file:
CONF_HANDLE_UNSIGNED	deps/jemalloc/src/jemalloc.c	/^    clip)								\\$/;"	d	file:
CONF_MATCH	deps/jemalloc/src/jemalloc.c	/^#define CONF_MATCH(/;"	d	file:
CONF_MATCH_VALUE	deps/jemalloc/src/jemalloc.c	/^#define CONF_MATCH_VALUE(/;"	d	file:
CONF_MAX_no	deps/jemalloc/src/jemalloc.c	/^#define CONF_MAX_no(/;"	d	file:
CONF_MAX_yes	deps/jemalloc/src/jemalloc.c	/^#define CONF_MAX_yes(/;"	d	file:
CONF_MIN_no	deps/jemalloc/src/jemalloc.c	/^#define CONF_MIN_no(/;"	d	file:
CONF_MIN_yes	deps/jemalloc/src/jemalloc.c	/^#define CONF_MIN_yes(/;"	d	file:
CONN_FD	deps/hiredis/test.c	/^    CONN_FD,$/;"	e	enum:connection_type	file:
CONN_FLAG_CLOSE_SCHEDULED	src/connection.h	/^#define CONN_FLAG_CLOSE_SCHEDULED /;"	d
CONN_FLAG_WRITE_BARRIER	src/connection.h	/^#define CONN_FLAG_WRITE_BARRIER /;"	d
CONN_INFO_LEN	src/connection.h	/^#define CONN_INFO_LEN /;"	d
CONN_SSL	deps/hiredis/test.c	/^    CONN_SSL$/;"	e	enum:connection_type	file:
CONN_STATE_ACCEPTING	src/connection.h	/^    CONN_STATE_ACCEPTING,$/;"	e	enum:__anon0815b2e20103
CONN_STATE_CLOSED	src/connection.h	/^    CONN_STATE_CLOSED,$/;"	e	enum:__anon0815b2e20103
CONN_STATE_CONNECTED	src/connection.h	/^    CONN_STATE_CONNECTED,$/;"	e	enum:__anon0815b2e20103
CONN_STATE_CONNECTING	src/connection.h	/^    CONN_STATE_CONNECTING,$/;"	e	enum:__anon0815b2e20103
CONN_STATE_ERROR	src/connection.h	/^    CONN_STATE_ERROR$/;"	e	enum:__anon0815b2e20103
CONN_STATE_NONE	src/connection.h	/^    CONN_STATE_NONE = 0,$/;"	e	enum:__anon0815b2e20103
CONN_TCP	deps/hiredis/test.c	/^    CONN_TCP,$/;"	e	enum:connection_type	file:
CONN_TYPE_SOCKET	src/connection.h	/^#define CONN_TYPE_SOCKET /;"	d
CONN_TYPE_TLS	src/connection.h	/^#define CONN_TYPE_TLS /;"	d
CONN_UNIX	deps/hiredis/test.c	/^    CONN_UNIX,$/;"	e	enum:connection_type	file:
CORE_O	deps/lua/src/Makefile	/^CORE_O=	lapi.o lcode.o ldebug.o ldo.o ldump.o lfunc.o lgc.o llex.o lmem.o \\$/;"	m
COUNTER_ENUM	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^#define COUNTER_ENUM(/;"	d
COUNTER_INIT_VAL	utils/lru/lfu-simulation.c	/^#define COUNTER_INIT_VAL /;"	d	file:
COUNT_1	deps/jemalloc/test/unit/SFMT.c	/^#define COUNT_1 /;"	d	file:
COUNT_2	deps/jemalloc/test/unit/SFMT.c	/^#define COUNT_2 /;"	d	file:
CO_DEAD	deps/lua/src/lbaselib.c	/^#define CO_DEAD	/;"	d	file:
CO_NOR	deps/lua/src/lbaselib.c	/^#define CO_NOR	/;"	d	file:
CO_RUN	deps/lua/src/lbaselib.c	/^#define CO_RUN	/;"	d	file:
CO_SUS	deps/lua/src/lbaselib.c	/^#define CO_SUS	/;"	d	file:
CPPFLAGS	deps/jemalloc/Makefile	/^CPPFLAGS := -D_GNU_SOURCE -D_REENTRANT -I$(objroot)include -I$(srcroot)include$/;"	m
CPPFLAGS	deps/jemalloc/Makefile.in	/^CPPFLAGS := @CPPFLAGS@ -I$(objroot)include -I$(srcroot)include$/;"	m
CPP_OBJS	deps/jemalloc/Makefile	/^CPP_OBJS := $(CPP_SRCS:$(srcroot)%.cpp=$(objroot)%.$(O))$/;"	m
CPP_OBJS	deps/jemalloc/Makefile.in	/^CPP_OBJS := $(CPP_SRCS:$(srcroot)%.cpp=$(objroot)%.$(O))$/;"	m
CPP_PIC_OBJS	deps/jemalloc/Makefile	/^CPP_PIC_OBJS := $(CPP_SRCS:$(srcroot)%.cpp=$(objroot)%.pic.$(O))$/;"	m
CPP_PIC_OBJS	deps/jemalloc/Makefile.in	/^CPP_PIC_OBJS := $(CPP_SRCS:$(srcroot)%.cpp=$(objroot)%.pic.$(O))$/;"	m
CPP_SRCS	deps/jemalloc/Makefile	/^CPP_SRCS := $(srcroot)src\/jemalloc_cpp.cpp$/;"	m
CPP_SRCS	deps/jemalloc/Makefile	/^CPP_SRCS :=$/;"	m
CPP_SRCS	deps/jemalloc/Makefile.in	/^CPP_SRCS := $(srcroot)src\/jemalloc_cpp.cpp$/;"	m
CPP_SRCS	deps/jemalloc/Makefile.in	/^CPP_SRCS :=$/;"	m
CPU_SPINWAIT	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define CPU_SPINWAIT /;"	d
CRC64_H	src/crc64.h	/^#define CRC64_H$/;"	d
CRCSPEED_H	src/crcspeed.h	/^#define CRCSPEED_H$/;"	d
CREATE_ABC	deps/lua/src/lopcodes.h	/^#define CREATE_ABC(/;"	d
CREATE_ABx	deps/lua/src/lopcodes.h	/^#define CREATE_ABx(/;"	d
CRON_DBS_PER_CALL	src/server.h	/^#define CRON_DBS_PER_CALL /;"	d
CSV	deps/hdr_histogram/hdr_histogram.h	/^    CSV$/;"	e	enum:__anon905d92fb0203
CTARGET	deps/jemalloc/Makefile	/^CTARGET = -o $@$/;"	m
CTARGET	deps/jemalloc/Makefile.in	/^CTARGET = @CTARGET@$/;"	m
CTL	deps/jemalloc/src/ctl.c	/^#define CTL(/;"	d	file:
CTL_GET	deps/jemalloc/src/stats.c	/^#define CTL_GET(/;"	d	file:
CTL_M2_GET	deps/jemalloc/src/stats.c	/^#define CTL_M2_GET(/;"	d	file:
CTL_M2_M4_GET	deps/jemalloc/src/stats.c	/^#define CTL_M2_M4_GET(/;"	d	file:
CTL_MAX_DEPTH	deps/jemalloc/include/jemalloc/internal/ctl.h	/^#define CTL_MAX_DEPTH	/;"	d
CTL_PROTO	deps/jemalloc/src/ctl.c	/^#define CTL_PROTO(/;"	d	file:
CTL_RO_CGEN	deps/jemalloc/src/ctl.c	/^#define CTL_RO_CGEN(/;"	d	file:
CTL_RO_CLGEN	deps/jemalloc/src/ctl.c	/^#define CTL_RO_CLGEN(/;"	d	file:
CTL_RO_CONFIG_GEN	deps/jemalloc/src/ctl.c	/^#define CTL_RO_CONFIG_GEN(/;"	d	file:
CTL_RO_CONFIG_GEN	deps/jemalloc/src/ctl.c	/^CTL_RO_CONFIG_GEN(config_cache_oblivious, bool)$/;"	f	file:
CTL_RO_GEN	deps/jemalloc/src/ctl.c	/^#define CTL_RO_GEN(/;"	d	file:
CTL_RO_NL_CGEN	deps/jemalloc/src/ctl.c	/^#define CTL_RO_NL_CGEN(/;"	d	file:
CTL_RO_NL_CGEN	deps/jemalloc/src/ctl.c	/^CTL_RO_NL_CGEN(config_prof, prof_interval, prof_interval, uint64_t)$/;"	f	file:
CTL_RO_NL_GEN	deps/jemalloc/src/ctl.c	/^#define CTL_RO_NL_GEN(/;"	d	file:
CTL_RO_NL_GEN	deps/jemalloc/src/ctl.c	/^CTL_RO_NL_GEN(arenas_quantum, QUANTUM, size_t)$/;"	f	file:
CTL_RO_NL_GEN	deps/jemalloc/src/ctl.c	/^CTL_RO_NL_GEN(version, JEMALLOC_VERSION, const char *)$/;"	f	file:
CTL_TSD_RO_NL_CGEN	deps/jemalloc/src/ctl.c	/^#define CTL_TSD_RO_NL_CGEN(/;"	d	file:
CTL_TSD_RO_NL_CGEN	deps/jemalloc/src/ctl.c	/^CTL_TSD_RO_NL_CGEN(config_stats, thread_allocated, tsd_thread_allocated_get,$/;"	f	file:
CTRL_A	deps/linenoise/linenoise.c	/^	CTRL_A = 1,         \/* Ctrl+a *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_B	deps/linenoise/linenoise.c	/^	CTRL_B = 2,         \/* Ctrl-b *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_C	deps/linenoise/linenoise.c	/^	CTRL_C = 3,         \/* Ctrl-c *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_D	deps/linenoise/linenoise.c	/^	CTRL_D = 4,         \/* Ctrl-d *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_E	deps/linenoise/linenoise.c	/^	CTRL_E = 5,         \/* Ctrl-e *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_F	deps/linenoise/linenoise.c	/^	CTRL_F = 6,         \/* Ctrl-f *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_H	deps/linenoise/linenoise.c	/^	CTRL_H = 8,         \/* Ctrl-h *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_K	deps/linenoise/linenoise.c	/^	CTRL_K = 11,        \/* Ctrl+k *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_L	deps/linenoise/linenoise.c	/^	CTRL_L = 12,        \/* Ctrl+l *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_N	deps/linenoise/linenoise.c	/^	CTRL_N = 14,        \/* Ctrl-n *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_P	deps/linenoise/linenoise.c	/^	CTRL_P = 16,        \/* Ctrl-p *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_T	deps/linenoise/linenoise.c	/^	CTRL_T = 20,        \/* Ctrl-t *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_U	deps/linenoise/linenoise.c	/^	CTRL_U = 21,        \/* Ctrl+u *\/$/;"	e	enum:KEY_ACTION	file:
CTRL_W	deps/linenoise/linenoise.c	/^	CTRL_W = 23,        \/* Ctrl+w *\/$/;"	e	enum:KEY_ACTION	file:
CT_Socket	src/connection.c	/^ConnectionType CT_Socket = {$/;"	v	typeref:typename:ConnectionType
CT_Socket	src/connection.c	/^ConnectionType CT_Socket;$/;"	v	typeref:typename:ConnectionType
CT_TLS	src/tls.c	/^ConnectionType CT_TLS = {$/;"	v	typeref:typename:ConnectionType
CT_TLS	src/tls.c	/^ConnectionType CT_TLS;$/;"	v	typeref:typename:ConnectionType
CXX	deps/hiredis/Makefile	/^CXX:=$(shell sh -c 'type $${CXX%% *} >\/dev\/null 2>\/dev\/null && echo $(CXX) || echo g++')$/;"	m
CXX	deps/jemalloc/Makefile	/^CXX := g++$/;"	m
CXX	deps/jemalloc/Makefile.in	/^CXX := @CXX@$/;"	m
CXXFLAGS	deps/jemalloc/Makefile	/^CXXFLAGS := $(strip $(CONFIGURE_CXXFLAGS) $(SPECIFIED_CXXFLAGS) $(EXTRA_CXXFLAGS))$/;"	m
CXXFLAGS	deps/jemalloc/Makefile.in	/^CXXFLAGS := $(strip $(CONFIGURE_CXXFLAGS) $(SPECIFIED_CXXFLAGS) $(EXTRA_CXXFLAGS))$/;"	m
C_ERR	src/server.h	/^#define C_ERR /;"	d
C_HDRS	deps/jemalloc/Makefile	/^C_HDRS := $(objroot)include\/jemalloc\/jemalloc$(install_suffix).h$/;"	m
C_HDRS	deps/jemalloc/Makefile.in	/^C_HDRS := $(objroot)include\/jemalloc\/jemalloc$(install_suffix).h$/;"	m
C_JET_OBJS	deps/jemalloc/Makefile	/^C_JET_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.jet.$(O))$/;"	m
C_JET_OBJS	deps/jemalloc/Makefile.in	/^C_JET_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.jet.$(O))$/;"	m
C_JET_SYMS	deps/jemalloc/Makefile	/^C_JET_SYMS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.jet.sym)$/;"	m
C_JET_SYMS	deps/jemalloc/Makefile.in	/^C_JET_SYMS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.jet.sym)$/;"	m
C_JET_SYM_OBJS	deps/jemalloc/Makefile	/^C_JET_SYM_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.jet.sym.$(O))$/;"	m
C_JET_SYM_OBJS	deps/jemalloc/Makefile.in	/^C_JET_SYM_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.jet.sym.$(O))$/;"	m
C_OBJS	deps/jemalloc/Makefile	/^C_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.$(O))$/;"	m
C_OBJS	deps/jemalloc/Makefile.in	/^C_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.$(O))$/;"	m
C_OK	src/server.h	/^#define C_OK /;"	d
C_PIC_OBJS	deps/jemalloc/Makefile	/^C_PIC_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.pic.$(O))$/;"	m
C_PIC_OBJS	deps/jemalloc/Makefile.in	/^C_PIC_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.pic.$(O))$/;"	m
C_SRCS	deps/jemalloc/Makefile	/^C_SRCS := $(srcroot)src\/jemalloc.c \\$/;"	m
C_SRCS	deps/jemalloc/Makefile.in	/^C_SRCS := $(srcroot)src\/jemalloc.c \\$/;"	m
C_SYMS	deps/jemalloc/Makefile	/^C_SYMS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.sym)$/;"	m
C_SYMS	deps/jemalloc/Makefile.in	/^C_SYMS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.sym)$/;"	m
C_SYM_OBJS	deps/jemalloc/Makefile	/^C_SYM_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.sym.$(O))$/;"	m
C_SYM_OBJS	deps/jemalloc/Makefile.in	/^C_SYM_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.sym.$(O))$/;"	m
C_TESTLIB_INTEGRATION_OBJS	deps/jemalloc/Makefile	/^C_TESTLIB_INTEGRATION_OBJS := $(C_TESTLIB_SRCS:$(srcroot)%.c=$(objroot)%.integration.$(O))$/;"	m
C_TESTLIB_INTEGRATION_OBJS	deps/jemalloc/Makefile.in	/^C_TESTLIB_INTEGRATION_OBJS := $(C_TESTLIB_SRCS:$(srcroot)%.c=$(objroot)%.integration.$(O))$/;"	m
C_TESTLIB_OBJS	deps/jemalloc/Makefile	/^C_TESTLIB_OBJS := $(C_TESTLIB_UNIT_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEGRATION_OBJS/;"	m
C_TESTLIB_OBJS	deps/jemalloc/Makefile.in	/^C_TESTLIB_OBJS := $(C_TESTLIB_UNIT_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEGRATION_OBJS/;"	m
C_TESTLIB_SRCS	deps/jemalloc/Makefile	/^C_TESTLIB_SRCS := $(srcroot)test\/src\/btalloc.c $(srcroot)test\/src\/btalloc_0.c \\$/;"	m
C_TESTLIB_SRCS	deps/jemalloc/Makefile.in	/^C_TESTLIB_SRCS := $(srcroot)test\/src\/btalloc.c $(srcroot)test\/src\/btalloc_0.c \\$/;"	m
C_TESTLIB_STRESS_OBJS	deps/jemalloc/Makefile	/^C_TESTLIB_STRESS_OBJS := $(C_TESTLIB_SRCS:$(srcroot)%.c=$(objroot)%.stress.$(O))$/;"	m
C_TESTLIB_STRESS_OBJS	deps/jemalloc/Makefile.in	/^C_TESTLIB_STRESS_OBJS := $(C_TESTLIB_SRCS:$(srcroot)%.c=$(objroot)%.stress.$(O))$/;"	m
C_TESTLIB_UNIT_OBJS	deps/jemalloc/Makefile	/^C_TESTLIB_UNIT_OBJS := $(C_TESTLIB_SRCS:$(srcroot)%.c=$(objroot)%.unit.$(O))$/;"	m
C_TESTLIB_UNIT_OBJS	deps/jemalloc/Makefile.in	/^C_TESTLIB_UNIT_OBJS := $(C_TESTLIB_SRCS:$(srcroot)%.c=$(objroot)%.unit.$(O))$/;"	m
C_UTIL_CPP_SRCS	deps/jemalloc/Makefile	/^C_UTIL_CPP_SRCS := $(srcroot)src\/nstime.c $(srcroot)src\/malloc_io.c$/;"	m
C_UTIL_CPP_SRCS	deps/jemalloc/Makefile	/^C_UTIL_CPP_SRCS :=$/;"	m
C_UTIL_CPP_SRCS	deps/jemalloc/Makefile.in	/^C_UTIL_CPP_SRCS := $(srcroot)src\/nstime.c $(srcroot)src\/malloc_io.c$/;"	m
C_UTIL_CPP_SRCS	deps/jemalloc/Makefile.in	/^C_UTIL_CPP_SRCS :=$/;"	m
C_UTIL_INTEGRATION_OBJS	deps/jemalloc/Makefile	/^C_UTIL_INTEGRATION_OBJS := $(C_UTIL_INTEGRATION_SRCS:$(srcroot)%.c=$(objroot)%.integration.$(O))$/;"	m
C_UTIL_INTEGRATION_OBJS	deps/jemalloc/Makefile.in	/^C_UTIL_INTEGRATION_OBJS := $(C_UTIL_INTEGRATION_SRCS:$(srcroot)%.c=$(objroot)%.integration.$(O))$/;"	m
C_UTIL_INTEGRATION_SRCS	deps/jemalloc/Makefile	/^C_UTIL_INTEGRATION_SRCS := $(srcroot)src\/nstime.c $(srcroot)src\/malloc_io.c$/;"	m
C_UTIL_INTEGRATION_SRCS	deps/jemalloc/Makefile	/^C_UTIL_INTEGRATION_SRCS :=$/;"	m
C_UTIL_INTEGRATION_SRCS	deps/jemalloc/Makefile.in	/^C_UTIL_INTEGRATION_SRCS := $(srcroot)src\/nstime.c $(srcroot)src\/malloc_io.c$/;"	m
C_UTIL_INTEGRATION_SRCS	deps/jemalloc/Makefile.in	/^C_UTIL_INTEGRATION_SRCS :=$/;"	m
CallInfo	deps/lua/src/lstate.h	/^typedef struct CallInfo {$/;"	s
CallInfo	deps/lua/src/lstate.h	/^} CallInfo;$/;"	t	typeref:struct:CallInfo
CallS	deps/lua/src/lapi.c	/^struct CallS {  \/* data to `f_call' *\/$/;"	s	file:
ClientsPeakMemInput	src/server.c	/^size_t ClientsPeakMemInput[CLIENTS_PEAK_MEM_USAGE_SLOTS] = {0};$/;"	v	typeref:typename:size_t[]
ClientsPeakMemOutput	src/server.c	/^size_t ClientsPeakMemOutput[CLIENTS_PEAK_MEM_USAGE_SLOTS] = {0};$/;"	v	typeref:typename:size_t[]
Closure	deps/lua/src/lobject.h	/^typedef union Closure {$/;"	u
Closure	deps/lua/src/lobject.h	/^} Closure;$/;"	t	typeref:union:Closure
ClosureHeader	deps/lua/src/lobject.h	/^#define ClosureHeader /;"	d
CommandFilter_CommandFilter	tests/modules/commandfilter.c	/^void CommandFilter_CommandFilter(RedisModuleCommandFilterCtx *filter)$/;"	f	typeref:typename:void
CommandFilter_LogCommand	tests/modules/commandfilter.c	/^int CommandFilter_LogCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
CommandFilter_PingCommand	tests/modules/commandfilter.c	/^int CommandFilter_PingCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
CommandFilter_UnregisterCommand	tests/modules/commandfilter.c	/^int CommandFilter_UnregisterCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
CommonHeader	deps/lua/src/lobject.h	/^#define CommonHeader	/;"	d
ConnectionCallbackFunc	src/connection.h	/^typedef void (*ConnectionCallbackFunc)(struct connection *conn);$/;"	t	typeref:typename:void (*)(struct connection * conn)
ConnectionState	src/connection.h	/^} ConnectionState;$/;"	t	typeref:enum:__anon0815b2e20103
ConnectionType	src/connection.h	/^typedef struct ConnectionType {$/;"	s
ConnectionType	src/connection.h	/^} ConnectionType;$/;"	t	typeref:struct:ConnectionType
ConsControl	deps/lua/src/lparser.c	/^struct ConsControl {$/;"	s	file:
D	src/debugmacro.h	/^#define D(/;"	d
D	src/quicklist.c	/^#define D(/;"	d	file:
D2S_BUFSIZE	deps/jemalloc/src/malloc_io.c	/^#define D2S_BUFSIZE /;"	d	file:
DATADIR	deps/jemalloc/Makefile	/^DATADIR := $(DESTDIR)\/usr\/local\/share$/;"	m
DATADIR	deps/jemalloc/Makefile.in	/^DATADIR := $(DESTDIR)@DATADIR@$/;"	m
DEBUG	deps/hdr_histogram/Makefile	/^DEBUG= -g$/;"	m
DEBUG	deps/linenoise/Makefile	/^DEBUG= -g$/;"	m
DEBUG	src/Makefile	/^	DEBUG=-g$/;"	m
DEBUG	src/Makefile	/^DEBUG=-g -ggdb$/;"	m
DEBUG_FLAGS	deps/hiredis/Makefile	/^DEBUG_FLAGS?= -g -ggdb$/;"	m
DEBUG_FLAGS	src/Makefile	/^	DEBUG_FLAGS=-g$/;"	m
DECAY_NTICKS_PER_UPDATE	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^#define DECAY_NTICKS_PER_UPDATE	/;"	d
DEFAULT_DECODE_INVALID_NUMBERS	deps/lua/src/lua_cjson.c	/^#define DEFAULT_DECODE_INVALID_NUMBERS /;"	d	file:
DEFAULT_DECODE_MAX_DEPTH	deps/lua/src/lua_cjson.c	/^#define DEFAULT_DECODE_MAX_DEPTH /;"	d	file:
DEFAULT_ENCODE_INVALID_NUMBERS	deps/lua/src/lua_cjson.c	/^#define DEFAULT_ENCODE_INVALID_NUMBERS /;"	d	file:
DEFAULT_ENCODE_KEEP_BUFFER	deps/lua/src/lua_cjson.c	/^#define DEFAULT_ENCODE_KEEP_BUFFER /;"	d	file:
DEFAULT_ENCODE_MAX_DEPTH	deps/lua/src/lua_cjson.c	/^#define DEFAULT_ENCODE_MAX_DEPTH /;"	d	file:
DEFAULT_ENCODE_NUMBER_PRECISION	deps/lua/src/lua_cjson.c	/^#define DEFAULT_ENCODE_NUMBER_PRECISION /;"	d	file:
DEFAULT_LATENCY_PRECISION	src/redis-benchmark.c	/^#define DEFAULT_LATENCY_PRECISION /;"	d	file:
DEFAULT_SPARSE_CONVERT	deps/lua/src/lua_cjson.c	/^#define DEFAULT_SPARSE_CONVERT /;"	d	file:
DEFAULT_SPARSE_RATIO	deps/lua/src/lua_cjson.c	/^#define DEFAULT_SPARSE_RATIO /;"	d	file:
DEFAULT_SPARSE_SAFE	deps/lua/src/lua_cjson.c	/^#define DEFAULT_SPARSE_SAFE /;"	d	file:
DEFRAG_SDS_DICT_NO_VAL	src/defrag.c	/^#define DEFRAG_SDS_DICT_NO_VAL /;"	d	file:
DEFRAG_SDS_DICT_VAL_IS_SDS	src/defrag.c	/^#define DEFRAG_SDS_DICT_VAL_IS_SDS /;"	d	file:
DEFRAG_SDS_DICT_VAL_IS_STROB	src/defrag.c	/^#define DEFRAG_SDS_DICT_VAL_IS_STROB /;"	d	file:
DEFRAG_SDS_DICT_VAL_VOID_PTR	src/defrag.c	/^#define DEFRAG_SDS_DICT_VAL_VOID_PTR /;"	d	file:
DEG_TO_RAD	src/geohash_helper.c	/^const double DEG_TO_RAD = 0.017453292519943295769236907684886;$/;"	v	typeref:typename:const double
DEP	src/Makefile	/^DEP = $(REDIS_SERVER_OBJ:%.o=%.d) $(REDIS_CLI_OBJ:%.o=%.d) $(REDIS_BENCHMARK_OBJ:%.o=%.d)$/;"	m
DEPENDENCY_TARGETS	src/Makefile	/^DEPENDENCY_TARGETS=hiredis linenoise lua hdr_histogram$/;"	m
DESTDIR	deps/jemalloc/Makefile.in	/^DESTDIR =$/;"	m
DICT_ERR	deps/hiredis/dict.h	/^#define DICT_ERR /;"	d
DICT_ERR	src/dict.h	/^#define DICT_ERR /;"	d
DICT_HT_INITIAL_SIZE	deps/hiredis/dict.h	/^#define DICT_HT_INITIAL_SIZE /;"	d
DICT_HT_INITIAL_SIZE	src/dict.h	/^#define DICT_HT_INITIAL_SIZE /;"	d
DICT_NOTUSED	deps/hiredis/dict.h	/^#define DICT_NOTUSED(/;"	d
DICT_NOTUSED	src/dict.h	/^#define DICT_NOTUSED(/;"	d
DICT_OK	deps/hiredis/dict.h	/^#define DICT_OK /;"	d
DICT_OK	src/dict.h	/^#define DICT_OK /;"	d
DICT_STATS_VECTLEN	src/dict.c	/^#define DICT_STATS_VECTLEN /;"	d	file:
DIRTY_DECAY_MS_DEFAULT	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^#define DIRTY_DECAY_MS_DEFAULT	/;"	d
DISK_ERROR_TYPE_AOF	src/server.h	/^#define DISK_ERROR_TYPE_AOF /;"	d
DISK_ERROR_TYPE_NONE	src/server.h	/^#define DISK_ERROR_TYPE_NONE /;"	d
DISK_ERROR_TYPE_RDB	src/server.h	/^#define DISK_ERROR_TYPE_RDB /;"	d
DLMSG	deps/lua/src/loadlib.c	/^#define DLMSG	/;"	d	file:
DOCS	deps/jemalloc/Makefile	/^DOCS := $(DOCS_HTML) $(DOCS_MAN3)$/;"	m
DOCS	deps/jemalloc/Makefile.in	/^DOCS := $(DOCS_HTML) $(DOCS_MAN3)$/;"	m
DOCS_HTML	deps/jemalloc/Makefile	/^DOCS_HTML := $(DOCS_XML:$(objroot)%.xml=$(objroot)%.html)$/;"	m
DOCS_HTML	deps/jemalloc/Makefile.in	/^DOCS_HTML := $(DOCS_XML:$(objroot)%.xml=$(objroot)%.html)$/;"	m
DOCS_MAN3	deps/jemalloc/Makefile	/^DOCS_MAN3 := $(DOCS_XML:$(objroot)%.xml=$(objroot)%.3)$/;"	m
DOCS_MAN3	deps/jemalloc/Makefile.in	/^DOCS_MAN3 := $(DOCS_XML:$(objroot)%.xml=$(objroot)%.3)$/;"	m
DOCS_XML	deps/jemalloc/Makefile	/^DOCS_XML := $(objroot)doc\/jemalloc$(install_suffix).xml$/;"	m
DOCS_XML	deps/jemalloc/Makefile.in	/^DOCS_XML := $(objroot)doc\/jemalloc$(install_suffix).xml$/;"	m
DO_INTEGER_TESTS	deps/jemalloc/test/unit/atomic.c	/^#define DO_INTEGER_TESTS(/;"	d	file:
DO_TESTS	deps/jemalloc/test/unit/atomic.c	/^#define DO_TESTS(/;"	d	file:
DSOS	deps/jemalloc/Makefile	/^DSOS := $(objroot)lib\/$(LIBJEMALLOC).$(SOREV)$/;"	m
DSOS	deps/jemalloc/Makefile.in	/^DSOS := $(objroot)lib\/$(LIBJEMALLOC).$(SOREV)$/;"	m
DSO_LDFLAGS	deps/jemalloc/Makefile	/^DSO_LDFLAGS = -shared -Wl,-soname,$(@F)$/;"	m
DSO_LDFLAGS	deps/jemalloc/Makefile.in	/^DSO_LDFLAGS = @DSO_LDFLAGS@$/;"	m
DSS_DEFAULT	deps/jemalloc/include/jemalloc/internal/extent_dss.h	/^#define DSS_DEFAULT /;"	d
DSS_PREC_DEFAULT	deps/jemalloc/include/jemalloc/internal/extent_dss.h	/^#define DSS_PREC_DEFAULT /;"	d
DUMP_FILENAME_BUFSIZE	deps/jemalloc/src/prof.c	/^#define DUMP_FILENAME_BUFSIZE	/;"	d	file:
DUMP_INTERVAL	deps/jemalloc/test/unit/prof_accum.c	/^#define DUMP_INTERVAL	/;"	d	file:
DUMP_INTERVAL	deps/jemalloc/test/unit/prof_reset.c	/^#define DUMP_INTERVAL	/;"	d	file:
DUMP_SYMS	deps/jemalloc/Makefile	/^DUMP_SYMS = nm -a$/;"	m
DUMP_SYMS	deps/jemalloc/Makefile.in	/^DUMP_SYMS = @DUMP_SYMS@$/;"	m
DYLIBNAME	deps/hiredis/Makefile	/^DYLIBNAME=$(LIBNAME).$(DYLIBSUFFIX)$/;"	m
DYLIBSUFFIX	deps/hiredis/Makefile	/^  DYLIBSUFFIX=dylib$/;"	m
DYLIBSUFFIX	deps/hiredis/Makefile	/^DYLIBSUFFIX=so$/;"	m
DYLIB_MAJOR_NAME	deps/hiredis/Makefile	/^DYLIB_MAJOR_NAME=$(LIBNAME).$(DYLIBSUFFIX).$(HIREDIS_MAJOR)$/;"	m
DYLIB_MAKE_CMD	deps/hiredis/Makefile	/^  DYLIB_MAKE_CMD=$(CC) $(SUN_SHARED_FLAG) -o $(DYLIBNAME) -h $(DYLIB_MINOR_NAME) $(LDFLAGS)$/;"	m
DYLIB_MAKE_CMD	deps/hiredis/Makefile	/^  DYLIB_MAKE_CMD=$(CC) -dynamiclib -Wl,-install_name,$(PREFIX)\/$(LIBRARY_PATH)\/$(DYLIB_MINOR_N/;"	m
DYLIB_MAKE_CMD	deps/hiredis/Makefile	/^DYLIB_MAKE_CMD=$(CC) -shared -Wl,-soname,$(DYLIB_MINOR_NAME)$/;"	m
DYLIB_MINOR_NAME	deps/hiredis/Makefile	/^  DYLIB_MINOR_NAME=$(LIBNAME).$(HIREDIS_SONAME).$(DYLIBSUFFIX)$/;"	m
DYLIB_MINOR_NAME	deps/hiredis/Makefile	/^DYLIB_MINOR_NAME=$(LIBNAME).$(DYLIBSUFFIX).$(HIREDIS_SONAME)$/;"	m
DYLIB_PLUGIN	deps/hiredis/Makefile	/^  DYLIB_PLUGIN=-Wl,-undefined -Wl,dynamic_lookup$/;"	m
D_R	src/geohash_helper.c	/^#define D_R /;"	d	file:
DataType	tests/modules/datatype.c	/^} DataType;$/;"	t	typeref:struct:__anonc5c0b6fc0108	file:
DefaultUser	src/acl.c	/^user *DefaultUser;  \/* Global reference to the default user.$/;"	v	typeref:typename:user *
DoubleBlock_ThreadMain	tests/modules/blockonbackground.c	/^void *DoubleBlock_ThreadMain(void *arg) {$/;"	f	typeref:typename:void *
DumpBlock	deps/lua/src/ldump.c	/^static void DumpBlock(const void* b, size_t size, DumpState* D)$/;"	f	typeref:typename:void	file:
DumpChar	deps/lua/src/ldump.c	/^static void DumpChar(int y, DumpState* D)$/;"	f	typeref:typename:void	file:
DumpCode	deps/lua/src/ldump.c	/^#define DumpCode(/;"	d	file:
DumpConstants	deps/lua/src/ldump.c	/^static void DumpConstants(const Proto* f, DumpState* D)$/;"	f	typeref:typename:void	file:
DumpDebug	deps/lua/src/ldump.c	/^static void DumpDebug(const Proto* f, DumpState* D)$/;"	f	typeref:typename:void	file:
DumpFunction	deps/lua/src/ldump.c	/^static void DumpFunction(const Proto* f, const TString* p, DumpState* D)$/;"	f	typeref:typename:void	file:
DumpHeader	deps/lua/src/ldump.c	/^static void DumpHeader(DumpState* D)$/;"	f	typeref:typename:void	file:
DumpInt	deps/lua/src/ldump.c	/^static void DumpInt(int x, DumpState* D)$/;"	f	typeref:typename:void	file:
DumpMem	deps/lua/src/ldump.c	/^#define DumpMem(/;"	d	file:
DumpNumber	deps/lua/src/ldump.c	/^static void DumpNumber(lua_Number x, DumpState* D)$/;"	f	typeref:typename:void	file:
DumpState	deps/lua/src/ldump.c	/^} DumpState;$/;"	t	typeref:struct:__anon1dacebdb0108	file:
DumpString	deps/lua/src/ldump.c	/^static void DumpString(const TString* s, DumpState* D)$/;"	f	typeref:typename:void	file:
DumpVar	deps/lua/src/ldump.c	/^#define DumpVar(/;"	d	file:
DumpVector	deps/lua/src/ldump.c	/^static void DumpVector(const void* b, int n, size_t size, DumpState* D)$/;"	f	typeref:typename:void	file:
EARTH_RADIUS_IN_METERS	src/geohash_helper.c	/^const double EARTH_RADIUS_IN_METERS = 6372797.560856;$/;"	v	typeref:typename:const double
ECCENT	src/geohash_helper.c	/^#define ECCENT /;"	d	file:
EMITTER_TYPE_uint32_t	deps/jemalloc/src/stats.c	/^#define EMITTER_TYPE_uint32_t /;"	d	file:
EMITTER_TYPE_uint64_t	deps/jemalloc/src/stats.c	/^#define EMITTER_TYPE_uint64_t /;"	d	file:
EMIT_SIMPLE	deps/jemalloc/include/jemalloc/internal/emitter.h	/^#define EMIT_SIMPLE(/;"	d
EMPTYDB_ASYNC	src/server.h	/^#define EMPTYDB_ASYNC /;"	d
EMPTYDB_NO_FLAGS	src/server.h	/^#define EMPTYDB_NO_FLAGS /;"	d
EMPTY_STRING_IS_NULL	src/config.c	/^#define EMPTY_STRING_IS_NULL /;"	d	file:
ENABLE_HUGLETLB	src/Config.h	/^#define ENABLE_HUGLETLB /;"	d
ENABLE_PREDICTION	src/Config.h	/^#define ENABLE_PREDICTION /;"	d
ENABLE_UNSHRINK_NOW	src/Config.h	/^#define ENABLE_UNSHRINK_NOW /;"	d
ENDCOLOR	deps/Makefile	/^ENDCOLOR="\\033[0m"$/;"	m
ENDCOLOR	src/Makefile	/^ENDCOLOR="\\033[0m"$/;"	m
ENTER	deps/linenoise/linenoise.c	/^	ENTER = 13,         \/* Enter *\/$/;"	e	enum:KEY_ACTION	file:
EOZ	deps/lua/src/lzio.h	/^#define EOZ	/;"	d
EP0	src/sha256.c	/^#define EP0(/;"	d	file:
EP1	src/sha256.c	/^#define EP1(/;"	d	file:
ERR	deps/jemalloc/test/unit/malloc_io.c	/^#define ERR(/;"	d	file:
ERR	src/quicklist.c	/^#define ERR(/;"	d	file:
ERRFUNC	deps/lua/src/loadlib.c	/^#define ERRFUNC	/;"	d	file:
ERRLIB	deps/lua/src/loadlib.c	/^#define ERRLIB	/;"	d	file:
ERROR	src/quicklist.c	/^#define ERROR /;"	d	file:
ERROR	src/redis-check-aof.c	/^#define ERROR(/;"	d	file:
ESC	deps/linenoise/linenoise.c	/^	ESC = 27,           \/* Escape *\/$/;"	e	enum:KEY_ACTION	file:
ESOCKTNOSUPPORT	src/config.h	/^#define ESOCKTNOSUPPORT /;"	d
EVENT_MASK_ENCODE	src/ae_kqueue.c	/^#define EVENT_MASK_ENCODE(/;"	d	file:
EVENT_MASK_MALLOC_SIZE	src/ae_kqueue.c	/^#define EVENT_MASK_MALLOC_SIZE(/;"	d	file:
EVENT_MASK_OFFSET	src/ae_kqueue.c	/^#define EVENT_MASK_OFFSET(/;"	d	file:
EVICT_FAIL	src/server.h	/^#define EVICT_FAIL /;"	d
EVICT_OK	src/server.h	/^#define EVICT_OK /;"	d
EVICT_RUNNING	src/server.h	/^#define EVICT_RUNNING /;"	d
EVPOOL_CACHED_SDS_SIZE	src/evict.c	/^#define EVPOOL_CACHED_SDS_SIZE /;"	d	file:
EVPOOL_SIZE	src/evict.c	/^#define EVPOOL_SIZE /;"	d	file:
EXAMPLES	deps/hiredis/Makefile	/^EXAMPLES=hiredis-example hiredis-example-libevent hiredis-example-libev hiredis-example-glib hir/;"	m
EXE	deps/jemalloc/Makefile	/^EXE := $/;"	m
EXE	deps/jemalloc/Makefile.in	/^EXE := @exe@$/;"	m
EXTENT_BITS_ARENA_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_ARENA_MASK /;"	d
EXTENT_BITS_ARENA_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_ARENA_SHIFT /;"	d
EXTENT_BITS_ARENA_WIDTH	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_ARENA_WIDTH /;"	d
EXTENT_BITS_COMMITTED_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_COMMITTED_MASK /;"	d
EXTENT_BITS_COMMITTED_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_COMMITTED_SHIFT /;"	d
EXTENT_BITS_COMMITTED_WIDTH	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_COMMITTED_WIDTH /;"	d
EXTENT_BITS_DUMPABLE_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_DUMPABLE_MASK /;"	d
EXTENT_BITS_DUMPABLE_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_DUMPABLE_SHIFT /;"	d
EXTENT_BITS_DUMPABLE_WIDTH	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_DUMPABLE_WIDTH /;"	d
EXTENT_BITS_NFREE_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_NFREE_MASK /;"	d
EXTENT_BITS_NFREE_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_NFREE_SHIFT /;"	d
EXTENT_BITS_NFREE_WIDTH	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_NFREE_WIDTH /;"	d
EXTENT_BITS_SLAB_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_SLAB_MASK /;"	d
EXTENT_BITS_SLAB_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_SLAB_SHIFT /;"	d
EXTENT_BITS_SLAB_WIDTH	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_SLAB_WIDTH /;"	d
EXTENT_BITS_SN_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_SN_MASK /;"	d
EXTENT_BITS_SN_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_SN_SHIFT /;"	d
EXTENT_BITS_STATE_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_STATE_MASK /;"	d
EXTENT_BITS_STATE_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_STATE_SHIFT /;"	d
EXTENT_BITS_STATE_WIDTH	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_STATE_WIDTH /;"	d
EXTENT_BITS_SZIND_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_SZIND_MASK /;"	d
EXTENT_BITS_SZIND_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_SZIND_SHIFT /;"	d
EXTENT_BITS_SZIND_WIDTH	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_SZIND_WIDTH /;"	d
EXTENT_BITS_ZEROED_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_ZEROED_MASK /;"	d
EXTENT_BITS_ZEROED_SHIFT	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_ZEROED_SHIFT /;"	d
EXTENT_BITS_ZEROED_WIDTH	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define EXTENT_BITS_ZEROED_WIDTH /;"	d
EXTENT_ESN_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	#define EXTENT_ESN_MASK	/;"	d
EXTENT_GROW_MAX_PIND	deps/jemalloc/include/jemalloc/internal/extent_types.h	/^#define EXTENT_GROW_MAX_PIND /;"	d
EXTENT_HOOKS_INITIALIZER	deps/jemalloc/include/jemalloc/internal/extent_types.h	/^#define EXTENT_HOOKS_INITIALIZER	/;"	d
EXTENT_SIZE_MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	#define EXTENT_SIZE_MASK	/;"	d
EXTRA_CFLAGS	deps/jemalloc/Makefile	/^EXTRA_CFLAGS := $/;"	m
EXTRA_CFLAGS	deps/jemalloc/Makefile.in	/^EXTRA_CFLAGS := @EXTRA_CFLAGS@$/;"	m
EXTRA_CXXFLAGS	deps/jemalloc/Makefile	/^EXTRA_CXXFLAGS := $/;"	m
EXTRA_CXXFLAGS	deps/jemalloc/Makefile.in	/^EXTRA_CXXFLAGS := @EXTRA_CXXFLAGS@$/;"	m
EXTRA_LDFLAGS	deps/jemalloc/Makefile	/^EXTRA_LDFLAGS := $/;"	m
EXTRA_LDFLAGS	deps/jemalloc/Makefile.in	/^EXTRA_LDFLAGS := @EXTRA_LDFLAGS@$/;"	m
EXTRA_STACK	deps/lua/src/lstate.h	/^#define EXTRA_STACK /;"	d
EventElement	tests/modules/hooks.c	/^typedef struct EventElement {$/;"	s	file:
EventElement	tests/modules/hooks.c	/^} EventElement;$/;"	t	typeref:struct:EventElement	file:
EvictionPoolLRU	src/evict.c	/^static struct evictionPoolEntry *EvictionPoolLRU;$/;"	v	typeref:struct:evictionPoolEntry *	file:
ExampleQt	deps/hiredis/examples/example-qt.h	/^        ExampleQt(const char * value, QObject * parent = 0)$/;"	f	class:ExampleQt
ExampleQt	deps/hiredis/examples/example-qt.h	/^class ExampleQt : public QObject {$/;"	c
FAIL	tests/modules/basics.c	/^#define FAIL(/;"	d	file:
FAILOVER_IN_PROGRESS	src/server.h	/^    FAILOVER_IN_PROGRESS    \/* Waiting for target replica to accept$/;"	e	enum:__anon3ef696e90203
FAILOVER_WAIT_FOR_SYNC	src/server.h	/^    FAILOVER_WAIT_FOR_SYNC, \/* Waiting for target replica to catch up *\/$/;"	e	enum:__anon3ef696e90203
FD_TO_PEER_NAME	src/anet.h	/^#define FD_TO_PEER_NAME /;"	d
FD_TO_SOCK_NAME	src/anet.h	/^#define FD_TO_SOCK_NAME /;"	d
FILL_BYTE	deps/jemalloc/test/integration/rallocx.c	/^#define FILL_BYTE /;"	d	file:
FILL_BYTE	deps/jemalloc/test/integration/xallocx.c	/^#define FILL_BYTE /;"	d	file:
FILL_MAX	src/quicklist.c	/^#define FILL_MAX /;"	d	file:
FINALIZEDBIT	deps/lua/src/lgc.h	/^#define FINALIZEDBIT	/;"	d
FINAL_CFLAGS	src/Makefile	/^FINAL_CFLAGS=$(STD) $(WARN) $(OPT) $(DEBUG) $(CFLAGS) $(REDIS_CFLAGS)$/;"	m
FINAL_LDFLAGS	src/Makefile	/^FINAL_LDFLAGS=$(LDFLAGS) $(REDIS_LDFLAGS) $(DEBUG)$/;"	m
FINAL_LIBS	src/Makefile	/^	FINAL_LIBS := ..\/deps\/jemalloc\/lib\/libjemalloc.a $(FINAL_LIBS)$/;"	m
FINAL_LIBS	src/Makefile	/^FINAL_LIBS=-lm$/;"	m
FIRST_RESERVED	deps/lua/src/llex.h	/^#define FIRST_RESERVED	/;"	d
FIXEDBIT	deps/lua/src/lgc.h	/^#define FIXEDBIT	/;"	d
FLAGS	deps/lua/src/lstrlib.c	/^#define FLAGS	/;"	d	file:
FLOAT_WIDTH_TEST	deps/hiredis/test.c	/^#define FLOAT_WIDTH_TEST(/;"	d	file:
FMT64_PREFIX	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^#    define FMT64_PREFIX /;"	d
FMTPTR_PREFIX	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^#    define FMTPTR_PREFIX /;"	d
FMT_SIZE	deps/jemalloc/include/jemalloc/internal/emitter.h	/^#define FMT_SIZE /;"	d
FMTd32	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^#  define FMTd32 /;"	d
FMTd64	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^#  define FMTd64 /;"	d
FMTdPTR	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^#  define FMTdPTR /;"	d
FMTu32	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^#  define FMTu32 /;"	d
FMTu64	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^#  define FMTu64 /;"	d
FMTuPTR	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^#  define FMTuPTR /;"	d
FMTx32	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^#  define FMTx32 /;"	d
FMTx64	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^#  define FMTx64 /;"	d
FMTxPTR	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^#  define FMTxPTR /;"	d
FPCONV_G_FMT_BUFSIZE	deps/lua/src/fpconv.h	/^# define FPCONV_G_FMT_BUFSIZE /;"	d
FREELIST_REF	deps/lua/src/lauxlib.c	/^#define FREELIST_REF	/;"	d	file:
FRST	src/lzf_c.c	/^# define FRST(/;"	d	file:
FragDefrag	tests/modules/defragtest.c	/^int FragDefrag(RedisModuleDefragCtx *ctx, RedisModuleString *key, void **value) {$/;"	f	typeref:typename:int
FragFree	tests/modules/defragtest.c	/^void FragFree(void *value) {$/;"	f	typeref:typename:void
FragFreeEffort	tests/modules/defragtest.c	/^size_t FragFreeEffort(RedisModuleString *key, const void *value) {$/;"	f	typeref:typename:size_t
FragInfo	tests/modules/defragtest.c	/^static void FragInfo(RedisModuleInfoCtx *ctx, int for_crash_report) {$/;"	f	typeref:typename:void	file:
FragObject	tests/modules/defragtest.c	/^struct FragObject {$/;"	s	file:
FragType	tests/modules/defragtest.c	/^static RedisModuleType *FragType;$/;"	v	typeref:typename:RedisModuleType *	file:
FreeEvent	tests/modules/hooks.c	/^void FreeEvent(RedisModuleCtx *ctx, EventElement *event) {$/;"	f	typeref:typename:void
FuncState	deps/lua/src/lparser.h	/^typedef struct FuncState {$/;"	s
FuncState	deps/lua/src/lparser.h	/^} FuncState;$/;"	t	typeref:struct:FuncState
G	deps/lua/src/lstate.h	/^#define G(/;"	d
GCFINALIZECOST	deps/lua/src/lgc.c	/^#define GCFINALIZECOST	/;"	d	file:
GCObject	deps/lua/src/lobject.h	/^typedef union GCObject GCObject;$/;"	t	typeref:union:GCObject
GCObject	deps/lua/src/lstate.h	/^union GCObject {$/;"	u
GCSTEPSIZE	deps/lua/src/lgc.c	/^#define GCSTEPSIZE	/;"	d	file:
GCSWEEPCOST	deps/lua/src/lgc.c	/^#define GCSWEEPCOST	/;"	d	file:
GCSWEEPMAX	deps/lua/src/lgc.c	/^#define GCSWEEPMAX	/;"	d	file:
GCSfinalize	deps/lua/src/lgc.h	/^#define GCSfinalize	/;"	d
GCSpause	deps/lua/src/lgc.h	/^#define GCSpause	/;"	d
GCSpropagate	deps/lua/src/lgc.h	/^#define GCSpropagate	/;"	d
GCSsweep	deps/lua/src/lgc.h	/^#define GCSsweep	/;"	d
GCSsweepstring	deps/lua/src/lgc.h	/^#define GCSsweepstring	/;"	d
GCTM	deps/lua/src/lgc.c	/^static void GCTM (lua_State *L) {$/;"	f	typeref:typename:void	file:
GCheader	deps/lua/src/lobject.h	/^typedef struct GCheader {$/;"	s
GCheader	deps/lua/src/lobject.h	/^} GCheader;$/;"	t	typeref:struct:GCheader
GCthreshold	deps/lua/src/lstate.h	/^  lu_mem GCthreshold;$/;"	m	struct:global_State	typeref:typename:lu_mem
GENPASS_MAX_BITS	src/acl.c	/^        #define GENPASS_MAX_BITS /;"	d	file:
GEOHASH_EAST	src/geohash.h	/^    GEOHASH_EAST,$/;"	e	enum:__anona01652f10103
GEOHASH_HELPER_HPP_	src/geohash_helper.h	/^#define GEOHASH_HELPER_HPP_$/;"	d
GEOHASH_H_	src/geohash.h	/^#define GEOHASH_H_$/;"	d
GEOHASH_NORTH	src/geohash.h	/^    GEOHASH_NORTH = 0,$/;"	e	enum:__anona01652f10103
GEOHASH_NORT_EAST	src/geohash.h	/^    GEOHASH_NORT_EAST$/;"	e	enum:__anona01652f10103
GEOHASH_NORT_WEST	src/geohash.h	/^    GEOHASH_NORT_WEST,$/;"	e	enum:__anona01652f10103
GEOHASH_SOUTH	src/geohash.h	/^    GEOHASH_SOUTH,$/;"	e	enum:__anona01652f10103
GEOHASH_SOUTH_EAST	src/geohash.h	/^    GEOHASH_SOUTH_EAST,$/;"	e	enum:__anona01652f10103
GEOHASH_SOUTH_WEST	src/geohash.h	/^    GEOHASH_SOUTH_WEST,$/;"	e	enum:__anona01652f10103
GEOHASH_WEST	src/geohash.h	/^    GEOHASH_WEST,$/;"	e	enum:__anona01652f10103
GEOSEARCH	src/geo.c	/^#define GEOSEARCH /;"	d	file:
GEOSEARCHSTORE	src/geo.c	/^#define GEOSEARCHSTORE /;"	d	file:
GEO_LAT_MAX	src/geohash.h	/^#define GEO_LAT_MAX /;"	d
GEO_LAT_MIN	src/geohash.h	/^#define GEO_LAT_MIN /;"	d
GEO_LONG_MAX	src/geohash.h	/^#define GEO_LONG_MAX /;"	d
GEO_LONG_MIN	src/geohash.h	/^#define GEO_LONG_MIN /;"	d
GEO_STEP_MAX	src/geohash.h	/^#define GEO_STEP_MAX /;"	d
GETARG_A	deps/lua/src/lopcodes.h	/^#define GETARG_A(/;"	d
GETARG_B	deps/lua/src/lopcodes.h	/^#define GETARG_B(/;"	d
GETARG_Bx	deps/lua/src/lopcodes.h	/^#define GETARG_Bx(/;"	d
GETARG_C	deps/lua/src/lopcodes.h	/^#define GETARG_C(/;"	d
GETARG_sBx	deps/lua/src/lopcodes.h	/^#define GETARG_sBx(/;"	d
GETFAIR_NUM_ENTRIES	src/dict.c	/^#define GETFAIR_NUM_ENTRIES /;"	d	file:
GETKEYS_RESULT_INIT	src/server.h	/^#define GETKEYS_RESULT_INIT /;"	d
GET_AND_EMIT_ALLOC_STAT	deps/jemalloc/src/stats.c	/^#define GET_AND_EMIT_ALLOC_STAT(/;"	d	file:
GET_AND_EMIT_MEM_STAT	deps/jemalloc/src/stats.c	/^#define GET_AND_EMIT_MEM_STAT(/;"	d	file:
GET_ARG_NUMERIC	deps/jemalloc/src/malloc_io.c	/^#define GET_ARG_NUMERIC(/;"	d	file:
GET_NUMERIC_TYPE	src/config.c	/^#define GET_NUMERIC_TYPE(/;"	d	file:
GET_OPCODE	deps/lua/src/lopcodes.h	/^#define GET_OPCODE(/;"	d
GISNOTZERO	src/geohash_helper.h	/^#define GISNOTZERO(/;"	d
GISZERO	src/geohash_helper.h	/^#define GISZERO(/;"	d
GNUC_VERSION	src/config.h	/^#define GNUC_VERSION /;"	d
GZERO	src/geohash_helper.h	/^#define GZERO(/;"	d
GeoDirection	src/geohash.h	/^} GeoDirection;$/;"	t	typeref:enum:__anona01652f10103
GeoHashArea	src/geohash.h	/^} GeoHashArea;$/;"	t	typeref:struct:__anona01652f10408
GeoHashBits	src/geohash.h	/^} GeoHashBits;$/;"	t	typeref:struct:__anona01652f10208
GeoHashFix52Bits	src/geohash_helper.h	/^typedef uint64_t GeoHashFix52Bits;$/;"	t	typeref:typename:uint64_t
GeoHashNeighbors	src/geohash.h	/^} GeoHashNeighbors;$/;"	t	typeref:struct:__anona01652f10508
GeoHashRadius	src/geohash_helper.h	/^} GeoHashRadius;$/;"	t	typeref:struct:__anon1a1c3d100108
GeoHashRange	src/geohash.h	/^} GeoHashRange;$/;"	t	typeref:struct:__anona01652f10308
GeoHashVarBits	src/geohash_helper.h	/^typedef uint64_t GeoHashVarBits;$/;"	t	typeref:typename:uint64_t
GeoShape	src/geohash.h	/^} GeoShape;$/;"	t	typeref:struct:__anona01652f10608
HASHISZERO	src/geohash.h	/^#define HASHISZERO(/;"	d
HASHTABLE_MAX_LOAD_FACTOR	src/server.h	/^#define HASHTABLE_MAX_LOAD_FACTOR /;"	d
HASHTABLE_MIN_FILL	src/server.h	/^#define HASHTABLE_MIN_FILL /;"	d
HASH_PASSWORD_LEN	src/acl.c	/^#define HASH_PASSWORD_LEN /;"	d	file:
HASH_SET_COPY	src/server.h	/^#define HASH_SET_COPY /;"	d
HASH_SET_COPY	src/t_hash.c	/^#define HASH_SET_COPY /;"	d	file:
HASH_SET_TAKE_FIELD	src/server.h	/^#define HASH_SET_TAKE_FIELD /;"	d
HASH_SET_TAKE_FIELD	src/t_hash.c	/^#define HASH_SET_TAKE_FIELD /;"	d	file:
HASH_SET_TAKE_VALUE	src/server.h	/^#define HASH_SET_TAKE_VALUE /;"	d
HASH_SET_TAKE_VALUE	src/t_hash.c	/^#define HASH_SET_TAKE_VALUE /;"	d	file:
HAVE_ATOMIC	src/config.h	/^#define HAVE_ATOMIC$/;"	d
HAVE_BACKTRACE	src/config.h	/^#define HAVE_BACKTRACE /;"	d
HAVE_CLEARENV	src/setproctitle.c	/^#define HAVE_CLEARENV$/;"	d	file:
HAVE_CPU_SPINWAIT	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define HAVE_CPU_SPINWAIT /;"	d
HAVE_DEFRAG	src/zmalloc.h	/^#define HAVE_DEFRAG$/;"	d
HAVE_EPOLL	src/config.h	/^#define HAVE_EPOLL /;"	d
HAVE_EVPORT	src/config.h	/^#define HAVE_EVPORT /;"	d
HAVE_KQUEUE	src/config.h	/^#define HAVE_KQUEUE /;"	d
HAVE_MALLOC_SIZE	src/zmalloc.h	/^#define HAVE_MALLOC_SIZE /;"	d
HAVE_MSG_NOSIGNAL	src/config.h	/^#define HAVE_MSG_NOSIGNAL /;"	d
HAVE_PROC_MAPS	src/config.h	/^#define HAVE_PROC_MAPS /;"	d
HAVE_PROC_OOM_SCORE_ADJ	src/config.h	/^#define HAVE_PROC_OOM_SCORE_ADJ /;"	d
HAVE_PROC_SMAPS	src/config.h	/^#define HAVE_PROC_SMAPS /;"	d
HAVE_PROC_SOMAXCONN	src/config.h	/^#define HAVE_PROC_SOMAXCONN /;"	d
HAVE_PROC_STAT	src/config.h	/^#define HAVE_PROC_STAT /;"	d
HAVE_PSINFO	src/config.h	/^#define HAVE_PSINFO /;"	d
HAVE_SETPROCTITLE	src/setproctitle.c	/^#define HAVE_SETPROCTITLE /;"	d	file:
HAVE_TASKINFO	src/config.h	/^#define HAVE_TASKINFO /;"	d
HDR_ATOMIC_H__	deps/hdr_histogram/hdr_atomic.h	/^#define HDR_ATOMIC_H__$/;"	d
HDR_HISTOGRAM_H	deps/hdr_histogram/hdr_histogram.h	/^#define HDR_HISTOGRAM_H /;"	d
HEADERS	deps/jemalloc/Makefile	/^HEADERS = $(filter-out $(PRIVATE_NAMESPACE_HDRS),$(wildcard $(foreach dir,$(HEADER_DIRS),$(dir)\//;"	m
HEADERS	deps/jemalloc/Makefile.in	/^HEADERS = $(filter-out $(PRIVATE_NAMESPACE_HDRS),$(wildcard $(foreach dir,$(HEADER_DIRS),$(dir)\//;"	m
HEADER_DIRS	deps/jemalloc/Makefile	/^HEADER_DIRS = $(srcroot)include\/jemalloc\/internal \\$/;"	m
HEADER_DIRS	deps/jemalloc/Makefile.in	/^HEADER_DIRS = $(srcroot)include\/jemalloc\/internal \\$/;"	m
HIGH	src/rand.c	/^#define HIGH(/;"	d	file:
HIREDIS_ALLOC_H	deps/hiredis/alloc.h	/^#define HIREDIS_ALLOC_H$/;"	d
HIREDIS_BAD_DOMAIN	deps/hiredis/test.c	/^#define HIREDIS_BAD_DOMAIN /;"	d	file:
HIREDIS_MAJOR	deps/hiredis/Makefile	/^HIREDIS_MAJOR=$(shell grep HIREDIS_MAJOR hiredis.h | awk '{print $$3}')$/;"	m
HIREDIS_MAJOR	deps/hiredis/hiredis.h	/^#define HIREDIS_MAJOR /;"	d
HIREDIS_MAKE_FLAGS	deps/Makefile	/^    HIREDIS_MAKE_FLAGS = USE_SSL=1$/;"	m
HIREDIS_MINOR	deps/hiredis/Makefile	/^HIREDIS_MINOR=$(shell grep HIREDIS_MINOR hiredis.h | awk '{print $$3}')$/;"	m
HIREDIS_MINOR	deps/hiredis/hiredis.h	/^#define HIREDIS_MINOR /;"	d
HIREDIS_PATCH	deps/hiredis/Makefile	/^HIREDIS_PATCH=$(shell grep HIREDIS_PATCH hiredis.h | awk '{print $$3}')$/;"	m
HIREDIS_PATCH	deps/hiredis/hiredis.h	/^#define HIREDIS_PATCH /;"	d
HIREDIS_SDS_COMPAT	deps/hiredis/sdscompat.h	/^#define HIREDIS_SDS_COMPAT$/;"	d
HIREDIS_SDS_H	deps/hiredis/sds.h	/^#define HIREDIS_SDS_H$/;"	d
HIREDIS_SONAME	deps/hiredis/Makefile	/^HIREDIS_SONAME=$(shell grep HIREDIS_SONAME hiredis.h | awk '{print $$3}')$/;"	m
HIREDIS_SONAME	deps/hiredis/hiredis.h	/^#define HIREDIS_SONAME /;"	d
HIREDIS_USE_CRYPTO_LOCKS	deps/hiredis/ssl.c	/^#define HIREDIS_USE_CRYPTO_LOCKS$/;"	d	file:
HI_BIT	src/rand.c	/^#define HI_BIT	/;"	d	file:
HI_SDS_HDR	deps/hiredis/sds.h	/^#define HI_SDS_HDR(/;"	d
HI_SDS_HDR_VAR	deps/hiredis/sds.h	/^#define HI_SDS_HDR_VAR(/;"	d
HI_SDS_LLSTR_SIZE	deps/hiredis/sds.c	/^#define HI_SDS_LLSTR_SIZE /;"	d	file:
HI_SDS_MAX_PREALLOC	deps/hiredis/sds.h	/^#define HI_SDS_MAX_PREALLOC /;"	d
HI_SDS_TYPE_16	deps/hiredis/sds.h	/^#define HI_SDS_TYPE_16 /;"	d
HI_SDS_TYPE_32	deps/hiredis/sds.h	/^#define HI_SDS_TYPE_32 /;"	d
HI_SDS_TYPE_5	deps/hiredis/sds.h	/^#define HI_SDS_TYPE_5 /;"	d
HI_SDS_TYPE_5_LEN	deps/hiredis/sds.h	/^#define HI_SDS_TYPE_5_LEN(/;"	d
HI_SDS_TYPE_64	deps/hiredis/sds.h	/^#define HI_SDS_TYPE_64 /;"	d
HI_SDS_TYPE_8	deps/hiredis/sds.h	/^#define HI_SDS_TYPE_8 /;"	d
HI_SDS_TYPE_BITS	deps/hiredis/sds.h	/^#define HI_SDS_TYPE_BITS /;"	d
HI_SDS_TYPE_MASK	deps/hiredis/sds.h	/^#define HI_SDS_TYPE_MASK /;"	d
HLL_ALPHA_INF	src/hyperloglog.c	/^#define HLL_ALPHA_INF /;"	d	file:
HLL_BITS	src/hyperloglog.c	/^#define HLL_BITS /;"	d	file:
HLL_DENSE	src/hyperloglog.c	/^#define HLL_DENSE /;"	d	file:
HLL_DENSE_GET_REGISTER	src/hyperloglog.c	/^#define HLL_DENSE_GET_REGISTER(/;"	d	file:
HLL_DENSE_SET_REGISTER	src/hyperloglog.c	/^#define HLL_DENSE_SET_REGISTER(/;"	d	file:
HLL_DENSE_SIZE	src/hyperloglog.c	/^#define HLL_DENSE_SIZE /;"	d	file:
HLL_HDR_SIZE	src/hyperloglog.c	/^#define HLL_HDR_SIZE /;"	d	file:
HLL_INVALIDATE_CACHE	src/hyperloglog.c	/^#define HLL_INVALIDATE_CACHE(/;"	d	file:
HLL_MAX_ENCODING	src/hyperloglog.c	/^#define HLL_MAX_ENCODING /;"	d	file:
HLL_P	src/hyperloglog.c	/^#define HLL_P /;"	d	file:
HLL_P_MASK	src/hyperloglog.c	/^#define HLL_P_MASK /;"	d	file:
HLL_Q	src/hyperloglog.c	/^#define HLL_Q /;"	d	file:
HLL_RAW	src/hyperloglog.c	/^#define HLL_RAW /;"	d	file:
HLL_REGISTERS	src/hyperloglog.c	/^#define HLL_REGISTERS /;"	d	file:
HLL_REGISTER_MAX	src/hyperloglog.c	/^#define HLL_REGISTER_MAX /;"	d	file:
HLL_SPARSE	src/hyperloglog.c	/^#define HLL_SPARSE /;"	d	file:
HLL_SPARSE_IS_VAL	src/hyperloglog.c	/^#define HLL_SPARSE_IS_VAL(/;"	d	file:
HLL_SPARSE_IS_XZERO	src/hyperloglog.c	/^#define HLL_SPARSE_IS_XZERO(/;"	d	file:
HLL_SPARSE_IS_ZERO	src/hyperloglog.c	/^#define HLL_SPARSE_IS_ZERO(/;"	d	file:
HLL_SPARSE_VAL_BIT	src/hyperloglog.c	/^#define HLL_SPARSE_VAL_BIT /;"	d	file:
HLL_SPARSE_VAL_LEN	src/hyperloglog.c	/^#define HLL_SPARSE_VAL_LEN(/;"	d	file:
HLL_SPARSE_VAL_MAX_LEN	src/hyperloglog.c	/^#define HLL_SPARSE_VAL_MAX_LEN /;"	d	file:
HLL_SPARSE_VAL_MAX_VALUE	src/hyperloglog.c	/^#define HLL_SPARSE_VAL_MAX_VALUE /;"	d	file:
HLL_SPARSE_VAL_SET	src/hyperloglog.c	/^#define HLL_SPARSE_VAL_SET(/;"	d	file:
HLL_SPARSE_VAL_VALUE	src/hyperloglog.c	/^#define HLL_SPARSE_VAL_VALUE(/;"	d	file:
HLL_SPARSE_XZERO_BIT	src/hyperloglog.c	/^#define HLL_SPARSE_XZERO_BIT /;"	d	file:
HLL_SPARSE_XZERO_LEN	src/hyperloglog.c	/^#define HLL_SPARSE_XZERO_LEN(/;"	d	file:
HLL_SPARSE_XZERO_MAX_LEN	src/hyperloglog.c	/^#define HLL_SPARSE_XZERO_MAX_LEN /;"	d	file:
HLL_SPARSE_XZERO_SET	src/hyperloglog.c	/^#define HLL_SPARSE_XZERO_SET(/;"	d	file:
HLL_SPARSE_ZERO_LEN	src/hyperloglog.c	/^#define HLL_SPARSE_ZERO_LEN(/;"	d	file:
HLL_SPARSE_ZERO_MAX_LEN	src/hyperloglog.c	/^#define HLL_SPARSE_ZERO_MAX_LEN /;"	d	file:
HLL_SPARSE_ZERO_SET	src/hyperloglog.c	/^#define HLL_SPARSE_ZERO_SET(/;"	d	file:
HLL_TEST_CYCLES	src/hyperloglog.c	/^#define HLL_TEST_CYCLES /;"	d	file:
HLL_VALID_CACHE	src/hyperloglog.c	/^#define HLL_VALID_CACHE(/;"	d	file:
HLOG	src/lzfP.h	/^# define HLOG /;"	d
HOTKEYS_SAMPLE	src/redis-cli.c	/^#define HOTKEYS_SAMPLE /;"	d	file:
HRANDFIELD_RANDOM_SAMPLE_LIMIT	src/t_hash.c	/^#define HRANDFIELD_RANDOM_SAMPLE_LIMIT /;"	d	file:
HRANDFIELD_SUB_STRATEGY_MUL	src/t_hash.c	/^#define HRANDFIELD_SUB_STRATEGY_MUL /;"	d	file:
HSIZE	src/lzf_c.c	/^#define HSIZE /;"	d	file:
HUGEPAGE	deps/jemalloc/include/jemalloc/internal/pages.h	/^#define HUGEPAGE	/;"	d
HUGEPAGE_ADDR2BASE	deps/jemalloc/include/jemalloc/internal/pages.h	/^#define HUGEPAGE_ADDR2BASE(/;"	d
HUGEPAGE_CEILING	deps/jemalloc/include/jemalloc/internal/pages.h	/^#define HUGEPAGE_CEILING(/;"	d
HUGEPAGE_MASK	deps/jemalloc/include/jemalloc/internal/pages.h	/^#define HUGEPAGE_MASK	/;"	d
HUGE_PAGE_ALIGN	src/switchrealloc.c	/^#define HUGE_PAGE_ALIGN(/;"	d	file:
HUGE_PAGE_SIZE	src/Config.h	/^#define HUGE_PAGE_SIZE /;"	d
HUGE_TLB_POINT	src/Config.h	/^#define HUGE_TLB_POINT /;"	d
Header	deps/lua/src/lua_struct.c	/^typedef struct Header {$/;"	s	file:
Header	deps/lua/src/lua_struct.c	/^} Header;$/;"	t	typeref:struct:Header	file:
HelloACL_FreeData	src/modules/helloacl.c	/^void HelloACL_FreeData(RedisModuleCtx *ctx, void *privdata) {$/;"	f	typeref:typename:void
HelloACL_Reply	src/modules/helloacl.c	/^int HelloACL_Reply(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloACL_ThreadMain	src/modules/helloacl.c	/^void *HelloACL_ThreadMain(void *args) {$/;"	f	typeref:typename:void *
HelloACL_Timeout	src/modules/helloacl.c	/^int HelloACL_Timeout(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloACL_UserChanged	src/modules/helloacl.c	/^void HelloACL_UserChanged(uint64_t client_id, void *privdata) {$/;"	f	typeref:typename:void
HelloBlockNoTracking_RedisCommand	tests/modules/blockonbackground.c	/^int HelloBlockNoTracking_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloBlock_Disconnected	src/modules/helloblock.c	/^void HelloBlock_Disconnected(RedisModuleCtx *ctx, RedisModuleBlockedClient *bc) {$/;"	f	typeref:typename:void
HelloBlock_Disconnected	tests/modules/blockonbackground.c	/^void HelloBlock_Disconnected(RedisModuleCtx *ctx, RedisModuleBlockedClient *bc) {$/;"	f	typeref:typename:void
HelloBlock_FreeData	src/modules/helloblock.c	/^void HelloBlock_FreeData(RedisModuleCtx *ctx, void *privdata) {$/;"	f	typeref:typename:void
HelloBlock_FreeData	src/modules/hellotype.c	/^void HelloBlock_FreeData(RedisModuleCtx *ctx, void *privdata) {$/;"	f	typeref:typename:void
HelloBlock_FreeData	tests/modules/blockonbackground.c	/^void HelloBlock_FreeData(RedisModuleCtx *ctx, void *privdata) {$/;"	f	typeref:typename:void
HelloBlock_RedisCommand	src/modules/helloblock.c	/^int HelloBlock_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloBlock_RedisCommand	tests/modules/blockonbackground.c	/^int HelloBlock_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloBlock_Reply	src/modules/helloblock.c	/^int HelloBlock_Reply(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloBlock_Reply	src/modules/hellotype.c	/^int HelloBlock_Reply(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloBlock_Reply	tests/modules/blockonbackground.c	/^int HelloBlock_Reply(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloBlock_ThreadMain	src/modules/helloblock.c	/^void *HelloBlock_ThreadMain(void *arg) {$/;"	f	typeref:typename:void *
HelloBlock_Timeout	src/modules/helloblock.c	/^int HelloBlock_Timeout(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloBlock_Timeout	src/modules/hellotype.c	/^int HelloBlock_Timeout(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloBlock_Timeout	tests/modules/blockonbackground.c	/^int HelloBlock_Timeout(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloDoubleBlock_RedisCommand	tests/modules/blockonbackground.c	/^int HelloDoubleBlock_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloHCopy_RedisCommand	src/modules/helloworld.c	/^int HelloHCopy_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloKeys_RedisCommand	src/modules/helloblock.c	/^int HelloKeys_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloKeys_ThreadMain	src/modules/helloblock.c	/^void *HelloKeys_ThreadMain(void *arg) {$/;"	f	typeref:typename:void *
HelloLeftPad_RedisCommand	src/modules/helloworld.c	/^int HelloLeftPad_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloLexRange_RedisCommand	src/modules/helloworld.c	/^int HelloLexRange_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloListSpliceAuto_RedisCommand	src/modules/helloworld.c	/^int HelloListSpliceAuto_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloListSplice_RedisCommand	src/modules/helloworld.c	/^int HelloListSplice_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloListSumLen_RedisCommand	src/modules/helloworld.c	/^int HelloListSumLen_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
HelloMoreExpire_RedisCommand	src/modules/helloworld.c	/^int HelloMoreExpire_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloPushCall2_RedisCommand	src/modules/helloworld.c	/^int HelloPushCall2_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
HelloPushCall_RedisCommand	src/modules/helloworld.c	/^int HelloPushCall_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
HelloPushNative_RedisCommand	src/modules/helloworld.c	/^int HelloPushNative_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
HelloRandArray_RedisCommand	src/modules/helloworld.c	/^int HelloRandArray_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloRepl1_RedisCommand	src/modules/helloworld.c	/^int HelloRepl1_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
HelloRepl2_RedisCommand	src/modules/helloworld.c	/^int HelloRepl2_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloSimple_RedisCommand	src/modules/helloworld.c	/^int HelloSimple_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloToggleCase_RedisCommand	src/modules/helloworld.c	/^int HelloToggleCase_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloType	src/modules/hellotype.c	/^static RedisModuleType *HelloType;$/;"	v	typeref:typename:RedisModuleType *	file:
HelloTypeAofRewrite	src/modules/hellotype.c	/^void HelloTypeAofRewrite(RedisModuleIO *aof, RedisModuleString *key, void *value) {$/;"	f	typeref:typename:void
HelloTypeBRange_RedisCommand	src/modules/hellotype.c	/^int HelloTypeBRange_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloTypeDigest	src/modules/hellotype.c	/^void HelloTypeDigest(RedisModuleDigest *md, void *value) {$/;"	f	typeref:typename:void
HelloTypeFree	src/modules/hellotype.c	/^void HelloTypeFree(void *value) {$/;"	f	typeref:typename:void
HelloTypeInsert	src/modules/hellotype.c	/^void HelloTypeInsert(struct HelloTypeObject *o, int64_t ele) {$/;"	f	typeref:typename:void
HelloTypeInsert_RedisCommand	src/modules/hellotype.c	/^int HelloTypeInsert_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloTypeLen_RedisCommand	src/modules/hellotype.c	/^int HelloTypeLen_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloTypeMemUsage	src/modules/hellotype.c	/^size_t HelloTypeMemUsage(const void *value) {$/;"	f	typeref:typename:size_t
HelloTypeNode	src/modules/hellotype.c	/^struct HelloTypeNode {$/;"	s	file:
HelloTypeObject	src/modules/hellotype.c	/^struct HelloTypeObject {$/;"	s	file:
HelloTypeRange_RedisCommand	src/modules/hellotype.c	/^int HelloTypeRange_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
HelloTypeRdbLoad	src/modules/hellotype.c	/^void *HelloTypeRdbLoad(RedisModuleIO *rdb, int encver) {$/;"	f	typeref:typename:void *
HelloTypeRdbSave	src/modules/hellotype.c	/^void HelloTypeRdbSave(RedisModuleIO *rdb, void *value) {$/;"	f	typeref:typename:void
HelloTypeReleaseObject	src/modules/hellotype.c	/^void HelloTypeReleaseObject(struct HelloTypeObject *o) {$/;"	f	typeref:typename:void
HelloZsumRange_RedisCommand	src/modules/helloworld.c	/^int HelloZsumRange_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
IDSTR	deps/jemalloc/test/include/test/SFMT-params11213.h	/^#define IDSTR	/;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params1279.h	/^#define IDSTR	/;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params132049.h	/^#define IDSTR	/;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params19937.h	/^#define IDSTR	/;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params216091.h	/^#define IDSTR	/;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params2281.h	/^#define IDSTR	/;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params4253.h	/^#define IDSTR	/;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params44497.h	/^#define IDSTR	/;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params607.h	/^#define IDSTR	/;"	d
IDSTR	deps/jemalloc/test/include/test/SFMT-params86243.h	/^#define IDSTR	/;"	d
IDX	src/lzf_c.c	/^#  define IDX(/;"	d	file:
IF	deps/lua/src/lundump.c	/^#define IF(/;"	d	file:
IMMUTABLE_CONFIG	src/config.c	/^#define IMMUTABLE_CONFIG /;"	d	file:
IMPORTLIB	deps/jemalloc/Makefile	/^IMPORTLIB := so$/;"	m
IMPORTLIB	deps/jemalloc/Makefile.in	/^IMPORTLIB := @importlib@$/;"	m
INC	deps/lua/etc/Makefile	/^INC= $(TOP)\/src$/;"	m
INCLUDEDIR	deps/jemalloc/Makefile	/^INCLUDEDIR := $(DESTDIR)\/usr\/local\/include$/;"	m
INCLUDEDIR	deps/jemalloc/Makefile.in	/^INCLUDEDIR := $(DESTDIR)@INCLUDEDIR@$/;"	m
INCLUDE_PATH	deps/hiredis/Makefile	/^INCLUDE_PATH?=include\/hiredis$/;"	m
INDEX	deps/jemalloc/src/ctl.c	/^#define INDEX(/;"	d	file:
INDEXK	deps/lua/src/lopcodes.h	/^#define INDEXK(/;"	d
INDEX_PROTO	deps/jemalloc/src/ctl.c	/^#define INDEX_PROTO(/;"	d	file:
INFINITY	deps/jemalloc/test/unit/math.c	/^#define INFINITY /;"	d	file:
INITIALIZER	deps/jemalloc/src/jemalloc.c	/^#  define INITIALIZER	/;"	d	file:
INIT_HTAB	src/lzfP.h	/^# define INIT_HTAB /;"	d
INIT_SETPROCTITLE_REPLACEMENT	src/config.h	/^#define INIT_SETPROCTITLE_REPLACEMENT$/;"	d
INSTALL	deps/hiredis/Makefile	/^INSTALL?= cp -pPR$/;"	m
INSTALL	deps/jemalloc/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	deps/jemalloc/Makefile.in	/^INSTALL = @INSTALL@$/;"	m
INSTALL	deps/lua/Makefile	/^INSTALL= install -p$/;"	m
INSTALL	src/Makefile	/^	INSTALL=cp -pf$/;"	m
INSTALL	src/Makefile	/^INSTALL=install$/;"	m
INSTALL_BIN	deps/lua/Makefile	/^INSTALL_BIN= $(INSTALL_TOP)\/bin$/;"	m
INSTALL_BIN	src/Makefile	/^INSTALL_BIN=$(PREFIX)\/bin$/;"	m
INSTALL_CMOD	deps/lua/Makefile	/^INSTALL_CMOD= $(INSTALL_TOP)\/lib\/lua\/$V$/;"	m
INSTALL_DATA	deps/lua/Makefile	/^INSTALL_DATA= $(INSTALL) -m 0644$/;"	m
INSTALL_EXEC	deps/lua/Makefile	/^INSTALL_EXEC= $(INSTALL) -m 0755$/;"	m
INSTALL_INC	deps/lua/Makefile	/^INSTALL_INC= $(INSTALL_TOP)\/include$/;"	m
INSTALL_INCLUDE_PATH	deps/hiredis/Makefile	/^INSTALL_INCLUDE_PATH= $(DESTDIR)$(PREFIX)\/$(INCLUDE_PATH)$/;"	m
INSTALL_LIB	deps/lua/Makefile	/^INSTALL_LIB= $(INSTALL_TOP)\/lib$/;"	m
INSTALL_LIBRARY_PATH	deps/hiredis/Makefile	/^INSTALL_LIBRARY_PATH= $(DESTDIR)$(PREFIX)\/$(LIBRARY_PATH)$/;"	m
INSTALL_LMOD	deps/lua/Makefile	/^INSTALL_LMOD= $(INSTALL_TOP)\/share\/lua\/$V$/;"	m
INSTALL_MAN	deps/lua/Makefile	/^INSTALL_MAN= $(INSTALL_TOP)\/man\/man1$/;"	m
INSTALL_PKGCONF_PATH	deps/hiredis/Makefile	/^INSTALL_PKGCONF_PATH= $(INSTALL_LIBRARY_PATH)\/$(PKGCONF_PATH)$/;"	m
INSTALL_TOP	deps/lua/Makefile	/^INSTALL_TOP= \/usr\/local$/;"	m
INT16_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT16_C(/;"	d
INT16_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT16_MAX /;"	d
INT16_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT16_MIN /;"	d
INT24_MAX	src/ziplist.c	/^#define INT24_MAX /;"	d	file:
INT24_MIN	src/ziplist.c	/^#define INT24_MIN /;"	d	file:
INT32_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT32_C(/;"	d
INT32_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT32_MAX /;"	d
INT32_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT32_MIN /;"	d
INT64_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT64_C(/;"	d
INT64_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT64_MAX /;"	d
INT64_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT64_MIN /;"	d
INT8_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT8_C(/;"	d
INT8_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT8_MAX /;"	d
INT8_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT8_MIN /;"	d
INTEGER_CONFIG	src/config.c	/^#define INTEGER_CONFIG /;"	d	file:
INTEGER_TEST_BODY	deps/jemalloc/test/unit/atomic.c	/^#define INTEGER_TEST_BODY(/;"	d	file:
INTEGER_WIDTH_TEST	deps/hiredis/test.c	/^#define INTEGER_WIDTH_TEST(/;"	d	file:
INTERPOLATE	src/defrag.c	/^#define INTERPOLATE(/;"	d	file:
INTMAX_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INTMAX_C /;"	d
INTMAX_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INTMAX_MAX /;"	d
INTMAX_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INTMAX_MIN /;"	d
INTPTR_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#  define INTPTR_MAX /;"	d
INTPTR_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#  define INTPTR_MIN /;"	d
INTSET_ENC_INT16	src/intset.c	/^#define INTSET_ENC_INT16 /;"	d	file:
INTSET_ENC_INT32	src/intset.c	/^#define INTSET_ENC_INT32 /;"	d	file:
INTSET_ENC_INT64	src/intset.c	/^#define INTSET_ENC_INT64 /;"	d	file:
INT_FAST16_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT_FAST16_MAX /;"	d
INT_FAST16_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT_FAST16_MIN /;"	d
INT_FAST32_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT_FAST32_MAX /;"	d
INT_FAST32_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT_FAST32_MIN /;"	d
INT_FAST64_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT_FAST64_MAX /;"	d
INT_FAST64_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT_FAST64_MIN /;"	d
INT_FAST8_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT_FAST8_MAX /;"	d
INT_FAST8_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT_FAST8_MIN /;"	d
INT_LEAST16_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT_LEAST16_MAX /;"	d
INT_LEAST16_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT_LEAST16_MIN /;"	d
INT_LEAST32_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT_LEAST32_MAX /;"	d
INT_LEAST32_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT_LEAST32_MIN /;"	d
INT_LEAST64_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT_LEAST64_MAX /;"	d
INT_LEAST64_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT_LEAST64_MIN /;"	d
INT_LEAST8_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT_LEAST8_MAX /;"	d
INT_LEAST8_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define INT_LEAST8_MIN /;"	d
IOThreadMain	src/networking.c	/^void *IOThreadMain(void *myid) {$/;"	f	typeref:typename:void *
IO_INPUT	deps/lua/src/liolib.c	/^#define IO_INPUT	/;"	d	file:
IO_OUTPUT	deps/lua/src/liolib.c	/^#define IO_OUTPUT	/;"	d	file:
IO_THREADS_MAX_NUM	src/networking.c	/^#define IO_THREADS_MAX_NUM /;"	d	file:
IO_THREADS_OP_READ	src/networking.c	/^#define IO_THREADS_OP_READ /;"	d	file:
IO_THREADS_OP_WRITE	src/networking.c	/^#define IO_THREADS_OP_WRITE /;"	d	file:
IS	deps/lua/src/luac.c	/^#define	IS(/;"	d	file:
ISK	deps/lua/src/lopcodes.h	/^#define ISK(/;"	d
IS_INITIALIZER	deps/jemalloc/src/jemalloc.c	/^#  define IS_INITIALIZER	/;"	d	file:
IS_INT64_EQUIVALENT	deps/lua/src/lua_cmsgpack.c	/^#define IS_INT64_EQUIVALENT(/;"	d	file:
IS_INT_EQUIVALENT	deps/lua/src/lua_cmsgpack.c	/^#define IS_INT_EQUIVALENT(/;"	d	file:
IS_INT_TYPE_EQUIVALENT	deps/lua/src/lua_cmsgpack.c	/^#define IS_INT_TYPE_EQUIVALENT(/;"	d	file:
IS_SUN_CC	deps/hiredis/Makefile	/^  IS_SUN_CC=$(shell sh -c '$(CC) -V 2>&1 |egrep -i -c "sun|studio"')$/;"	m
InfoFunc	tests/modules/infotest.c	/^void InfoFunc(RedisModuleInfoCtx *ctx, int for_crash_report) {$/;"	f	typeref:typename:void
InitServerLast	src/server.c	/^void InitServerLast() {$/;"	f	typeref:typename:void
Instruction	deps/lua/src/llimits.h	/^typedef lu_int32 Instruction;$/;"	t	typeref:typename:lu_int32
IntPoint	deps/lua/src/llimits.h	/^#define IntPoint(/;"	d
Inttype	deps/lua/src/lua_struct.c	/^typedef STRUCT_INT Inttype;$/;"	t	typeref:typename:STRUCT_INT	file:
IsBlocked_RedisCommand	tests/modules/blockonbackground.c	/^int IsBlocked_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
JEMALLOC_ALIGNED	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define JEMALLOC_ALIGNED(/;"	d
JEMALLOC_ALIGNED	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define JEMALLOC_ALIGNED(/;"	d
JEMALLOC_ALIGNED	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define JEMALLOC_ALIGNED(/;"	d	file:
JEMALLOC_ALLOCATOR	deps/jemalloc/include/jemalloc/jemalloc.h	/^#    define JEMALLOC_ALLOCATOR /;"	d
JEMALLOC_ALLOCATOR	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#    define JEMALLOC_ALLOCATOR /;"	d
JEMALLOC_ALLOCATOR	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#    define JEMALLOC_ALLOCATOR$/;"	d
JEMALLOC_ALLOCATOR	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define JEMALLOC_ALLOCATOR$/;"	d
JEMALLOC_ALLOCATOR	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#    define JEMALLOC_ALLOCATOR /;"	d	file:
JEMALLOC_ALLOCATOR	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#    define JEMALLOC_ALLOCATOR$/;"	d	file:
JEMALLOC_ALLOCATOR	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define JEMALLOC_ALLOCATOR$/;"	d	file:
JEMALLOC_ALLOC_JUNK	deps/jemalloc/include/jemalloc/internal/util.h	/^#  define JEMALLOC_ALLOC_JUNK	/;"	d
JEMALLOC_ALLOC_SIZE	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define JEMALLOC_ALLOC_SIZE(/;"	d
JEMALLOC_ALLOC_SIZE	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#    define JEMALLOC_ALLOC_SIZE(/;"	d
JEMALLOC_ALLOC_SIZE	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define JEMALLOC_ALLOC_SIZE(/;"	d
JEMALLOC_ALLOC_SIZE	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#    define JEMALLOC_ALLOC_SIZE(/;"	d	file:
JEMALLOC_ALLOC_SIZE	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define JEMALLOC_ALLOC_SIZE(/;"	d	file:
JEMALLOC_ALLOC_SIZE2	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define JEMALLOC_ALLOC_SIZE2(/;"	d
JEMALLOC_ALLOC_SIZE2	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#    define JEMALLOC_ALLOC_SIZE2(/;"	d
JEMALLOC_ALLOC_SIZE2	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define JEMALLOC_ALLOC_SIZE2(/;"	d
JEMALLOC_ALLOC_SIZE2	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#    define JEMALLOC_ALLOC_SIZE2(/;"	d	file:
JEMALLOC_ALLOC_SIZE2	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define JEMALLOC_ALLOC_SIZE2(/;"	d	file:
JEMALLOC_ALWAYS_INLINE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#  define JEMALLOC_ALWAYS_INLINE /;"	d
JEMALLOC_ARENA_C_	deps/jemalloc/src/arena.c	/^#define JEMALLOC_ARENA_C_$/;"	d	file:
JEMALLOC_ARG_CONCAT	deps/jemalloc/include/jemalloc/internal/util.h	/^#define JEMALLOC_ARG_CONCAT(/;"	d
JEMALLOC_ATOMIC_U64	deps/jemalloc/include/jemalloc/internal/atomic.h	/^#  define JEMALLOC_ATOMIC_U64$/;"	d
JEMALLOC_ATTR	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define JEMALLOC_ATTR(/;"	d
JEMALLOC_ATTR	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define JEMALLOC_ATTR(/;"	d
JEMALLOC_ATTR	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define JEMALLOC_ATTR(/;"	d	file:
JEMALLOC_ATTR	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_ATTR(constructor)$/;"	f	file:
JEMALLOC_ATTR	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_ATTR(malloc) JEMALLOC_ALLOC_SIZE(1)$/;"	f	typeref:typename:JEMALLOC_EXPORT JEMALLOC_ALLOCATOR JEMALLOC_RESTRICT_RETURN void JEMALLOC_NOTHROW *
JEMALLOC_ATTR	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_ATTR(malloc) JEMALLOC_ALLOC_SIZE(2)$/;"	f	typeref:typename:JEMALLOC_EXPORT JEMALLOC_ALLOCATOR JEMALLOC_RESTRICT_RETURN void JEMALLOC_NOTHROW *
JEMALLOC_ATTR	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_ATTR(malloc) JEMALLOC_ALLOC_SIZE2(1, 2)$/;"	f	typeref:typename:JEMALLOC_EXPORT JEMALLOC_ALLOCATOR JEMALLOC_RESTRICT_RETURN void JEMALLOC_NOTHROW *
JEMALLOC_ATTR	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_ATTR(malloc)$/;"	f	typeref:typename:JEMALLOC_EXPORT JEMALLOC_ALLOCATOR JEMALLOC_RESTRICT_RETURN void JEMALLOC_NOTHROW *
JEMALLOC_ATTR	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_ATTR(pure)$/;"	f	typeref:typename:JEMALLOC_EXPORT size_t JEMALLOC_NOTHROW
JEMALLOC_ATTR	deps/jemalloc/src/zone.c	/^JEMALLOC_ATTR(constructor)$/;"	f
JEMALLOC_BACKGROUND_THREAD	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_BACKGROUND_THREAD /;"	d
JEMALLOC_BACKGROUND_THREAD_C_	deps/jemalloc/src/background_thread.c	/^#define JEMALLOC_BACKGROUND_THREAD_C_$/;"	d	file:
JEMALLOC_BASE_C_	deps/jemalloc/src/base.c	/^#define JEMALLOC_BASE_C_$/;"	d	file:
JEMALLOC_BITMAP_C_	deps/jemalloc/src/bitmap.c	/^#define JEMALLOC_BITMAP_C_$/;"	d	file:
JEMALLOC_CACHE_OBLIVIOUS	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_CACHE_OBLIVIOUS /;"	d
JEMALLOC_CC_SILENCE_INIT	deps/jemalloc/include/jemalloc/internal/util.h	/^#define JEMALLOC_CC_SILENCE_INIT(/;"	d
JEMALLOC_CFLAGS	deps/Makefile	/^JEMALLOC_CFLAGS= -std=gnu99 -Wall -pipe -g3 -O3 -funroll-loops $(CFLAGS)$/;"	m
JEMALLOC_CKH_C_	deps/jemalloc/src/ckh.c	/^#define JEMALLOC_CKH_C_$/;"	d	file:
JEMALLOC_CONFIG_MALLOC_CONF	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_CONFIG_MALLOC_CONF /;"	d
JEMALLOC_CPP_CPP_	deps/jemalloc/src/jemalloc_cpp.cpp	/^#define JEMALLOC_CPP_CPP_$/;"	d	file:
JEMALLOC_CPREFIX	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_CPREFIX /;"	d
JEMALLOC_CTL_C_	deps/jemalloc/src/ctl.c	/^#define JEMALLOC_CTL_C_$/;"	d	file:
JEMALLOC_CXX_THROW	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define JEMALLOC_CXX_THROW /;"	d
JEMALLOC_CXX_THROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define JEMALLOC_CXX_THROW /;"	d
JEMALLOC_CXX_THROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define JEMALLOC_CXX_THROW$/;"	d
JEMALLOC_CXX_THROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define JEMALLOC_CXX_THROW /;"	d	file:
JEMALLOC_CXX_THROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define JEMALLOC_CXX_THROW$/;"	d	file:
JEMALLOC_C_	deps/jemalloc/src/jemalloc.c	/^#define JEMALLOC_C_$/;"	d	file:
JEMALLOC_DSS	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_DSS /;"	d
JEMALLOC_EXPORT	deps/jemalloc/include/jemalloc/jemalloc.h	/^#      define JEMALLOC_EXPORT /;"	d
JEMALLOC_EXPORT	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#      define JEMALLOC_EXPORT /;"	d
JEMALLOC_EXPORT	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#    define JEMALLOC_EXPORT /;"	d
JEMALLOC_EXPORT	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define JEMALLOC_EXPORT$/;"	d
JEMALLOC_EXPORT	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#      define JEMALLOC_EXPORT /;"	d	file:
JEMALLOC_EXPORT	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#    define JEMALLOC_EXPORT /;"	d	file:
JEMALLOC_EXPORT	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define JEMALLOC_EXPORT$/;"	d	file:
JEMALLOC_EXTENT_C_	deps/jemalloc/src/extent.c	/^#define JEMALLOC_EXTENT_C_$/;"	d	file:
JEMALLOC_EXTENT_DSS_C_	deps/jemalloc/src/extent_dss.c	/^#define JEMALLOC_EXTENT_DSS_C_$/;"	d	file:
JEMALLOC_EXTENT_MMAP_C_	deps/jemalloc/src/extent_mmap.c	/^#define JEMALLOC_EXTENT_MMAP_C_$/;"	d	file:
JEMALLOC_FILL	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_FILL /;"	d
JEMALLOC_FORMAT_PRINTF	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define JEMALLOC_FORMAT_PRINTF(/;"	d
JEMALLOC_FORMAT_PRINTF	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#    define JEMALLOC_FORMAT_PRINTF(/;"	d
JEMALLOC_FORMAT_PRINTF	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define JEMALLOC_FORMAT_PRINTF(/;"	d
JEMALLOC_FORMAT_PRINTF	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#    define JEMALLOC_FORMAT_PRINTF(/;"	d	file:
JEMALLOC_FORMAT_PRINTF	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define JEMALLOC_FORMAT_PRINTF(/;"	d	file:
JEMALLOC_FRAG_HINT	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define JEMALLOC_FRAG_HINT$/;"	d
JEMALLOC_FRAG_HINT	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#define JEMALLOC_FRAG_HINT$/;"	d
JEMALLOC_FRAG_HINT	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#define JEMALLOC_FRAG_HINT$/;"	d	file:
JEMALLOC_FREE_JUNK	deps/jemalloc/include/jemalloc/internal/util.h	/^#  define JEMALLOC_FREE_JUNK	/;"	d
JEMALLOC_GCC_ATOMIC_ATOMICS	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_GCC_ATOMIC_ATOMICS /;"	d
JEMALLOC_GCC_SYNC_ATOMICS	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_GCC_SYNC_ATOMICS /;"	d
JEMALLOC_GENERATE_ATOMICS	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	/^    \/* unused *\/ lg_size)						\\$/;"	d
JEMALLOC_GENERATE_ATOMICS	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^    \/* unused *\/ lg_size)						\\$/;"	d
JEMALLOC_GENERATE_ATOMICS	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^    \/* unused *\/ lg_size)						\\$/;"	d
JEMALLOC_GENERATE_ATOMICS	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^#define JEMALLOC_GENERATE_ATOMICS(/;"	d
JEMALLOC_GENERATE_INT_ATOMICS	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	/^    \/* unused *\/ lg_size)						\\$/;"	d
JEMALLOC_GENERATE_INT_ATOMICS	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^    \/* unused *\/ lg_size)						\\$/;"	d
JEMALLOC_GENERATE_INT_ATOMICS	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^    \/* unused *\/ lg_size)						\\$/;"	d
JEMALLOC_GENERATE_INT_ATOMICS	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^#define JEMALLOC_GENERATE_INT_ATOMICS(/;"	d
JEMALLOC_HASH_C_	deps/jemalloc/src/hash.c	/^#define JEMALLOC_HASH_C_$/;"	d	file:
JEMALLOC_HAS_ALLOCA_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_HAS_ALLOCA_H /;"	d
JEMALLOC_HAS_RESTRICT	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_HAS_RESTRICT /;"	d
JEMALLOC_HAVE_ATTR	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define JEMALLOC_HAVE_ATTR$/;"	d
JEMALLOC_HAVE_ATTR	deps/jemalloc/include/jemalloc/jemalloc_defs.h	/^#define JEMALLOC_HAVE_ATTR /;"	d
JEMALLOC_HAVE_ATTR_ALLOC_SIZE	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define JEMALLOC_HAVE_ATTR_ALLOC_SIZE$/;"	d
JEMALLOC_HAVE_ATTR_ALLOC_SIZE	deps/jemalloc/include/jemalloc/jemalloc_defs.h	/^#define JEMALLOC_HAVE_ATTR_ALLOC_SIZE /;"	d
JEMALLOC_HAVE_ATTR_FORMAT_GNU_PRINTF	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define JEMALLOC_HAVE_ATTR_FORMAT_GNU_PRINTF$/;"	d
JEMALLOC_HAVE_ATTR_FORMAT_GNU_PRINTF	deps/jemalloc/include/jemalloc/jemalloc_defs.h	/^#define JEMALLOC_HAVE_ATTR_FORMAT_GNU_PRINTF /;"	d
JEMALLOC_HAVE_ATTR_FORMAT_PRINTF	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define JEMALLOC_HAVE_ATTR_FORMAT_PRINTF$/;"	d
JEMALLOC_HAVE_ATTR_FORMAT_PRINTF	deps/jemalloc/include/jemalloc/jemalloc_defs.h	/^#define JEMALLOC_HAVE_ATTR_FORMAT_PRINTF /;"	d
JEMALLOC_HAVE_BUILTIN_CLZ	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_HAVE_BUILTIN_CLZ /;"	d
JEMALLOC_HAVE_CLOCK_MONOTONIC	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_HAVE_CLOCK_MONOTONIC /;"	d
JEMALLOC_HAVE_CLOCK_MONOTONIC_COARSE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_HAVE_CLOCK_MONOTONIC_COARSE /;"	d
JEMALLOC_HAVE_DLSYM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_HAVE_DLSYM /;"	d
JEMALLOC_HAVE_MADVISE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_HAVE_MADVISE /;"	d
JEMALLOC_HAVE_MADVISE_HUGE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_HAVE_MADVISE_HUGE /;"	d
JEMALLOC_HAVE_PTHREAD	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_HAVE_PTHREAD /;"	d
JEMALLOC_HAVE_PTHREAD_ATFORK	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_HAVE_PTHREAD_ATFORK /;"	d
JEMALLOC_HAVE_PTHREAD_MUTEX_ADAPTIVE_NP	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_HAVE_PTHREAD_MUTEX_ADAPTIVE_NP /;"	d
JEMALLOC_HAVE_PTHREAD_SETNAME_NP	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_HAVE_PTHREAD_SETNAME_NP /;"	d
JEMALLOC_HAVE_SCHED_GETCPU	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_HAVE_SCHED_GETCPU /;"	d
JEMALLOC_HAVE_SCHED_SETAFFINITY	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_HAVE_SCHED_SETAFFINITY /;"	d
JEMALLOC_HAVE_SECURE_GETENV	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_HAVE_SECURE_GETENV /;"	d
JEMALLOC_HOOK	deps/jemalloc/include/jemalloc/internal/hooks.h	/^#define JEMALLOC_HOOK(/;"	d
JEMALLOC_H_	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define JEMALLOC_H_$/;"	d
JEMALLOC_INTERNAL_ARENA_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/arena_externs.h	/^#define JEMALLOC_INTERNAL_ARENA_EXTERNS_H$/;"	d
JEMALLOC_INTERNAL_ARENA_INLINES_A_H	deps/jemalloc/include/jemalloc/internal/arena_inlines_a.h	/^#define JEMALLOC_INTERNAL_ARENA_INLINES_A_H$/;"	d
JEMALLOC_INTERNAL_ARENA_INLINES_B_H	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^#define JEMALLOC_INTERNAL_ARENA_INLINES_B_H$/;"	d
JEMALLOC_INTERNAL_ARENA_STATS_H	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^#define JEMALLOC_INTERNAL_ARENA_STATS_H$/;"	d
JEMALLOC_INTERNAL_ARENA_STRUCTS_A_H	deps/jemalloc/include/jemalloc/internal/arena_structs_a.h	/^#define JEMALLOC_INTERNAL_ARENA_STRUCTS_A_H$/;"	d
JEMALLOC_INTERNAL_ARENA_STRUCTS_B_H	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^#define JEMALLOC_INTERNAL_ARENA_STRUCTS_B_H$/;"	d
JEMALLOC_INTERNAL_ARENA_TYPES_H	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^#define JEMALLOC_INTERNAL_ARENA_TYPES_H$/;"	d
JEMALLOC_INTERNAL_ATOMIC_C11_H	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	/^#define JEMALLOC_INTERNAL_ATOMIC_C11_H$/;"	d
JEMALLOC_INTERNAL_ATOMIC_GCC_ATOMIC_H	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^#define JEMALLOC_INTERNAL_ATOMIC_GCC_ATOMIC_H$/;"	d
JEMALLOC_INTERNAL_ATOMIC_GCC_SYNC_H	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^#define JEMALLOC_INTERNAL_ATOMIC_GCC_SYNC_H$/;"	d
JEMALLOC_INTERNAL_ATOMIC_H	deps/jemalloc/include/jemalloc/internal/atomic.h	/^#define JEMALLOC_INTERNAL_ATOMIC_H$/;"	d
JEMALLOC_INTERNAL_ATOMIC_MSVC_H	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^#define JEMALLOC_INTERNAL_ATOMIC_MSVC_H$/;"	d
JEMALLOC_INTERNAL_BACKGROUND_THREAD_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/background_thread_externs.h	/^#define JEMALLOC_INTERNAL_BACKGROUND_THREAD_EXTERNS_H$/;"	d
JEMALLOC_INTERNAL_BACKGROUND_THREAD_INLINES_H	deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h	/^#define JEMALLOC_INTERNAL_BACKGROUND_THREAD_INLINES_H$/;"	d
JEMALLOC_INTERNAL_BACKGROUND_THREAD_STRUCTS_H	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^#define JEMALLOC_INTERNAL_BACKGROUND_THREAD_STRUCTS_H$/;"	d
JEMALLOC_INTERNAL_BASE_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/base_externs.h	/^#define JEMALLOC_INTERNAL_BASE_EXTERNS_H$/;"	d
JEMALLOC_INTERNAL_BASE_INLINES_H	deps/jemalloc/include/jemalloc/internal/base_inlines.h	/^#define JEMALLOC_INTERNAL_BASE_INLINES_H$/;"	d
JEMALLOC_INTERNAL_BASE_STRUCTS_H	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^#define JEMALLOC_INTERNAL_BASE_STRUCTS_H$/;"	d
JEMALLOC_INTERNAL_BASE_TYPES_H	deps/jemalloc/include/jemalloc/internal/base_types.h	/^#define JEMALLOC_INTERNAL_BASE_TYPES_H$/;"	d
JEMALLOC_INTERNAL_BIN_H	deps/jemalloc/include/jemalloc/internal/bin.h	/^#define JEMALLOC_INTERNAL_BIN_H$/;"	d
JEMALLOC_INTERNAL_BIN_STATS_H	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^#define JEMALLOC_INTERNAL_BIN_STATS_H$/;"	d
JEMALLOC_INTERNAL_BITMAP_H	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define JEMALLOC_INTERNAL_BITMAP_H$/;"	d
JEMALLOC_INTERNAL_BIT_UTIL_H	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^#define JEMALLOC_INTERNAL_BIT_UTIL_H$/;"	d
JEMALLOC_INTERNAL_CACHE_BIN_H	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^#define JEMALLOC_INTERNAL_CACHE_BIN_H$/;"	d
JEMALLOC_INTERNAL_CKH_H	deps/jemalloc/include/jemalloc/internal/ckh.h	/^#define JEMALLOC_INTERNAL_CKH_H$/;"	d
JEMALLOC_INTERNAL_CTL_H	deps/jemalloc/include/jemalloc/internal/ctl.h	/^#define JEMALLOC_INTERNAL_CTL_H$/;"	d
JEMALLOC_INTERNAL_DECLS_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	/^#define JEMALLOC_INTERNAL_DECLS_H$/;"	d
JEMALLOC_INTERNAL_DEFS_H_	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_INTERNAL_DEFS_H_$/;"	d
JEMALLOC_INTERNAL_DEFS_H_	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h.in	/^#define JEMALLOC_INTERNAL_DEFS_H_$/;"	d	file:
JEMALLOC_INTERNAL_DIV_H	deps/jemalloc/include/jemalloc/internal/div.h	/^#define JEMALLOC_INTERNAL_DIV_H$/;"	d
JEMALLOC_INTERNAL_EMITTER_H	deps/jemalloc/include/jemalloc/internal/emitter.h	/^#define JEMALLOC_INTERNAL_EMITTER_H$/;"	d
JEMALLOC_INTERNAL_EXTENT_DSS_H	deps/jemalloc/include/jemalloc/internal/extent_dss.h	/^#define JEMALLOC_INTERNAL_EXTENT_DSS_H$/;"	d
JEMALLOC_INTERNAL_EXTENT_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/extent_externs.h	/^#define JEMALLOC_INTERNAL_EXTENT_EXTERNS_H$/;"	d
JEMALLOC_INTERNAL_EXTENT_INLINES_H	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^#define JEMALLOC_INTERNAL_EXTENT_INLINES_H$/;"	d
JEMALLOC_INTERNAL_EXTENT_MMAP_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/extent_mmap.h	/^#define JEMALLOC_INTERNAL_EXTENT_MMAP_EXTERNS_H$/;"	d
JEMALLOC_INTERNAL_EXTENT_STRUCTS_H	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define JEMALLOC_INTERNAL_EXTENT_STRUCTS_H$/;"	d
JEMALLOC_INTERNAL_EXTENT_TYPES_H	deps/jemalloc/include/jemalloc/internal/extent_types.h	/^#define JEMALLOC_INTERNAL_EXTENT_TYPES_H$/;"	d
JEMALLOC_INTERNAL_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_externs.h	/^#define JEMALLOC_INTERNAL_EXTERNS_H$/;"	d
JEMALLOC_INTERNAL_FFS	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_INTERNAL_FFS /;"	d
JEMALLOC_INTERNAL_FFSL	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_INTERNAL_FFSL /;"	d
JEMALLOC_INTERNAL_FFSLL	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_INTERNAL_FFSLL /;"	d
JEMALLOC_INTERNAL_HASH_H	deps/jemalloc/include/jemalloc/internal/hash.h	/^#define JEMALLOC_INTERNAL_HASH_H$/;"	d
JEMALLOC_INTERNAL_HOOKS_H	deps/jemalloc/include/jemalloc/internal/hooks.h	/^#define JEMALLOC_INTERNAL_HOOKS_H$/;"	d
JEMALLOC_INTERNAL_INCLUDES_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_includes.h	/^#define JEMALLOC_INTERNAL_INCLUDES_H$/;"	d
JEMALLOC_INTERNAL_INLINES_A_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^#define JEMALLOC_INTERNAL_INLINES_A_H$/;"	d
JEMALLOC_INTERNAL_INLINES_B_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_b.h	/^#define JEMALLOC_INTERNAL_INLINES_B_H$/;"	d
JEMALLOC_INTERNAL_INLINES_C_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^#define JEMALLOC_INTERNAL_INLINES_C_H$/;"	d
JEMALLOC_INTERNAL_LARGE_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/large_externs.h	/^#define JEMALLOC_INTERNAL_LARGE_EXTERNS_H$/;"	d
JEMALLOC_INTERNAL_LOG_H	deps/jemalloc/include/jemalloc/internal/log.h	/^#define JEMALLOC_INTERNAL_LOG_H$/;"	d
JEMALLOC_INTERNAL_MACROS_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#define JEMALLOC_INTERNAL_MACROS_H$/;"	d
JEMALLOC_INTERNAL_MALLOC_IO_H	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^#define JEMALLOC_INTERNAL_MALLOC_IO_H$/;"	d
JEMALLOC_INTERNAL_MUTEX_H	deps/jemalloc/include/jemalloc/internal/mutex.h	/^#define JEMALLOC_INTERNAL_MUTEX_H$/;"	d
JEMALLOC_INTERNAL_MUTEX_POOL_H	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^#define JEMALLOC_INTERNAL_MUTEX_POOL_H$/;"	d
JEMALLOC_INTERNAL_MUTEX_PROF_H	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^#define JEMALLOC_INTERNAL_MUTEX_PROF_H$/;"	d
JEMALLOC_INTERNAL_NSTIME_H	deps/jemalloc/include/jemalloc/internal/nstime.h	/^#define JEMALLOC_INTERNAL_NSTIME_H$/;"	d
JEMALLOC_INTERNAL_PAGES_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/pages.h	/^#define JEMALLOC_INTERNAL_PAGES_EXTERNS_H$/;"	d
JEMALLOC_INTERNAL_PRNG_H	deps/jemalloc/include/jemalloc/internal/prng.h	/^#define JEMALLOC_INTERNAL_PRNG_H$/;"	d
JEMALLOC_INTERNAL_PROF_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/prof_externs.h	/^#define JEMALLOC_INTERNAL_PROF_EXTERNS_H$/;"	d
JEMALLOC_INTERNAL_PROF_INLINES_A_H	deps/jemalloc/include/jemalloc/internal/prof_inlines_a.h	/^#define JEMALLOC_INTERNAL_PROF_INLINES_A_H$/;"	d
JEMALLOC_INTERNAL_PROF_INLINES_B_H	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^#define JEMALLOC_INTERNAL_PROF_INLINES_B_H$/;"	d
JEMALLOC_INTERNAL_PROF_STRUCTS_H	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^#define JEMALLOC_INTERNAL_PROF_STRUCTS_H$/;"	d
JEMALLOC_INTERNAL_PROF_TYPES_H	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^#define JEMALLOC_INTERNAL_PROF_TYPES_H$/;"	d
JEMALLOC_INTERNAL_QL_H	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define JEMALLOC_INTERNAL_QL_H$/;"	d
JEMALLOC_INTERNAL_QR_H	deps/jemalloc/include/jemalloc/internal/qr.h	/^#define JEMALLOC_INTERNAL_QR_H$/;"	d
JEMALLOC_INTERNAL_RTREE_CTX_H	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^#define JEMALLOC_INTERNAL_RTREE_CTX_H$/;"	d
JEMALLOC_INTERNAL_RTREE_H	deps/jemalloc/include/jemalloc/internal/rtree.h	/^#define JEMALLOC_INTERNAL_RTREE_H$/;"	d
JEMALLOC_INTERNAL_SIZE_CLASSES_H	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define JEMALLOC_INTERNAL_SIZE_CLASSES_H$/;"	d
JEMALLOC_INTERNAL_SIZE_H	deps/jemalloc/include/jemalloc/internal/sz.h	/^#define JEMALLOC_INTERNAL_SIZE_H$/;"	d
JEMALLOC_INTERNAL_SMOOTHSTEP_H	deps/jemalloc/include/jemalloc/internal/smoothstep.h	/^#define JEMALLOC_INTERNAL_SMOOTHSTEP_H$/;"	d
JEMALLOC_INTERNAL_SPIN_H	deps/jemalloc/include/jemalloc/internal/spin.h	/^#define JEMALLOC_INTERNAL_SPIN_H$/;"	d
JEMALLOC_INTERNAL_STATS_H	deps/jemalloc/include/jemalloc/internal/stats.h	/^#define JEMALLOC_INTERNAL_STATS_H$/;"	d
JEMALLOC_INTERNAL_TCACHE_EXTERNS_H	deps/jemalloc/include/jemalloc/internal/tcache_externs.h	/^#define JEMALLOC_INTERNAL_TCACHE_EXTERNS_H$/;"	d
JEMALLOC_INTERNAL_TCACHE_INLINES_H	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^#define JEMALLOC_INTERNAL_TCACHE_INLINES_H$/;"	d
JEMALLOC_INTERNAL_TCACHE_STRUCTS_H	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^#define JEMALLOC_INTERNAL_TCACHE_STRUCTS_H$/;"	d
JEMALLOC_INTERNAL_TCACHE_TYPES_H	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^#define JEMALLOC_INTERNAL_TCACHE_TYPES_H$/;"	d
JEMALLOC_INTERNAL_TICKER_H	deps/jemalloc/include/jemalloc/internal/ticker.h	/^#define JEMALLOC_INTERNAL_TICKER_H$/;"	d
JEMALLOC_INTERNAL_TSD_GENERIC_H	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^#define JEMALLOC_INTERNAL_TSD_GENERIC_H$/;"	d
JEMALLOC_INTERNAL_TSD_H	deps/jemalloc/include/jemalloc/internal/tsd.h	/^#define JEMALLOC_INTERNAL_TSD_H$/;"	d
JEMALLOC_INTERNAL_TSD_MALLOC_THREAD_CLEANUP_H	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^#define JEMALLOC_INTERNAL_TSD_MALLOC_THREAD_CLEANUP_H$/;"	d
JEMALLOC_INTERNAL_TSD_TLS_H	deps/jemalloc/include/jemalloc/internal/tsd_tls.h	/^#define JEMALLOC_INTERNAL_TSD_TLS_H$/;"	d
JEMALLOC_INTERNAL_TSD_TYPES_H	deps/jemalloc/include/jemalloc/internal/tsd_types.h	/^#define JEMALLOC_INTERNAL_TSD_TYPES_H$/;"	d
JEMALLOC_INTERNAL_TSD_WIN_H	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^#define JEMALLOC_INTERNAL_TSD_WIN_H$/;"	d
JEMALLOC_INTERNAL_TYPES_H	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define JEMALLOC_INTERNAL_TYPES_H$/;"	d
JEMALLOC_INTERNAL_UNREACHABLE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_INTERNAL_UNREACHABLE /;"	d
JEMALLOC_INTERNAL_UTIL_H	deps/jemalloc/include/jemalloc/internal/util.h	/^#define JEMALLOC_INTERNAL_UTIL_H$/;"	d
JEMALLOC_INTERNAL_WITNESS_H	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define JEMALLOC_INTERNAL_WITNESS_H$/;"	d
JEMALLOC_JET	deps/jemalloc/test/include/test/jemalloc_test.h	/^#  define JEMALLOC_JET$/;"	d
JEMALLOC_JET	deps/jemalloc/test/include/test/jemalloc_test.h.in	/^#  define JEMALLOC_JET$/;"	d	file:
JEMALLOC_LARGE_C_	deps/jemalloc/src/large.c	/^#define JEMALLOC_LARGE_C_$/;"	d	file:
JEMALLOC_LDFLAGS	deps/Makefile	/^JEMALLOC_LDFLAGS= $(LDFLAGS)$/;"	m
JEMALLOC_LOG_BUFSIZE	deps/jemalloc/include/jemalloc/internal/log.h	/^#define JEMALLOC_LOG_BUFSIZE /;"	d
JEMALLOC_LOG_VAR_BUFSIZE	deps/jemalloc/include/jemalloc/internal/log.h	/^#  define JEMALLOC_LOG_VAR_BUFSIZE /;"	d
JEMALLOC_MADVISE_DONTDUMP	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_MADVISE_DONTDUMP /;"	d
JEMALLOC_MADV_FREE	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^#  define JEMALLOC_MADV_FREE /;"	d
JEMALLOC_MADV_FREE	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^#  define JEMALLOC_MADV_FREE /;"	d	file:
JEMALLOC_MALLOC_IO_C_	deps/jemalloc/src/malloc_io.c	/^#define JEMALLOC_MALLOC_IO_C_$/;"	d	file:
JEMALLOC_MANGLE	deps/jemalloc/test/include/test/jemalloc_test.h	/^#  define JEMALLOC_MANGLE$/;"	d
JEMALLOC_MANGLE	deps/jemalloc/test/include/test/jemalloc_test.h.in	/^#  define JEMALLOC_MANGLE$/;"	d	file:
JEMALLOC_MAPS_COALESCE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_MAPS_COALESCE /;"	d
JEMALLOC_MUTEX_C_	deps/jemalloc/src/mutex.c	/^#define JEMALLOC_MUTEX_C_$/;"	d	file:
JEMALLOC_MUTEX_POOL_C_	deps/jemalloc/src/mutex_pool.c	/^#define JEMALLOC_MUTEX_POOL_C_$/;"	d	file:
JEMALLOC_N	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^#  define JEMALLOC_N(/;"	d
JEMALLOC_N	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^#  define JEMALLOC_N(/;"	d	file:
JEMALLOC_NOINLINE	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define JEMALLOC_NOINLINE /;"	d
JEMALLOC_NOINLINE	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define JEMALLOC_NOINLINE /;"	d
JEMALLOC_NOINLINE	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define JEMALLOC_NOINLINE$/;"	d
JEMALLOC_NOINLINE	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define JEMALLOC_NOINLINE /;"	d	file:
JEMALLOC_NOINLINE	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define JEMALLOC_NOINLINE$/;"	d	file:
JEMALLOC_NOTHROW	deps/jemalloc/include/jemalloc/jemalloc.h	/^#    define JEMALLOC_NOTHROW /;"	d
JEMALLOC_NOTHROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#    define JEMALLOC_NOTHROW /;"	d
JEMALLOC_NOTHROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#    define JEMALLOC_NOTHROW$/;"	d
JEMALLOC_NOTHROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define JEMALLOC_NOTHROW /;"	d
JEMALLOC_NOTHROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define JEMALLOC_NOTHROW$/;"	d
JEMALLOC_NOTHROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#    define JEMALLOC_NOTHROW /;"	d	file:
JEMALLOC_NOTHROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#    define JEMALLOC_NOTHROW$/;"	d	file:
JEMALLOC_NOTHROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define JEMALLOC_NOTHROW /;"	d	file:
JEMALLOC_NOTHROW	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define JEMALLOC_NOTHROW$/;"	d	file:
JEMALLOC_NO_DEMANGLE	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^#define JEMALLOC_NO_DEMANGLE$/;"	d
JEMALLOC_NO_DEMANGLE	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^#define JEMALLOC_NO_DEMANGLE$/;"	d	file:
JEMALLOC_NO_DEMANGLE	deps/jemalloc/include/jemalloc/jemalloc.h	/^#    define JEMALLOC_NO_DEMANGLE$/;"	d
JEMALLOC_NO_DEMANGLE	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#    define JEMALLOC_NO_DEMANGLE$/;"	d
JEMALLOC_NO_DEMANGLE	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#    define JEMALLOC_NO_DEMANGLE$/;"	d
JEMALLOC_NO_RENAME	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^#  define JEMALLOC_NO_RENAME$/;"	d
JEMALLOC_NO_RENAME	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^#  define JEMALLOC_NO_RENAME$/;"	d	file:
JEMALLOC_OVERRIDE_MEMALIGN	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define JEMALLOC_OVERRIDE_MEMALIGN$/;"	d
JEMALLOC_OVERRIDE_MEMALIGN	deps/jemalloc/include/jemalloc/jemalloc_defs.h	/^#define JEMALLOC_OVERRIDE_MEMALIGN /;"	d
JEMALLOC_OVERRIDE_VALLOC	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define JEMALLOC_OVERRIDE_VALLOC$/;"	d
JEMALLOC_OVERRIDE_VALLOC	deps/jemalloc/include/jemalloc/jemalloc_defs.h	/^#define JEMALLOC_OVERRIDE_VALLOC /;"	d
JEMALLOC_PAGES_C_	deps/jemalloc/src/pages.c	/^#define JEMALLOC_PAGES_C_$/;"	d	file:
JEMALLOC_PERCPU_ARENA	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^#define JEMALLOC_PERCPU_ARENA$/;"	d
JEMALLOC_PERCPU_ARENA	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^#define JEMALLOC_PERCPU_ARENA$/;"	d	file:
JEMALLOC_PREAMBLE_H	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^#define JEMALLOC_PREAMBLE_H$/;"	d
JEMALLOC_PREAMBLE_H	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^#define JEMALLOC_PREAMBLE_H$/;"	d	file:
JEMALLOC_PREFIX	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_PREFIX /;"	d
JEMALLOC_PRIVATE_NAMESPACE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_PRIVATE_NAMESPACE /;"	d
JEMALLOC_PRNG_C_	deps/jemalloc/src/prng.c	/^#define JEMALLOC_PRNG_C_$/;"	d	file:
JEMALLOC_PROC_SYS_VM_OVERCOMMIT_MEMORY	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_PROC_SYS_VM_OVERCOMMIT_MEMORY /;"	d
JEMALLOC_PROF_C_	deps/jemalloc/src/prof.c	/^#define JEMALLOC_PROF_C_$/;"	d	file:
JEMALLOC_PTHREAD_CREATE_WRAPPER	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^#  define JEMALLOC_PTHREAD_CREATE_WRAPPER$/;"	d
JEMALLOC_PURGE_MADVISE_DONTNEED	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_PURGE_MADVISE_DONTNEED /;"	d
JEMALLOC_PURGE_MADVISE_DONTNEED_ZEROS	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_PURGE_MADVISE_DONTNEED_ZEROS /;"	d
JEMALLOC_PURGE_MADVISE_FREE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_PURGE_MADVISE_FREE /;"	d
JEMALLOC_RESTRICT_RETURN	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define JEMALLOC_RESTRICT_RETURN /;"	d
JEMALLOC_RESTRICT_RETURN	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define JEMALLOC_RESTRICT_RETURN /;"	d
JEMALLOC_RESTRICT_RETURN	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define JEMALLOC_RESTRICT_RETURN$/;"	d
JEMALLOC_RESTRICT_RETURN	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define JEMALLOC_RESTRICT_RETURN /;"	d	file:
JEMALLOC_RESTRICT_RETURN	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define JEMALLOC_RESTRICT_RETURN$/;"	d	file:
JEMALLOC_RETAIN	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_RETAIN /;"	d
JEMALLOC_RTREE_C_	deps/jemalloc/src/rtree.c	/^#define JEMALLOC_RTREE_C_$/;"	d	file:
JEMALLOC_SECTION	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define JEMALLOC_SECTION(/;"	d
JEMALLOC_SECTION	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define JEMALLOC_SECTION(/;"	d
JEMALLOC_SECTION	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define JEMALLOC_SECTION(/;"	d	file:
JEMALLOC_STATS	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_STATS /;"	d
JEMALLOC_STATS_C_	deps/jemalloc/src/stats.c	/^#define JEMALLOC_STATS_C_$/;"	d	file:
JEMALLOC_STRERROR_R_RETURNS_CHAR_WITH_GNU_SOURCE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_STRERROR_R_RETURNS_CHAR_WITH_GNU_SOURCE /;"	d
JEMALLOC_TCACHE_C_	deps/jemalloc/src/tcache.c	/^#define JEMALLOC_TCACHE_C_$/;"	d	file:
JEMALLOC_THREADED_INIT	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_THREADED_INIT /;"	d
JEMALLOC_TICKER_C_	deps/jemalloc/src/ticker.c	/^#define JEMALLOC_TICKER_C_$/;"	d	file:
JEMALLOC_TLS	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_TLS /;"	d
JEMALLOC_TLS_MODEL	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_TLS_MODEL /;"	d
JEMALLOC_TSD_C_	deps/jemalloc/src/tsd.c	/^#define JEMALLOC_TSD_C_$/;"	d	file:
JEMALLOC_USABLE_SIZE_CONST	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define JEMALLOC_USABLE_SIZE_CONST$/;"	d
JEMALLOC_USABLE_SIZE_CONST	deps/jemalloc/include/jemalloc/jemalloc_defs.h	/^#define JEMALLOC_USABLE_SIZE_CONST /;"	d
JEMALLOC_USE_CXX_THROW	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define JEMALLOC_USE_CXX_THROW$/;"	d
JEMALLOC_USE_CXX_THROW	deps/jemalloc/include/jemalloc/jemalloc_defs.h	/^#define JEMALLOC_USE_CXX_THROW /;"	d
JEMALLOC_USE_SYSCALL	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define JEMALLOC_USE_SYSCALL /;"	d
JEMALLOC_VA_ARGS_HEAD	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#define JEMALLOC_VA_ARGS_HEAD(/;"	d
JEMALLOC_VA_ARGS_TAIL	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#define JEMALLOC_VA_ARGS_TAIL(/;"	d
JEMALLOC_VERSION	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define JEMALLOC_VERSION /;"	d
JEMALLOC_VERSION	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#define JEMALLOC_VERSION /;"	d
JEMALLOC_VERSION	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#define JEMALLOC_VERSION /;"	d	file:
JEMALLOC_VERSION_BUGFIX	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define JEMALLOC_VERSION_BUGFIX /;"	d
JEMALLOC_VERSION_BUGFIX	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#define JEMALLOC_VERSION_BUGFIX /;"	d
JEMALLOC_VERSION_BUGFIX	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#define JEMALLOC_VERSION_BUGFIX /;"	d	file:
JEMALLOC_VERSION_GID	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define JEMALLOC_VERSION_GID /;"	d
JEMALLOC_VERSION_GID	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#define JEMALLOC_VERSION_GID /;"	d
JEMALLOC_VERSION_GID	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#define JEMALLOC_VERSION_GID /;"	d	file:
JEMALLOC_VERSION_MAJOR	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define JEMALLOC_VERSION_MAJOR /;"	d
JEMALLOC_VERSION_MAJOR	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#define JEMALLOC_VERSION_MAJOR /;"	d
JEMALLOC_VERSION_MAJOR	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#define JEMALLOC_VERSION_MAJOR /;"	d	file:
JEMALLOC_VERSION_MINOR	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define JEMALLOC_VERSION_MINOR /;"	d
JEMALLOC_VERSION_MINOR	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#define JEMALLOC_VERSION_MINOR /;"	d
JEMALLOC_VERSION_MINOR	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#define JEMALLOC_VERSION_MINOR /;"	d	file:
JEMALLOC_VERSION_NREV	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define JEMALLOC_VERSION_NREV /;"	d
JEMALLOC_VERSION_NREV	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#define JEMALLOC_VERSION_NREV /;"	d
JEMALLOC_VERSION_NREV	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#define JEMALLOC_VERSION_NREV /;"	d	file:
JEMALLOC_WITNESS_C_	deps/jemalloc/src/witness.c	/^#define JEMALLOC_WITNESS_C_$/;"	d	file:
JET_MUTABLE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#  define JET_MUTABLE /;"	d
JET_MUTABLE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#  define JET_MUTABLE$/;"	d
KB	src/switchrealloc.h	/^#define KB /;"	d
KBx	deps/lua/src/lvm.c	/^#define KBx(/;"	d	file:
KEYWEAK	deps/lua/src/lgc.c	/^#define KEYWEAK /;"	d	file:
KEYWEAKBIT	deps/lua/src/lgc.h	/^#define KEYWEAKBIT	/;"	d
KEY_ACTION	deps/linenoise/linenoise.c	/^enum KEY_ACTION{$/;"	g	file:
KEY_COUNT	deps/hiredis/examples/example-push.c	/^#define KEY_COUNT /;"	d	file:
KEY_HOOK	deps/lua/src/ldblib.c	/^static const char KEY_HOOK = 'h';$/;"	v	typeref:typename:const char	file:
KEY_NULL	deps/linenoise/linenoise.c	/^	KEY_NULL = 0,	    \/* NULL *\/$/;"	e	enum:KEY_ACTION	file:
KEY_SIZE	deps/jemalloc/test/unit/hash.c	/^#define KEY_SIZE	/;"	d	file:
KQD	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#define KQD(/;"	d
KQU	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#define KQU(/;"	d
KSMAX	deps/jemalloc/test/unit/malloc_io.c	/^#define KSMAX(/;"	d	file:
KUMAX	deps/jemalloc/test/unit/malloc_io.c	/^#define KUMAX(/;"	d	file:
KZD	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#define KZD(/;"	d
KZU	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#define KZU(/;"	d
KeySpace_NotificationGeneric	tests/modules/keyspace_events.c	/^static int KeySpace_NotificationGeneric(RedisModuleCtx *ctx, int type, const char *event, RedisM/;"	f	typeref:typename:int	file:
KeySpace_NotificationLoaded	tests/modules/keyspace_events.c	/^static int KeySpace_NotificationLoaded(RedisModuleCtx *ctx, int type, const char *event, RedisMo/;"	f	typeref:typename:int	file:
KeySpace_NotificationModule	tests/modules/keyspace_events.c	/^static int KeySpace_NotificationModule(RedisModuleCtx *ctx, int type, const char *event, RedisMo/;"	f	typeref:typename:int	file:
Keyspace	src/modules/hellodict.c	/^static RedisModuleDict *Keyspace;$/;"	v	typeref:typename:RedisModuleDict *	file:
L	deps/lua/src/lauxlib.h	/^  lua_State *L;$/;"	m	struct:luaL_Buffer	typeref:typename:lua_State *
L	deps/lua/src/ldump.c	/^ lua_State* L;$/;"	m	struct:__anon1dacebdb0108	typeref:typename:lua_State *	file:
L	deps/lua/src/llex.h	/^  struct lua_State *L;$/;"	m	struct:LexState	typeref:struct:lua_State *
L	deps/lua/src/lparser.h	/^  struct lua_State *L;  \/* copy of the Lua state *\/$/;"	m	struct:FuncState	typeref:struct:lua_State *
L	deps/lua/src/lstrlib.c	/^  lua_State *L;$/;"	m	struct:MatchState	typeref:typename:lua_State *	file:
L	deps/lua/src/lundump.c	/^ lua_State* L;$/;"	m	struct:__anonbd9d9e9e0108	typeref:typename:lua_State *	file:
L	deps/lua/src/lzio.h	/^  lua_State *L;			\/* Lua state (for reader) *\/$/;"	m	struct:Zio	typeref:typename:lua_State *
LARGE_MAXCLASS	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define LARGE_MAXCLASS	/;"	d
LARGE_MINCLASS	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define LARGE_MINCLASS	/;"	d
LAST_TAG	deps/lua/src/lobject.h	/^#define LAST_TAG	/;"	d
LATENCY_DIST_DEFAULT_INTERVAL	src/redis-cli.c	/^#define LATENCY_DIST_DEFAULT_INTERVAL /;"	d	file:
LATENCY_GRAPH_COLS	src/latency.c	/^#define LATENCY_GRAPH_COLS /;"	d	file:
LATENCY_HISTORY_DEFAULT_INTERVAL	src/redis-cli.c	/^#define LATENCY_HISTORY_DEFAULT_INTERVAL /;"	d	file:
LATENCY_SAMPLE_RATE	src/redis-cli.c	/^#define LATENCY_SAMPLE_RATE /;"	d	file:
LATENCY_TS_LEN	src/latency.h	/^#define LATENCY_TS_LEN /;"	d
LAZYFREE_THRESHOLD	src/lazyfree.c	/^#define LAZYFREE_THRESHOLD /;"	d	file:
LCS	src/t_string.c	/^    #define LCS(/;"	d	file:
LClosure	deps/lua/src/lobject.h	/^typedef struct LClosure {$/;"	s
LClosure	deps/lua/src/lobject.h	/^} LClosure;$/;"	t	typeref:struct:LClosure
LDB_BREAKPOINTS_MAX	src/scripting.c	/^#define LDB_BREAKPOINTS_MAX /;"	d	file:
LDB_MAX_LEN_DEFAULT	src/scripting.c	/^#define LDB_MAX_LEN_DEFAULT /;"	d	file:
LDB_MAX_VALUES_DEPTH	src/scripting.c	/^#define LDB_MAX_VALUES_DEPTH /;"	d	file:
LDFLAGS	deps/jemalloc/Makefile	/^LDFLAGS := $/;"	m
LDFLAGS	deps/jemalloc/Makefile.in	/^LDFLAGS := @LDFLAGS@$/;"	m
LDTARGET	deps/jemalloc/Makefile	/^LDTARGET = -o $@$/;"	m
LDTARGET	deps/jemalloc/Makefile.in	/^LDTARGET = @LDTARGET@$/;"	m
LD_STR_AUTO	src/util.h	/^    LD_STR_AUTO,     \/* %.17Lg *\/$/;"	e	enum:__anon7e97ef900103
LD_STR_HEX	src/util.h	/^    LD_STR_HEX       \/* %La *\/$/;"	e	enum:__anon7e97ef900103
LD_STR_HUMAN	src/util.h	/^    LD_STR_HUMAN,    \/* %.17Lf + Trimming of trailing zeros *\/$/;"	e	enum:__anon7e97ef900103
LEVELS1	deps/lua/src/ldblib.c	/^#define LEVELS1	/;"	d	file:
LEVELS2	deps/lua/src/ldblib.c	/^#define LEVELS2	/;"	d	file:
LFIELDS_PER_FLUSH	deps/lua/src/lopcodes.h	/^#define LFIELDS_PER_FLUSH	/;"	d
LFUDecrAndReturn	src/evict.c	/^unsigned long LFUDecrAndReturn(robj *o) {$/;"	f	typeref:typename:unsigned long
LFUGetTimeInMinutes	src/evict.c	/^unsigned long LFUGetTimeInMinutes(void) {$/;"	f	typeref:typename:unsigned long
LFULogIncr	src/evict.c	/^uint8_t LFULogIncr(uint8_t counter) {$/;"	f	typeref:typename:uint8_t
LFUTimeElapsed	src/evict.c	/^unsigned long LFUTimeElapsed(unsigned long ldt) {$/;"	f	typeref:typename:unsigned long
LFU_INIT_VAL	src/server.h	/^#define LFU_INIT_VAL /;"	d
LG	deps/lua/src/lstate.c	/^typedef struct LG {$/;"	s	file:
LG	deps/lua/src/lstate.c	/^} LG;$/;"	t	typeref:struct:LG	file:
LG_BITMAP_GROUP_NBITS	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define LG_BITMAP_GROUP_NBITS	/;"	d
LG_BITMAP_MAXBITS	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#  define LG_BITMAP_MAXBITS	/;"	d
LG_CACHELINE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define LG_CACHELINE	/;"	d
LG_CEIL_NSIZES	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define LG_CEIL_NSIZES	/;"	d
LG_CKH_BUCKET_CELLS	deps/jemalloc/include/jemalloc/internal/ckh.h	/^#define LG_CKH_BUCKET_CELLS /;"	d
LG_EXTENT_MAX_ACTIVE_FIT_DEFAULT	deps/jemalloc/include/jemalloc/internal/extent_types.h	/^#define LG_EXTENT_MAX_ACTIVE_FIT_DEFAULT /;"	d
LG_HUGEPAGE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define LG_HUGEPAGE /;"	d
LG_LARGE_MINCLASS	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define LG_LARGE_MINCLASS	/;"	d
LG_PAGE	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define LG_PAGE /;"	d
LG_PROF_INTERVAL_DEFAULT	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^#define LG_PROF_INTERVAL_DEFAULT	/;"	d
LG_PROF_SAMPLE_DEFAULT	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^#define LG_PROF_SAMPLE_DEFAULT	/;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define LG_QUANTUM /;"	d
LG_QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#    define LG_QUANTUM	/;"	d
LG_SIZEOF_BITMAP	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^#define LG_SIZEOF_BITMAP	/;"	d
LG_SIZEOF_INT	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define LG_SIZEOF_INT /;"	d
LG_SIZEOF_INTMAX_T	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define LG_SIZEOF_INTMAX_T /;"	d
LG_SIZEOF_LONG	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define LG_SIZEOF_LONG /;"	d
LG_SIZEOF_LONG_LONG	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define LG_SIZEOF_LONG_LONG /;"	d
LG_SIZEOF_PTR	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define LG_SIZEOF_PTR /;"	d
LG_SIZEOF_PTR	deps/jemalloc/include/jemalloc/jemalloc_defs.h	/^#define LG_SIZEOF_PTR /;"	d
LG_SIZEOF_PTR_WIN	deps/jemalloc/include/jemalloc/jemalloc.h	/^#    define LG_SIZEOF_PTR_WIN /;"	d
LG_SIZEOF_PTR_WIN	deps/jemalloc/include/jemalloc/jemalloc_defs.h	/^#    define LG_SIZEOF_PTR_WIN /;"	d
LG_SIZEOF_PTR_WIN	deps/jemalloc/include/jemalloc/jemalloc_defs.h.in	/^#    define LG_SIZEOF_PTR_WIN /;"	d	file:
LG_SIZE_CLASS_GROUP	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define LG_SIZE_CLASS_GROUP	/;"	d
LG_SLAB_MAXREGS	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^#define LG_SLAB_MAXREGS	/;"	d
LG_TCACHE_MAXCLASS_DEFAULT	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^#define LG_TCACHE_MAXCLASS_DEFAULT	/;"	d
LG_TINY_MAXCLASS	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define LG_TINY_MAXCLASS	/;"	d
LG_TINY_MIN	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define LG_TINY_MIN	/;"	d
LG_VADDR	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	/^#      define LG_VADDR /;"	d
LG_VADDR	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_defs.h	/^#define LG_VADDR /;"	d
LHS_assign	deps/lua/src/lparser.c	/^struct LHS_assign {$/;"	s	file:
LIB	deps/lua/etc/Makefile	/^LIB= $(TOP)\/src$/;"	m
LIBCRYPTO_LIBS	src/Makefile	/^	LIBCRYPTO_LIBS=$(shell $(PKG_CONFIG) --libs libcrypto)$/;"	m
LIBCRYPTO_LIBS	src/Makefile	/^	LIBCRYPTO_LIBS=-lcrypto$/;"	m
LIBCRYPTO_PKGCONFIG	src/Makefile	/^	LIBCRYPTO_PKGCONFIG := $(shell $(PKG_CONFIG) --exists libcrypto && echo $$?)$/;"	m
LIBDIR	deps/jemalloc/Makefile	/^LIBDIR := $(DESTDIR)\/usr\/local\/lib$/;"	m
LIBDIR	deps/jemalloc/Makefile.in	/^LIBDIR := $(DESTDIR)@LIBDIR@$/;"	m
LIBJEMALLOC	deps/jemalloc/Makefile	/^LIBJEMALLOC := $(LIBPREFIX)jemalloc$(install_suffix)$/;"	m
LIBJEMALLOC	deps/jemalloc/Makefile.in	/^LIBJEMALLOC := $(LIBPREFIX)jemalloc$(install_suffix)$/;"	m
LIBNAME	deps/hiredis/Makefile	/^LIBNAME=libhiredis$/;"	m
LIBPREFIX	deps/jemalloc/Makefile	/^LIBPREFIX := lib$/;"	m
LIBPREFIX	deps/jemalloc/Makefile.in	/^LIBPREFIX := @libprefix@$/;"	m
LIBPREFIX	deps/lua/src/loadlib.c	/^#define LIBPREFIX	/;"	d	file:
LIBRARY_PATH	deps/hiredis/Makefile	/^LIBRARY_PATH?=lib$/;"	m
LIBS	deps/jemalloc/Makefile	/^LIBS := -lm -lstdc++ -lpthread -ldl$/;"	m
LIBS	deps/jemalloc/Makefile.in	/^LIBS := @LIBS@$/;"	m
LIBS	deps/lua/src/Makefile	/^LIBS= -lm $(MYLIBS)$/;"	m
LIBS	tests/modules/Makefile	/^    LIBS = -lc$/;"	m
LIBSSL_LIBS	src/Makefile	/^	LIBSSL_LIBS=$(shell $(PKG_CONFIG) --libs libssl)$/;"	m
LIBSSL_LIBS	src/Makefile	/^	LIBSSL_LIBS=-lssl$/;"	m
LIBSSL_PKGCONFIG	src/Makefile	/^	LIBSSL_PKGCONFIG := $(shell $(PKG_CONFIG) --exists libssl && echo $$?)$/;"	m
LIBSYSTEMD_LIBS	src/Makefile	/^	LIBSYSTEMD_LIBS=$(shell $(PKG_CONFIG) --libs libsystemd)$/;"	m
LIBSYSTEMD_LIBS	src/Makefile	/^LIBSYSTEMD_LIBS=-lsystemd$/;"	m
LIBSYSTEMD_PKGCONFIG	src/Makefile	/^	LIBSYSTEMD_PKGCONFIG := $(shell $(PKG_CONFIG) --exists libsystemd && echo $$?)$/;"	m
LIB_FAIL	deps/lua/src/loadlib.c	/^#define LIB_FAIL	/;"	d	file:
LIB_O	deps/lua/src/Makefile	/^LIB_O=	lauxlib.o lbaselib.o ldblib.o liolib.o lmathlib.o loslib.o ltablib.o \\$/;"	m
LIMIT	deps/lua/src/lauxlib.c	/^#define LIMIT	/;"	d	file:
LIMIT	src/defrag.c	/^#define LIMIT(/;"	d	file:
LIMIT_PENDING_QUERYBUF	src/server.h	/^#define LIMIT_PENDING_QUERYBUF /;"	d
LINENOISE_DEFAULT_HISTORY_MAX_LEN	deps/linenoise/linenoise.c	/^#define LINENOISE_DEFAULT_HISTORY_MAX_LEN /;"	d	file:
LINENOISE_HISTORY_NEXT	deps/linenoise/linenoise.c	/^#define LINENOISE_HISTORY_NEXT /;"	d	file:
LINENOISE_HISTORY_PREV	deps/linenoise/linenoise.c	/^#define LINENOISE_HISTORY_PREV /;"	d	file:
LINENOISE_MAX_LINE	deps/linenoise/linenoise.c	/^#define LINENOISE_MAX_LINE /;"	d	file:
LINKCOLOR	deps/Makefile	/^LINKCOLOR="\\033[34;1m"$/;"	m
LINKCOLOR	src/Makefile	/^LINKCOLOR="\\033[34;1m"$/;"	m
LISTPACK_ALLOC_H	src/listpack_malloc.h	/^#define LISTPACK_ALLOC_H$/;"	d
LIST_HEAD	src/server.h	/^#define LIST_HEAD /;"	d
LIST_MAX_ITEM_SIZE	src/t_list.c	/^#define LIST_MAX_ITEM_SIZE /;"	d	file:
LIST_SIZE	tests/modules/blockonkeys.c	/^#define LIST_SIZE /;"	d	file:
LIST_TAIL	src/server.h	/^#define LIST_TAIL /;"	d
LITTLE	deps/lua/src/lua_struct.c	/^#define LITTLE	/;"	d	file:
LITTLE_ENDIAN	src/config.h	/^#define	LITTLE_ENDIAN	/;"	d
LITTLE_ENDIAN	src/config.h	/^#define LITTLE_ENDIAN /;"	d
LJEMALLOC	deps/jemalloc/Makefile	/^LJEMALLOC := $(objroot)lib\/$(LIBJEMALLOC).$(IMPORTLIB)$/;"	m
LJEMALLOC	deps/jemalloc/Makefile	/^LJEMALLOC := -Wl,--whole-archive -L$(objroot)lib -l$(LIBJEMALLOC) -Wl,--no-whole-archive$/;"	m
LJEMALLOC	deps/jemalloc/Makefile.in	/^LJEMALLOC := $(objroot)lib\/$(LIBJEMALLOC).$(IMPORTLIB)$/;"	m
LJEMALLOC	deps/jemalloc/Makefile.in	/^LJEMALLOC := -Wl,--whole-archive -L$(objroot)lib -l$(LIBJEMALLOC) -Wl,--no-whole-archive$/;"	m
LL_DEBUG	src/server.h	/^#define LL_DEBUG /;"	d
LL_NOTICE	src/server.h	/^#define LL_NOTICE /;"	d
LL_RAW	src/server.h	/^#define LL_RAW /;"	d
LL_VERBOSE	src/server.h	/^#define LL_VERBOSE /;"	d
LL_WARNING	src/server.h	/^#define LL_WARNING /;"	d
LM	deps/jemalloc/Makefile	/^LM := -lm$/;"	m
LM	deps/jemalloc/Makefile.in	/^LM := @LM@$/;"	m
LM	src/mt19937-64.c	/^#define LM /;"	d	file:
LOADBUF_SIZE	src/config.c	/^#define LOADBUF_SIZE /;"	d	file:
LOCK_PROF_DATA_INITIALIZER	deps/jemalloc/include/jemalloc/internal/mutex.h	/^#define LOCK_PROF_DATA_INITIALIZER	/;"	d
LOG	deps/jemalloc/include/jemalloc/internal/log.h	/^#define LOG(/;"	d
LOG_COLOR_BOLD	src/redis-cli.c	/^#define LOG_COLOR_BOLD /;"	d	file:
LOG_COLOR_GREEN	src/redis-cli.c	/^#define LOG_COLOR_GREEN /;"	d	file:
LOG_COLOR_RED	src/redis-cli.c	/^#define LOG_COLOR_RED /;"	d	file:
LOG_COLOR_RESET	src/redis-cli.c	/^#define LOG_COLOR_RESET /;"	d	file:
LOG_COLOR_YELLOW	src/redis-cli.c	/^#define LOG_COLOR_YELLOW /;"	d	file:
LOG_ENABLED	deps/jemalloc/include/jemalloc/internal/log.h	/^#define LOG_ENABLED /;"	d
LOG_INITIALIZED_NOT_ENABLED	deps/jemalloc/include/jemalloc/internal/log.h	/^#define LOG_INITIALIZED_NOT_ENABLED /;"	d
LOG_MAX_LEN	src/server.h	/^#define LOG_MAX_LEN /;"	d
LOG_NOT_INITIALIZED	deps/jemalloc/include/jemalloc/internal/log.h	/^#define LOG_NOT_INITIALIZED /;"	d
LOG_VAR_INIT	deps/jemalloc/include/jemalloc/internal/log.h	/^#define LOG_VAR_INIT(/;"	d
LONG	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define LONG	/;"	d
LONG_CEILING	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define LONG_CEILING(/;"	d
LONG_MASK	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define LONG_MASK	/;"	d
LONG_STR_SIZE	src/server.h	/^#define LONG_STR_SIZE /;"	d
LOOKUP_MAXCLASS	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define LOOKUP_MAXCLASS	/;"	d
LOOKUP_NONE	src/server.h	/^#define LOOKUP_NONE /;"	d
LOOKUP_NONOTIFY	src/server.h	/^#define LOOKUP_NONOTIFY /;"	d
LOOKUP_NOTOUCH	src/server.h	/^#define LOOKUP_NOTOUCH /;"	d
LOW	src/rand.c	/^#define LOW(/;"	d	file:
LP_AFTER	src/listpack.h	/^#define LP_AFTER /;"	d
LP_BEFORE	src/listpack.h	/^#define LP_BEFORE /;"	d
LP_ENCODING_12BIT_STR	src/listpack.c	/^#define LP_ENCODING_12BIT_STR /;"	d	file:
LP_ENCODING_12BIT_STR_LEN	src/listpack.c	/^#define LP_ENCODING_12BIT_STR_LEN(/;"	d	file:
LP_ENCODING_12BIT_STR_MASK	src/listpack.c	/^#define LP_ENCODING_12BIT_STR_MASK /;"	d	file:
LP_ENCODING_13BIT_INT	src/listpack.c	/^#define LP_ENCODING_13BIT_INT /;"	d	file:
LP_ENCODING_13BIT_INT_MASK	src/listpack.c	/^#define LP_ENCODING_13BIT_INT_MASK /;"	d	file:
LP_ENCODING_16BIT_INT	src/listpack.c	/^#define LP_ENCODING_16BIT_INT /;"	d	file:
LP_ENCODING_16BIT_INT_MASK	src/listpack.c	/^#define LP_ENCODING_16BIT_INT_MASK /;"	d	file:
LP_ENCODING_24BIT_INT	src/listpack.c	/^#define LP_ENCODING_24BIT_INT /;"	d	file:
LP_ENCODING_24BIT_INT_MASK	src/listpack.c	/^#define LP_ENCODING_24BIT_INT_MASK /;"	d	file:
LP_ENCODING_32BIT_INT	src/listpack.c	/^#define LP_ENCODING_32BIT_INT /;"	d	file:
LP_ENCODING_32BIT_INT_MASK	src/listpack.c	/^#define LP_ENCODING_32BIT_INT_MASK /;"	d	file:
LP_ENCODING_32BIT_STR	src/listpack.c	/^#define LP_ENCODING_32BIT_STR /;"	d	file:
LP_ENCODING_32BIT_STR_LEN	src/listpack.c	/^#define LP_ENCODING_32BIT_STR_LEN(/;"	d	file:
LP_ENCODING_32BIT_STR_MASK	src/listpack.c	/^#define LP_ENCODING_32BIT_STR_MASK /;"	d	file:
LP_ENCODING_64BIT_INT	src/listpack.c	/^#define LP_ENCODING_64BIT_INT /;"	d	file:
LP_ENCODING_64BIT_INT_MASK	src/listpack.c	/^#define LP_ENCODING_64BIT_INT_MASK /;"	d	file:
LP_ENCODING_6BIT_STR	src/listpack.c	/^#define LP_ENCODING_6BIT_STR /;"	d	file:
LP_ENCODING_6BIT_STR_LEN	src/listpack.c	/^#define LP_ENCODING_6BIT_STR_LEN(/;"	d	file:
LP_ENCODING_6BIT_STR_MASK	src/listpack.c	/^#define LP_ENCODING_6BIT_STR_MASK /;"	d	file:
LP_ENCODING_7BIT_UINT	src/listpack.c	/^#define LP_ENCODING_7BIT_UINT /;"	d	file:
LP_ENCODING_7BIT_UINT_MASK	src/listpack.c	/^#define LP_ENCODING_7BIT_UINT_MASK /;"	d	file:
LP_ENCODING_INT	src/listpack.c	/^#define LP_ENCODING_INT /;"	d	file:
LP_ENCODING_IS_12BIT_STR	src/listpack.c	/^#define LP_ENCODING_IS_12BIT_STR(/;"	d	file:
LP_ENCODING_IS_13BIT_INT	src/listpack.c	/^#define LP_ENCODING_IS_13BIT_INT(/;"	d	file:
LP_ENCODING_IS_16BIT_INT	src/listpack.c	/^#define LP_ENCODING_IS_16BIT_INT(/;"	d	file:
LP_ENCODING_IS_24BIT_INT	src/listpack.c	/^#define LP_ENCODING_IS_24BIT_INT(/;"	d	file:
LP_ENCODING_IS_32BIT_INT	src/listpack.c	/^#define LP_ENCODING_IS_32BIT_INT(/;"	d	file:
LP_ENCODING_IS_32BIT_STR	src/listpack.c	/^#define LP_ENCODING_IS_32BIT_STR(/;"	d	file:
LP_ENCODING_IS_64BIT_INT	src/listpack.c	/^#define LP_ENCODING_IS_64BIT_INT(/;"	d	file:
LP_ENCODING_IS_6BIT_STR	src/listpack.c	/^#define LP_ENCODING_IS_6BIT_STR(/;"	d	file:
LP_ENCODING_IS_7BIT_UINT	src/listpack.c	/^#define LP_ENCODING_IS_7BIT_UINT(/;"	d	file:
LP_ENCODING_STRING	src/listpack.c	/^#define LP_ENCODING_STRING /;"	d	file:
LP_EOF	src/listpack.c	/^#define LP_EOF /;"	d	file:
LP_HDR_NUMELE_UNKNOWN	src/listpack.c	/^#define LP_HDR_NUMELE_UNKNOWN /;"	d	file:
LP_HDR_SIZE	src/listpack.c	/^#define LP_HDR_SIZE /;"	d	file:
LP_INTBUF_SIZE	src/listpack.h	/^#define LP_INTBUF_SIZE /;"	d
LP_MAX_BACKLEN_SIZE	src/listpack.c	/^#define LP_MAX_BACKLEN_SIZE /;"	d	file:
LP_MAX_ENTRY_BACKLEN	src/listpack.c	/^#define LP_MAX_ENTRY_BACKLEN /;"	d	file:
LP_MAX_INT_ENCODING_LEN	src/listpack.c	/^#define LP_MAX_INT_ENCODING_LEN /;"	d	file:
LP_REPLACE	src/listpack.h	/^#define LP_REPLACE /;"	d
LRUTestGenKey	src/redis-cli.c	/^void LRUTestGenKey(char *buf, size_t buflen) {$/;"	f	typeref:typename:void
LRUTestMode	src/redis-cli.c	/^static void LRUTestMode(void) {$/;"	f	typeref:typename:void	file:
LRU_BITS	src/server.h	/^#define LRU_BITS /;"	d
LRU_CLOCK	src/evict.c	/^unsigned int LRU_CLOCK(void) {$/;"	f	typeref:typename:unsigned int
LRU_CLOCK_MAX	src/server.h	/^#define LRU_CLOCK_MAX /;"	d
LRU_CLOCK_RESOLUTION	src/server.h	/^#define LRU_CLOCK_RESOLUTION /;"	d
LRU_CYCLE_PERIOD	src/redis-cli.c	/^#define LRU_CYCLE_PERIOD /;"	d	file:
LRU_CYCLE_PIPELINE_SIZE	src/redis-cli.c	/^#define LRU_CYCLE_PIPELINE_SIZE /;"	d	file:
LUACMSGPACK_COPYRIGHT	deps/lua/src/lua_cmsgpack.c	/^#define LUACMSGPACK_COPYRIGHT /;"	d	file:
LUACMSGPACK_DESCRIPTION	deps/lua/src/lua_cmsgpack.c	/^#define LUACMSGPACK_DESCRIPTION /;"	d	file:
LUACMSGPACK_MAX_NESTING	deps/lua/src/lua_cmsgpack.c	/^    #define LUACMSGPACK_MAX_NESTING /;"	d	file:
LUACMSGPACK_NAME	deps/lua/src/lua_cmsgpack.c	/^#define LUACMSGPACK_NAME /;"	d	file:
LUACMSGPACK_SAFE_NAME	deps/lua/src/lua_cmsgpack.c	/^#define LUACMSGPACK_SAFE_NAME /;"	d	file:
LUACMSGPACK_VERSION	deps/lua/src/lua_cmsgpack.c	/^#define LUACMSGPACK_VERSION /;"	d	file:
LUAC_FORMAT	deps/lua/src/lundump.h	/^#define LUAC_FORMAT	/;"	d
LUAC_HEADERSIZE	deps/lua/src/lundump.h	/^#define LUAC_HEADERSIZE	/;"	d
LUAC_O	deps/lua/src/Makefile	/^LUAC_O=	luac.o print.o$/;"	m
LUAC_T	deps/lua/src/Makefile	/^LUAC_T=	luac$/;"	m
LUAC_VERSION	deps/lua/src/lundump.h	/^#define LUAC_VERSION	/;"	d
LUAI_BITSINT	deps/lua/src/luaconf.h	/^#define LUAI_BITSINT	/;"	d
LUAI_DATA	deps/lua/src/luaconf.h	/^#define LUAI_DATA	/;"	d
LUAI_EXTRASPACE	deps/lua/src/luaconf.h	/^#define LUAI_EXTRASPACE	/;"	d
LUAI_FUNC	deps/lua/src/luaconf.h	/^#define LUAI_FUNC	/;"	d
LUAI_GCMUL	deps/lua/src/luaconf.h	/^#define LUAI_GCMUL	/;"	d
LUAI_GCPAUSE	deps/lua/src/luaconf.h	/^#define LUAI_GCPAUSE	/;"	d
LUAI_INT32	deps/lua/src/luaconf.h	/^#define LUAI_INT32	/;"	d
LUAI_MAXCALLS	deps/lua/src/luaconf.h	/^#define LUAI_MAXCALLS	/;"	d
LUAI_MAXCCALLS	deps/lua/src/luaconf.h	/^#define LUAI_MAXCCALLS	/;"	d
LUAI_MAXCSTACK	deps/lua/src/luaconf.h	/^#define LUAI_MAXCSTACK	/;"	d
LUAI_MAXINT32	deps/lua/src/luaconf.h	/^#define LUAI_MAXINT32	/;"	d
LUAI_MAXNUMBER2STR	deps/lua/src/luaconf.h	/^#define LUAI_MAXNUMBER2STR	/;"	d
LUAI_MAXUPVALUES	deps/lua/src/luaconf.h	/^#define LUAI_MAXUPVALUES	/;"	d
LUAI_MAXVARS	deps/lua/src/luaconf.h	/^#define LUAI_MAXVARS	/;"	d
LUAI_MEM	deps/lua/src/luaconf.h	/^#define LUAI_MEM	/;"	d
LUAI_THROW	deps/lua/src/luaconf.h	/^#define LUAI_THROW(/;"	d
LUAI_TRY	deps/lua/src/luaconf.h	/^#define LUAI_TRY(/;"	d
LUAI_UACNUMBER	deps/lua/src/luaconf.h	/^#define LUAI_UACNUMBER	/;"	d
LUAI_UINT32	deps/lua/src/luaconf.h	/^#define LUAI_UINT32	/;"	d
LUAI_UMEM	deps/lua/src/luaconf.h	/^#define LUAI_UMEM	/;"	d
LUAI_USER_ALIGNMENT_T	deps/lua/src/luaconf.h	/^#define LUAI_USER_ALIGNMENT_T	/;"	d
LUALIB_API	deps/lua/src/luaconf.h	/^#define LUALIB_API	/;"	d
LUAL_BUFFERSIZE	deps/lua/src/luaconf.h	/^#define LUAL_BUFFERSIZE	/;"	d
LUA_A	deps/lua/src/Makefile	/^LUA_A=	liblua.a$/;"	m
LUA_ANSI	deps/lua/src/luaconf.h	/^#define LUA_ANSI$/;"	d
LUA_API	deps/lua/src/luaconf.h	/^#define LUA_API	/;"	d
LUA_API	deps/lua/src/luaconf.h	/^#define LUA_API /;"	d
LUA_AUTHORS	deps/lua/src/lua.h	/^#define LUA_AUTHORS /;"	d
LUA_BITOP_VERSION	deps/lua/src/lua_bit.c	/^#define LUA_BITOP_VERSION	/;"	d	file:
LUA_CDIR	deps/lua/src/luaconf.h	/^#define LUA_CDIR	/;"	d
LUA_CFLAGS	deps/Makefile	/^	LUA_CFLAGS= -D__C99FEATURES__=1$/;"	m
LUA_CMD_OBJCACHE_MAX_LEN	src/scripting.c	/^#define LUA_CMD_OBJCACHE_MAX_LEN /;"	d	file:
LUA_CMD_OBJCACHE_SIZE	src/scripting.c	/^#define LUA_CMD_OBJCACHE_SIZE /;"	d	file:
LUA_COLIBNAME	deps/lua/src/lualib.h	/^#define LUA_COLIBNAME	/;"	d
LUA_COMPAT_GFIND	deps/lua/src/luaconf.h	/^#define LUA_COMPAT_GFIND$/;"	d
LUA_COMPAT_LSTR	deps/lua/src/luaconf.h	/^#define LUA_COMPAT_LSTR	/;"	d
LUA_COMPAT_MOD	deps/lua/src/luaconf.h	/^#define LUA_COMPAT_MOD$/;"	d
LUA_COMPAT_OPENLIB	deps/lua/src/luaconf.h	/^#define LUA_COMPAT_OPENLIB$/;"	d
LUA_COMPAT_VARARG	deps/lua/src/luaconf.h	/^#define LUA_COMPAT_VARARG$/;"	d
LUA_COPYRIGHT	deps/lua/src/lua.h	/^#define LUA_COPYRIGHT	/;"	d
LUA_CORE	deps/lua/etc/noparser.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/lapi.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/lcode.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/ldebug.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/ldo.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/ldump.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/lfunc.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/lgc.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/llex.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/lmem.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/lobject.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/lopcodes.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/lparser.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/lstate.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/lstring.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/ltable.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/ltm.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/luac.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/lundump.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/lvm.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/lzio.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	deps/lua/src/print.c	/^#define LUA_CORE$/;"	d	file:
LUA_CPATH	deps/lua/src/luaconf.h	/^#define LUA_CPATH /;"	d
LUA_CPATH_DEFAULT	deps/lua/src/luaconf.h	/^#define LUA_CPATH_DEFAULT /;"	d
LUA_DBLIBNAME	deps/lua/src/lualib.h	/^#define LUA_DBLIBNAME	/;"	d
LUA_DIRSEP	deps/lua/src/luaconf.h	/^#define LUA_DIRSEP	/;"	d
LUA_DL_DLL	deps/lua/src/luaconf.h	/^#define LUA_DL_DLL$/;"	d
LUA_DL_DLOPEN	deps/lua/src/luaconf.h	/^#define LUA_DL_DLOPEN$/;"	d
LUA_DL_DYLD	deps/lua/src/luaconf.h	/^#define LUA_DL_DYLD	/;"	d
LUA_ENVIRONINDEX	deps/lua/src/lua.h	/^#define LUA_ENVIRONINDEX	/;"	d
LUA_ERRERR	deps/lua/src/lua.h	/^#define LUA_ERRERR	/;"	d
LUA_ERRFILE	deps/lua/src/lauxlib.h	/^#define LUA_ERRFILE /;"	d
LUA_ERRMEM	deps/lua/src/lua.h	/^#define LUA_ERRMEM	/;"	d
LUA_ERRRUN	deps/lua/src/lua.h	/^#define LUA_ERRRUN	/;"	d
LUA_ERRSYNTAX	deps/lua/src/lua.h	/^#define LUA_ERRSYNTAX	/;"	d
LUA_EXECDIR	deps/lua/src/luaconf.h	/^#define LUA_EXECDIR	/;"	d
LUA_FILEHANDLE	deps/lua/src/lualib.h	/^#define LUA_FILEHANDLE	/;"	d
LUA_GCCOLLECT	deps/lua/src/lua.h	/^#define LUA_GCCOLLECT	/;"	d
LUA_GCCOUNT	deps/lua/src/lua.h	/^#define LUA_GCCOUNT	/;"	d
LUA_GCCOUNTB	deps/lua/src/lua.h	/^#define LUA_GCCOUNTB	/;"	d
LUA_GCRESTART	deps/lua/src/lua.h	/^#define LUA_GCRESTART	/;"	d
LUA_GCSETPAUSE	deps/lua/src/lua.h	/^#define LUA_GCSETPAUSE	/;"	d
LUA_GCSETSTEPMUL	deps/lua/src/lua.h	/^#define LUA_GCSETSTEPMUL	/;"	d
LUA_GCSTEP	deps/lua/src/lua.h	/^#define LUA_GCSTEP	/;"	d
LUA_GCSTOP	deps/lua/src/lua.h	/^#define LUA_GCSTOP	/;"	d
LUA_GC_CYCLE_PERIOD	src/scripting.c	/^    #define LUA_GC_CYCLE_PERIOD /;"	d	file:
LUA_GLOBALSINDEX	deps/lua/src/lua.h	/^#define LUA_GLOBALSINDEX	/;"	d
LUA_HOOKCALL	deps/lua/src/lua.h	/^#define LUA_HOOKCALL	/;"	d
LUA_HOOKCOUNT	deps/lua/src/lua.h	/^#define LUA_HOOKCOUNT	/;"	d
LUA_HOOKLINE	deps/lua/src/lua.h	/^#define LUA_HOOKLINE	/;"	d
LUA_HOOKRET	deps/lua/src/lua.h	/^#define LUA_HOOKRET	/;"	d
LUA_HOOKTAILRET	deps/lua/src/lua.h	/^#define LUA_HOOKTAILRET /;"	d
LUA_IDSIZE	deps/lua/src/luaconf.h	/^#define LUA_IDSIZE	/;"	d
LUA_IGMARK	deps/lua/src/luaconf.h	/^#define LUA_IGMARK	/;"	d
LUA_INIT	deps/lua/src/luaconf.h	/^#define LUA_INIT	/;"	d
LUA_INTEGER	deps/lua/src/luaconf.h	/^#define LUA_INTEGER	/;"	d
LUA_INTFRMLEN	deps/lua/src/luaconf.h	/^#define LUA_INTFRMLEN	/;"	d
LUA_INTFRM_T	deps/lua/src/luaconf.h	/^#define LUA_INTFRM_T	/;"	d
LUA_IOLIBNAME	deps/lua/src/lualib.h	/^#define LUA_IOLIBNAME	/;"	d
LUA_LDIR	deps/lua/src/luaconf.h	/^#define LUA_LDIR	/;"	d
LUA_LIB	deps/lua/src/lauxlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	deps/lua/src/lbaselib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	deps/lua/src/ldblib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	deps/lua/src/linit.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	deps/lua/src/liolib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	deps/lua/src/lmathlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	deps/lua/src/loadlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	deps/lua/src/loslib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	deps/lua/src/lstrlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	deps/lua/src/ltablib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	deps/lua/src/lua_bit.c	/^#define LUA_LIB$/;"	d	file:
LUA_LOADLIBNAME	deps/lua/src/lualib.h	/^#define LUA_LOADLIBNAME	/;"	d
LUA_MASKCALL	deps/lua/src/lua.h	/^#define LUA_MASKCALL	/;"	d
LUA_MASKCOUNT	deps/lua/src/lua.h	/^#define LUA_MASKCOUNT	/;"	d
LUA_MASKLINE	deps/lua/src/lua.h	/^#define LUA_MASKLINE	/;"	d
LUA_MASKRET	deps/lua/src/lua.h	/^#define LUA_MASKRET	/;"	d
LUA_MATHLIBNAME	deps/lua/src/lualib.h	/^#define LUA_MATHLIBNAME	/;"	d
LUA_MAXCAPTURES	deps/lua/src/luaconf.h	/^#define LUA_MAXCAPTURES	/;"	d
LUA_MAXINPUT	deps/lua/src/luaconf.h	/^#define LUA_MAXINPUT	/;"	d
LUA_MINBUFFER	deps/lua/src/llimits.h	/^#define LUA_MINBUFFER	/;"	d
LUA_MINSTACK	deps/lua/src/lua.h	/^#define LUA_MINSTACK	/;"	d
LUA_MULTRET	deps/lua/src/lua.h	/^#define LUA_MULTRET	/;"	d
LUA_NOREF	deps/lua/src/lauxlib.h	/^#define LUA_NOREF /;"	d
LUA_NUMBER	deps/lua/src/luaconf.h	/^#define LUA_NUMBER	/;"	d
LUA_NUMBER_DOUBLE	deps/lua/src/luaconf.h	/^#define LUA_NUMBER_DOUBLE$/;"	d
LUA_NUMBER_FMT	deps/lua/src/luaconf.h	/^#define LUA_NUMBER_FMT	/;"	d
LUA_NUMBER_SCAN	deps/lua/src/luaconf.h	/^#define LUA_NUMBER_SCAN	/;"	d
LUA_O	deps/lua/src/Makefile	/^LUA_O=	lua.o$/;"	m
LUA_OFSEP	deps/lua/src/loadlib.c	/^#define LUA_OFSEP	/;"	d	file:
LUA_OSLIBNAME	deps/lua/src/lualib.h	/^#define LUA_OSLIBNAME	/;"	d
LUA_PATH	deps/lua/src/luaconf.h	/^#define LUA_PATH /;"	d
LUA_PATHSEP	deps/lua/src/luaconf.h	/^#define LUA_PATHSEP	/;"	d
LUA_PATH_DEFAULT	deps/lua/src/luaconf.h	/^#define LUA_PATH_DEFAULT /;"	d
LUA_PATH_MARK	deps/lua/src/luaconf.h	/^#define LUA_PATH_MARK	/;"	d
LUA_POF	deps/lua/src/loadlib.c	/^#define LUA_POF	/;"	d	file:
LUA_PROGNAME	deps/lua/src/luaconf.h	/^#define LUA_PROGNAME	/;"	d
LUA_PROMPT	deps/lua/src/luaconf.h	/^#define LUA_PROMPT	/;"	d
LUA_PROMPT2	deps/lua/src/luaconf.h	/^#define LUA_PROMPT2	/;"	d
LUA_QL	deps/lua/src/luaconf.h	/^#define LUA_QL(/;"	d
LUA_QS	deps/lua/src/luaconf.h	/^#define LUA_QS	/;"	d
LUA_REFNIL	deps/lua/src/lauxlib.h	/^#define LUA_REFNIL /;"	d
LUA_REGISTRYINDEX	deps/lua/src/lua.h	/^#define LUA_REGISTRYINDEX	/;"	d
LUA_RELEASE	deps/lua/src/lua.h	/^#define LUA_RELEASE	/;"	d
LUA_ROOT	deps/lua/src/luaconf.h	/^#define LUA_ROOT	/;"	d
LUA_SIGNATURE	deps/lua/src/lua.h	/^#define	LUA_SIGNATURE	/;"	d
LUA_STRLIBNAME	deps/lua/src/lualib.h	/^#define LUA_STRLIBNAME	/;"	d
LUA_T	deps/lua/src/Makefile	/^LUA_T=	lua$/;"	m
LUA_TABLIBNAME	deps/lua/src/lualib.h	/^#define LUA_TABLIBNAME	/;"	d
LUA_TBOOLEAN	deps/lua/src/lua.h	/^#define LUA_TBOOLEAN	/;"	d
LUA_TDEADKEY	deps/lua/src/lobject.h	/^#define LUA_TDEADKEY	/;"	d
LUA_TFUNCTION	deps/lua/src/lua.h	/^#define LUA_TFUNCTION	/;"	d
LUA_TLIGHTUSERDATA	deps/lua/src/lua.h	/^#define LUA_TLIGHTUSERDATA	/;"	d
LUA_TMPNAMBUFSIZE	deps/lua/src/luaconf.h	/^#define LUA_TMPNAMBUFSIZE	/;"	d
LUA_TNIL	deps/lua/src/lua.h	/^#define LUA_TNIL	/;"	d
LUA_TNONE	deps/lua/src/lua.h	/^#define LUA_TNONE	/;"	d
LUA_TNUMBER	deps/lua/src/lua.h	/^#define LUA_TNUMBER	/;"	d
LUA_TPROTO	deps/lua/src/lobject.h	/^#define LUA_TPROTO	/;"	d
LUA_TSTRING	deps/lua/src/lua.h	/^#define LUA_TSTRING	/;"	d
LUA_TTABLE	deps/lua/src/lua.h	/^#define LUA_TTABLE	/;"	d
LUA_TTHREAD	deps/lua/src/lua.h	/^#define LUA_TTHREAD	/;"	d
LUA_TUPVAL	deps/lua/src/lobject.h	/^#define LUA_TUPVAL	/;"	d
LUA_TUSERDATA	deps/lua/src/lua.h	/^#define LUA_TUSERDATA	/;"	d
LUA_USE_DLOPEN	deps/lua/src/luaconf.h	/^#define LUA_USE_DLOPEN	/;"	d
LUA_USE_ISATTY	deps/lua/src/luaconf.h	/^#define LUA_USE_ISATTY$/;"	d
LUA_USE_MKSTEMP	deps/lua/src/luaconf.h	/^#define LUA_USE_MKSTEMP$/;"	d
LUA_USE_POPEN	deps/lua/src/luaconf.h	/^#define LUA_USE_POPEN$/;"	d
LUA_USE_POSIX	deps/lua/src/luaconf.h	/^#define LUA_USE_POSIX$/;"	d
LUA_USE_READLINE	deps/lua/src/luaconf.h	/^#define LUA_USE_READLINE	/;"	d
LUA_USE_ULONGJMP	deps/lua/src/luaconf.h	/^#define LUA_USE_ULONGJMP$/;"	d
LUA_VERSION	deps/lua/src/lua.h	/^#define LUA_VERSION	/;"	d
LUA_VERSION_NUM	deps/lua/src/lua.h	/^#define LUA_VERSION_NUM	/;"	d
LUA_WIN	deps/lua/src/luaconf.h	/^#define LUA_WIN$/;"	d
LUA_YIELD	deps/lua/src/lua.h	/^#define LUA_YIELD	/;"	d
LZFP_h	src/lzfP.h	/^#define LZFP_h$/;"	d
LZF_H	src/lzf.h	/^#define LZF_H$/;"	d
LZF_HSLOT	src/lzfP.h	/^  typedef const u8 *LZF_HSLOT;$/;"	t	typeref:typename:const u8 *
LZF_HSLOT	src/lzfP.h	/^  typedef unsigned int LZF_HSLOT;$/;"	t	typeref:typename:unsigned int
LZF_HSLOT_BIAS	src/lzfP.h	/^# define LZF_HSLOT_BIAS /;"	d
LZF_STATE	src/lzfP.h	/^typedef LZF_HSLOT LZF_STATE[1 << (HLOG)];$/;"	t	typeref:typename:LZF_HSLOT[1<<(HLOG)]
LZF_STATE_ARG	src/lzfP.h	/^# define LZF_STATE_ARG /;"	d
LZF_USE_OFFSETS	src/lzfP.h	/^#  define LZF_USE_OFFSETS /;"	d
LZF_VERSION	src/lzf.h	/^#define LZF_VERSION /;"	d
L_ESC	deps/lua/src/lstrlib.c	/^#define L_ESC	/;"	d	file:
L_Umaxalign	deps/lua/src/llimits.h	/^typedef LUAI_USER_ALIGNMENT_T L_Umaxalign;$/;"	t	typeref:typename:LUAI_USER_ALIGNMENT_T
LazyFreeLinkAofRewrite	tests/modules/test_lazyfree.c	/^void LazyFreeLinkAofRewrite(RedisModuleIO *aof, RedisModuleString *key, void *value) {$/;"	f	typeref:typename:void
LazyFreeLinkFree	tests/modules/test_lazyfree.c	/^void LazyFreeLinkFree(void *value) {$/;"	f	typeref:typename:void
LazyFreeLinkFreeEffort	tests/modules/test_lazyfree.c	/^size_t LazyFreeLinkFreeEffort(RedisModuleString *key, const void *value) {$/;"	f	typeref:typename:size_t
LazyFreeLinkInsert	tests/modules/test_lazyfree.c	/^void LazyFreeLinkInsert(struct LazyFreeLinkObject *o, int64_t ele) {$/;"	f	typeref:typename:void
LazyFreeLinkInsert_RedisCommand	tests/modules/test_lazyfree.c	/^int LazyFreeLinkInsert_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
LazyFreeLinkLen_RedisCommand	tests/modules/test_lazyfree.c	/^int LazyFreeLinkLen_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
LazyFreeLinkNode	tests/modules/test_lazyfree.c	/^struct LazyFreeLinkNode {$/;"	s	file:
LazyFreeLinkObject	tests/modules/test_lazyfree.c	/^struct LazyFreeLinkObject {$/;"	s	file:
LazyFreeLinkRdbLoad	tests/modules/test_lazyfree.c	/^void *LazyFreeLinkRdbLoad(RedisModuleIO *rdb, int encver) {$/;"	f	typeref:typename:void *
LazyFreeLinkRdbSave	tests/modules/test_lazyfree.c	/^void LazyFreeLinkRdbSave(RedisModuleIO *rdb, void *value) {$/;"	f	typeref:typename:void
LazyFreeLinkReleaseObject	tests/modules/test_lazyfree.c	/^void LazyFreeLinkReleaseObject(struct LazyFreeLinkObject *o) {$/;"	f	typeref:typename:void
LazyFreeLinkType	tests/modules/test_lazyfree.c	/^static RedisModuleType *LazyFreeLinkType;$/;"	v	typeref:typename:RedisModuleType *	file:
LazyFreeLinkUnlink	tests/modules/test_lazyfree.c	/^void LazyFreeLinkUnlink(RedisModuleString *key, const void *value) {$/;"	f	typeref:typename:void
LexState	deps/lua/src/llex.h	/^typedef struct LexState {$/;"	s
LexState	deps/lua/src/llex.h	/^} LexState;$/;"	t	typeref:struct:LexState
ListCommand_RedisCommand	src/modules/hellocluster.c	/^int ListCommand_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
LoadBlock	deps/lua/src/lundump.c	/^static void LoadBlock(LoadState* S, void* b, size_t size)$/;"	f	typeref:typename:void	file:
LoadByte	deps/lua/src/lundump.c	/^#define	LoadByte(/;"	d	file:
LoadChar	deps/lua/src/lundump.c	/^static int LoadChar(LoadState* S)$/;"	f	typeref:typename:int	file:
LoadCode	deps/lua/src/lundump.c	/^static void LoadCode(LoadState* S, Proto* f)$/;"	f	typeref:typename:void	file:
LoadConstants	deps/lua/src/lundump.c	/^static void LoadConstants(LoadState* S, Proto* f)$/;"	f	typeref:typename:void	file:
LoadDebug	deps/lua/src/lundump.c	/^static void LoadDebug(LoadState* S, Proto* f)$/;"	f	typeref:typename:void	file:
LoadF	deps/lua/src/lauxlib.c	/^typedef struct LoadF {$/;"	s	file:
LoadF	deps/lua/src/lauxlib.c	/^} LoadF;$/;"	t	typeref:struct:LoadF	file:
LoadFunction	deps/lua/src/lundump.c	/^static Proto* LoadFunction(LoadState* S, TString* p)$/;"	f	typeref:typename:Proto *	file:
LoadHeader	deps/lua/src/lundump.c	/^static void LoadHeader(LoadState* S)$/;"	f	typeref:typename:void	file:
LoadInt	deps/lua/src/lundump.c	/^static int LoadInt(LoadState* S)$/;"	f	typeref:typename:int	file:
LoadMem	deps/lua/src/lundump.c	/^#define LoadMem(/;"	d	file:
LoadNumber	deps/lua/src/lundump.c	/^static lua_Number LoadNumber(LoadState* S)$/;"	f	typeref:typename:lua_Number	file:
LoadS	deps/lua/src/lauxlib.c	/^typedef struct LoadS {$/;"	s	file:
LoadS	deps/lua/src/lauxlib.c	/^} LoadS;$/;"	t	typeref:struct:LoadS	file:
LoadState	deps/lua/src/lundump.c	/^} LoadState;$/;"	t	typeref:struct:__anonbd9d9e9e0108	file:
LoadString	deps/lua/src/lundump.c	/^static TString* LoadString(LoadState* S)$/;"	f	typeref:typename:TString *	file:
LoadVar	deps/lua/src/lundump.c	/^#define LoadVar(/;"	d	file:
LoadVector	deps/lua/src/lundump.c	/^#define LoadVector(/;"	d	file:
LocVar	deps/lua/src/lobject.h	/^typedef struct LocVar {$/;"	s
LocVar	deps/lua/src/lobject.h	/^} LocVar;$/;"	t	typeref:struct:LocVar
LogNumericEvent	tests/modules/hooks.c	/^void LogNumericEvent(RedisModuleCtx *ctx, const char* keyname, long data) {$/;"	f	typeref:typename:void
LogStringEvent	tests/modules/hooks.c	/^void LogStringEvent(RedisModuleCtx *ctx, const char* keyname, const char* data) {$/;"	f	typeref:typename:void
MADV_FREE	src/server.c	/^#define MADV_FREE /;"	d	file:
MAGIC	deps/jemalloc/test/unit/zero.c	/^#define MAGIC	/;"	d	file:
MAJ	src/sha256.c	/^#define MAJ(/;"	d	file:
MAKECOLOR	deps/Makefile	/^MAKECOLOR="\\033[32;1m"$/;"	m
MAKECOLOR	src/Makefile	/^MAKECOLOR="\\033[32;1m"$/;"	m
MAKE_INSTALL	src/Makefile	/^    define MAKE_INSTALL$/;"	m
MALLCTL_ARENAS_ALL	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define MALLCTL_ARENAS_ALL	/;"	d
MALLCTL_ARENAS_ALL	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#define MALLCTL_ARENAS_ALL	/;"	d
MALLCTL_ARENAS_ALL	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#define MALLCTL_ARENAS_ALL	/;"	d	file:
MALLCTL_ARENAS_DESTROYED	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define MALLCTL_ARENAS_DESTROYED	/;"	d
MALLCTL_ARENAS_DESTROYED	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#define MALLCTL_ARENAS_DESTROYED	/;"	d
MALLCTL_ARENAS_DESTROYED	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#define MALLCTL_ARENAS_DESTROYED	/;"	d	file:
MALLOC	src/Makefile	/^	MALLOC=jemalloc$/;"	m
MALLOC	src/Makefile	/^	MALLOC=libc$/;"	m
MALLOC	src/Makefile	/^	MALLOC=tcmalloc$/;"	m
MALLOC	src/Makefile	/^	MALLOC=tcmalloc_minimal$/;"	m
MALLOC	src/Makefile	/^MALLOC=libc$/;"	m
MALLOCX_ALIGN	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define MALLOCX_ALIGN(/;"	d
MALLOCX_ALIGN	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#  define MALLOCX_ALIGN(/;"	d
MALLOCX_ALIGN	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#  define MALLOCX_ALIGN(/;"	d	file:
MALLOCX_ALIGN_GET	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define MALLOCX_ALIGN_GET(/;"	d
MALLOCX_ALIGN_GET_SPECIFIED	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define MALLOCX_ALIGN_GET_SPECIFIED(/;"	d
MALLOCX_ARENA	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define MALLOCX_ARENA(/;"	d
MALLOCX_ARENA	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#define MALLOCX_ARENA(/;"	d
MALLOCX_ARENA	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#define MALLOCX_ARENA(/;"	d	file:
MALLOCX_ARENA_BITS	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define MALLOCX_ARENA_BITS	/;"	d
MALLOCX_ARENA_GET	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define MALLOCX_ARENA_GET(/;"	d
MALLOCX_ARENA_LIMIT	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define MALLOCX_ARENA_LIMIT	/;"	d
MALLOCX_ARENA_MASK	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define MALLOCX_ARENA_MASK /;"	d
MALLOCX_ARENA_SHIFT	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define MALLOCX_ARENA_SHIFT	/;"	d
MALLOCX_LG_ALIGN	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define MALLOCX_LG_ALIGN(/;"	d
MALLOCX_LG_ALIGN	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#define MALLOCX_LG_ALIGN(/;"	d
MALLOCX_LG_ALIGN	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#define MALLOCX_LG_ALIGN(/;"	d	file:
MALLOCX_LG_ALIGN_BITS	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define MALLOCX_LG_ALIGN_BITS	/;"	d
MALLOCX_LG_ALIGN_MASK	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define MALLOCX_LG_ALIGN_MASK	/;"	d
MALLOCX_TCACHE	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define MALLOCX_TCACHE(/;"	d
MALLOCX_TCACHE	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#define MALLOCX_TCACHE(/;"	d
MALLOCX_TCACHE	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#define MALLOCX_TCACHE(/;"	d	file:
MALLOCX_TCACHE_BITS	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define MALLOCX_TCACHE_BITS	/;"	d
MALLOCX_TCACHE_GET	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define MALLOCX_TCACHE_GET(/;"	d
MALLOCX_TCACHE_MASK	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define MALLOCX_TCACHE_MASK /;"	d
MALLOCX_TCACHE_MAX	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define MALLOCX_TCACHE_MAX	/;"	d
MALLOCX_TCACHE_NONE	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define MALLOCX_TCACHE_NONE	/;"	d
MALLOCX_TCACHE_NONE	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#define MALLOCX_TCACHE_NONE	/;"	d
MALLOCX_TCACHE_NONE	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#define MALLOCX_TCACHE_NONE	/;"	d	file:
MALLOCX_TCACHE_SHIFT	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define MALLOCX_TCACHE_SHIFT	/;"	d
MALLOCX_ZERO	deps/jemalloc/include/jemalloc/jemalloc.h	/^#define MALLOCX_ZERO	/;"	d
MALLOCX_ZERO	deps/jemalloc/include/jemalloc/jemalloc_macros.h	/^#define MALLOCX_ZERO	/;"	d
MALLOCX_ZERO	deps/jemalloc/include/jemalloc/jemalloc_macros.h.in	/^#define MALLOCX_ZERO	/;"	d	file:
MALLOCX_ZERO_GET	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define MALLOCX_ZERO_GET(/;"	d
MALLOC_CONF	deps/jemalloc/Makefile	/^MALLOC_CONF := JE_MALLOC_CONF$/;"	m
MALLOC_CONF	deps/jemalloc/Makefile.in	/^MALLOC_CONF := @JEMALLOC_CPREFIX@MALLOC_CONF$/;"	m
MALLOC_HOTLEVEL	src/Config.h	/^#define MALLOC_HOTLEVEL /;"	d
MALLOC_MIN_SIZE	src/zmalloc.c	/^#define MALLOC_MIN_SIZE(/;"	d	file:
MALLOC_MUTEX_INITIALIZER	deps/jemalloc/include/jemalloc/internal/mutex.h	/^#    define MALLOC_MUTEX_INITIALIZER	/;"	d
MALLOC_MUTEX_INITIALIZER	deps/jemalloc/include/jemalloc/internal/mutex.h	/^#  define MALLOC_MUTEX_INITIALIZER	/;"	d
MALLOC_MUTEX_INITIALIZER	deps/jemalloc/include/jemalloc/internal/mutex.h	/^#  define MALLOC_MUTEX_INITIALIZER$/;"	d
MALLOC_MUTEX_LOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	/^#    define MALLOC_MUTEX_LOCK(/;"	d
MALLOC_MUTEX_MAX_SPIN	deps/jemalloc/include/jemalloc/internal/mutex.h	/^#define MALLOC_MUTEX_MAX_SPIN /;"	d
MALLOC_MUTEX_TRYLOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	/^#    define MALLOC_MUTEX_TRYLOCK(/;"	d
MALLOC_MUTEX_TYPE	deps/jemalloc/include/jemalloc/internal/mutex.h	/^#    define MALLOC_MUTEX_TYPE /;"	d
MALLOC_MUTEX_UNLOCK	deps/jemalloc/include/jemalloc/internal/mutex.h	/^#    define MALLOC_MUTEX_UNLOCK(/;"	d
MALLOC_PRINTF_BUFSIZE	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^#define MALLOC_PRINTF_BUFSIZE	/;"	d
MALLOC_TEST_TSD	deps/jemalloc/include/jemalloc/internal/tsd.h	/^#  define MALLOC_TEST_TSD /;"	d
MALLOC_TEST_TSD	deps/jemalloc/include/jemalloc/internal/tsd.h	/^#  define MALLOC_TEST_TSD$/;"	d
MALLOC_TEST_TSD_INITIALIZER	deps/jemalloc/include/jemalloc/internal/tsd.h	/^#  define MALLOC_TEST_TSD_INITIALIZER /;"	d
MALLOC_TEST_TSD_INITIALIZER	deps/jemalloc/include/jemalloc/internal/tsd.h	/^#  define MALLOC_TEST_TSD_INITIALIZER$/;"	d
MALLOC_TSD	deps/jemalloc/include/jemalloc/internal/tsd.h	/^#define MALLOC_TSD	/;"	d
MALLOC_TSD_CLEANUPS_MAX	deps/jemalloc/include/jemalloc/internal/tsd_types.h	/^#define MALLOC_TSD_CLEANUPS_MAX	/;"	d
MALLOC_TSD_TEST_DATA_INIT	deps/jemalloc/include/jemalloc/internal/tsd.h	/^#  define MALLOC_TSD_TEST_DATA_INIT /;"	d
MAN3	deps/jemalloc/Makefile	/^MAN3 := $(objroot)doc\/jemalloc$(install_suffix).3$/;"	m
MAN3	deps/jemalloc/Makefile.in	/^MAN3 := $(objroot)doc\/jemalloc$(install_suffix).3$/;"	m
MANDIR	deps/jemalloc/Makefile	/^MANDIR := $(DESTDIR)\/usr\/local\/share\/man$/;"	m
MANDIR	deps/jemalloc/Makefile.in	/^MANDIR := $(DESTDIR)@MANDIR@$/;"	m
MAPPING_POINT	src/Config.h	/^#define MAPPING_POINT /;"	d
MASK	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^#define MASK(/;"	d
MASK	src/rand.c	/^#define MASK	/;"	d	file:
MASK0	deps/lua/src/lopcodes.h	/^#define MASK0(/;"	d
MASK1	deps/lua/src/lopcodes.h	/^#define MASK1(/;"	d
MATH_C_	deps/jemalloc/test/src/math.c	/^#define MATH_C_$/;"	d	file:
MATRIX_A	src/mt19937-64.c	/^#define MATRIX_A /;"	d	file:
MAX1	utils/hashtable/rehashing.c	/^#define MAX1 /;"	d	file:
MAX2	utils/hashtable/rehashing.c	/^#define MAX2 /;"	d	file:
MAXALIGN	deps/jemalloc/test/integration/aligned_alloc.c	/^#define MAXALIGN /;"	d	file:
MAXALIGN	deps/jemalloc/test/integration/mallocx.c	/^#define MAXALIGN /;"	d	file:
MAXALIGN	deps/jemalloc/test/integration/posix_memalign.c	/^#define MAXALIGN /;"	d	file:
MAXALIGN	deps/jemalloc/test/integration/sdallocx.c	/^#define MAXALIGN /;"	d	file:
MAXALIGN	deps/lua/src/lua_struct.c	/^#define MAXALIGN /;"	d	file:
MAXARG_A	deps/lua/src/lopcodes.h	/^#define MAXARG_A /;"	d
MAXARG_B	deps/lua/src/lopcodes.h	/^#define MAXARG_B /;"	d
MAXARG_Bx	deps/lua/src/lopcodes.h	/^#define MAXARG_Bx /;"	d
MAXARG_C	deps/lua/src/lopcodes.h	/^#define MAXARG_C /;"	d
MAXARG_sBx	deps/lua/src/lopcodes.h	/^#define MAXARG_sBx /;"	d
MAXASIZE	deps/lua/src/ltable.c	/^#define MAXASIZE	/;"	d	file:
MAXBITS	deps/lua/src/ltable.c	/^#define MAXBITS	/;"	d	file:
MAXINDEXRK	deps/lua/src/lopcodes.h	/^#define MAXINDEXRK	/;"	d
MAXINTSIZE	deps/lua/src/lua_struct.c	/^#define MAXINTSIZE	/;"	d	file:
MAXMEMORY_ALLKEYS_LFU	src/server.h	/^#define MAXMEMORY_ALLKEYS_LFU /;"	d
MAXMEMORY_ALLKEYS_LRU	src/server.h	/^#define MAXMEMORY_ALLKEYS_LRU /;"	d
MAXMEMORY_ALLKEYS_RANDOM	src/server.h	/^#define MAXMEMORY_ALLKEYS_RANDOM /;"	d
MAXMEMORY_FLAG_ALLKEYS	src/server.h	/^#define MAXMEMORY_FLAG_ALLKEYS /;"	d
MAXMEMORY_FLAG_LFU	src/server.h	/^#define MAXMEMORY_FLAG_LFU /;"	d
MAXMEMORY_FLAG_LRU	src/server.h	/^#define MAXMEMORY_FLAG_LRU /;"	d
MAXMEMORY_FLAG_NO_SHARED_INTEGERS	src/server.h	/^#define MAXMEMORY_FLAG_NO_SHARED_INTEGERS /;"	d
MAXMEMORY_NO_EVICTION	src/server.h	/^#define MAXMEMORY_NO_EVICTION /;"	d
MAXMEMORY_VOLATILE_LFU	src/server.h	/^#define MAXMEMORY_VOLATILE_LFU /;"	d
MAXMEMORY_VOLATILE_LRU	src/server.h	/^#define MAXMEMORY_VOLATILE_LRU /;"	d
MAXMEMORY_VOLATILE_RANDOM	src/server.h	/^#define MAXMEMORY_VOLATILE_RANDOM /;"	d
MAXMEMORY_VOLATILE_TTL	src/server.h	/^#define MAXMEMORY_VOLATILE_TTL /;"	d
MAXSRC	deps/lua/src/llex.c	/^#define MAXSRC /;"	d	file:
MAXSTACK	deps/lua/src/llimits.h	/^#define MAXSTACK	/;"	d
MAXSZ	deps/jemalloc/test/integration/mallocx.c	/^#define MAXSZ /;"	d	file:
MAXSZ	deps/jemalloc/test/integration/rallocx.c	/^#define MAXSZ /;"	d	file:
MAXTAGLOOP	deps/lua/src/lvm.c	/^#define MAXTAGLOOP	/;"	d	file:
MAX_ABS_ERR	deps/jemalloc/test/unit/math.c	/^#define MAX_ABS_ERR /;"	d	file:
MAX_ACCEPTS_PER_CALL	src/networking.c	/^#define MAX_ACCEPTS_PER_CALL /;"	d	file:
MAX_ALIGN	deps/jemalloc/test/integration/rallocx.c	/^#define MAX_ALIGN /;"	d	file:
MAX_ALIGN	deps/jemalloc/test/unit/hash.c	/^#define MAX_ALIGN	/;"	d	file:
MAX_BACKGROUND_THREAD_LIMIT	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^#define MAX_BACKGROUND_THREAD_LIMIT /;"	d
MAX_CLIENTS_PER_CLOCK_TICK	src/server.h	/^#define MAX_CLIENTS_PER_CLOCK_TICK /;"	d
MAX_CLUSTER_ACCEPTS_PER_CALL	src/cluster.c	/^#define MAX_CLUSTER_ACCEPTS_PER_CALL /;"	d	file:
MAX_EVENT_BATCHSZ	src/ae_evport.c	/^#define MAX_EVENT_BATCHSZ /;"	d	file:
MAX_FORMAT	deps/lua/src/lstrlib.c	/^#define MAX_FORMAT	/;"	d	file:
MAX_INT	deps/lua/src/llimits.h	/^#define MAX_INT /;"	d
MAX_ITEM	deps/lua/src/lstrlib.c	/^#define MAX_ITEM	/;"	d	file:
MAX_KEYS_BUFFER	src/server.h	/^#define MAX_KEYS_BUFFER /;"	d
MAX_LATENCY_PRECISION	src/redis-benchmark.c	/^#define MAX_LATENCY_PRECISION /;"	d	file:
MAX_LG_ALIGN	deps/jemalloc/test/integration/rallocx.c	/^#define MAX_LG_ALIGN /;"	d	file:
MAX_LIT	src/lzf_c.c	/^#define        MAX_LIT /;"	d	file:
MAX_LONG_DOUBLE_CHARS	src/util.h	/^#define MAX_LONG_DOUBLE_CHARS /;"	d
MAX_LUMEM	deps/lua/src/llimits.h	/^#define MAX_LUMEM	/;"	d
MAX_OFF	src/lzf_c.c	/^#define        MAX_OFF /;"	d	file:
MAX_RANGE	deps/jemalloc/test/unit/prng.c	/^#define MAX_RANGE	/;"	d	file:
MAX_REF	src/lzf_c.c	/^#define        MAX_REF /;"	d	file:
MAX_REL_ERR	deps/jemalloc/test/unit/math.c	/^#define MAX_REL_ERR /;"	d	file:
MAX_SIZET	deps/lua/src/llimits.h	/^#define MAX_SIZET	/;"	d
MAX_THREADS	src/redis-benchmark.c	/^#define MAX_THREADS /;"	d	file:
MAX_VALIDATE	deps/jemalloc/test/integration/rallocx.c	/^#define MAX_VALIDATE /;"	d	file:
MEMERRMSG	deps/lua/src/lmem.h	/^#define MEMERRMSG	/;"	d
MEMORY_CONFIG	src/config.c	/^#define MEMORY_CONFIG /;"	d	file:
MEMTEST_32BIT	src/memtest.c	/^#define MEMTEST_32BIT$/;"	d	file:
MEMTEST_64BIT	src/memtest.c	/^#define MEMTEST_64BIT$/;"	d	file:
MEMTEST_BACKUP_WORDS	src/memtest.c	/^#define MEMTEST_BACKUP_WORDS /;"	d	file:
MEMTEST_DECACHE_SIZE	src/memtest.c	/^#define MEMTEST_DECACHE_SIZE /;"	d	file:
MEMTEST_MAX_REGIONS	src/debug.c	/^#define MEMTEST_MAX_REGIONS /;"	d	file:
MERCATOR_MAX	src/geohash_helper.c	/^const double MERCATOR_MAX = 20037726.37;$/;"	v	typeref:typename:const double
MERCATOR_MIN	src/geohash_helper.c	/^const double MERCATOR_MIN = -20037726.37;$/;"	v	typeref:typename:const double
METADATA_THP_DEFAULT	deps/jemalloc/include/jemalloc/internal/base_types.h	/^#define METADATA_THP_DEFAULT /;"	d
MEXP	deps/jemalloc/test/include/test/SFMT-params.h	/^  #define MEXP /;"	d
MEXP	deps/jemalloc/test/include/test/jemalloc_test.h	/^#define MEXP /;"	d
MEXP	deps/jemalloc/test/include/test/jemalloc_test.h.in	/^#define MEXP /;"	d	file:
MIB_UNSIGNED	deps/jemalloc/src/ctl.c	/^#define MIB_UNSIGNED(/;"	d	file:
MIGRATE_SOCKET_CACHE_ITEMS	src/cluster.c	/^#define MIGRATE_SOCKET_CACHE_ITEMS /;"	d	file:
MIGRATE_SOCKET_CACHE_TTL	src/cluster.c	/^#define MIGRATE_SOCKET_CACHE_TTL /;"	d	file:
MILLION	deps/jemalloc/src/nstime.c	/^#define MILLION	/;"	d	file:
MINSIZEARRAY	deps/lua/src/lmem.c	/^#define MINSIZEARRAY	/;"	d	file:
MINSTRTABSIZE	deps/lua/src/llimits.h	/^#define MINSTRTABSIZE	/;"	d
MIN_COMPRESS_BYTES	src/quicklist.c	/^#define MIN_COMPRESS_BYTES /;"	d	file:
MIN_COMPRESS_IMPROVE	src/quicklist.c	/^#define MIN_COMPRESS_IMPROVE /;"	d	file:
MKDIR	deps/lua/Makefile	/^MKDIR= mkdir -p$/;"	m
MKLIB	deps/jemalloc/Makefile	/^MKLIB = $/;"	m
MKLIB	deps/jemalloc/Makefile.in	/^MKLIB = @MKLIB@$/;"	m
MM	src/mt19937-64.c	/^#define MM /;"	d	file:
MMAP_HOTLEVEL	src/Config.h	/^#define MMAP_HOTLEVEL /;"	d
MMAP_IN_SMALLSIZE	src/Config.h	/^#define MMAP_IN_SMALLSIZE /;"	d
MODIFIABLE_CONFIG	src/config.c	/^#define MODIFIABLE_CONFIG /;"	d	file:
MODULE_LOOKUP_CACHE_SIZE	src/module.c	/^#define MODULE_LOOKUP_CACHE_SIZE /;"	d	file:
MP_CUR_ERROR_BADFMT	deps/lua/src/lua_cmsgpack.c	/^#define MP_CUR_ERROR_BADFMT /;"	d	file:
MP_CUR_ERROR_EOF	deps/lua/src/lua_cmsgpack.c	/^#define MP_CUR_ERROR_EOF /;"	d	file:
MP_CUR_ERROR_NONE	deps/lua/src/lua_cmsgpack.c	/^#define MP_CUR_ERROR_NONE /;"	d	file:
MS	src/switchrealloc.h	/^#define MS /;"	d
MSGTYPE_PING	src/modules/hellocluster.c	/^#define MSGTYPE_PING /;"	d	file:
MSGTYPE_PONG	src/modules/hellocluster.c	/^#define MSGTYPE_PONG /;"	d	file:
MSK1	deps/jemalloc/test/include/test/SFMT-params11213.h	/^#define MSK1	/;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params1279.h	/^#define MSK1	/;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params132049.h	/^#define MSK1	/;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params19937.h	/^#define MSK1	/;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params216091.h	/^#define MSK1	/;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params2281.h	/^#define MSK1	/;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params4253.h	/^#define MSK1	/;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params44497.h	/^#define MSK1	/;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params607.h	/^#define MSK1	/;"	d
MSK1	deps/jemalloc/test/include/test/SFMT-params86243.h	/^#define MSK1	/;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params11213.h	/^#define MSK2	/;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params1279.h	/^#define MSK2	/;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params132049.h	/^#define MSK2	/;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params19937.h	/^#define MSK2	/;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params216091.h	/^#define MSK2	/;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params2281.h	/^#define MSK2	/;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params4253.h	/^#define MSK2	/;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params44497.h	/^#define MSK2	/;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params607.h	/^#define MSK2	/;"	d
MSK2	deps/jemalloc/test/include/test/SFMT-params86243.h	/^#define MSK2	/;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params11213.h	/^#define MSK3	/;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params1279.h	/^#define MSK3	/;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params132049.h	/^#define MSK3	/;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params19937.h	/^#define MSK3	/;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params216091.h	/^#define MSK3	/;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params2281.h	/^#define MSK3	/;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params4253.h	/^#define MSK3	/;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params44497.h	/^#define MSK3	/;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params607.h	/^#define MSK3	/;"	d
MSK3	deps/jemalloc/test/include/test/SFMT-params86243.h	/^#define MSK3	/;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params11213.h	/^#define MSK4	/;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params1279.h	/^#define MSK4	/;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params132049.h	/^#define MSK4	/;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params19937.h	/^#define MSK4	/;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params216091.h	/^#define MSK4	/;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params2281.h	/^#define MSK4	/;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params4253.h	/^#define MSK4	/;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params44497.h	/^#define MSK4	/;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params607.h	/^#define MSK4	/;"	d
MSK4	deps/jemalloc/test/include/test/SFMT-params86243.h	/^#define MSK4	/;"	d
MSVC_COMPAT_WINDOWS_EXTRA_H	deps/jemalloc/include/msvc_compat/windows_extra.h	/^#define MSVC_COMPAT_WINDOWS_EXTRA_H$/;"	d
MUL	src/rand.c	/^#define MUL(/;"	d	file:
MUTEX_CTL_STR_MAX_LENGTH	deps/jemalloc/src/stats.c	/^#define MUTEX_CTL_STR_MAX_LENGTH /;"	d	file:
MUTEX_POOL_SIZE	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^#define MUTEX_POOL_SIZE /;"	d
MUTEX_PROF_ARENA_MUTEXES	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	MUTEX_PROF_ARENA_MUTEXES$/;"	e	enum:__anonb26b3fca0203
MUTEX_PROF_ARENA_MUTEXES	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^#define MUTEX_PROF_ARENA_MUTEXES	/;"	d
MUTEX_PROF_COUNTERS	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^#define MUTEX_PROF_COUNTERS	/;"	d
MUTEX_PROF_DATA_NODE	deps/jemalloc/src/ctl.c	/^#define MUTEX_PROF_DATA_NODE(/;"	d	file:
MUTEX_PROF_GLOBAL_MUTEXES	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	MUTEX_PROF_GLOBAL_MUTEXES$/;"	e	enum:__anonb26b3fca0103
MUTEX_PROF_GLOBAL_MUTEXES	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^#define MUTEX_PROF_GLOBAL_MUTEXES	/;"	d
MUTEX_PROF_RESET	deps/jemalloc/src/ctl.c	/^#define MUTEX_PROF_RESET(/;"	d	file:
MUTEX_PROF_UINT32_COUNTERS	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^#define MUTEX_PROF_UINT32_COUNTERS	/;"	d
MUTEX_PROF_UINT64_COUNTERS	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^#define MUTEX_PROF_UINT64_COUNTERS	/;"	d
MUTEX_STATS_CTL_PROTO_GEN	deps/jemalloc/src/ctl.c	/^#define MUTEX_STATS_CTL_PROTO_GEN(/;"	d	file:
MUZZY_DECAY_MS_DEFAULT	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^#define MUZZY_DECAY_MS_DEFAULT	/;"	d
MYCFLAGS	deps/lua/etc/Makefile	/^MYCFLAGS= $/;"	m
MYCFLAGS	deps/lua/src/Makefile	/^MYCFLAGS=$/;"	m
MYLDFLAGS	deps/lua/etc/Makefile	/^MYLDFLAGS= -Wl,-E$/;"	m
MYLDFLAGS	deps/lua/src/Makefile	/^MYLDFLAGS=$/;"	m
MYLIBS	deps/lua/etc/Makefile	/^MYLIBS= -lm$/;"	m
MYLIBS	deps/lua/src/Makefile	/^MYLIBS=$/;"	m
Makefile.dep	src/Makefile	/^Makefile.dep:$/;"	t
MatchState	deps/lua/src/lstrlib.c	/^typedef struct MatchState {$/;"	s	file:
MatchState	deps/lua/src/lstrlib.c	/^} MatchState;$/;"	t	typeref:struct:MatchState	file:
Mbuffer	deps/lua/src/lzio.h	/^typedef struct Mbuffer {$/;"	s
Mbuffer	deps/lua/src/lzio.h	/^} Mbuffer;$/;"	t	typeref:struct:Mbuffer
ModuleForkDoneHandler	src/module.c	/^void ModuleForkDoneHandler(int exitcode, int bysignal) {$/;"	f	typeref:typename:void
ModuleTypeNameCharSet	src/module.c	/^const char *ModuleTypeNameCharSet =$/;"	v	typeref:typename:const char *
ModulesInHooks	src/module.c	/^unsigned long long ModulesInHooks = 0; \/* Total number of modules in hooks$/;"	v	typeref:typename:unsigned long long
MurmurHash64A	src/hyperloglog.c	/^uint64_t MurmurHash64A (const void * key, int len, unsigned int seed) {$/;"	f	typeref:typename:uint64_t
N	deps/jemalloc/test/include/test/SFMT-params.h	/^#define N /;"	d
N	src/rand.c	/^#define N	/;"	d	file:
N32	deps/jemalloc/test/include/test/SFMT-params.h	/^#define N32 /;"	d
N64	deps/jemalloc/test/include/test/SFMT-params.h	/^#define N64 /;"	d
NALLOCS_PER_THREAD	deps/jemalloc/test/unit/prof_accum.c	/^#define NALLOCS_PER_THREAD	/;"	d	file:
NALLOCS_PER_THREAD	deps/jemalloc/test/unit/prof_reset.c	/^#define NALLOCS_PER_THREAD	/;"	d	file:
NAME	deps/jemalloc/src/ctl.c	/^#define NAME(/;"	d	file:
NB	deps/jemalloc/test/unit/bitmap.c	/^#define NB(/;"	d	file:
NBAGS	deps/jemalloc/test/unit/ph.c	/^#define NBAGS /;"	d	file:
NBAGS	deps/jemalloc/test/unit/rb.c	/^#define NBAGS /;"	d	file:
NBINS	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define NBINS	/;"	d
NBITS_TAB	deps/jemalloc/test/unit/bitmap.c	/^#define NBITS_TAB /;"	d	file:
NCYCLES	deps/jemalloc/test/integration/rallocx.c	/^#define NCYCLES /;"	d	file:
NENTRIES	deps/jemalloc/test/unit/ql.c	/^#define NENTRIES /;"	d	file:
NENTRIES	deps/jemalloc/test/unit/qr.c	/^#define NENTRIES /;"	d	file:
NEPOCHS	deps/jemalloc/test/unit/retained.c	/^#define NEPOCHS	/;"	d	file:
NET_ADDR_STR_LEN	src/server.h	/^#define NET_ADDR_STR_LEN /;"	d
NET_FIRST_BIND_ADDR	src/server.h	/^#define NET_FIRST_BIND_ADDR /;"	d
NET_HOST_PORT_STR_LEN	src/server.h	/^#define NET_HOST_PORT_STR_LEN /;"	d
NET_HOST_STR_LEN	src/server.h	/^#define NET_HOST_STR_LEN /;"	d
NET_IP_STR_LEN	src/server.h	/^#define NET_IP_STR_LEN /;"	d
NET_MAX_WRITES_PER_EVENT	src/server.h	/^#define NET_MAX_WRITES_PER_EVENT /;"	d
NEXT	src/lzf_c.c	/^# define NEXT(/;"	d	file:
NINCRS	deps/jemalloc/test/unit/mtx.c	/^#define NINCRS	/;"	d	file:
NINTERVALS	deps/jemalloc/test/unit/decay.c	/^#define NINTERVALS /;"	d	file:
NITEMS	deps/jemalloc/test/unit/ckh.c	/^#define NITEMS /;"	d	file:
NITER	deps/jemalloc/test/integration/aligned_alloc.c	/^#define NITER /;"	d	file:
NITER	deps/jemalloc/test/integration/mallocx.c	/^#define NITER /;"	d	file:
NITER	deps/jemalloc/test/integration/posix_memalign.c	/^#define NITER /;"	d	file:
NITER	deps/jemalloc/test/integration/sdallocx.c	/^#define NITER /;"	d	file:
NITER	deps/jemalloc/test/unit/prof_reset.c	/^#define NITER /;"	d	file:
NLARGE	deps/jemalloc/test/unit/arena_reset.c	/^#define NLARGE	/;"	d	file:
NLBINS	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define NLBINS	/;"	d
NMSGS	deps/jemalloc/test/unit/mq.c	/^#define NMSGS	/;"	d	file:
NN	src/mt19937-64.c	/^#define NN /;"	d	file:
NNODES	deps/jemalloc/test/unit/ph.c	/^#define NNODES /;"	d	file:
NNODES	deps/jemalloc/test/unit/rb.c	/^#define NNODES /;"	d	file:
NODEPS	src/Makefile	/^NODEPS:=clean distclean$/;"	m
NODE_MAGIC	deps/jemalloc/test/unit/ph.c	/^#define NODE_MAGIC /;"	d	file:
NODE_MAGIC	deps/jemalloc/test/unit/rb.c	/^#define NODE_MAGIC /;"	d	file:
NOTIFY_ALL	src/server.h	/^#define NOTIFY_ALL /;"	d
NOTIFY_EVICTED	src/server.h	/^#define NOTIFY_EVICTED /;"	d
NOTIFY_EXPIRED	src/server.h	/^#define NOTIFY_EXPIRED /;"	d
NOTIFY_GENERIC	src/server.h	/^#define NOTIFY_GENERIC /;"	d
NOTIFY_HASH	src/server.h	/^#define NOTIFY_HASH /;"	d
NOTIFY_KEYEVENT	src/server.h	/^#define NOTIFY_KEYEVENT /;"	d
NOTIFY_KEYSPACE	src/server.h	/^#define NOTIFY_KEYSPACE /;"	d
NOTIFY_KEY_MISS	src/server.h	/^#define NOTIFY_KEY_MISS /;"	d
NOTIFY_LIST	src/server.h	/^#define NOTIFY_LIST /;"	d
NOTIFY_LOADED	src/server.h	/^#define NOTIFY_LOADED /;"	d
NOTIFY_MODULE	src/server.h	/^#define NOTIFY_MODULE /;"	d
NOTIFY_SET	src/server.h	/^#define NOTIFY_SET /;"	d
NOTIFY_STREAM	src/server.h	/^#define NOTIFY_STREAM /;"	d
NOTIFY_STRING	src/server.h	/^#define NOTIFY_STRING /;"	d
NOTIFY_ZSET	src/server.h	/^#define NOTIFY_ZSET /;"	d
NOT_REACHED	deps/jemalloc/src/background_thread.c	/^#define NOT_REACHED /;"	d	file:
NO_FAILOVER	src/server.h	/^    NO_FAILOVER = 0,        \/* No failover in progress *\/$/;"	e	enum:__anon3ef696e90203
NO_INITIALIZER	deps/jemalloc/src/jemalloc.c	/^#  define NO_INITIALIZER	/;"	d	file:
NO_JUMP	deps/lua/src/lcode.h	/^#define NO_JUMP /;"	d
NO_REG	deps/lua/src/lopcodes.h	/^#define NO_REG	/;"	d
NPS	deps/jemalloc/test/unit/decay.c	/^#define NPS /;"	d	file:
NPSIZES	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define NPSIZES	/;"	d
NREPS	deps/jemalloc/test/unit/prng.c	/^#define NREPS	/;"	d	file:
NREPS	deps/jemalloc/test/unit/ticker.c	/^#define NREPS /;"	d	file:
NRESET	deps/jemalloc/test/unit/prof_thread_name.c	/^#define NRESET	/;"	d	file:
NSENDERS	deps/jemalloc/test/unit/mq.c	/^#define NSENDERS	/;"	d	file:
NSET	deps/jemalloc/test/unit/rtree.c	/^#define NSET /;"	d	file:
NSIZES	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define NSIZES	/;"	d
NSLABS	deps/jemalloc/test/unit/pack.c	/^#define NSLABS	/;"	d	file:
NSTIME_MONOTONIC	deps/jemalloc/src/nstime.c	/^#  define NSTIME_MONOTONIC /;"	d	file:
NSTIME_SEC_MAX	deps/jemalloc/include/jemalloc/internal/nstime.h	/^#define NSTIME_SEC_MAX /;"	d
NSTIME_ZERO_INITIALIZER	deps/jemalloc/include/jemalloc/internal/nstime.h	/^#define NSTIME_ZERO_INITIALIZER /;"	d
NSZS	deps/jemalloc/test/integration/rallocx.c	/^#define NSZS /;"	d	file:
NTBINS	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define NTBINS	/;"	d
NTCACHES	deps/jemalloc/test/unit/mallctl.c	/^#define NTCACHES	/;"	d	file:
NTHREADS	deps/jemalloc/test/integration/MALLOCX_ARENA.c	/^#define NTHREADS /;"	d	file:
NTHREADS	deps/jemalloc/test/integration/thread_arena.c	/^#define NTHREADS /;"	d	file:
NTHREADS	deps/jemalloc/test/unit/mtx.c	/^#define NTHREADS	/;"	d	file:
NTHREADS	deps/jemalloc/test/unit/prof_accum.c	/^#define NTHREADS	/;"	d	file:
NTHREADS	deps/jemalloc/test/unit/prof_reset.c	/^#define NTHREADS	/;"	d	file:
NTHREADS	deps/jemalloc/test/unit/prof_thread_name.c	/^#define NTHREADS	/;"	d	file:
NTICKS	deps/jemalloc/test/unit/ticker.c	/^#define NTICKS /;"	d	file:
NUMERIC_TYPE_INT	src/config.c	/^    NUMERIC_TYPE_INT,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_LONG	src/config.c	/^    NUMERIC_TYPE_LONG,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_LONG_LONG	src/config.c	/^    NUMERIC_TYPE_LONG_LONG,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_OFF_T	src/config.c	/^    NUMERIC_TYPE_OFF_T,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_SIZE_T	src/config.c	/^    NUMERIC_TYPE_SIZE_T,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_SSIZE_T	src/config.c	/^    NUMERIC_TYPE_SSIZE_T,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_TIME_T	src/config.c	/^    NUMERIC_TYPE_TIME_T,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_UINT	src/config.c	/^    NUMERIC_TYPE_UINT,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_ULONG	src/config.c	/^    NUMERIC_TYPE_ULONG,$/;"	e	enum:numericType	file:
NUMERIC_TYPE_ULONG_LONG	src/config.c	/^    NUMERIC_TYPE_ULONG_LONG,$/;"	e	enum:numericType	file:
NUM_OPCODES	deps/lua/src/lopcodes.h	/^#define NUM_OPCODES	/;"	d
NUM_REENTRANT_ALLOCS	deps/jemalloc/test/src/test.c	/^#define NUM_REENTRANT_ALLOCS /;"	d	file:
NUM_RESERVED	deps/lua/src/llex.h	/^#define NUM_RESERVED	/;"	d
NUM_TAGS	deps/lua/src/lobject.h	/^#define NUM_TAGS	/;"	d
Node	deps/lua/src/lobject.h	/^typedef struct Node {$/;"	s
Node	deps/lua/src/lobject.h	/^} Node;$/;"	t	typeref:struct:Node
NotifyCallback	tests/modules/basics.c	/^int NotifyCallback(RedisModuleCtx *ctx, int type, const char *event,$/;"	f	typeref:typename:int
O	deps/jemalloc/Makefile	/^O := o$/;"	m
O	deps/jemalloc/Makefile.in	/^O := @o@$/;"	m
O	deps/jemalloc/include/jemalloc/internal/tsd.h	/^#define O(/;"	d
O2S_BUFSIZE	deps/jemalloc/src/malloc_io.c	/^#define O2S_BUFSIZE /;"	d	file:
OBJ	deps/hiredis/Makefile	/^OBJ=alloc.o net.o hiredis.o sds.o async.o read.o sockcompat.o$/;"	m
OBJ_COMPUTE_SIZE_DEF_SAMPLES	src/object.c	/^#define OBJ_COMPUTE_SIZE_DEF_SAMPLES /;"	d	file:
OBJ_ENCODING_EMBSTR	src/server.h	/^#define OBJ_ENCODING_EMBSTR /;"	d
OBJ_ENCODING_EMBSTR_SIZE_LIMIT	src/object.c	/^#define OBJ_ENCODING_EMBSTR_SIZE_LIMIT /;"	d	file:
OBJ_ENCODING_HT	src/server.h	/^#define OBJ_ENCODING_HT /;"	d
OBJ_ENCODING_INT	src/server.h	/^#define OBJ_ENCODING_INT /;"	d
OBJ_ENCODING_INTSET	src/server.h	/^#define OBJ_ENCODING_INTSET /;"	d
OBJ_ENCODING_LINKEDLIST	src/server.h	/^#define OBJ_ENCODING_LINKEDLIST /;"	d
OBJ_ENCODING_QUICKLIST	src/server.h	/^#define OBJ_ENCODING_QUICKLIST /;"	d
OBJ_ENCODING_RAW	src/server.h	/^#define OBJ_ENCODING_RAW /;"	d
OBJ_ENCODING_SKIPLIST	src/server.h	/^#define OBJ_ENCODING_SKIPLIST /;"	d
OBJ_ENCODING_STREAM	src/server.h	/^#define OBJ_ENCODING_STREAM /;"	d
OBJ_ENCODING_ZIPLIST	src/server.h	/^#define OBJ_ENCODING_ZIPLIST /;"	d
OBJ_ENCODING_ZIPMAP	src/server.h	/^#define OBJ_ENCODING_ZIPMAP /;"	d
OBJ_EX	src/t_string.c	/^#define OBJ_EX /;"	d	file:
OBJ_EXAT	src/t_string.c	/^#define OBJ_EXAT /;"	d	file:
OBJ_FIRST_SPECIAL_REFCOUNT	src/server.h	/^#define OBJ_FIRST_SPECIAL_REFCOUNT /;"	d
OBJ_HASH	src/server.h	/^#define OBJ_HASH /;"	d
OBJ_HASH_KEY	src/server.h	/^#define OBJ_HASH_KEY /;"	d
OBJ_HASH_VALUE	src/server.h	/^#define OBJ_HASH_VALUE /;"	d
OBJ_KEEPTTL	src/t_string.c	/^#define OBJ_KEEPTTL /;"	d	file:
OBJ_LIST	src/server.h	/^#define OBJ_LIST /;"	d
OBJ_MODULE	src/server.h	/^#define OBJ_MODULE /;"	d
OBJ_NO_FLAGS	src/t_string.c	/^#define OBJ_NO_FLAGS /;"	d	file:
OBJ_PERSIST	src/t_string.c	/^#define OBJ_PERSIST /;"	d	file:
OBJ_PX	src/t_string.c	/^#define OBJ_PX /;"	d	file:
OBJ_PXAT	src/t_string.c	/^#define OBJ_PXAT /;"	d	file:
OBJ_RING_BUF_COUNT	deps/jemalloc/test/unit/prof_reset.c	/^#define OBJ_RING_BUF_COUNT	/;"	d	file:
OBJ_SET	src/server.h	/^#define OBJ_SET /;"	d
OBJ_SET_GET	src/t_string.c	/^#define OBJ_SET_GET /;"	d	file:
OBJ_SET_NX	src/t_string.c	/^#define OBJ_SET_NX /;"	d	file:
OBJ_SET_XX	src/t_string.c	/^#define OBJ_SET_XX /;"	d	file:
OBJ_SHARED_BULKHDR_LEN	src/server.h	/^#define OBJ_SHARED_BULKHDR_LEN /;"	d
OBJ_SHARED_INTEGERS	src/server.h	/^#define OBJ_SHARED_INTEGERS /;"	d
OBJ_SHARED_REFCOUNT	src/server.h	/^#define OBJ_SHARED_REFCOUNT /;"	d
OBJ_STATIC_REFCOUNT	src/server.h	/^#define OBJ_STATIC_REFCOUNT /;"	d
OBJ_STREAM	src/server.h	/^#define OBJ_STREAM /;"	d
OBJ_STRING	src/server.h	/^#define OBJ_STRING /;"	d
OBJ_ZSET	src/server.h	/^#define OBJ_ZSET /;"	d
OFFSET	src/switchrealloc.h	/^#define OFFSET /;"	d
OOM_SCORE_ADJ_ABSOLUTE	src/server.h	/^#define OOM_SCORE_ADJ_ABSOLUTE /;"	d
OOM_SCORE_ADJ_NO	src/server.h	/^#define OOM_SCORE_ADJ_NO /;"	d
OOM_SCORE_RELATIVE	src/server.h	/^#define OOM_SCORE_RELATIVE /;"	d
OP	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^#define OP(/;"	d
OP	deps/jemalloc/src/ctl.c	/^#define OP(/;"	d	file:
OP	deps/jemalloc/src/stats.c	/^#define OP(/;"	d	file:
OPENSSL_CFLAGS	src/Makefile	/^	OPENSSL_CFLAGS=-I$(OPENSSL_PREFIX)\/include$/;"	m
OPENSSL_LDFLAGS	src/Makefile	/^	OPENSSL_LDFLAGS=-L$(OPENSSL_PREFIX)\/lib$/;"	m
OPENSSL_PREFIX	deps/hiredis/Makefile	/^  OPENSSL_PREFIX?=\/usr\/local\/opt\/openssl$/;"	m
OPENSSL_PREFIX	src/Makefile	/^	OPENSSL_PREFIX?=\/opt\/homebrew\/opt\/openssl$/;"	m
OPENSSL_PREFIX	src/Makefile	/^	OPENSSL_PREFIX?=\/usr\/local\/opt\/openssl$/;"	m
OPR_ADD	deps/lua/src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_AND	deps/lua/src/lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_CONCAT	deps/lua/src/lcode.h	/^  OPR_CONCAT,$/;"	e	enum:BinOpr
OPR_DIV	deps/lua/src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_EQ	deps/lua/src/lcode.h	/^  OPR_NE, OPR_EQ,$/;"	e	enum:BinOpr
OPR_GE	deps/lua/src/lcode.h	/^  OPR_LT, OPR_LE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_GT	deps/lua/src/lcode.h	/^  OPR_LT, OPR_LE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_LE	deps/lua/src/lcode.h	/^  OPR_LT, OPR_LE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_LEN	deps/lua/src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_LT	deps/lua/src/lcode.h	/^  OPR_LT, OPR_LE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_MINUS	deps/lua/src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_MOD	deps/lua/src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_MUL	deps/lua/src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_NE	deps/lua/src/lcode.h	/^  OPR_NE, OPR_EQ,$/;"	e	enum:BinOpr
OPR_NOBINOPR	deps/lua/src/lcode.h	/^  OPR_NOBINOPR$/;"	e	enum:BinOpr
OPR_NOT	deps/lua/src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_NOUNOPR	deps/lua/src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_OR	deps/lua/src/lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_POW	deps/lua/src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_SUB	deps/lua/src/lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPT	deps/hdr_histogram/Makefile	/^OPT= -Os$/;"	m
OPT	deps/linenoise/Makefile	/^OPT= -Os$/;"	m
OPT	src/Makefile	/^OPT=$(OPTIMIZATION)$/;"	m
OPTIMIZATION	deps/hiredis/Makefile	/^OPTIMIZATION?=-O3$/;"	m
OPTIMIZATION	src/Makefile	/^OPTIMIZATION?=-O2$/;"	m
OPTION	deps/jemalloc/include/jemalloc/internal/stats.h	/^#define OPTION(/;"	d
OPTION	deps/jemalloc/src/jemalloc.c	/^#define OPTION(/;"	d	file:
OPTION	deps/jemalloc/src/stats.c	/^#define OPTION(/;"	d	file:
OPT_WRITE	deps/jemalloc/src/stats.c	/^#define OPT_WRITE(/;"	d	file:
OPT_WRITE_BOOL	deps/jemalloc/src/stats.c	/^#define OPT_WRITE_BOOL(/;"	d	file:
OPT_WRITE_BOOL_MUTABLE	deps/jemalloc/src/stats.c	/^#define OPT_WRITE_BOOL_MUTABLE(/;"	d	file:
OPT_WRITE_CHAR_P	deps/jemalloc/src/stats.c	/^#define OPT_WRITE_CHAR_P(/;"	d	file:
OPT_WRITE_MUTABLE	deps/jemalloc/src/stats.c	/^    altname)								\\$/;"	d	file:
OPT_WRITE_SSIZE_T	deps/jemalloc/src/stats.c	/^#define OPT_WRITE_SSIZE_T(/;"	d	file:
OPT_WRITE_SSIZE_T_MUTABLE	deps/jemalloc/src/stats.c	/^#define OPT_WRITE_SSIZE_T_MUTABLE(/;"	d	file:
OPT_WRITE_UNSIGNED	deps/jemalloc/src/stats.c	/^#define OPT_WRITE_UNSIGNED(/;"	d	file:
OPVAL_DIRTY_LL	src/t_zset.c	/^#define OPVAL_DIRTY_LL /;"	d	file:
OPVAL_DIRTY_SDS	src/t_zset.c	/^#define OPVAL_DIRTY_SDS /;"	d	file:
OPVAL_VALID_LL	src/t_zset.c	/^#define OPVAL_VALID_LL /;"	d	file:
OP_ADD	deps/lua/src/lopcodes.h	/^OP_ADD,\/*	A B C	R(A) := RK(B) + RK(C)				*\/$/;"	e	enum:__anon33497ff70103
OP_CALL	deps/lua/src/lopcodes.h	/^OP_CALL,\/*	A B C	R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) *\/$/;"	e	enum:__anon33497ff70103
OP_CLOSE	deps/lua/src/lopcodes.h	/^OP_CLOSE,\/*	A 	close all variables in the stack up to (>=) R(A)*\/$/;"	e	enum:__anon33497ff70103
OP_CLOSURE	deps/lua/src/lopcodes.h	/^OP_CLOSURE,\/*	A Bx	R(A) := closure(KPROTO[Bx], R(A), ... ,R(A+n))	*\/$/;"	e	enum:__anon33497ff70103
OP_CONCAT	deps/lua/src/lopcodes.h	/^OP_CONCAT,\/*	A B C	R(A) := R(B).. ... ..R(C)			*\/$/;"	e	enum:__anon33497ff70103
OP_DIV	deps/lua/src/lopcodes.h	/^OP_DIV,\/*	A B C	R(A) := RK(B) \/ RK(C)				*\/$/;"	e	enum:__anon33497ff70103
OP_EQ	deps/lua/src/lopcodes.h	/^OP_EQ,\/*	A B C	if ((RK(B) == RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon33497ff70103
OP_FORLOOP	deps/lua/src/lopcodes.h	/^OP_FORLOOP,\/*	A sBx	R(A)+=R(A+2);$/;"	e	enum:__anon33497ff70103
OP_FORPREP	deps/lua/src/lopcodes.h	/^OP_FORPREP,\/*	A sBx	R(A)-=R(A+2); pc+=sBx				*\/$/;"	e	enum:__anon33497ff70103
OP_GETGLOBAL	deps/lua/src/lopcodes.h	/^OP_GETGLOBAL,\/*	A Bx	R(A) := Gbl[Kst(Bx)]				*\/$/;"	e	enum:__anon33497ff70103
OP_GETTABLE	deps/lua/src/lopcodes.h	/^OP_GETTABLE,\/*	A B C	R(A) := R(B)[RK(C)]				*\/$/;"	e	enum:__anon33497ff70103
OP_GETUPVAL	deps/lua/src/lopcodes.h	/^OP_GETUPVAL,\/*	A B	R(A) := UpValue[B]				*\/$/;"	e	enum:__anon33497ff70103
OP_JMP	deps/lua/src/lopcodes.h	/^OP_JMP,\/*	sBx	pc+=sBx					*\/$/;"	e	enum:__anon33497ff70103
OP_LE	deps/lua/src/lopcodes.h	/^OP_LE,\/*	A B C	if ((RK(B) <= RK(C)) ~= A) then pc++  		*\/$/;"	e	enum:__anon33497ff70103
OP_LEN	deps/lua/src/lopcodes.h	/^OP_LEN,\/*	A B	R(A) := length of R(B)				*\/$/;"	e	enum:__anon33497ff70103
OP_LOADBOOL	deps/lua/src/lopcodes.h	/^OP_LOADBOOL,\/*	A B C	R(A) := (Bool)B; if (C) pc++			*\/$/;"	e	enum:__anon33497ff70103
OP_LOADK	deps/lua/src/lopcodes.h	/^OP_LOADK,\/*	A Bx	R(A) := Kst(Bx)					*\/$/;"	e	enum:__anon33497ff70103
OP_LOADNIL	deps/lua/src/lopcodes.h	/^OP_LOADNIL,\/*	A B	R(A) := ... := R(B) := nil			*\/$/;"	e	enum:__anon33497ff70103
OP_LT	deps/lua/src/lopcodes.h	/^OP_LT,\/*	A B C	if ((RK(B) <  RK(C)) ~= A) then pc++  		*\/$/;"	e	enum:__anon33497ff70103
OP_MOD	deps/lua/src/lopcodes.h	/^OP_MOD,\/*	A B C	R(A) := RK(B) % RK(C)				*\/$/;"	e	enum:__anon33497ff70103
OP_MOVE	deps/lua/src/lopcodes.h	/^OP_MOVE,\/*	A B	R(A) := R(B)					*\/$/;"	e	enum:__anon33497ff70103
OP_MUL	deps/lua/src/lopcodes.h	/^OP_MUL,\/*	A B C	R(A) := RK(B) * RK(C)				*\/$/;"	e	enum:__anon33497ff70103
OP_NEWTABLE	deps/lua/src/lopcodes.h	/^OP_NEWTABLE,\/*	A B C	R(A) := {} (size = B,C)				*\/$/;"	e	enum:__anon33497ff70103
OP_NOT	deps/lua/src/lopcodes.h	/^OP_NOT,\/*	A B	R(A) := not R(B)				*\/$/;"	e	enum:__anon33497ff70103
OP_POW	deps/lua/src/lopcodes.h	/^OP_POW,\/*	A B C	R(A) := RK(B) ^ RK(C)				*\/$/;"	e	enum:__anon33497ff70103
OP_RETURN	deps/lua/src/lopcodes.h	/^OP_RETURN,\/*	A B	return R(A), ... ,R(A+B-2)	(see note)	*\/$/;"	e	enum:__anon33497ff70103
OP_SELF	deps/lua/src/lopcodes.h	/^OP_SELF,\/*	A B C	R(A+1) := R(B); R(A) := R(B)[RK(C)]		*\/$/;"	e	enum:__anon33497ff70103
OP_SETGLOBAL	deps/lua/src/lopcodes.h	/^OP_SETGLOBAL,\/*	A Bx	Gbl[Kst(Bx)] := R(A)				*\/$/;"	e	enum:__anon33497ff70103
OP_SETLIST	deps/lua/src/lopcodes.h	/^OP_SETLIST,\/*	A B C	R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B	*\/$/;"	e	enum:__anon33497ff70103
OP_SETTABLE	deps/lua/src/lopcodes.h	/^OP_SETTABLE,\/*	A B C	R(A)[RK(B)] := RK(C)				*\/$/;"	e	enum:__anon33497ff70103
OP_SETUPVAL	deps/lua/src/lopcodes.h	/^OP_SETUPVAL,\/*	A B	UpValue[B] := R(A)				*\/$/;"	e	enum:__anon33497ff70103
OP_SUB	deps/lua/src/lopcodes.h	/^OP_SUB,\/*	A B C	R(A) := RK(B) - RK(C)				*\/$/;"	e	enum:__anon33497ff70103
OP_TAILCALL	deps/lua/src/lopcodes.h	/^OP_TAILCALL,\/*	A B C	return R(A)(R(A+1), ... ,R(A+B-1))		*\/$/;"	e	enum:__anon33497ff70103
OP_TEST	deps/lua/src/lopcodes.h	/^OP_TEST,\/*	A C	if not (R(A) <=> C) then pc++			*\/ $/;"	e	enum:__anon33497ff70103
OP_TESTSET	deps/lua/src/lopcodes.h	/^OP_TESTSET,\/*	A B C	if (R(B) <=> C) then R(A) := R(B) else pc++	*\/ $/;"	e	enum:__anon33497ff70103
OP_TFORLOOP	deps/lua/src/lopcodes.h	/^OP_TFORLOOP,\/*	A C	R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2)); $/;"	e	enum:__anon33497ff70103
OP_UNM	deps/lua/src/lopcodes.h	/^OP_UNM,\/*	A B	R(A) := -R(B)					*\/$/;"	e	enum:__anon33497ff70103
OP_VARARG	deps/lua/src/lopcodes.h	/^OP_VARARG\/*	A B	R(A), R(A+1), ..., R(A+B-1) = vararg		*\/$/;"	e	enum:__anon33497ff70103
OUTPUT	deps/lua/src/luac.c	/^#define	OUTPUT	/;"	d	file:
OUTPUT_CSV	src/redis-cli.c	/^#define OUTPUT_CSV /;"	d	file:
OUTPUT_RAW	src/redis-cli.c	/^#define OUTPUT_RAW /;"	d	file:
OUTPUT_STANDARD	src/redis-cli.c	/^#define OUTPUT_STANDARD /;"	d	file:
OUT_OF_RANGE	src/listpack.c	/^#define OUT_OF_RANGE(/;"	d	file:
OUT_OF_RANGE	src/ziplist.c	/^#define OUT_OF_RANGE(/;"	d	file:
OUT_OF_RANGE	src/zipmap.c	/^#define OUT_OF_RANGE(/;"	d	file:
OpArgK	deps/lua/src/lopcodes.h	/^  OpArgK   \/* argument is a constant or register\/constant *\/$/;"	e	enum:OpArgMask
OpArgMask	deps/lua/src/lopcodes.h	/^enum OpArgMask {$/;"	g
OpArgN	deps/lua/src/lopcodes.h	/^  OpArgN,  \/* argument is not used *\/$/;"	e	enum:OpArgMask
OpArgR	deps/lua/src/lopcodes.h	/^  OpArgR,  \/* argument is a register or a jump offset *\/$/;"	e	enum:OpArgMask
OpArgU	deps/lua/src/lopcodes.h	/^  OpArgU,  \/* argument is used *\/$/;"	e	enum:OpArgMask
OpCode	deps/lua/src/lopcodes.h	/^} OpCode;$/;"	t	typeref:enum:__anon33497ff70103
OpMode	deps/lua/src/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx};  \/* basic instruction format *\/$/;"	g
Output	deps/lua/src/luac.c	/^static char Output[]={ OUTPUT };	\/* default output file name *\/$/;"	v	typeref:typename:char[]	file:
PADDING	deps/lua/src/lua_struct.c	/^#define PADDING	/;"	d	file:
PAGE	deps/jemalloc/include/jemalloc/internal/pages.h	/^#define PAGE	/;"	d
PAGES_CAN_PURGE_FORCED	deps/jemalloc/include/jemalloc/internal/pages.h	/^#  define PAGES_CAN_PURGE_FORCED$/;"	d
PAGES_CAN_PURGE_LAZY	deps/jemalloc/include/jemalloc/internal/pages.h	/^#  define PAGES_CAN_PURGE_LAZY$/;"	d
PAGES_PROT_COMMIT	deps/jemalloc/src/pages.c	/^#  define PAGES_PROT_COMMIT /;"	d	file:
PAGES_PROT_DECOMMIT	deps/jemalloc/src/pages.c	/^#  define PAGES_PROT_DECOMMIT /;"	d	file:
PAGE_ADDR2BASE	deps/jemalloc/include/jemalloc/internal/pages.h	/^#define PAGE_ADDR2BASE(/;"	d
PAGE_ALIGN	src/switchrealloc.c	/^#define PAGE_ALIGN(/;"	d	file:
PAGE_CEILING	deps/jemalloc/include/jemalloc/internal/pages.h	/^#define PAGE_CEILING(/;"	d
PAGE_MASK	deps/jemalloc/include/jemalloc/internal/pages.h	/^#define PAGE_MASK	/;"	d
PAGE_SIZE	src/switchrealloc.h	/^#define PAGE_SIZE /;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params11213.h	/^#define PARITY1	/;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params1279.h	/^#define PARITY1	/;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params132049.h	/^#define PARITY1	/;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params19937.h	/^#define PARITY1	/;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params216091.h	/^#define PARITY1	/;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params2281.h	/^#define PARITY1	/;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params4253.h	/^#define PARITY1	/;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params44497.h	/^#define PARITY1	/;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params607.h	/^#define PARITY1	/;"	d
PARITY1	deps/jemalloc/test/include/test/SFMT-params86243.h	/^#define PARITY1	/;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params11213.h	/^#define PARITY2	/;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params1279.h	/^#define PARITY2	/;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params132049.h	/^#define PARITY2	/;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params19937.h	/^#define PARITY2	/;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params216091.h	/^#define PARITY2	/;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params2281.h	/^#define PARITY2	/;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params4253.h	/^#define PARITY2	/;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params44497.h	/^#define PARITY2	/;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params607.h	/^#define PARITY2	/;"	d
PARITY2	deps/jemalloc/test/include/test/SFMT-params86243.h	/^#define PARITY2	/;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params11213.h	/^#define PARITY3	/;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params1279.h	/^#define PARITY3	/;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params132049.h	/^#define PARITY3	/;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params19937.h	/^#define PARITY3	/;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params216091.h	/^#define PARITY3	/;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params2281.h	/^#define PARITY3	/;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params4253.h	/^#define PARITY3	/;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params44497.h	/^#define PARITY3	/;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params607.h	/^#define PARITY3	/;"	d
PARITY3	deps/jemalloc/test/include/test/SFMT-params86243.h	/^#define PARITY3	/;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params11213.h	/^#define PARITY4	/;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params1279.h	/^#define PARITY4	/;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params132049.h	/^#define PARITY4	/;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params19937.h	/^#define PARITY4	/;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params216091.h	/^#define PARITY4	/;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params2281.h	/^#define PARITY4	/;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params4253.h	/^#define PARITY4	/;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params44497.h	/^#define PARITY4	/;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params607.h	/^#define PARITY4	/;"	d
PARITY4	deps/jemalloc/test/include/test/SFMT-params86243.h	/^#define PARITY4	/;"	d
PATH_MAX	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	/^#  define PATH_MAX /;"	d
PC	deps/jemalloc/Makefile	/^PC := $(objroot)jemalloc.pc$/;"	m
PC	deps/jemalloc/Makefile.in	/^PC := $(objroot)jemalloc.pc$/;"	m
PCRC	deps/lua/src/ldo.h	/^#define PCRC	/;"	d
PCRLUA	deps/lua/src/ldo.h	/^#define PCRLUA	/;"	d
PCRYIELD	deps/lua/src/ldo.h	/^#define PCRYIELD	/;"	d
PDP_ENDIAN	src/config.h	/^#define	PDP_ENDIAN	/;"	d
PERCPU_ARENA_DEFAULT	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^#define PERCPU_ARENA_DEFAULT	/;"	d
PERCPU_ARENA_ENABLED	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^#define PERCPU_ARENA_ENABLED(/;"	d
PER_THD_NALLOCS	deps/jemalloc/test/unit/retained.c	/^#define PER_THD_NALLOCS	/;"	d	file:
PH_H_	deps/jemalloc/include/jemalloc/internal/ph.h	/^#define PH_H_$/;"	d
PI	deps/lua/src/lmathlib.c	/^#define PI /;"	d	file:
PIC_CFLAGS	deps/jemalloc/Makefile	/^PIC_CFLAGS = -fPIC -DPIC$/;"	m
PIC_CFLAGS	deps/jemalloc/Makefile.in	/^PIC_CFLAGS = @PIC_CFLAGS@$/;"	m
PIPEMODE_WRITE_LOOP_MAX_BYTES	src/redis-cli.c	/^#define PIPEMODE_WRITE_LOOP_MAX_BYTES /;"	d	file:
PKGCONFNAME	deps/hiredis/Makefile	/^PKGCONFNAME=hiredis.pc$/;"	m
PKGCONF_PATH	deps/hiredis/Makefile	/^PKGCONF_PATH?=pkgconfig$/;"	m
PKG_CONFIG	src/Makefile	/^PKG_CONFIG?=pkg-config$/;"	m
PLAT	deps/lua/Makefile	/^PLAT= none$/;"	m
PLAT	deps/lua/src/Makefile	/^PLAT= none$/;"	m
PLATS	deps/lua/Makefile	/^PLATS= aix ansi bsd freebsd generic linux macosx mingw posix solaris$/;"	m
PLATS	deps/lua/src/Makefile	/^PLATS= aix ansi bsd freebsd generic linux macosx mingw posix solaris$/;"	m
POF	deps/lua/src/loadlib.c	/^#define POF	/;"	d	file:
POLY	src/crc64.c	/^#define POLY /;"	d	file:
POS1	deps/jemalloc/test/include/test/SFMT-params11213.h	/^#define POS1	/;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params1279.h	/^#define POS1	/;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params132049.h	/^#define POS1	/;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params19937.h	/^#define POS1	/;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params216091.h	/^#define POS1	/;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params2281.h	/^#define POS1	/;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params4253.h	/^#define POS1	/;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params44497.h	/^#define POS1	/;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params607.h	/^#define POS1	/;"	d
POS1	deps/jemalloc/test/include/test/SFMT-params86243.h	/^#define POS1	/;"	d
POS_A	deps/lua/src/lopcodes.h	/^#define POS_A	/;"	d
POS_B	deps/lua/src/lopcodes.h	/^#define POS_B	/;"	d
POS_Bx	deps/lua/src/lopcodes.h	/^#define POS_Bx	/;"	d
POS_C	deps/lua/src/lopcodes.h	/^#define POS_C	/;"	d
POS_OP	deps/lua/src/lopcodes.h	/^#define POS_OP	/;"	d
PREALIAS	deps/jemalloc/src/jemalloc.c	/^#    define PREALIAS(/;"	d	file:
PREFIX	deps/hiredis/Makefile	/^PREFIX?=\/usr\/local$/;"	m
PREFIX	src/Makefile	/^PREFIX?=\/usr\/local$/;"	m
PREFIX_SIZE	src/zmalloc.c	/^#define PREFIX_SIZE /;"	d	file:
PRIVATE_NAMESPACE_GEN_HDRS	deps/jemalloc/Makefile	/^PRIVATE_NAMESPACE_GEN_HDRS := $(PRIVATE_NAMESPACE_HDRS:%.h=%.gen.h)$/;"	m
PRIVATE_NAMESPACE_GEN_HDRS	deps/jemalloc/Makefile.in	/^PRIVATE_NAMESPACE_GEN_HDRS := $(PRIVATE_NAMESPACE_HDRS:%.h=%.gen.h)$/;"	m
PRIVATE_NAMESPACE_HDRS	deps/jemalloc/Makefile	/^PRIVATE_NAMESPACE_HDRS := $(objroot)include\/jemalloc\/internal\/private_namespace.h $(objroot)i/;"	m
PRIVATE_NAMESPACE_HDRS	deps/jemalloc/Makefile.in	/^PRIVATE_NAMESPACE_HDRS := $(objroot)include\/jemalloc\/internal\/private_namespace.h $(objroot)i/;"	m
PRNG_A_32	deps/jemalloc/include/jemalloc/internal/prng.h	/^#define PRNG_A_32	/;"	d
PRNG_A_64	deps/jemalloc/include/jemalloc/internal/prng.h	/^#define PRNG_A_64	/;"	d
PRNG_C_32	deps/jemalloc/include/jemalloc/internal/prng.h	/^#define PRNG_C_32	/;"	d
PRNG_C_64	deps/jemalloc/include/jemalloc/internal/prng.h	/^#define PRNG_C_64	/;"	d
PROF_BT_MAX	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^#define PROF_BT_MAX	/;"	d
PROF_CKH_MINITEMS	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^#define PROF_CKH_MINITEMS	/;"	d
PROF_DUMP_BUFSIZE	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^#define PROF_DUMP_BUFSIZE	/;"	d
PROF_NCTX_LOCKS	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^#define PROF_NCTX_LOCKS	/;"	d
PROF_NTDATA_LOCKS	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^#define PROF_NTDATA_LOCKS	/;"	d
PROF_PREFIX_DEFAULT	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^#  define PROF_PREFIX_DEFAULT	/;"	d
PROF_PRINTF_BUFSIZE	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^#define PROF_PRINTF_BUFSIZE	/;"	d
PROF_TDATA_STATE_MAX	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^#define PROF_TDATA_STATE_MAX	/;"	d
PROF_TDATA_STATE_PURGATORY	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^#define PROF_TDATA_STATE_PURGATORY	/;"	d
PROF_TDATA_STATE_REINCARNATED	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^#define PROF_TDATA_STATE_REINCARNATED	/;"	d
PROGNAME	deps/lua/src/luac.c	/^#define PROGNAME	/;"	d	file:
PROPAGATE_AOF	src/server.h	/^#define PROPAGATE_AOF /;"	d
PROPAGATE_NONE	src/server.h	/^#define PROPAGATE_NONE /;"	d
PROPAGATE_REPL	src/server.h	/^#define PROPAGATE_REPL /;"	d
PROTO_DUMP_LEN	src/networking.c	/^#define PROTO_DUMP_LEN /;"	d	file:
PROTO_INLINE_MAX_SIZE	src/server.h	/^#define PROTO_INLINE_MAX_SIZE /;"	d
PROTO_IOBUF_LEN	src/server.h	/^#define PROTO_IOBUF_LEN /;"	d
PROTO_MBULK_BIG_ARG	src/server.h	/^#define PROTO_MBULK_BIG_ARG /;"	d
PROTO_REPLY_CHUNK_BYTES	src/server.h	/^#define PROTO_REPLY_CHUNK_BYTES /;"	d
PROTO_REQ_INLINE	src/server.h	/^#define PROTO_REQ_INLINE /;"	d
PROTO_REQ_MULTIBULK	src/server.h	/^#define PROTO_REQ_MULTIBULK /;"	d
PROTO_SHARED_SELECT_CMDS	src/server.h	/^#define PROTO_SHARED_SELECT_CMDS /;"	d
PSYNC_CONTINUE	src/replication.c	/^#define PSYNC_CONTINUE /;"	d	file:
PSYNC_FULLRESYNC	src/replication.c	/^#define PSYNC_FULLRESYNC /;"	d	file:
PSYNC_NOT_SUPPORTED	src/replication.c	/^#define PSYNC_NOT_SUPPORTED /;"	d	file:
PSYNC_TRY_LATER	src/replication.c	/^#define PSYNC_TRY_LATER /;"	d	file:
PSYNC_WAIT_REPLY	src/replication.c	/^#define PSYNC_WAIT_REPLY /;"	d	file:
PSYNC_WRITE_ERROR	src/replication.c	/^#define PSYNC_WRITE_ERROR /;"	d	file:
PSZ_no	deps/jemalloc/src/sz.c	/^#define PSZ_no(/;"	d	file:
PSZ_yes	deps/jemalloc/src/sz.c	/^#define PSZ_yes(/;"	d	file:
PTRDIFF_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#  define PTRDIFF_MAX /;"	d
PTRDIFF_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#  define PTRDIFF_MIN /;"	d
PTR_CEILING	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define PTR_CEILING(/;"	d
PTR_MASK	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define PTR_MASK	/;"	d
PendingEntryContext	src/defrag.c	/^} PendingEntryContext;$/;"	t	typeref:struct:__anon4ad273d60208	file:
Pfunc	deps/lua/src/ldo.h	/^typedef void (*Pfunc) (lua_State *L, void *ud);$/;"	t	typeref:typename:void (*)(lua_State * L,void * ud)
PingReceiver	src/modules/hellocluster.c	/^void PingReceiver(RedisModuleCtx *ctx, const char *sender_id, uint8_t type, const unsigned char /;"	f	typeref:typename:void
PingallCommand_RedisCommand	src/modules/hellocluster.c	/^int PingallCommand_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
PongReceiver	src/modules/hellocluster.c	/^void PongReceiver(RedisModuleCtx *ctx, const char *sender_id, uint8_t type, const unsigned char /;"	f	typeref:typename:void
PrefixTable	src/tracking.c	/^rax *PrefixTable = NULL;$/;"	v	typeref:typename:rax *
PrintCode	deps/lua/src/print.c	/^static void PrintCode(const Proto* f)$/;"	f	typeref:typename:void	file:
PrintConstant	deps/lua/src/print.c	/^static void PrintConstant(const Proto* f, int i)$/;"	f	typeref:typename:void	file:
PrintConstants	deps/lua/src/print.c	/^static void PrintConstants(const Proto* f)$/;"	f	typeref:typename:void	file:
PrintFunction	deps/lua/src/print.c	/^#define PrintFunction	/;"	d	file:
PrintFunction	deps/lua/src/print.c	/^void PrintFunction(const Proto* f, int full)$/;"	f	typeref:typename:void
PrintHeader	deps/lua/src/print.c	/^static void PrintHeader(const Proto* f)$/;"	f	typeref:typename:void	file:
PrintLocals	deps/lua/src/print.c	/^static void PrintLocals(const Proto* f)$/;"	f	typeref:typename:void	file:
PrintString	deps/lua/src/print.c	/^static void PrintString(const TString* ts)$/;"	f	typeref:typename:void	file:
PrintUpvalues	deps/lua/src/print.c	/^static void PrintUpvalues(const Proto* f)$/;"	f	typeref:typename:void	file:
ProcessingEventsWhileBlocked	src/networking.c	/^int ProcessingEventsWhileBlocked = 0; \/* See processEventsWhileBlocked(). *\/$/;"	v	typeref:typename:int
Protect	deps/lua/src/lvm.c	/^#define Protect(/;"	d	file:
Proto	deps/lua/src/lobject.h	/^typedef struct Proto {$/;"	s
Proto	deps/lua/src/lobject.h	/^} Proto;$/;"	t	typeref:struct:Proto
QD	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#define QD(/;"	d
QL_BM_BITS	src/quicklist.h	/^#   define QL_BM_BITS /;"	d
QL_COMP_BITS	src/quicklist.h	/^#   define QL_COMP_BITS /;"	d
QL_FILL_BITS	src/quicklist.h	/^#   define QL_FILL_BITS /;"	d
QL_MAX_BM	src/quicklist.c	/^#define QL_MAX_BM /;"	d	file:
QL_TEST_VERBOSE	src/quicklist.c	/^#define QL_TEST_VERBOSE /;"	d	file:
QU	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#define QU(/;"	d
QUANTUM	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define QUANTUM	/;"	d
QUANTUM_CEILING	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define QUANTUM_CEILING(/;"	d
QUANTUM_MASK	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define QUANTUM_MASK	/;"	d
QUICKLIST_HEAD	src/quicklist.h	/^#define QUICKLIST_HEAD /;"	d
QUICKLIST_NOCOMPRESS	src/quicklist.h	/^#define QUICKLIST_NOCOMPRESS /;"	d
QUICKLIST_NODE_CONTAINER_NONE	src/quicklist.h	/^#define QUICKLIST_NODE_CONTAINER_NONE /;"	d
QUICKLIST_NODE_CONTAINER_ZIPLIST	src/quicklist.h	/^#define QUICKLIST_NODE_CONTAINER_ZIPLIST /;"	d
QUICKLIST_NODE_ENCODING_LZF	src/quicklist.h	/^#define QUICKLIST_NODE_ENCODING_LZF /;"	d
QUICKLIST_NODE_ENCODING_RAW	src/quicklist.h	/^#define QUICKLIST_NODE_ENCODING_RAW /;"	d
QUICKLIST_TAIL	src/quicklist.h	/^#define QUICKLIST_TAIL /;"	d
QUIET_CC	src/Makefile	/^QUIET_CC = @printf '    %b %b\\n' $(CCCOLOR)CC$(ENDCOLOR) $(SRCCOLOR)$@$(ENDCOLOR) 1>&2;$/;"	m
QUIET_INSTALL	src/Makefile	/^QUIET_INSTALL = @printf '    %b %b\\n' $(LINKCOLOR)INSTALL$(ENDCOLOR) $(BINCOLOR)$@$(ENDCOLOR) 1/;"	m
QUIET_LINK	src/Makefile	/^QUIET_LINK = @printf '    %b %b\\n' $(LINKCOLOR)LINK$(ENDCOLOR) $(BINCOLOR)$@$(ENDCOLOR) 1>&2;$/;"	m
R	deps/lua/Makefile	/^R= 5.1.5$/;"	m
R0	src/sha1.c	/^#define R0(/;"	d	file:
R1	src/sha1.c	/^#define R1(/;"	d	file:
R2	src/sha1.c	/^#define R2(/;"	d	file:
R3	src/sha1.c	/^#define R3(/;"	d	file:
R4	src/sha1.c	/^#define R4(/;"	d	file:
RA	deps/lua/src/lvm.c	/^#define RA(/;"	d	file:
RADIANS_PER_DEGREE	deps/lua/src/lmathlib.c	/^#define RADIANS_PER_DEGREE /;"	d	file:
RADIUS_COORDS	src/geo.c	/^#define RADIUS_COORDS /;"	d	file:
RADIUS_MEMBER	src/geo.c	/^#define RADIUS_MEMBER /;"	d	file:
RADIUS_NOSTORE	src/geo.c	/^#define RADIUS_NOSTORE /;"	d	file:
RANDPTR_INITIAL_SIZE	src/redis-benchmark.c	/^#define RANDPTR_INITIAL_SIZE /;"	d	file:
RANGE	deps/jemalloc/test/integration/rallocx.c	/^#define RANGE /;"	d	file:
RANGEISZERO	src/geohash.h	/^#define RANGEISZERO(/;"	d
RANGEPISZERO	src/geohash.h	/^#define RANGEPISZERO(/;"	d
RANGE_STEP	deps/jemalloc/test/unit/prng.c	/^#define RANGE_STEP	/;"	d	file:
RANLIB	deps/lua/Makefile	/^RANLIB= ranlib$/;"	m
RANLIB	deps/lua/src/Makefile	/^RANLIB= ranlib$/;"	m
RATIO	src/geohash_helper.c	/^#define RATIO /;"	d	file:
RAX_ALLOC_H	src/rax_malloc.h	/^#define RAX_ALLOC_H$/;"	d
RAX_H	src/rax.h	/^#define RAX_H$/;"	d
RAX_ITER_EOF	src/rax.h	/^#define RAX_ITER_EOF /;"	d
RAX_ITER_JUST_SEEKED	src/rax.h	/^#define RAX_ITER_JUST_SEEKED /;"	d
RAX_ITER_SAFE	src/rax.h	/^#define RAX_ITER_SAFE /;"	d
RAX_ITER_STATIC_LEN	src/rax.h	/^#define RAX_ITER_STATIC_LEN /;"	d
RAX_MALLOC_INCLUDE	src/rax.c	/^#define RAX_MALLOC_INCLUDE /;"	d	file:
RAX_NODE_MAX_SIZE	src/rax.h	/^#define RAX_NODE_MAX_SIZE /;"	d
RAX_STACK_STATIC_ITEMS	src/rax.h	/^#define RAX_STACK_STATIC_ITEMS /;"	d
RB	deps/lua/src/lvm.c	/^#define RB(/;"	d	file:
RB_COMPACT	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define RB_COMPACT$/;"	d
RB_H_	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define RB_H_$/;"	d
RC	deps/lua/src/lvm.c	/^#define RC(/;"	d	file:
RCVBUF_INIT_LEN	src/cluster.c	/^#define RCVBUF_INIT_LEN /;"	d	file:
RCVBUF_MAX_PREALLOC	src/cluster.c	/^#define RCVBUF_MAX_PREALLOC /;"	d	file:
RDBFLAGS_ALLOW_DUP	src/rdb.h	/^#define RDBFLAGS_ALLOW_DUP /;"	d
RDBFLAGS_AOF_PREAMBLE	src/rdb.h	/^#define RDBFLAGS_AOF_PREAMBLE /;"	d
RDBFLAGS_NONE	src/rdb.h	/^#define RDBFLAGS_NONE /;"	d
RDBFLAGS_REPLICATION	src/rdb.h	/^#define RDBFLAGS_REPLICATION /;"	d
RDBGeneratedByReplication	src/replication.c	/^int RDBGeneratedByReplication = 0;$/;"	v	typeref:typename:int
RDB_14BITLEN	src/rdb.h	/^#define RDB_14BITLEN /;"	d
RDB_32BITLEN	src/rdb.h	/^#define RDB_32BITLEN /;"	d
RDB_64BITLEN	src/rdb.h	/^#define RDB_64BITLEN /;"	d
RDB_6BITLEN	src/rdb.h	/^#define RDB_6BITLEN /;"	d
RDB_CHECK_DOING_CHECK_SUM	src/redis-check-rdb.c	/^#define RDB_CHECK_DOING_CHECK_SUM /;"	d	file:
RDB_CHECK_DOING_READ_AUX	src/redis-check-rdb.c	/^#define RDB_CHECK_DOING_READ_AUX /;"	d	file:
RDB_CHECK_DOING_READ_EXPIRE	src/redis-check-rdb.c	/^#define RDB_CHECK_DOING_READ_EXPIRE /;"	d	file:
RDB_CHECK_DOING_READ_KEY	src/redis-check-rdb.c	/^#define RDB_CHECK_DOING_READ_KEY /;"	d	file:
RDB_CHECK_DOING_READ_LEN	src/redis-check-rdb.c	/^#define RDB_CHECK_DOING_READ_LEN /;"	d	file:
RDB_CHECK_DOING_READ_MODULE_AUX	src/redis-check-rdb.c	/^#define RDB_CHECK_DOING_READ_MODULE_AUX /;"	d	file:
RDB_CHECK_DOING_READ_OBJECT_VALUE	src/redis-check-rdb.c	/^#define RDB_CHECK_DOING_READ_OBJECT_VALUE /;"	d	file:
RDB_CHECK_DOING_READ_TYPE	src/redis-check-rdb.c	/^#define RDB_CHECK_DOING_READ_TYPE /;"	d	file:
RDB_CHECK_DOING_START	src/redis-check-rdb.c	/^#define RDB_CHECK_DOING_START /;"	d	file:
RDB_CHILD_TYPE_DISK	src/server.h	/^#define RDB_CHILD_TYPE_DISK /;"	d
RDB_CHILD_TYPE_NONE	src/server.h	/^#define RDB_CHILD_TYPE_NONE /;"	d
RDB_CHILD_TYPE_SOCKET	src/server.h	/^#define RDB_CHILD_TYPE_SOCKET /;"	d
RDB_ENCVAL	src/rdb.h	/^#define RDB_ENCVAL /;"	d
RDB_ENC_INT16	src/rdb.h	/^#define RDB_ENC_INT16 /;"	d
RDB_ENC_INT32	src/rdb.h	/^#define RDB_ENC_INT32 /;"	d
RDB_ENC_INT8	src/rdb.h	/^#define RDB_ENC_INT8 /;"	d
RDB_ENC_LZF	src/rdb.h	/^#define RDB_ENC_LZF /;"	d
RDB_EOF_MARK_SIZE	src/redis-cli.c	/^#define RDB_EOF_MARK_SIZE /;"	d	file:
RDB_EOF_MARK_SIZE	src/server.h	/^#define RDB_EOF_MARK_SIZE /;"	d
RDB_LENERR	src/rdb.h	/^#define RDB_LENERR /;"	d
RDB_LOAD_ENC	src/rdb.h	/^#define RDB_LOAD_ENC /;"	d
RDB_LOAD_ERR_EMPTY_KEY	src/rdb.h	/^#define RDB_LOAD_ERR_EMPTY_KEY /;"	d
RDB_LOAD_ERR_OTHER	src/rdb.h	/^#define RDB_LOAD_ERR_OTHER /;"	d
RDB_LOAD_NONE	src/rdb.h	/^#define RDB_LOAD_NONE /;"	d
RDB_LOAD_PLAIN	src/rdb.h	/^#define RDB_LOAD_PLAIN /;"	d
RDB_LOAD_SDS	src/rdb.h	/^#define RDB_LOAD_SDS /;"	d
RDB_MODULE_OPCODE_DOUBLE	src/rdb.h	/^#define RDB_MODULE_OPCODE_DOUBLE /;"	d
RDB_MODULE_OPCODE_EOF	src/rdb.h	/^#define RDB_MODULE_OPCODE_EOF /;"	d
RDB_MODULE_OPCODE_FLOAT	src/rdb.h	/^#define RDB_MODULE_OPCODE_FLOAT /;"	d
RDB_MODULE_OPCODE_SINT	src/rdb.h	/^#define RDB_MODULE_OPCODE_SINT /;"	d
RDB_MODULE_OPCODE_STRING	src/rdb.h	/^#define RDB_MODULE_OPCODE_STRING /;"	d
RDB_MODULE_OPCODE_UINT	src/rdb.h	/^#define RDB_MODULE_OPCODE_UINT /;"	d
RDB_OPCODE_AUX	src/rdb.h	/^#define RDB_OPCODE_AUX /;"	d
RDB_OPCODE_EOF	src/rdb.h	/^#define RDB_OPCODE_EOF /;"	d
RDB_OPCODE_EXPIRETIME	src/rdb.h	/^#define RDB_OPCODE_EXPIRETIME /;"	d
RDB_OPCODE_EXPIRETIME_MS	src/rdb.h	/^#define RDB_OPCODE_EXPIRETIME_MS /;"	d
RDB_OPCODE_FREQ	src/rdb.h	/^#define RDB_OPCODE_FREQ /;"	d
RDB_OPCODE_IDLE	src/rdb.h	/^#define RDB_OPCODE_IDLE /;"	d
RDB_OPCODE_MODULE_AUX	src/rdb.h	/^#define RDB_OPCODE_MODULE_AUX /;"	d
RDB_OPCODE_RESIZEDB	src/rdb.h	/^#define RDB_OPCODE_RESIZEDB /;"	d
RDB_OPCODE_SELECTDB	src/rdb.h	/^#define RDB_OPCODE_SELECTDB /;"	d
RDB_SAVE_INFO_INIT	src/server.h	/^#define RDB_SAVE_INFO_INIT /;"	d
RDB_TYPE_HASH	src/rdb.h	/^#define RDB_TYPE_HASH /;"	d
RDB_TYPE_HASH_ZIPLIST	src/rdb.h	/^#define RDB_TYPE_HASH_ZIPLIST /;"	d
RDB_TYPE_HASH_ZIPMAP	src/rdb.h	/^#define RDB_TYPE_HASH_ZIPMAP /;"	d
RDB_TYPE_LIST	src/rdb.h	/^#define RDB_TYPE_LIST /;"	d
RDB_TYPE_LIST_QUICKLIST	src/rdb.h	/^#define RDB_TYPE_LIST_QUICKLIST /;"	d
RDB_TYPE_LIST_ZIPLIST	src/rdb.h	/^#define RDB_TYPE_LIST_ZIPLIST /;"	d
RDB_TYPE_MODULE	src/rdb.h	/^#define RDB_TYPE_MODULE /;"	d
RDB_TYPE_MODULE_2	src/rdb.h	/^#define RDB_TYPE_MODULE_2 /;"	d
RDB_TYPE_SET	src/rdb.h	/^#define RDB_TYPE_SET /;"	d
RDB_TYPE_SET_INTSET	src/rdb.h	/^#define RDB_TYPE_SET_INTSET /;"	d
RDB_TYPE_STREAM_LISTPACKS	src/rdb.h	/^#define RDB_TYPE_STREAM_LISTPACKS /;"	d
RDB_TYPE_STRING	src/rdb.h	/^#define RDB_TYPE_STRING /;"	d
RDB_TYPE_ZSET	src/rdb.h	/^#define RDB_TYPE_ZSET /;"	d
RDB_TYPE_ZSET_2	src/rdb.h	/^#define RDB_TYPE_ZSET_2 /;"	d
RDB_TYPE_ZSET_ZIPLIST	src/rdb.h	/^#define RDB_TYPE_ZSET_ZIPLIST /;"	d
RDB_VERSION	src/rdb.h	/^#define RDB_VERSION /;"	d
READ	deps/jemalloc/src/ctl.c	/^#define READ(/;"	d	file:
READONLY	deps/jemalloc/src/ctl.c	/^#define READONLY(/;"	d	file:
READ_ARENA_MUTEX_PROF_DATA	deps/jemalloc/src/arena.c	/^#define READ_ARENA_MUTEX_PROF_DATA(/;"	d	file:
READ_GLOBAL_MUTEX_PROF_DATA	deps/jemalloc/src/ctl.c	/^#define READ_GLOBAL_MUTEX_PROF_DATA(/;"	d	file:
READ_XOR_WRITE	deps/jemalloc/src/ctl.c	/^#define READ_XOR_WRITE(/;"	d	file:
REAL_CFLAGS	deps/hiredis/Makefile	/^REAL_CFLAGS=$(OPTIMIZATION) -fPIC $(CPPFLAGS) $(CFLAGS) $(WARNINGS) $(DEBUG_FLAGS)$/;"	m
REAL_LDFLAGS	deps/hiredis/Makefile	/^REAL_LDFLAGS=$(LDFLAGS)$/;"	m
RECTANGLE_TYPE	src/geohash.h	/^#define RECTANGLE_TYPE /;"	d
REDISMODULE_AM_DICT	src/module.c	/^#define REDISMODULE_AM_DICT /;"	d	file:
REDISMODULE_AM_FREED	src/module.c	/^#define REDISMODULE_AM_FREED /;"	d	file:
REDISMODULE_AM_INFO	src/module.c	/^#define REDISMODULE_AM_INFO /;"	d	file:
REDISMODULE_AM_KEY	src/module.c	/^#define REDISMODULE_AM_KEY /;"	d	file:
REDISMODULE_AM_REPLY	src/module.c	/^#define REDISMODULE_AM_REPLY /;"	d	file:
REDISMODULE_AM_STRING	src/module.c	/^#define REDISMODULE_AM_STRING /;"	d	file:
REDISMODULE_API	src/redismodule.h	/^#define REDISMODULE_API$/;"	d
REDISMODULE_APIVER_1	src/redismodule.h	/^#define REDISMODULE_APIVER_1 /;"	d
REDISMODULE_ARGV_NO_AOF	src/module.c	/^#define REDISMODULE_ARGV_NO_AOF /;"	d	file:
REDISMODULE_ARGV_NO_REPLICAS	src/module.c	/^#define REDISMODULE_ARGV_NO_REPLICAS /;"	d	file:
REDISMODULE_ARGV_REPLICATE	src/module.c	/^#define REDISMODULE_ARGV_REPLICATE /;"	d	file:
REDISMODULE_ATTR	src/redismodule.h	/^#define REDISMODULE_ATTR /;"	d
REDISMODULE_ATTR_COMMON	src/redismodule.h	/^#        define REDISMODULE_ATTR_COMMON /;"	d
REDISMODULE_ATTR_COMMON	src/redismodule.h	/^#        define REDISMODULE_ATTR_COMMON$/;"	d
REDISMODULE_ATTR_PRINTF	src/redismodule.h	/^#        define REDISMODULE_ATTR_PRINTF(/;"	d
REDISMODULE_ATTR_UNUSED	src/redismodule.h	/^#        define REDISMODULE_ATTR_UNUSED /;"	d
REDISMODULE_ATTR_UNUSED	src/redismodule.h	/^#        define REDISMODULE_ATTR_UNUSED$/;"	d
REDISMODULE_AUX_AFTER_RDB	src/redismodule.h	/^#define REDISMODULE_AUX_AFTER_RDB /;"	d
REDISMODULE_AUX_AFTER_RDB	src/server.h	/^#define REDISMODULE_AUX_AFTER_RDB /;"	d
REDISMODULE_AUX_BEFORE_RDB	src/redismodule.h	/^#define REDISMODULE_AUX_BEFORE_RDB /;"	d
REDISMODULE_AUX_BEFORE_RDB	src/server.h	/^#define REDISMODULE_AUX_BEFORE_RDB /;"	d
REDISMODULE_CLIENTINFO_FLAG_BLOCKED	src/redismodule.h	/^#define REDISMODULE_CLIENTINFO_FLAG_BLOCKED /;"	d
REDISMODULE_CLIENTINFO_FLAG_MULTI	src/redismodule.h	/^#define REDISMODULE_CLIENTINFO_FLAG_MULTI /;"	d
REDISMODULE_CLIENTINFO_FLAG_PUBSUB	src/redismodule.h	/^#define REDISMODULE_CLIENTINFO_FLAG_PUBSUB /;"	d
REDISMODULE_CLIENTINFO_FLAG_SSL	src/redismodule.h	/^#define REDISMODULE_CLIENTINFO_FLAG_SSL /;"	d
REDISMODULE_CLIENTINFO_FLAG_TRACKING	src/redismodule.h	/^#define REDISMODULE_CLIENTINFO_FLAG_TRACKING /;"	d
REDISMODULE_CLIENTINFO_FLAG_UNIXSOCKET	src/redismodule.h	/^#define REDISMODULE_CLIENTINFO_FLAG_UNIXSOCKET /;"	d
REDISMODULE_CLIENTINFO_VERSION	src/redismodule.h	/^#define REDISMODULE_CLIENTINFO_VERSION /;"	d
REDISMODULE_CLUSTER_FLAG_NONE	src/redismodule.h	/^#define REDISMODULE_CLUSTER_FLAG_NONE /;"	d
REDISMODULE_CLUSTER_FLAG_NO_FAILOVER	src/redismodule.h	/^#define REDISMODULE_CLUSTER_FLAG_NO_FAILOVER /;"	d
REDISMODULE_CLUSTER_FLAG_NO_REDIRECTION	src/redismodule.h	/^#define REDISMODULE_CLUSTER_FLAG_NO_REDIRECTION /;"	d
REDISMODULE_CMDFILTER_NOSELF	src/redismodule.h	/^#define REDISMODULE_CMDFILTER_NOSELF /;"	d
REDISMODULE_CORE	src/server.h	/^#define REDISMODULE_CORE /;"	d
REDISMODULE_CRON_LOOP_VERSION	src/redismodule.h	/^#define REDISMODULE_CRON_LOOP_VERSION /;"	d
REDISMODULE_CTX_AUTO_MEMORY	src/module.c	/^#define REDISMODULE_CTX_AUTO_MEMORY /;"	d	file:
REDISMODULE_CTX_BLOCKED_DISCONNECTED	src/module.c	/^#define REDISMODULE_CTX_BLOCKED_DISCONNECTED /;"	d	file:
REDISMODULE_CTX_BLOCKED_REPLY	src/module.c	/^#define REDISMODULE_CTX_BLOCKED_REPLY /;"	d	file:
REDISMODULE_CTX_BLOCKED_TIMEOUT	src/module.c	/^#define REDISMODULE_CTX_BLOCKED_TIMEOUT /;"	d	file:
REDISMODULE_CTX_FLAGS_ACTIVE_CHILD	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_ACTIVE_CHILD /;"	d
REDISMODULE_CTX_FLAGS_AOF	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_AOF /;"	d
REDISMODULE_CTX_FLAGS_CLUSTER	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_CLUSTER /;"	d
REDISMODULE_CTX_FLAGS_DENY_BLOCKING	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_DENY_BLOCKING /;"	d
REDISMODULE_CTX_FLAGS_EVICT	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_EVICT /;"	d
REDISMODULE_CTX_FLAGS_IS_CHILD	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_IS_CHILD /;"	d
REDISMODULE_CTX_FLAGS_LOADING	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_LOADING /;"	d
REDISMODULE_CTX_FLAGS_LUA	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_LUA /;"	d
REDISMODULE_CTX_FLAGS_MASTER	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_MASTER /;"	d
REDISMODULE_CTX_FLAGS_MAXMEMORY	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_MAXMEMORY /;"	d
REDISMODULE_CTX_FLAGS_MULTI	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_MULTI /;"	d
REDISMODULE_CTX_FLAGS_MULTI_DIRTY	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_MULTI_DIRTY /;"	d
REDISMODULE_CTX_FLAGS_OOM	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_OOM /;"	d
REDISMODULE_CTX_FLAGS_OOM_WARNING	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_OOM_WARNING /;"	d
REDISMODULE_CTX_FLAGS_RDB	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_RDB /;"	d
REDISMODULE_CTX_FLAGS_READONLY	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_READONLY /;"	d
REDISMODULE_CTX_FLAGS_REPLICATED	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_REPLICATED /;"	d
REDISMODULE_CTX_FLAGS_REPLICA_IS_CONNECTING	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_REPLICA_IS_CONNECTING /;"	d
REDISMODULE_CTX_FLAGS_REPLICA_IS_ONLINE	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_REPLICA_IS_ONLINE /;"	d
REDISMODULE_CTX_FLAGS_REPLICA_IS_STALE	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_REPLICA_IS_STALE /;"	d
REDISMODULE_CTX_FLAGS_REPLICA_IS_TRANSFERRING	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_REPLICA_IS_TRANSFERRING /;"	d
REDISMODULE_CTX_FLAGS_SLAVE	src/redismodule.h	/^#define REDISMODULE_CTX_FLAGS_SLAVE /;"	d
REDISMODULE_CTX_INIT	src/module.c	/^#define REDISMODULE_CTX_INIT /;"	d	file:
REDISMODULE_CTX_KEYS_POS_REQUEST	src/module.c	/^#define REDISMODULE_CTX_KEYS_POS_REQUEST /;"	d	file:
REDISMODULE_CTX_MODULE_COMMAND_CALL	src/module.c	/^#define REDISMODULE_CTX_MODULE_COMMAND_CALL /;"	d	file:
REDISMODULE_CTX_MULTI_EMITTED	src/module.c	/^#define REDISMODULE_CTX_MULTI_EMITTED /;"	d	file:
REDISMODULE_CTX_THREAD_SAFE	src/module.c	/^#define REDISMODULE_CTX_THREAD_SAFE /;"	d	file:
REDISMODULE_ERR	src/redismodule.h	/^#define REDISMODULE_ERR /;"	d
REDISMODULE_ERRORMSG_WRONGTYPE	src/redismodule.h	/^#define REDISMODULE_ERRORMSG_WRONGTYPE /;"	d
REDISMODULE_EVENT_CLIENT_CHANGE	src/redismodule.h	/^#define REDISMODULE_EVENT_CLIENT_CHANGE /;"	d
REDISMODULE_EVENT_CRON_LOOP	src/redismodule.h	/^#define REDISMODULE_EVENT_CRON_LOOP /;"	d
REDISMODULE_EVENT_FLUSHDB	src/redismodule.h	/^#define REDISMODULE_EVENT_FLUSHDB /;"	d
REDISMODULE_EVENT_FORK_CHILD	src/redismodule.h	/^#define REDISMODULE_EVENT_FORK_CHILD /;"	d
REDISMODULE_EVENT_LOADING	src/redismodule.h	/^#define REDISMODULE_EVENT_LOADING /;"	d
REDISMODULE_EVENT_LOADING_PROGRESS	src/redismodule.h	/^#define REDISMODULE_EVENT_LOADING_PROGRESS /;"	d
REDISMODULE_EVENT_MASTER_LINK_CHANGE	src/redismodule.h	/^#define REDISMODULE_EVENT_MASTER_LINK_CHANGE /;"	d
REDISMODULE_EVENT_MODULE_CHANGE	src/redismodule.h	/^#define REDISMODULE_EVENT_MODULE_CHANGE /;"	d
REDISMODULE_EVENT_PERSISTENCE	src/redismodule.h	/^#define REDISMODULE_EVENT_PERSISTENCE /;"	d
REDISMODULE_EVENT_REPLICATION_ROLE_CHANGED	src/redismodule.h	/^#define REDISMODULE_EVENT_REPLICATION_ROLE_CHANGED /;"	d
REDISMODULE_EVENT_REPLICA_CHANGE	src/redismodule.h	/^#define REDISMODULE_EVENT_REPLICA_CHANGE /;"	d
REDISMODULE_EVENT_REPLROLECHANGED_NOW_MASTER	src/redismodule.h	/^#define REDISMODULE_EVENT_REPLROLECHANGED_NOW_MASTER /;"	d
REDISMODULE_EVENT_REPLROLECHANGED_NOW_REPLICA	src/redismodule.h	/^#define REDISMODULE_EVENT_REPLROLECHANGED_NOW_REPLICA /;"	d
REDISMODULE_EVENT_REPL_BACKUP	src/redismodule.h	/^#define REDISMODULE_EVENT_REPL_BACKUP /;"	d
REDISMODULE_EVENT_SHUTDOWN	src/redismodule.h	/^#define REDISMODULE_EVENT_SHUTDOWN /;"	d
REDISMODULE_EVENT_SWAPDB	src/redismodule.h	/^#define REDISMODULE_EVENT_SWAPDB /;"	d
REDISMODULE_EXPERIMENTAL_API	src/modules/helloacl.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	src/modules/helloblock.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	src/modules/hellocluster.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	src/modules/hellodict.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	src/modules/hellohook.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	src/modules/hellotimer.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/auth.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/basics.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/blockedclient.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/blockonbackground.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/blockonkeys.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/commandfilter.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/defragtest.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/fork.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/getkeys.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/keyspace_events.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/misc.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/propagate.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API	tests/modules/timer.c	/^#define REDISMODULE_EXPERIMENTAL_API$/;"	d	file:
REDISMODULE_EXPERIMENTAL_API_VERSION	src/redismodule.h	/^#define REDISMODULE_EXPERIMENTAL_API_VERSION /;"	d
REDISMODULE_FLUSHINFO_VERSION	src/redismodule.h	/^#define REDISMODULE_FLUSHINFO_VERSION /;"	d
REDISMODULE_GET_API	src/redismodule.h	/^#define REDISMODULE_GET_API(/;"	d
REDISMODULE_H	src/redismodule.h	/^#define REDISMODULE_H$/;"	d
REDISMODULE_HASH_CFIELDS	src/redismodule.h	/^#define REDISMODULE_HASH_CFIELDS /;"	d
REDISMODULE_HASH_COUNT_ALL	src/redismodule.h	/^#define REDISMODULE_HASH_COUNT_ALL /;"	d
REDISMODULE_HASH_DELETE	src/redismodule.h	/^#define REDISMODULE_HASH_DELETE /;"	d
REDISMODULE_HASH_EXISTS	src/redismodule.h	/^#define REDISMODULE_HASH_EXISTS /;"	d
REDISMODULE_HASH_NONE	src/redismodule.h	/^#define REDISMODULE_HASH_NONE /;"	d
REDISMODULE_HASH_NX	src/redismodule.h	/^#define REDISMODULE_HASH_NX /;"	d
REDISMODULE_HASH_XX	src/redismodule.h	/^#define REDISMODULE_HASH_XX /;"	d
REDISMODULE_KEYTYPE_EMPTY	src/redismodule.h	/^#define REDISMODULE_KEYTYPE_EMPTY /;"	d
REDISMODULE_KEYTYPE_HASH	src/redismodule.h	/^#define REDISMODULE_KEYTYPE_HASH /;"	d
REDISMODULE_KEYTYPE_LIST	src/redismodule.h	/^#define REDISMODULE_KEYTYPE_LIST /;"	d
REDISMODULE_KEYTYPE_MODULE	src/redismodule.h	/^#define REDISMODULE_KEYTYPE_MODULE /;"	d
REDISMODULE_KEYTYPE_SET	src/redismodule.h	/^#define REDISMODULE_KEYTYPE_SET /;"	d
REDISMODULE_KEYTYPE_STREAM	src/redismodule.h	/^#define REDISMODULE_KEYTYPE_STREAM /;"	d
REDISMODULE_KEYTYPE_STRING	src/redismodule.h	/^#define REDISMODULE_KEYTYPE_STRING /;"	d
REDISMODULE_KEYTYPE_ZSET	src/redismodule.h	/^#define REDISMODULE_KEYTYPE_ZSET /;"	d
REDISMODULE_LIST_HEAD	src/redismodule.h	/^#define REDISMODULE_LIST_HEAD /;"	d
REDISMODULE_LIST_TAIL	src/redismodule.h	/^#define REDISMODULE_LIST_TAIL /;"	d
REDISMODULE_LOADING_PROGRESS_VERSION	src/redismodule.h	/^#define REDISMODULE_LOADING_PROGRESS_VERSION /;"	d
REDISMODULE_LOGLEVEL_DEBUG	src/redismodule.h	/^#define REDISMODULE_LOGLEVEL_DEBUG /;"	d
REDISMODULE_LOGLEVEL_NOTICE	src/redismodule.h	/^#define REDISMODULE_LOGLEVEL_NOTICE /;"	d
REDISMODULE_LOGLEVEL_VERBOSE	src/redismodule.h	/^#define REDISMODULE_LOGLEVEL_VERBOSE /;"	d
REDISMODULE_LOGLEVEL_WARNING	src/redismodule.h	/^#define REDISMODULE_LOGLEVEL_WARNING /;"	d
REDISMODULE_MODULE_CHANGE_VERSION	src/redismodule.h	/^#define REDISMODULE_MODULE_CHANGE_VERSION /;"	d
REDISMODULE_NEGATIVE_INFINITE	src/redismodule.h	/^#define REDISMODULE_NEGATIVE_INFINITE /;"	d
REDISMODULE_NODE_FAIL	src/redismodule.h	/^#define REDISMODULE_NODE_FAIL /;"	d
REDISMODULE_NODE_ID_LEN	src/redismodule.h	/^#define REDISMODULE_NODE_ID_LEN /;"	d
REDISMODULE_NODE_MASTER	src/redismodule.h	/^#define REDISMODULE_NODE_MASTER /;"	d
REDISMODULE_NODE_MYSELF	src/redismodule.h	/^#define REDISMODULE_NODE_MYSELF /;"	d
REDISMODULE_NODE_NOFAILOVER	src/redismodule.h	/^#define REDISMODULE_NODE_NOFAILOVER /;"	d
REDISMODULE_NODE_PFAIL	src/redismodule.h	/^#define REDISMODULE_NODE_PFAIL /;"	d
REDISMODULE_NODE_SLAVE	src/redismodule.h	/^#define REDISMODULE_NODE_SLAVE /;"	d
REDISMODULE_NOTIFY_ALL	src/redismodule.h	/^#define REDISMODULE_NOTIFY_ALL /;"	d
REDISMODULE_NOTIFY_EVICTED	src/redismodule.h	/^#define REDISMODULE_NOTIFY_EVICTED /;"	d
REDISMODULE_NOTIFY_EXPIRED	src/redismodule.h	/^#define REDISMODULE_NOTIFY_EXPIRED /;"	d
REDISMODULE_NOTIFY_GENERIC	src/redismodule.h	/^#define REDISMODULE_NOTIFY_GENERIC /;"	d
REDISMODULE_NOTIFY_HASH	src/redismodule.h	/^#define REDISMODULE_NOTIFY_HASH /;"	d
REDISMODULE_NOTIFY_KEYEVENT	src/redismodule.h	/^#define REDISMODULE_NOTIFY_KEYEVENT /;"	d
REDISMODULE_NOTIFY_KEYSPACE	src/redismodule.h	/^#define REDISMODULE_NOTIFY_KEYSPACE /;"	d
REDISMODULE_NOTIFY_KEY_MISS	src/redismodule.h	/^#define REDISMODULE_NOTIFY_KEY_MISS /;"	d
REDISMODULE_NOTIFY_LIST	src/redismodule.h	/^#define REDISMODULE_NOTIFY_LIST /;"	d
REDISMODULE_NOTIFY_LOADED	src/redismodule.h	/^#define REDISMODULE_NOTIFY_LOADED /;"	d
REDISMODULE_NOTIFY_MODULE	src/redismodule.h	/^#define REDISMODULE_NOTIFY_MODULE /;"	d
REDISMODULE_NOTIFY_SET	src/redismodule.h	/^#define REDISMODULE_NOTIFY_SET /;"	d
REDISMODULE_NOTIFY_STREAM	src/redismodule.h	/^#define REDISMODULE_NOTIFY_STREAM /;"	d
REDISMODULE_NOTIFY_STRING	src/redismodule.h	/^#define REDISMODULE_NOTIFY_STRING /;"	d
REDISMODULE_NOTIFY_ZSET	src/redismodule.h	/^#define REDISMODULE_NOTIFY_ZSET /;"	d
REDISMODULE_NOT_USED	src/redismodule.h	/^#define REDISMODULE_NOT_USED(/;"	d
REDISMODULE_NO_EXPIRE	src/redismodule.h	/^#define REDISMODULE_NO_EXPIRE /;"	d
REDISMODULE_OK	src/redismodule.h	/^#define REDISMODULE_OK /;"	d
REDISMODULE_OPEN_KEY_NOTOUCH	src/redismodule.h	/^#define REDISMODULE_OPEN_KEY_NOTOUCH /;"	d
REDISMODULE_OPTIONS_HANDLE_IO_ERRORS	src/redismodule.h	/^#define REDISMODULE_OPTIONS_HANDLE_IO_ERRORS /;"	d
REDISMODULE_OPTION_NO_IMPLICIT_SIGNAL_MODIFIED	src/redismodule.h	/^#define REDISMODULE_OPTION_NO_IMPLICIT_SIGNAL_MODIFIED /;"	d
REDISMODULE_POOL_ALLOC_ALIGN	src/module.c	/^#define REDISMODULE_POOL_ALLOC_ALIGN /;"	d	file:
REDISMODULE_POOL_ALLOC_MIN_SIZE	src/module.c	/^#define REDISMODULE_POOL_ALLOC_MIN_SIZE /;"	d	file:
REDISMODULE_POSITIVE_INFINITE	src/redismodule.h	/^#define REDISMODULE_POSITIVE_INFINITE /;"	d
REDISMODULE_POSTPONED_ARRAY_LEN	src/redismodule.h	/^#define REDISMODULE_POSTPONED_ARRAY_LEN /;"	d
REDISMODULE_READ	src/redismodule.h	/^#define REDISMODULE_READ /;"	d
REDISMODULE_REPLICATIONINFO_VERSION	src/redismodule.h	/^#define REDISMODULE_REPLICATIONINFO_VERSION /;"	d
REDISMODULE_REPLYFLAG_NESTED	src/module.c	/^#define REDISMODULE_REPLYFLAG_NESTED /;"	d	file:
REDISMODULE_REPLYFLAG_NONE	src/module.c	/^#define REDISMODULE_REPLYFLAG_NONE /;"	d	file:
REDISMODULE_REPLYFLAG_TOPARSE	src/module.c	/^#define REDISMODULE_REPLYFLAG_TOPARSE /;"	d	file:
REDISMODULE_REPLY_ARRAY	src/redismodule.h	/^#define REDISMODULE_REPLY_ARRAY /;"	d
REDISMODULE_REPLY_ERROR	src/redismodule.h	/^#define REDISMODULE_REPLY_ERROR /;"	d
REDISMODULE_REPLY_INTEGER	src/redismodule.h	/^#define REDISMODULE_REPLY_INTEGER /;"	d
REDISMODULE_REPLY_NULL	src/redismodule.h	/^#define REDISMODULE_REPLY_NULL /;"	d
REDISMODULE_REPLY_STRING	src/redismodule.h	/^#define REDISMODULE_REPLY_STRING /;"	d
REDISMODULE_REPLY_UNKNOWN	src/redismodule.h	/^#define REDISMODULE_REPLY_UNKNOWN /;"	d
REDISMODULE_STREAM_ADD_AUTOID	src/redismodule.h	/^#define REDISMODULE_STREAM_ADD_AUTOID /;"	d
REDISMODULE_STREAM_ITERATOR_EXCLUSIVE	src/redismodule.h	/^#define REDISMODULE_STREAM_ITERATOR_EXCLUSIVE /;"	d
REDISMODULE_STREAM_ITERATOR_REVERSE	src/redismodule.h	/^#define REDISMODULE_STREAM_ITERATOR_REVERSE /;"	d
REDISMODULE_STREAM_TRIM_APPROX	src/redismodule.h	/^#define REDISMODULE_STREAM_TRIM_APPROX /;"	d
REDISMODULE_SUBEVENT_CLIENT_CHANGE_CONNECTED	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_CLIENT_CHANGE_CONNECTED /;"	d
REDISMODULE_SUBEVENT_CLIENT_CHANGE_DISCONNECTED	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_CLIENT_CHANGE_DISCONNECTED /;"	d
REDISMODULE_SUBEVENT_FLUSHDB_END	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_FLUSHDB_END /;"	d
REDISMODULE_SUBEVENT_FLUSHDB_START	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_FLUSHDB_START /;"	d
REDISMODULE_SUBEVENT_FORK_CHILD_BORN	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_FORK_CHILD_BORN /;"	d
REDISMODULE_SUBEVENT_FORK_CHILD_DIED	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_FORK_CHILD_DIED /;"	d
REDISMODULE_SUBEVENT_LOADING_AOF_START	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_LOADING_AOF_START /;"	d
REDISMODULE_SUBEVENT_LOADING_ENDED	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_LOADING_ENDED /;"	d
REDISMODULE_SUBEVENT_LOADING_FAILED	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_LOADING_FAILED /;"	d
REDISMODULE_SUBEVENT_LOADING_PROGRESS_AOF	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_LOADING_PROGRESS_AOF /;"	d
REDISMODULE_SUBEVENT_LOADING_PROGRESS_RDB	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_LOADING_PROGRESS_RDB /;"	d
REDISMODULE_SUBEVENT_LOADING_RDB_START	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_LOADING_RDB_START /;"	d
REDISMODULE_SUBEVENT_LOADING_REPL_START	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_LOADING_REPL_START /;"	d
REDISMODULE_SUBEVENT_MASTER_LINK_DOWN	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_MASTER_LINK_DOWN /;"	d
REDISMODULE_SUBEVENT_MASTER_LINK_UP	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_MASTER_LINK_UP /;"	d
REDISMODULE_SUBEVENT_MODULE_LOADED	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_MODULE_LOADED /;"	d
REDISMODULE_SUBEVENT_MODULE_UNLOADED	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_MODULE_UNLOADED /;"	d
REDISMODULE_SUBEVENT_PERSISTENCE_AOF_START	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_PERSISTENCE_AOF_START /;"	d
REDISMODULE_SUBEVENT_PERSISTENCE_ENDED	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_PERSISTENCE_ENDED /;"	d
REDISMODULE_SUBEVENT_PERSISTENCE_FAILED	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_PERSISTENCE_FAILED /;"	d
REDISMODULE_SUBEVENT_PERSISTENCE_RDB_START	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_PERSISTENCE_RDB_START /;"	d
REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_RDB_START	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_RDB_START /;"	d
REDISMODULE_SUBEVENT_REPLICA_CHANGE_OFFLINE	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_REPLICA_CHANGE_OFFLINE /;"	d
REDISMODULE_SUBEVENT_REPLICA_CHANGE_ONLINE	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_REPLICA_CHANGE_ONLINE /;"	d
REDISMODULE_SUBEVENT_REPL_BACKUP_CREATE	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_REPL_BACKUP_CREATE /;"	d
REDISMODULE_SUBEVENT_REPL_BACKUP_DISCARD	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_REPL_BACKUP_DISCARD /;"	d
REDISMODULE_SUBEVENT_REPL_BACKUP_RESTORE	src/redismodule.h	/^#define REDISMODULE_SUBEVENT_REPL_BACKUP_RESTORE /;"	d
REDISMODULE_SWAPDBINFO_VERSION	src/redismodule.h	/^#define REDISMODULE_SWAPDBINFO_VERSION /;"	d
REDISMODULE_TYPE_ENCVER	src/server.h	/^#define REDISMODULE_TYPE_ENCVER(/;"	d
REDISMODULE_TYPE_ENCVER_BITS	src/server.h	/^#define REDISMODULE_TYPE_ENCVER_BITS /;"	d
REDISMODULE_TYPE_ENCVER_MASK	src/server.h	/^#define REDISMODULE_TYPE_ENCVER_MASK /;"	d
REDISMODULE_TYPE_METHOD_VERSION	src/redismodule.h	/^#define REDISMODULE_TYPE_METHOD_VERSION /;"	d
REDISMODULE_TYPE_SIGN	src/server.h	/^#define REDISMODULE_TYPE_SIGN(/;"	d
REDISMODULE_WRITE	src/redismodule.h	/^#define REDISMODULE_WRITE /;"	d
REDISMODULE_ZADD_ADDED	src/redismodule.h	/^#define REDISMODULE_ZADD_ADDED /;"	d
REDISMODULE_ZADD_GT	src/redismodule.h	/^#define REDISMODULE_ZADD_GT /;"	d
REDISMODULE_ZADD_LT	src/redismodule.h	/^#define REDISMODULE_ZADD_LT /;"	d
REDISMODULE_ZADD_NOP	src/redismodule.h	/^#define REDISMODULE_ZADD_NOP /;"	d
REDISMODULE_ZADD_NX	src/redismodule.h	/^#define REDISMODULE_ZADD_NX /;"	d
REDISMODULE_ZADD_UPDATED	src/redismodule.h	/^#define REDISMODULE_ZADD_UPDATED /;"	d
REDISMODULE_ZADD_XX	src/redismodule.h	/^#define REDISMODULE_ZADD_XX /;"	d
REDISMODULE_ZSET_RANGE_LEX	src/module.c	/^#define REDISMODULE_ZSET_RANGE_LEX /;"	d	file:
REDISMODULE_ZSET_RANGE_NONE	src/module.c	/^#define REDISMODULE_ZSET_RANGE_NONE /;"	d	file:
REDISMODULE_ZSET_RANGE_POS	src/module.c	/^#define REDISMODULE_ZSET_RANGE_POS /;"	d	file:
REDISMODULE_ZSET_RANGE_SCORE	src/module.c	/^#define REDISMODULE_ZSET_RANGE_SCORE /;"	d	file:
REDIS_AGGR_MAX	src/t_zset.c	/^#define REDIS_AGGR_MAX /;"	d	file:
REDIS_AGGR_MIN	src/t_zset.c	/^#define REDIS_AGGR_MIN /;"	d	file:
REDIS_AGGR_SUM	src/t_zset.c	/^#define REDIS_AGGR_SUM /;"	d	file:
REDIS_ATOMIC_API	src/atomicvar.h	/^#define REDIS_ATOMIC_API /;"	d
REDIS_AUTOSYNC_BYTES	src/server.h	/^#define REDIS_AUTOSYNC_BYTES /;"	d
REDIS_BENCHMARK_NAME	src/Makefile	/^REDIS_BENCHMARK_NAME=redis-benchmark$(PROG_SUFFIX)$/;"	m
REDIS_BENCHMARK_OBJ	src/Makefile	/^REDIS_BENCHMARK_OBJ=ae.o anet.o redis-benchmark.o adlist.o dict.o zmalloc.o release.o crcspeed.o/;"	m
REDIS_BLOCK	deps/hiredis/hiredis.h	/^#define REDIS_BLOCK /;"	d
REDIS_BUILD_ID	src/release.h	/^#define REDIS_BUILD_ID /;"	d
REDIS_CC	src/Makefile	/^REDIS_CC=$(QUIET_CC)$(CC) $(FINAL_CFLAGS)$/;"	m
REDIS_CHECK_AOF_NAME	src/Makefile	/^REDIS_CHECK_AOF_NAME=redis-check-aof$(PROG_SUFFIX)$/;"	m
REDIS_CHECK_RDB_NAME	src/Makefile	/^REDIS_CHECK_RDB_NAME=redis-check-rdb$(PROG_SUFFIX)$/;"	m
REDIS_CLI_AUTH_ENV	src/redis-cli.c	/^#define REDIS_CLI_AUTH_ENV /;"	d	file:
REDIS_CLI_CLUSTER_YES_ENV	src/redis-cli.c	/^#define REDIS_CLI_CLUSTER_YES_ENV /;"	d	file:
REDIS_CLI_DEFAULT_PIPE_TIMEOUT	src/redis-cli.c	/^#define REDIS_CLI_DEFAULT_PIPE_TIMEOUT /;"	d	file:
REDIS_CLI_HISTFILE_DEFAULT	src/redis-cli.c	/^#define REDIS_CLI_HISTFILE_DEFAULT /;"	d	file:
REDIS_CLI_HISTFILE_ENV	src/redis-cli.c	/^#define REDIS_CLI_HISTFILE_ENV /;"	d	file:
REDIS_CLI_KEEPALIVE_INTERVAL	src/redis-cli.c	/^#define REDIS_CLI_KEEPALIVE_INTERVAL /;"	d	file:
REDIS_CLI_NAME	src/Makefile	/^REDIS_CLI_NAME=redis-cli$(PROG_SUFFIX)$/;"	m
REDIS_CLI_OBJ	src/Makefile	/^REDIS_CLI_OBJ=anet.o adlist.o dict.o redis-cli.o zmalloc.o release.o ae.o crcspeed.o crc64.o sip/;"	m
REDIS_CLI_RCFILE_DEFAULT	src/redis-cli.c	/^#define REDIS_CLI_RCFILE_DEFAULT /;"	d	file:
REDIS_CLI_RCFILE_ENV	src/redis-cli.c	/^#define REDIS_CLI_RCFILE_ENV /;"	d	file:
REDIS_COMPARE_BINARY	src/object.c	/^#define REDIS_COMPARE_BINARY /;"	d	file:
REDIS_COMPARE_COLL	src/object.c	/^#define REDIS_COMPARE_COLL /;"	d	file:
REDIS_CONFIG_REWRITE_SIGNATURE	src/config.c	/^#define REDIS_CONFIG_REWRITE_SIGNATURE /;"	d	file:
REDIS_CONNECTED	deps/hiredis/hiredis.h	/^#define REDIS_CONNECTED /;"	d
REDIS_CONNECT_RETRIES	deps/hiredis/hiredis.h	/^#define REDIS_CONNECT_RETRIES /;"	d
REDIS_CONN_TCP	deps/hiredis/hiredis.h	/^    REDIS_CONN_TCP,$/;"	e	enum:redisConnectionType
REDIS_CONN_UNIX	deps/hiredis/hiredis.h	/^    REDIS_CONN_UNIX,$/;"	e	enum:redisConnectionType
REDIS_CONN_USERFD	deps/hiredis/hiredis.h	/^    REDIS_CONN_USERFD$/;"	e	enum:redisConnectionType
REDIS_DISCONNECTING	deps/hiredis/hiredis.h	/^#define REDIS_DISCONNECTING /;"	d
REDIS_EL_TIMER	deps/hiredis/async_private.h	/^    #define REDIS_EL_TIMER(/;"	d
REDIS_ERR	deps/hiredis/read.h	/^#define REDIS_ERR /;"	d
REDIS_ERR_EOF	deps/hiredis/read.h	/^#define REDIS_ERR_EOF /;"	d
REDIS_ERR_IO	deps/hiredis/read.h	/^#define REDIS_ERR_IO /;"	d
REDIS_ERR_OOM	deps/hiredis/read.h	/^#define REDIS_ERR_OOM /;"	d
REDIS_ERR_OTHER	deps/hiredis/read.h	/^#define REDIS_ERR_OTHER /;"	d
REDIS_ERR_PROTOCOL	deps/hiredis/read.h	/^#define REDIS_ERR_PROTOCOL /;"	d
REDIS_ERR_TIMEOUT	deps/hiredis/read.h	/^#define REDIS_ERR_TIMEOUT /;"	d
REDIS_FREEING	deps/hiredis/hiredis.h	/^#define REDIS_FREEING /;"	d
REDIS_GIT_DIRTY	src/release.h	/^#define REDIS_GIT_DIRTY /;"	d
REDIS_GIT_SHA1	src/release.h	/^#define REDIS_GIT_SHA1 /;"	d
REDIS_INSTALL	src/Makefile	/^REDIS_INSTALL=$(QUIET_INSTALL)$(INSTALL)$/;"	m
REDIS_INVALID_FD	deps/hiredis/hiredis.h	/^#define REDIS_INVALID_FD /;"	d
REDIS_IN_CALLBACK	deps/hiredis/hiredis.h	/^#define REDIS_IN_CALLBACK /;"	d
REDIS_KEEPALIVE_INTERVAL	deps/hiredis/hiredis.h	/^#define REDIS_KEEPALIVE_INTERVAL /;"	d
REDIS_LD	src/Makefile	/^REDIS_LD=$(QUIET_LINK)$(CC) $(FINAL_LDFLAGS)$/;"	m
REDIS_LIBEVENT_DELETED	deps/hiredis/adapters/libevent.h	/^#define REDIS_LIBEVENT_DELETED /;"	d
REDIS_LIBEVENT_ENTERED	deps/hiredis/adapters/libevent.h	/^#define REDIS_LIBEVENT_ENTERED /;"	d
REDIS_LRAND48_MAX	src/rand.h	/^#define REDIS_LRAND48_MAX /;"	d
REDIS_MONITORING	deps/hiredis/hiredis.h	/^#define REDIS_MONITORING /;"	d
REDIS_NO_AUTO_FREE	deps/hiredis/hiredis.h	/^#define REDIS_NO_AUTO_FREE /;"	d
REDIS_OK	deps/hiredis/read.h	/^#define REDIS_OK /;"	d
REDIS_OPTIONS_SET_PRIVDATA	deps/hiredis/hiredis.h	/^#define REDIS_OPTIONS_SET_PRIVDATA(/;"	d
REDIS_OPTIONS_SET_TCP	deps/hiredis/hiredis.h	/^#define REDIS_OPTIONS_SET_TCP(/;"	d
REDIS_OPTIONS_SET_UNIX	deps/hiredis/hiredis.h	/^#define REDIS_OPTIONS_SET_UNIX(/;"	d
REDIS_OPT_NOAUTOFREE	deps/hiredis/hiredis.h	/^#define REDIS_OPT_NOAUTOFREE /;"	d
REDIS_OPT_NONBLOCK	deps/hiredis/hiredis.h	/^#define REDIS_OPT_NONBLOCK /;"	d
REDIS_OPT_NO_PUSH_AUTOFREE	deps/hiredis/hiredis.h	/^#define REDIS_OPT_NO_PUSH_AUTOFREE /;"	d
REDIS_OPT_REUSEADDR	deps/hiredis/hiredis.h	/^#define REDIS_OPT_REUSEADDR /;"	d
REDIS_PORT	deps/hiredis/Makefile	/^REDIS_PORT=56379$/;"	m
REDIS_RANDOM_H	src/rand.h	/^#define REDIS_RANDOM_H$/;"	d
REDIS_READER_MAX_ARRAY_ELEMENTS	deps/hiredis/read.h	/^#define REDIS_READER_MAX_ARRAY_ELEMENTS /;"	d
REDIS_READER_MAX_BUF	deps/hiredis/read.h	/^#define REDIS_READER_MAX_BUF /;"	d
REDIS_READER_STACK_SIZE	deps/hiredis/read.c	/^#define REDIS_READER_STACK_SIZE /;"	d	file:
REDIS_REPLY_ARRAY	deps/hiredis/read.h	/^#define REDIS_REPLY_ARRAY /;"	d
REDIS_REPLY_ATTR	deps/hiredis/read.h	/^#define REDIS_REPLY_ATTR /;"	d
REDIS_REPLY_BIGNUM	deps/hiredis/read.h	/^#define REDIS_REPLY_BIGNUM /;"	d
REDIS_REPLY_BOOL	deps/hiredis/read.h	/^#define REDIS_REPLY_BOOL /;"	d
REDIS_REPLY_DOUBLE	deps/hiredis/read.h	/^#define REDIS_REPLY_DOUBLE /;"	d
REDIS_REPLY_ERROR	deps/hiredis/read.h	/^#define REDIS_REPLY_ERROR /;"	d
REDIS_REPLY_INTEGER	deps/hiredis/read.h	/^#define REDIS_REPLY_INTEGER /;"	d
REDIS_REPLY_MAP	deps/hiredis/read.h	/^#define REDIS_REPLY_MAP /;"	d
REDIS_REPLY_NIL	deps/hiredis/read.h	/^#define REDIS_REPLY_NIL /;"	d
REDIS_REPLY_PUSH	deps/hiredis/read.h	/^#define REDIS_REPLY_PUSH /;"	d
REDIS_REPLY_SET	deps/hiredis/read.h	/^#define REDIS_REPLY_SET /;"	d
REDIS_REPLY_STATUS	deps/hiredis/read.h	/^#define REDIS_REPLY_STATUS /;"	d
REDIS_REPLY_STRING	deps/hiredis/read.h	/^#define REDIS_REPLY_STRING /;"	d
REDIS_REPLY_VERB	deps/hiredis/read.h	/^#define REDIS_REPLY_VERB /;"	d
REDIS_REUSEADDR	deps/hiredis/hiredis.h	/^#define REDIS_REUSEADDR /;"	d
REDIS_SENTINEL_NAME	src/Makefile	/^REDIS_SENTINEL_NAME=redis-sentinel$(PROG_SUFFIX)$/;"	m
REDIS_SENTINEL_PORT	src/sentinel.c	/^#define REDIS_SENTINEL_PORT /;"	d	file:
REDIS_SERVER	deps/hiredis/Makefile	/^REDIS_SERVER=redis-server$/;"	m
REDIS_SERVER_NAME	src/Makefile	/^REDIS_SERVER_NAME=redis-server$(PROG_SUFFIX)$/;"	m
REDIS_SERVER_OBJ	src/Makefile	/^REDIS_SERVER_OBJ=adlist.o quicklist.o ae.o anet.o dict.o server.o sds.o zmalloc.o lzf_c.o lzf_d./;"	m
REDIS_SOCKCOMPAT_IMPLEMENTATION	deps/hiredis/sockcompat.c	/^#define REDIS_SOCKCOMPAT_IMPLEMENTATION$/;"	d	file:
REDIS_SSL_CTX_CA_CERT_LOAD_FAILED	deps/hiredis/hiredis_ssl.h	/^    REDIS_SSL_CTX_CA_CERT_LOAD_FAILED,          \/* Failed to load CA Certificate or CA Path *\/$/;"	e	enum:__anon4549dee60103
REDIS_SSL_CTX_CERT_KEY_REQUIRED	deps/hiredis/hiredis_ssl.h	/^    REDIS_SSL_CTX_CERT_KEY_REQUIRED,            \/* Client cert and key must both be specified o/;"	e	enum:__anon4549dee60103
REDIS_SSL_CTX_CLIENT_CERT_LOAD_FAILED	deps/hiredis/hiredis_ssl.h	/^    REDIS_SSL_CTX_CLIENT_CERT_LOAD_FAILED,      \/* Failed to load client certificate *\/$/;"	e	enum:__anon4549dee60103
REDIS_SSL_CTX_CREATE_FAILED	deps/hiredis/hiredis_ssl.h	/^    REDIS_SSL_CTX_CREATE_FAILED,                \/* Failed to create OpenSSL SSL_CTX *\/$/;"	e	enum:__anon4549dee60103
REDIS_SSL_CTX_NONE	deps/hiredis/hiredis_ssl.h	/^    REDIS_SSL_CTX_NONE = 0,                     \/* No Error *\/$/;"	e	enum:__anon4549dee60103
REDIS_SSL_CTX_PRIVATE_KEY_LOAD_FAILED	deps/hiredis/hiredis_ssl.h	/^    REDIS_SSL_CTX_PRIVATE_KEY_LOAD_FAILED       \/* Failed to load private key *\/$/;"	e	enum:__anon4549dee60103
REDIS_STATIC	src/quicklist.c	/^#define REDIS_STATIC /;"	d	file:
REDIS_SUBSCRIBED	deps/hiredis/hiredis.h	/^#define REDIS_SUBSCRIBED /;"	d
REDIS_TEST_CONFIG	deps/hiredis/Makefile	/^define REDIS_TEST_CONFIG$/;"	m
REDIS_THREAD_STACK_SIZE	src/bio.c	/^#define REDIS_THREAD_STACK_SIZE /;"	d	file:
REDIS_TIMER_ISSET	deps/hiredis/async_private.h	/^    #define REDIS_TIMER_ISSET(/;"	d
REDIS_TLS_PROTO_DEFAULT	src/tls.c	/^#define REDIS_TLS_PROTO_DEFAULT /;"	d	file:
REDIS_TLS_PROTO_TLSv1	src/tls.c	/^#define REDIS_TLS_PROTO_TLSv1 /;"	d	file:
REDIS_TLS_PROTO_TLSv1_1	src/tls.c	/^#define REDIS_TLS_PROTO_TLSv1_1 /;"	d	file:
REDIS_TLS_PROTO_TLSv1_2	src/tls.c	/^#define REDIS_TLS_PROTO_TLSv1_2 /;"	d	file:
REDIS_TLS_PROTO_TLSv1_3	src/tls.c	/^#define REDIS_TLS_PROTO_TLSv1_3 /;"	d	file:
REDIS_VERSION	src/version.h	/^#define REDIS_VERSION /;"	d
REDIS_VERSION_FIELD	deps/hiredis/test.c	/^#define REDIS_VERSION_FIELD /;"	d	file:
REDIS_VERSION_NUM	src/version.h	/^#define REDIS_VERSION_NUM /;"	d
REGIND_bin_no	deps/jemalloc/src/arena.c	/^#define REGIND_bin_no(/;"	d	file:
REGIND_bin_yes	deps/jemalloc/src/arena.c	/^#define REGIND_bin_yes(/;"	d	file:
REGISTER_API	src/module.c	/^#define REGISTER_API(/;"	d	file:
REPL_DISKLESS_LOAD_DISABLED	src/server.h	/^#define REPL_DISKLESS_LOAD_DISABLED /;"	d
REPL_DISKLESS_LOAD_SWAPDB	src/server.h	/^#define REPL_DISKLESS_LOAD_SWAPDB /;"	d
REPL_DISKLESS_LOAD_WHEN_DB_EMPTY	src/server.h	/^#define REPL_DISKLESS_LOAD_WHEN_DB_EMPTY /;"	d
REPL_MAX_WRITTEN_BEFORE_FSYNC	src/replication.c	/^#define REPL_MAX_WRITTEN_BEFORE_FSYNC /;"	d	file:
REPL_STATE_CONNECT	src/server.h	/^    REPL_STATE_CONNECT,             \/* Must connect to master *\/$/;"	e	enum:__anon3ef696e90103
REPL_STATE_CONNECTED	src/server.h	/^    REPL_STATE_CONNECTED,       \/* Connected to master *\/$/;"	e	enum:__anon3ef696e90103
REPL_STATE_CONNECTING	src/server.h	/^    REPL_STATE_CONNECTING,          \/* Connecting to master *\/$/;"	e	enum:__anon3ef696e90103
REPL_STATE_NONE	src/server.h	/^    REPL_STATE_NONE = 0,            \/* No active replication *\/$/;"	e	enum:__anon3ef696e90103
REPL_STATE_RECEIVE_AUTH_REPLY	src/server.h	/^    REPL_STATE_RECEIVE_AUTH_REPLY,  \/* Wait for AUTH reply *\/$/;"	e	enum:__anon3ef696e90103
REPL_STATE_RECEIVE_CAPA_REPLY	src/server.h	/^    REPL_STATE_RECEIVE_CAPA_REPLY,  \/* Wait for REPLCONF reply *\/$/;"	e	enum:__anon3ef696e90103
REPL_STATE_RECEIVE_IP_REPLY	src/server.h	/^    REPL_STATE_RECEIVE_IP_REPLY,    \/* Wait for REPLCONF reply *\/$/;"	e	enum:__anon3ef696e90103
REPL_STATE_RECEIVE_PING_REPLY	src/server.h	/^    REPL_STATE_RECEIVE_PING_REPLY,  \/* Wait for PING reply *\/$/;"	e	enum:__anon3ef696e90103
REPL_STATE_RECEIVE_PORT_REPLY	src/server.h	/^    REPL_STATE_RECEIVE_PORT_REPLY,  \/* Wait for REPLCONF reply *\/$/;"	e	enum:__anon3ef696e90103
REPL_STATE_RECEIVE_PSYNC_REPLY	src/server.h	/^    REPL_STATE_RECEIVE_PSYNC_REPLY, \/* Wait for PSYNC reply *\/$/;"	e	enum:__anon3ef696e90103
REPL_STATE_SEND_HANDSHAKE	src/server.h	/^    REPL_STATE_SEND_HANDSHAKE,      \/* Send handshake sequance to master *\/$/;"	e	enum:__anon3ef696e90103
REPL_STATE_SEND_PSYNC	src/server.h	/^    REPL_STATE_SEND_PSYNC,          \/* Send PSYNC *\/$/;"	e	enum:__anon3ef696e90103
REPL_STATE_TRANSFER	src/server.h	/^    REPL_STATE_TRANSFER,        \/* Receiving .rdb from master *\/$/;"	e	enum:__anon3ef696e90103
RESERVED	deps/lua/src/llex.h	/^enum RESERVED {$/;"	g
RESET_INTERVAL	deps/jemalloc/test/unit/prof_reset.c	/^#define RESET_INTERVAL	/;"	d	file:
REST	src/rand.c	/^#define REST(/;"	d	file:
RESTART_SERVER_CONFIG_REWRITE	src/server.h	/^#define RESTART_SERVER_CONFIG_REWRITE /;"	d
RESTART_SERVER_GRACEFULLY	src/server.h	/^#define RESTART_SERVER_GRACEFULLY /;"	d
RESTART_SERVER_NONE	src/server.h	/^#define RESTART_SERVER_NONE /;"	d
REV	deps/jemalloc/Makefile	/^REV := 2$/;"	m
REV	deps/jemalloc/Makefile.in	/^REV := @rev@$/;"	m
RIO_FLAG_READ_ERROR	src/rio.h	/^#define RIO_FLAG_READ_ERROR /;"	d
RIO_FLAG_WRITE_ERROR	src/rio.h	/^#define RIO_FLAG_WRITE_ERROR /;"	d
RKASK	deps/lua/src/lopcodes.h	/^#define RKASK(/;"	d
RKB	deps/lua/src/lvm.c	/^#define RKB(/;"	d	file:
RKC	deps/lua/src/lvm.c	/^#define RKC(/;"	d	file:
RM	deps/lua/etc/Makefile	/^RM= rm -f$/;"	m
RM	deps/lua/src/Makefile	/^RM= rm -f$/;"	m
RMAPI_FUNC_SUPPORTED	src/redismodule.h	/^#define RMAPI_FUNC_SUPPORTED(/;"	d
RM_AbortBlock	src/module.c	/^int RM_AbortBlock(RedisModuleBlockedClient *bc) {$/;"	f	typeref:typename:int
RM_Alloc	src/module.c	/^void *RM_Alloc(size_t bytes) {$/;"	f	typeref:typename:void *
RM_AuthenticateClientWithACLUser	src/module.c	/^int RM_AuthenticateClientWithACLUser(RedisModuleCtx *ctx, const char *name, size_t len, RedisMod/;"	f	typeref:typename:int
RM_AuthenticateClientWithUser	src/module.c	/^int RM_AuthenticateClientWithUser(RedisModuleCtx *ctx, RedisModuleUser *module_user, RedisModule/;"	f	typeref:typename:int
RM_AutoMemory	src/module.c	/^void RM_AutoMemory(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:void
RM_AvoidReplicaTraffic	src/module.c	/^int RM_AvoidReplicaTraffic() {$/;"	f	typeref:typename:int
RM_BlockClient	src/module.c	/^RedisModuleBlockedClient *RM_BlockClient(RedisModuleCtx *ctx, RedisModuleCmdFunc reply_callback,/;"	f	typeref:typename:RedisModuleBlockedClient *
RM_BlockClientOnKeys	src/module.c	/^RedisModuleBlockedClient *RM_BlockClientOnKeys(RedisModuleCtx *ctx, RedisModuleCmdFunc reply_cal/;"	f	typeref:typename:RedisModuleBlockedClient *
RM_BlockedClientDisconnected	src/module.c	/^int RM_BlockedClientDisconnected(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RM_BlockedClientMeasureTimeEnd	src/module.c	/^int RM_BlockedClientMeasureTimeEnd(RedisModuleBlockedClient *bc) {$/;"	f	typeref:typename:int
RM_BlockedClientMeasureTimeStart	src/module.c	/^int RM_BlockedClientMeasureTimeStart(RedisModuleBlockedClient *bc) {$/;"	f	typeref:typename:int
RM_Call	src/module.c	/^RedisModuleCallReply *RM_Call(RedisModuleCtx *ctx, const char *cmdname, const char *fmt, ...) {$/;"	f	typeref:typename:RedisModuleCallReply *
RM_CallReplyArrayElement	src/module.c	/^RedisModuleCallReply *RM_CallReplyArrayElement(RedisModuleCallReply *reply, size_t idx) {$/;"	f	typeref:typename:RedisModuleCallReply *
RM_CallReplyInteger	src/module.c	/^long long RM_CallReplyInteger(RedisModuleCallReply *reply) {$/;"	f	typeref:typename:long long
RM_CallReplyLength	src/module.c	/^size_t RM_CallReplyLength(RedisModuleCallReply *reply) {$/;"	f	typeref:typename:size_t
RM_CallReplyProto	src/module.c	/^const char *RM_CallReplyProto(RedisModuleCallReply *reply, size_t *len) {$/;"	f	typeref:typename:const char *
RM_CallReplyStringPtr	src/module.c	/^const char *RM_CallReplyStringPtr(RedisModuleCallReply *reply, size_t *len) {$/;"	f	typeref:typename:const char *
RM_CallReplyType	src/module.c	/^int RM_CallReplyType(RedisModuleCallReply *reply) {$/;"	f	typeref:typename:int
RM_Calloc	src/module.c	/^void *RM_Calloc(size_t nmemb, size_t size) {$/;"	f	typeref:typename:void *
RM_CloseKey	src/module.c	/^void RM_CloseKey(RedisModuleKey *key) {$/;"	f	typeref:typename:void
RM_CommandFilterArgDelete	src/module.c	/^int RM_CommandFilterArgDelete(RedisModuleCommandFilterCtx *fctx, int pos)$/;"	f	typeref:typename:int
RM_CommandFilterArgGet	src/module.c	/^const RedisModuleString *RM_CommandFilterArgGet(RedisModuleCommandFilterCtx *fctx, int pos)$/;"	f	typeref:typename:const RedisModuleString *
RM_CommandFilterArgInsert	src/module.c	/^int RM_CommandFilterArgInsert(RedisModuleCommandFilterCtx *fctx, int pos, RedisModuleString *arg/;"	f	typeref:typename:int
RM_CommandFilterArgReplace	src/module.c	/^int RM_CommandFilterArgReplace(RedisModuleCommandFilterCtx *fctx, int pos, RedisModuleString *ar/;"	f	typeref:typename:int
RM_CommandFilterArgsCount	src/module.c	/^int RM_CommandFilterArgsCount(RedisModuleCommandFilterCtx *fctx)$/;"	f	typeref:typename:int
RM_CreateCommand	src/module.c	/^int RM_CreateCommand(RedisModuleCtx *ctx, const char *name, RedisModuleCmdFunc cmdfunc, const ch/;"	f	typeref:typename:int
RM_CreateDataType	src/module.c	/^moduleType *RM_CreateDataType(RedisModuleCtx *ctx, const char *name, int encver, void *typemetho/;"	f	typeref:typename:moduleType *
RM_CreateDict	src/module.c	/^RedisModuleDict *RM_CreateDict(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:RedisModuleDict *
RM_CreateModuleUser	src/module.c	/^RedisModuleUser *RM_CreateModuleUser(const char *name) {$/;"	f	typeref:typename:RedisModuleUser *
RM_CreateString	src/module.c	/^RedisModuleString *RM_CreateString(RedisModuleCtx *ctx, const char *ptr, size_t len) {$/;"	f	typeref:typename:RedisModuleString *
RM_CreateStringFromCallReply	src/module.c	/^RedisModuleString *RM_CreateStringFromCallReply(RedisModuleCallReply *reply) {$/;"	f	typeref:typename:RedisModuleString *
RM_CreateStringFromDouble	src/module.c	/^RedisModuleString *RM_CreateStringFromDouble(RedisModuleCtx *ctx, double d) {$/;"	f	typeref:typename:RedisModuleString *
RM_CreateStringFromLongDouble	src/module.c	/^RedisModuleString *RM_CreateStringFromLongDouble(RedisModuleCtx *ctx, long double ld, int humanf/;"	f	typeref:typename:RedisModuleString *
RM_CreateStringFromLongLong	src/module.c	/^RedisModuleString *RM_CreateStringFromLongLong(RedisModuleCtx *ctx, long long ll) {$/;"	f	typeref:typename:RedisModuleString *
RM_CreateStringFromStreamID	src/module.c	/^RedisModuleString *RM_CreateStringFromStreamID(RedisModuleCtx *ctx, const RedisModuleStreamID *i/;"	f	typeref:typename:RedisModuleString *
RM_CreateStringFromString	src/module.c	/^RedisModuleString *RM_CreateStringFromString(RedisModuleCtx *ctx, const RedisModuleString *str) /;"	f	typeref:typename:RedisModuleString *
RM_CreateStringPrintf	src/module.c	/^RedisModuleString *RM_CreateStringPrintf(RedisModuleCtx *ctx, const char *fmt, ...) {$/;"	f	typeref:typename:RedisModuleString *
RM_CreateTimer	src/module.c	/^RedisModuleTimerID RM_CreateTimer(RedisModuleCtx *ctx, mstime_t period, RedisModuleTimerProc cal/;"	f	typeref:typename:RedisModuleTimerID
RM_DbSize	src/module.c	/^unsigned long long RM_DbSize(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:unsigned long long
RM_DeauthenticateAndCloseClient	src/module.c	/^int RM_DeauthenticateAndCloseClient(RedisModuleCtx *ctx, uint64_t client_id) {$/;"	f	typeref:typename:int
RM_DefragAlloc	src/module.c	/^void *RM_DefragAlloc(RedisModuleDefragCtx *ctx, void *ptr) {$/;"	f	typeref:typename:void *
RM_DefragCursorGet	src/module.c	/^int RM_DefragCursorGet(RedisModuleDefragCtx *ctx, unsigned long *cursor) {$/;"	f	typeref:typename:int
RM_DefragCursorSet	src/module.c	/^int RM_DefragCursorSet(RedisModuleDefragCtx *ctx, unsigned long cursor) {$/;"	f	typeref:typename:int
RM_DefragRedisModuleString	src/module.c	/^RedisModuleString *RM_DefragRedisModuleString(RedisModuleDefragCtx *ctx, RedisModuleString *str)/;"	f	typeref:typename:RedisModuleString *
RM_DefragShouldStop	src/module.c	/^int RM_DefragShouldStop(RedisModuleDefragCtx *ctx) {$/;"	f	typeref:typename:int
RM_DeleteKey	src/module.c	/^int RM_DeleteKey(RedisModuleKey *key) {$/;"	f	typeref:typename:int
RM_DictCompare	src/module.c	/^int RM_DictCompare(RedisModuleDictIter *di, const char *op, RedisModuleString *key) {$/;"	f	typeref:typename:int
RM_DictCompareC	src/module.c	/^int RM_DictCompareC(RedisModuleDictIter *di, const char *op, void *key, size_t keylen) {$/;"	f	typeref:typename:int
RM_DictDel	src/module.c	/^int RM_DictDel(RedisModuleDict *d, RedisModuleString *key, void *oldval) {$/;"	f	typeref:typename:int
RM_DictDelC	src/module.c	/^int RM_DictDelC(RedisModuleDict *d, void *key, size_t keylen, void *oldval) {$/;"	f	typeref:typename:int
RM_DictGet	src/module.c	/^void *RM_DictGet(RedisModuleDict *d, RedisModuleString *key, int *nokey) {$/;"	f	typeref:typename:void *
RM_DictGetC	src/module.c	/^void *RM_DictGetC(RedisModuleDict *d, void *key, size_t keylen, int *nokey) {$/;"	f	typeref:typename:void *
RM_DictIteratorReseek	src/module.c	/^int RM_DictIteratorReseek(RedisModuleDictIter *di, const char *op, RedisModuleString *key) {$/;"	f	typeref:typename:int
RM_DictIteratorReseekC	src/module.c	/^int RM_DictIteratorReseekC(RedisModuleDictIter *di, const char *op, void *key, size_t keylen) {$/;"	f	typeref:typename:int
RM_DictIteratorStart	src/module.c	/^RedisModuleDictIter *RM_DictIteratorStart(RedisModuleDict *d, const char *op, RedisModuleString /;"	f	typeref:typename:RedisModuleDictIter *
RM_DictIteratorStartC	src/module.c	/^RedisModuleDictIter *RM_DictIteratorStartC(RedisModuleDict *d, const char *op, void *key, size_t/;"	f	typeref:typename:RedisModuleDictIter *
RM_DictIteratorStop	src/module.c	/^void RM_DictIteratorStop(RedisModuleDictIter *di) {$/;"	f	typeref:typename:void
RM_DictNext	src/module.c	/^RedisModuleString *RM_DictNext(RedisModuleCtx *ctx, RedisModuleDictIter *di, void **dataptr) {$/;"	f	typeref:typename:RedisModuleString *
RM_DictNextC	src/module.c	/^void *RM_DictNextC(RedisModuleDictIter *di, size_t *keylen, void **dataptr) {$/;"	f	typeref:typename:void *
RM_DictPrev	src/module.c	/^RedisModuleString *RM_DictPrev(RedisModuleCtx *ctx, RedisModuleDictIter *di, void **dataptr) {$/;"	f	typeref:typename:RedisModuleString *
RM_DictPrevC	src/module.c	/^void *RM_DictPrevC(RedisModuleDictIter *di, size_t *keylen, void **dataptr) {$/;"	f	typeref:typename:void *
RM_DictReplace	src/module.c	/^int RM_DictReplace(RedisModuleDict *d, RedisModuleString *key, void *ptr) {$/;"	f	typeref:typename:int
RM_DictReplaceC	src/module.c	/^int RM_DictReplaceC(RedisModuleDict *d, void *key, size_t keylen, void *ptr) {$/;"	f	typeref:typename:int
RM_DictSet	src/module.c	/^int RM_DictSet(RedisModuleDict *d, RedisModuleString *key, void *ptr) {$/;"	f	typeref:typename:int
RM_DictSetC	src/module.c	/^int RM_DictSetC(RedisModuleDict *d, void *key, size_t keylen, void *ptr) {$/;"	f	typeref:typename:int
RM_DictSize	src/module.c	/^uint64_t RM_DictSize(RedisModuleDict *d) {$/;"	f	typeref:typename:uint64_t
RM_DigestAddLongLong	src/module.c	/^void RM_DigestAddLongLong(RedisModuleDigest *md, long long ll) {$/;"	f	typeref:typename:void
RM_DigestAddStringBuffer	src/module.c	/^void RM_DigestAddStringBuffer(RedisModuleDigest *md, unsigned char *ele, size_t len) {$/;"	f	typeref:typename:void
RM_DigestEndSequence	src/module.c	/^void RM_DigestEndSequence(RedisModuleDigest *md) {$/;"	f	typeref:typename:void
RM_EmitAOF	src/module.c	/^void RM_EmitAOF(RedisModuleIO *io, const char *cmdname, const char *fmt, ...) {$/;"	f	typeref:typename:void
RM_ExitFromChild	src/module.c	/^int RM_ExitFromChild(int retcode) {$/;"	f	typeref:typename:int
RM_ExportSharedAPI	src/module.c	/^int RM_ExportSharedAPI(RedisModuleCtx *ctx, const char *apiname, void *func) {$/;"	f	typeref:typename:int
RM_Fork	src/module.c	/^int RM_Fork(RedisModuleForkDoneHandler cb, void *user_data) {$/;"	f	typeref:typename:int
RM_Free	src/module.c	/^void RM_Free(void *ptr) {$/;"	f	typeref:typename:void
RM_FreeCallReply	src/module.c	/^void RM_FreeCallReply(RedisModuleCallReply *reply) {$/;"	f	typeref:typename:void
RM_FreeClusterNodesList	src/module.c	/^void RM_FreeClusterNodesList(char **ids) {$/;"	f	typeref:typename:void
RM_FreeDict	src/module.c	/^void RM_FreeDict(RedisModuleCtx *ctx, RedisModuleDict *d) {$/;"	f	typeref:typename:void
RM_FreeModuleUser	src/module.c	/^int RM_FreeModuleUser(RedisModuleUser *user) {$/;"	f	typeref:typename:int
RM_FreeServerInfo	src/module.c	/^void RM_FreeServerInfo(RedisModuleCtx *ctx, RedisModuleServerInfoData *data) {$/;"	f	typeref:typename:void
RM_FreeString	src/module.c	/^void RM_FreeString(RedisModuleCtx *ctx, RedisModuleString *str) {$/;"	f	typeref:typename:void
RM_FreeThreadSafeContext	src/module.c	/^void RM_FreeThreadSafeContext(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:void
RM_GetAbsExpire	src/module.c	/^mstime_t RM_GetAbsExpire(RedisModuleKey *key) {$/;"	f	typeref:typename:mstime_t
RM_GetApi	src/module.c	/^int RM_GetApi(const char *funcname, void **targetPtrPtr) {$/;"	f	typeref:typename:int
RM_GetBlockedClientHandle	src/module.c	/^RedisModuleBlockedClient *RM_GetBlockedClientHandle(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:RedisModuleBlockedClient *
RM_GetBlockedClientPrivateData	src/module.c	/^void *RM_GetBlockedClientPrivateData(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:void *
RM_GetBlockedClientReadyKey	src/module.c	/^RedisModuleString *RM_GetBlockedClientReadyKey(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:RedisModuleString *
RM_GetClientCertificate	src/module.c	/^RedisModuleString *RM_GetClientCertificate(RedisModuleCtx *ctx, uint64_t client_id) {$/;"	f	typeref:typename:RedisModuleString *
RM_GetClientId	src/module.c	/^unsigned long long RM_GetClientId(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:unsigned long long
RM_GetClientInfoById	src/module.c	/^int RM_GetClientInfoById(void *ci, uint64_t id) {$/;"	f	typeref:typename:int
RM_GetClientUserNameById	src/module.c	/^RedisModuleString *RM_GetClientUserNameById(RedisModuleCtx *ctx, uint64_t id) {$/;"	f	typeref:typename:RedisModuleString *
RM_GetClusterNodeInfo	src/module.c	/^int RM_GetClusterNodeInfo(RedisModuleCtx *ctx, const char *id, char *ip, char *master_id, int *p/;"	f	typeref:typename:int
RM_GetClusterNodesList	src/module.c	/^char **RM_GetClusterNodesList(RedisModuleCtx *ctx, size_t *numnodes) {$/;"	f	typeref:typename:char **
RM_GetClusterSize	src/module.c	/^size_t RM_GetClusterSize(void) {$/;"	f	typeref:typename:size_t
RM_GetCommandKeys	src/module.c	/^int *RM_GetCommandKeys(RedisModuleCtx *ctx, RedisModuleString **argv, int argc, int *num_keys) {$/;"	f	typeref:typename:int *
RM_GetContextFlags	src/module.c	/^int RM_GetContextFlags(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RM_GetContextFlagsAll	src/module.c	/^int RM_GetContextFlagsAll() {$/;"	f	typeref:typename:int
RM_GetContextFromIO	src/module.c	/^RedisModuleCtx *RM_GetContextFromIO(RedisModuleIO *io) {$/;"	f	typeref:typename:RedisModuleCtx *
RM_GetCurrentCommandName	src/module.c	/^const char *RM_GetCurrentCommandName(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:const char *
RM_GetDetachedThreadSafeContext	src/module.c	/^RedisModuleCtx *RM_GetDetachedThreadSafeContext(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:RedisModuleCtx *
RM_GetExpire	src/module.c	/^mstime_t RM_GetExpire(RedisModuleKey *key) {$/;"	f	typeref:typename:mstime_t
RM_GetKeyNameFromIO	src/module.c	/^const RedisModuleString *RM_GetKeyNameFromIO(RedisModuleIO *io) {$/;"	f	typeref:typename:const RedisModuleString *
RM_GetKeyNameFromModuleKey	src/module.c	/^const RedisModuleString *RM_GetKeyNameFromModuleKey(RedisModuleKey *key) {$/;"	f	typeref:typename:const RedisModuleString *
RM_GetKeyspaceNotificationFlagsAll	src/module.c	/^int RM_GetKeyspaceNotificationFlagsAll() {$/;"	f	typeref:typename:int
RM_GetLFU	src/module.c	/^int RM_GetLFU(RedisModuleKey *key, long long *lfu_freq) {$/;"	f	typeref:typename:int
RM_GetLRU	src/module.c	/^int RM_GetLRU(RedisModuleKey *key, mstime_t *lru_idle) {$/;"	f	typeref:typename:int
RM_GetMyClusterID	src/module.c	/^const char *RM_GetMyClusterID(void) {$/;"	f	typeref:typename:const char *
RM_GetNotifyKeyspaceEvents	src/module.c	/^int RM_GetNotifyKeyspaceEvents() {$/;"	f	typeref:typename:int
RM_GetRandomBytes	src/module.c	/^void RM_GetRandomBytes(unsigned char *dst, size_t len) {$/;"	f	typeref:typename:void
RM_GetRandomHexChars	src/module.c	/^void RM_GetRandomHexChars(char *dst, size_t len) {$/;"	f	typeref:typename:void
RM_GetSelectedDb	src/module.c	/^int RM_GetSelectedDb(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RM_GetServerInfo	src/module.c	/^RedisModuleServerInfoData *RM_GetServerInfo(RedisModuleCtx *ctx, const char *section) {$/;"	f	typeref:typename:RedisModuleServerInfoData *
RM_GetServerVersion	src/module.c	/^int RM_GetServerVersion() {$/;"	f	typeref:typename:int
RM_GetSharedAPI	src/module.c	/^void *RM_GetSharedAPI(RedisModuleCtx *ctx, const char *apiname) {$/;"	f	typeref:typename:void *
RM_GetThreadSafeContext	src/module.c	/^RedisModuleCtx *RM_GetThreadSafeContext(RedisModuleBlockedClient *bc) {$/;"	f	typeref:typename:RedisModuleCtx *
RM_GetTimerInfo	src/module.c	/^int RM_GetTimerInfo(RedisModuleCtx *ctx, RedisModuleTimerID id, uint64_t *remaining, void **data/;"	f	typeref:typename:int
RM_GetTypeMethodVersion	src/module.c	/^int RM_GetTypeMethodVersion() {$/;"	f	typeref:typename:int
RM_GetUsedMemoryRatio	src/module.c	/^float RM_GetUsedMemoryRatio(){$/;"	f	typeref:typename:float
RM_HashGet	src/module.c	/^int RM_HashGet(RedisModuleKey *key, int flags, ...) {$/;"	f	typeref:typename:int
RM_HashSet	src/module.c	/^int RM_HashSet(RedisModuleKey *key, int flags, ...) {$/;"	f	typeref:typename:int
RM_HoldString	src/module.c	/^RedisModuleString* RM_HoldString(RedisModuleCtx *ctx, RedisModuleString *str) {$/;"	f	typeref:typename:RedisModuleString *
RM_InfoAddFieldCString	src/module.c	/^int RM_InfoAddFieldCString(RedisModuleInfoCtx *ctx, char *field, char *value) {$/;"	f	typeref:typename:int
RM_InfoAddFieldDouble	src/module.c	/^int RM_InfoAddFieldDouble(RedisModuleInfoCtx *ctx, char *field, double value) {$/;"	f	typeref:typename:int
RM_InfoAddFieldLongLong	src/module.c	/^int RM_InfoAddFieldLongLong(RedisModuleInfoCtx *ctx, char *field, long long value) {$/;"	f	typeref:typename:int
RM_InfoAddFieldString	src/module.c	/^int RM_InfoAddFieldString(RedisModuleInfoCtx *ctx, char *field, RedisModuleString *value) {$/;"	f	typeref:typename:int
RM_InfoAddFieldULongLong	src/module.c	/^int RM_InfoAddFieldULongLong(RedisModuleInfoCtx *ctx, char *field, unsigned long long value) {$/;"	f	typeref:typename:int
RM_InfoAddSection	src/module.c	/^int RM_InfoAddSection(RedisModuleInfoCtx *ctx, char *name) {$/;"	f	typeref:typename:int
RM_InfoBeginDictField	src/module.c	/^int RM_InfoBeginDictField(RedisModuleInfoCtx *ctx, char *name) {$/;"	f	typeref:typename:int
RM_InfoEndDictField	src/module.c	/^int RM_InfoEndDictField(RedisModuleInfoCtx *ctx) {$/;"	f	typeref:typename:int
RM_IsBlockedReplyRequest	src/module.c	/^int RM_IsBlockedReplyRequest(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RM_IsBlockedTimeoutRequest	src/module.c	/^int RM_IsBlockedTimeoutRequest(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RM_IsIOError	src/module.c	/^int RM_IsIOError(RedisModuleIO *io) {$/;"	f	typeref:typename:int
RM_IsKeysPositionRequest	src/module.c	/^int RM_IsKeysPositionRequest(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RM_IsModuleNameBusy	src/module.c	/^int RM_IsModuleNameBusy(const char *name) {$/;"	f	typeref:typename:int
RM_IsSubEventSupported	src/module.c	/^int RM_IsSubEventSupported(RedisModuleEvent event, int64_t subevent) {$/;"	f	typeref:typename:int
RM_KeyAtPos	src/module.c	/^void RM_KeyAtPos(RedisModuleCtx *ctx, int pos) {$/;"	f	typeref:typename:void
RM_KeyType	src/module.c	/^int RM_KeyType(RedisModuleKey *key) {$/;"	f	typeref:typename:int
RM_KillForkChild	src/module.c	/^int RM_KillForkChild(int child_pid) {$/;"	f	typeref:typename:int
RM_LatencyAddSample	src/module.c	/^void RM_LatencyAddSample(const char *event, mstime_t latency) {$/;"	f	typeref:typename:void
RM_ListPop	src/module.c	/^RedisModuleString *RM_ListPop(RedisModuleKey *key, int where) {$/;"	f	typeref:typename:RedisModuleString *
RM_ListPush	src/module.c	/^int RM_ListPush(RedisModuleKey *key, int where, RedisModuleString *ele) {$/;"	f	typeref:typename:int
RM_LoadDataTypeFromString	src/module.c	/^void *RM_LoadDataTypeFromString(const RedisModuleString *str, const moduleType *mt) {$/;"	f	typeref:typename:void *
RM_LoadDouble	src/module.c	/^double RM_LoadDouble(RedisModuleIO *io) {$/;"	f	typeref:typename:double
RM_LoadFloat	src/module.c	/^float RM_LoadFloat(RedisModuleIO *io) {$/;"	f	typeref:typename:float
RM_LoadLongDouble	src/module.c	/^long double RM_LoadLongDouble(RedisModuleIO *io) {$/;"	f	typeref:typename:long double
RM_LoadSigned	src/module.c	/^int64_t RM_LoadSigned(RedisModuleIO *io) {$/;"	f	typeref:typename:int64_t
RM_LoadString	src/module.c	/^RedisModuleString *RM_LoadString(RedisModuleIO *io) {$/;"	f	typeref:typename:RedisModuleString *
RM_LoadStringBuffer	src/module.c	/^char *RM_LoadStringBuffer(RedisModuleIO *io, size_t *lenptr) {$/;"	f	typeref:typename:char *
RM_LoadUnsigned	src/module.c	/^uint64_t RM_LoadUnsigned(RedisModuleIO *io) {$/;"	f	typeref:typename:uint64_t
RM_Log	src/module.c	/^void RM_Log(RedisModuleCtx *ctx, const char *levelstr, const char *fmt, ...) {$/;"	f	typeref:typename:void
RM_LogIOError	src/module.c	/^void RM_LogIOError(RedisModuleIO *io, const char *levelstr, const char *fmt, ...) {$/;"	f	typeref:typename:void
RM_MallocSize	src/module.c	/^size_t RM_MallocSize(void* ptr){$/;"	f	typeref:typename:size_t
RM_Milliseconds	src/module.c	/^long long RM_Milliseconds(void) {$/;"	f	typeref:typename:long long
RM_ModuleTypeGetType	src/module.c	/^moduleType *RM_ModuleTypeGetType(RedisModuleKey *key) {$/;"	f	typeref:typename:moduleType *
RM_ModuleTypeGetValue	src/module.c	/^void *RM_ModuleTypeGetValue(RedisModuleKey *key) {$/;"	f	typeref:typename:void *
RM_ModuleTypeReplaceValue	src/module.c	/^int RM_ModuleTypeReplaceValue(RedisModuleKey *key, moduleType *mt, void *new_value, void **old_v/;"	f	typeref:typename:int
RM_ModuleTypeSetValue	src/module.c	/^int RM_ModuleTypeSetValue(RedisModuleKey *key, moduleType *mt, void *value) {$/;"	f	typeref:typename:int
RM_NotifyKeyspaceEvent	src/module.c	/^int RM_NotifyKeyspaceEvent(RedisModuleCtx *ctx, int type, const char *event, RedisModuleString */;"	f	typeref:typename:int
RM_OpenKey	src/module.c	/^void *RM_OpenKey(RedisModuleCtx *ctx, robj *keyname, int mode) {$/;"	f	typeref:typename:void *
RM_PoolAlloc	src/module.c	/^void *RM_PoolAlloc(RedisModuleCtx *ctx, size_t bytes) {$/;"	f	typeref:typename:void *
RM_PublishMessage	src/module.c	/^int RM_PublishMessage(RedisModuleCtx *ctx, RedisModuleString *channel, RedisModuleString *messag/;"	f	typeref:typename:int
RM_RandomKey	src/module.c	/^RedisModuleString *RM_RandomKey(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:RedisModuleString *
RM_Realloc	src/module.c	/^void* RM_Realloc(void *ptr, size_t bytes) {$/;"	f	typeref:typename:void *
RM_RegisterClusterMessageReceiver	src/module.c	/^void RM_RegisterClusterMessageReceiver(RedisModuleCtx *ctx, uint8_t type, RedisModuleClusterMess/;"	f	typeref:typename:void
RM_RegisterCommandFilter	src/module.c	/^RedisModuleCommandFilter *RM_RegisterCommandFilter(RedisModuleCtx *ctx, RedisModuleCommandFilter/;"	f	typeref:typename:RedisModuleCommandFilter *
RM_RegisterDefragFunc	src/module.c	/^int RM_RegisterDefragFunc(RedisModuleCtx *ctx, RedisModuleDefragFunc cb) {$/;"	f	typeref:typename:int
RM_RegisterInfoFunc	src/module.c	/^int RM_RegisterInfoFunc(RedisModuleCtx *ctx, RedisModuleInfoFunc cb) {$/;"	f	typeref:typename:int
RM_Replicate	src/module.c	/^int RM_Replicate(RedisModuleCtx *ctx, const char *cmdname, const char *fmt, ...) {$/;"	f	typeref:typename:int
RM_ReplicateVerbatim	src/module.c	/^int RM_ReplicateVerbatim(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RM_ReplySetArrayLength	src/module.c	/^void RM_ReplySetArrayLength(RedisModuleCtx *ctx, long len) {$/;"	f	typeref:typename:void
RM_ReplyWithArray	src/module.c	/^int RM_ReplyWithArray(RedisModuleCtx *ctx, long len) {$/;"	f	typeref:typename:int
RM_ReplyWithCString	src/module.c	/^int RM_ReplyWithCString(RedisModuleCtx *ctx, const char *buf) {$/;"	f	typeref:typename:int
RM_ReplyWithCallReply	src/module.c	/^int RM_ReplyWithCallReply(RedisModuleCtx *ctx, RedisModuleCallReply *reply) {$/;"	f	typeref:typename:int
RM_ReplyWithDouble	src/module.c	/^int RM_ReplyWithDouble(RedisModuleCtx *ctx, double d) {$/;"	f	typeref:typename:int
RM_ReplyWithEmptyArray	src/module.c	/^int RM_ReplyWithEmptyArray(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RM_ReplyWithEmptyString	src/module.c	/^int RM_ReplyWithEmptyString(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RM_ReplyWithError	src/module.c	/^int RM_ReplyWithError(RedisModuleCtx *ctx, const char *err) {$/;"	f	typeref:typename:int
RM_ReplyWithLongDouble	src/module.c	/^int RM_ReplyWithLongDouble(RedisModuleCtx *ctx, long double ld) {$/;"	f	typeref:typename:int
RM_ReplyWithLongLong	src/module.c	/^int RM_ReplyWithLongLong(RedisModuleCtx *ctx, long long ll) {$/;"	f	typeref:typename:int
RM_ReplyWithNull	src/module.c	/^int RM_ReplyWithNull(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RM_ReplyWithNullArray	src/module.c	/^int RM_ReplyWithNullArray(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RM_ReplyWithSimpleString	src/module.c	/^int RM_ReplyWithSimpleString(RedisModuleCtx *ctx, const char *msg) {$/;"	f	typeref:typename:int
RM_ReplyWithString	src/module.c	/^int RM_ReplyWithString(RedisModuleCtx *ctx, RedisModuleString *str) {$/;"	f	typeref:typename:int
RM_ReplyWithStringBuffer	src/module.c	/^int RM_ReplyWithStringBuffer(RedisModuleCtx *ctx, const char *buf, size_t len) {$/;"	f	typeref:typename:int
RM_ReplyWithVerbatimString	src/module.c	/^int RM_ReplyWithVerbatimString(RedisModuleCtx *ctx, const char *buf, size_t len) {$/;"	f	typeref:typename:int
RM_ResetDataset	src/module.c	/^void RM_ResetDataset(int restart_aof, int async) {$/;"	f	typeref:typename:void
RM_RetainString	src/module.c	/^void RM_RetainString(RedisModuleCtx *ctx, RedisModuleString *str) {$/;"	f	typeref:typename:void
RM_SaveDataTypeToString	src/module.c	/^RedisModuleString *RM_SaveDataTypeToString(RedisModuleCtx *ctx, void *data, const moduleType *mt/;"	f	typeref:typename:RedisModuleString *
RM_SaveDouble	src/module.c	/^void RM_SaveDouble(RedisModuleIO *io, double value) {$/;"	f	typeref:typename:void
RM_SaveFloat	src/module.c	/^void RM_SaveFloat(RedisModuleIO *io, float value) {$/;"	f	typeref:typename:void
RM_SaveLongDouble	src/module.c	/^void RM_SaveLongDouble(RedisModuleIO *io, long double value) {$/;"	f	typeref:typename:void
RM_SaveSigned	src/module.c	/^void RM_SaveSigned(RedisModuleIO *io, int64_t value) {$/;"	f	typeref:typename:void
RM_SaveString	src/module.c	/^void RM_SaveString(RedisModuleIO *io, RedisModuleString *s) {$/;"	f	typeref:typename:void
RM_SaveStringBuffer	src/module.c	/^void RM_SaveStringBuffer(RedisModuleIO *io, const char *str, size_t len) {$/;"	f	typeref:typename:void
RM_SaveUnsigned	src/module.c	/^void RM_SaveUnsigned(RedisModuleIO *io, uint64_t value) {$/;"	f	typeref:typename:void
RM_Scan	src/module.c	/^int RM_Scan(RedisModuleCtx *ctx, RedisModuleScanCursor *cursor, RedisModuleScanCB fn, void *priv/;"	f	typeref:typename:int
RM_ScanCursorCreate	src/module.c	/^RedisModuleScanCursor *RM_ScanCursorCreate() {$/;"	f	typeref:typename:RedisModuleScanCursor *
RM_ScanCursorDestroy	src/module.c	/^void RM_ScanCursorDestroy(RedisModuleScanCursor *cursor) {$/;"	f	typeref:typename:void
RM_ScanCursorRestart	src/module.c	/^void RM_ScanCursorRestart(RedisModuleScanCursor *cursor) {$/;"	f	typeref:typename:void
RM_ScanKey	src/module.c	/^int RM_ScanKey(RedisModuleKey *key, RedisModuleScanCursor *cursor, RedisModuleScanKeyCB fn, void/;"	f	typeref:typename:int
RM_SelectDb	src/module.c	/^int RM_SelectDb(RedisModuleCtx *ctx, int newid) {$/;"	f	typeref:typename:int
RM_SendChildHeartbeat	src/module.c	/^void RM_SendChildHeartbeat(double progress) {$/;"	f	typeref:typename:void
RM_SendClusterMessage	src/module.c	/^int RM_SendClusterMessage(RedisModuleCtx *ctx, char *target_id, uint8_t type, unsigned char *msg/;"	f	typeref:typename:int
RM_ServerInfoGetField	src/module.c	/^RedisModuleString *RM_ServerInfoGetField(RedisModuleCtx *ctx, RedisModuleServerInfoData *data, c/;"	f	typeref:typename:RedisModuleString *
RM_ServerInfoGetFieldC	src/module.c	/^const char *RM_ServerInfoGetFieldC(RedisModuleServerInfoData *data, const char* field) {$/;"	f	typeref:typename:const char *
RM_ServerInfoGetFieldDouble	src/module.c	/^double RM_ServerInfoGetFieldDouble(RedisModuleServerInfoData *data, const char* field, int *out_/;"	f	typeref:typename:double
RM_ServerInfoGetFieldSigned	src/module.c	/^long long RM_ServerInfoGetFieldSigned(RedisModuleServerInfoData *data, const char* field, int *o/;"	f	typeref:typename:long long
RM_ServerInfoGetFieldUnsigned	src/module.c	/^unsigned long long RM_ServerInfoGetFieldUnsigned(RedisModuleServerInfoData *data, const char* fi/;"	f	typeref:typename:unsigned long long
RM_SetAbsExpire	src/module.c	/^int RM_SetAbsExpire(RedisModuleKey *key, mstime_t expire) {$/;"	f	typeref:typename:int
RM_SetClusterFlags	src/module.c	/^void RM_SetClusterFlags(RedisModuleCtx *ctx, uint64_t flags) {$/;"	f	typeref:typename:void
RM_SetDisconnectCallback	src/module.c	/^void RM_SetDisconnectCallback(RedisModuleBlockedClient *bc, RedisModuleDisconnectFunc callback) /;"	f	typeref:typename:void
RM_SetExpire	src/module.c	/^int RM_SetExpire(RedisModuleKey *key, mstime_t expire) {$/;"	f	typeref:typename:int
RM_SetLFU	src/module.c	/^int RM_SetLFU(RedisModuleKey *key, long long lfu_freq) {$/;"	f	typeref:typename:int
RM_SetLRU	src/module.c	/^int RM_SetLRU(RedisModuleKey *key, mstime_t lru_idle) {$/;"	f	typeref:typename:int
RM_SetModuleAttribs	src/module.c	/^void RM_SetModuleAttribs(RedisModuleCtx *ctx, const char *name, int ver, int apiver) {$/;"	f	typeref:typename:void
RM_SetModuleOptions	src/module.c	/^void RM_SetModuleOptions(RedisModuleCtx *ctx, int options) {$/;"	f	typeref:typename:void
RM_SetModuleUserACL	src/module.c	/^int RM_SetModuleUserACL(RedisModuleUser *user, const char* acl) {$/;"	f	typeref:typename:int
RM_SignalKeyAsReady	src/module.c	/^void RM_SignalKeyAsReady(RedisModuleCtx *ctx, RedisModuleString *key) {$/;"	f	typeref:typename:void
RM_SignalModifiedKey	src/module.c	/^int RM_SignalModifiedKey(RedisModuleCtx *ctx, RedisModuleString *keyname) {$/;"	f	typeref:typename:int
RM_StopTimer	src/module.c	/^int RM_StopTimer(RedisModuleCtx *ctx, RedisModuleTimerID id, void **data) {$/;"	f	typeref:typename:int
RM_Strdup	src/module.c	/^char *RM_Strdup(const char *str) {$/;"	f	typeref:typename:char *
RM_StreamAdd	src/module.c	/^int RM_StreamAdd(RedisModuleKey *key, int flags, RedisModuleStreamID *id, RedisModuleString **ar/;"	f	typeref:typename:int
RM_StreamDelete	src/module.c	/^int RM_StreamDelete(RedisModuleKey *key, RedisModuleStreamID *id) {$/;"	f	typeref:typename:int
RM_StreamIteratorDelete	src/module.c	/^int RM_StreamIteratorDelete(RedisModuleKey *key) {$/;"	f	typeref:typename:int
RM_StreamIteratorNextField	src/module.c	/^int RM_StreamIteratorNextField(RedisModuleKey *key, RedisModuleString **field_ptr, RedisModuleSt/;"	f	typeref:typename:int
RM_StreamIteratorNextID	src/module.c	/^int RM_StreamIteratorNextID(RedisModuleKey *key, RedisModuleStreamID *id, long *numfields) {$/;"	f	typeref:typename:int
RM_StreamIteratorStart	src/module.c	/^int RM_StreamIteratorStart(RedisModuleKey *key, int flags, RedisModuleStreamID *start, RedisModu/;"	f	typeref:typename:int
RM_StreamIteratorStop	src/module.c	/^int RM_StreamIteratorStop(RedisModuleKey *key) {$/;"	f	typeref:typename:int
RM_StreamTrimByID	src/module.c	/^long long RM_StreamTrimByID(RedisModuleKey *key, int flags, RedisModuleStreamID *id) {$/;"	f	typeref:typename:long long
RM_StreamTrimByLength	src/module.c	/^long long RM_StreamTrimByLength(RedisModuleKey *key, int flags, long long length) {$/;"	f	typeref:typename:long long
RM_StringAppendBuffer	src/module.c	/^int RM_StringAppendBuffer(RedisModuleCtx *ctx, RedisModuleString *str, const char *buf, size_t l/;"	f	typeref:typename:int
RM_StringCompare	src/module.c	/^int RM_StringCompare(RedisModuleString *a, RedisModuleString *b) {$/;"	f	typeref:typename:int
RM_StringDMA	src/module.c	/^char *RM_StringDMA(RedisModuleKey *key, size_t *len, int mode) {$/;"	f	typeref:typename:char *
RM_StringPtrLen	src/module.c	/^const char *RM_StringPtrLen(const RedisModuleString *str, size_t *len) {$/;"	f	typeref:typename:const char *
RM_StringSet	src/module.c	/^int RM_StringSet(RedisModuleKey *key, RedisModuleString *str) {$/;"	f	typeref:typename:int
RM_StringToDouble	src/module.c	/^int RM_StringToDouble(const RedisModuleString *str, double *d) {$/;"	f	typeref:typename:int
RM_StringToLongDouble	src/module.c	/^int RM_StringToLongDouble(const RedisModuleString *str, long double *ld) {$/;"	f	typeref:typename:int
RM_StringToLongLong	src/module.c	/^int RM_StringToLongLong(const RedisModuleString *str, long long *ll) {$/;"	f	typeref:typename:int
RM_StringToStreamID	src/module.c	/^int RM_StringToStreamID(const RedisModuleString *str, RedisModuleStreamID *id) {$/;"	f	typeref:typename:int
RM_StringTruncate	src/module.c	/^int RM_StringTruncate(RedisModuleKey *key, size_t newlen) {$/;"	f	typeref:typename:int
RM_SubscribeToKeyspaceEvents	src/module.c	/^int RM_SubscribeToKeyspaceEvents(RedisModuleCtx *ctx, int types, RedisModuleNotificationFunc cal/;"	f	typeref:typename:int
RM_SubscribeToServerEvent	src/module.c	/^int RM_SubscribeToServerEvent(RedisModuleCtx *ctx, RedisModuleEvent event, RedisModuleEventCallb/;"	f	typeref:typename:int
RM_ThreadSafeContextLock	src/module.c	/^void RM_ThreadSafeContextLock(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:void
RM_ThreadSafeContextTryLock	src/module.c	/^int RM_ThreadSafeContextTryLock(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RM_ThreadSafeContextUnlock	src/module.c	/^void RM_ThreadSafeContextUnlock(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:void
RM_UnblockClient	src/module.c	/^int RM_UnblockClient(RedisModuleBlockedClient *bc, void *privdata) {$/;"	f	typeref:typename:int
RM_UnlinkKey	src/module.c	/^int RM_UnlinkKey(RedisModuleKey *key) {$/;"	f	typeref:typename:int
RM_UnregisterCommandFilter	src/module.c	/^int RM_UnregisterCommandFilter(RedisModuleCtx *ctx, RedisModuleCommandFilter *filter) {$/;"	f	typeref:typename:int
RM_ValueLength	src/module.c	/^size_t RM_ValueLength(RedisModuleKey *key) {$/;"	f	typeref:typename:size_t
RM_WrongArity	src/module.c	/^int RM_WrongArity(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RM_ZsetAdd	src/module.c	/^int RM_ZsetAdd(RedisModuleKey *key, double score, RedisModuleString *ele, int *flagsptr) {$/;"	f	typeref:typename:int
RM_ZsetFirstInLexRange	src/module.c	/^int RM_ZsetFirstInLexRange(RedisModuleKey *key, RedisModuleString *min, RedisModuleString *max) /;"	f	typeref:typename:int
RM_ZsetFirstInScoreRange	src/module.c	/^int RM_ZsetFirstInScoreRange(RedisModuleKey *key, double min, double max, int minex, int maxex) /;"	f	typeref:typename:int
RM_ZsetIncrby	src/module.c	/^int RM_ZsetIncrby(RedisModuleKey *key, double score, RedisModuleString *ele, int *flagsptr, doub/;"	f	typeref:typename:int
RM_ZsetLastInLexRange	src/module.c	/^int RM_ZsetLastInLexRange(RedisModuleKey *key, RedisModuleString *min, RedisModuleString *max) {$/;"	f	typeref:typename:int
RM_ZsetLastInScoreRange	src/module.c	/^int RM_ZsetLastInScoreRange(RedisModuleKey *key, double min, double max, int minex, int maxex) {$/;"	f	typeref:typename:int
RM_ZsetRangeCurrentElement	src/module.c	/^RedisModuleString *RM_ZsetRangeCurrentElement(RedisModuleKey *key, double *score) {$/;"	f	typeref:typename:RedisModuleString *
RM_ZsetRangeEndReached	src/module.c	/^int RM_ZsetRangeEndReached(RedisModuleKey *key) {$/;"	f	typeref:typename:int
RM_ZsetRangeNext	src/module.c	/^int RM_ZsetRangeNext(RedisModuleKey *key) {$/;"	f	typeref:typename:int
RM_ZsetRangePrev	src/module.c	/^int RM_ZsetRangePrev(RedisModuleKey *key) {$/;"	f	typeref:typename:int
RM_ZsetRangeStop	src/module.c	/^void RM_ZsetRangeStop(RedisModuleKey *key) {$/;"	f	typeref:typename:void
RM_ZsetRem	src/module.c	/^int RM_ZsetRem(RedisModuleKey *key, RedisModuleString *ele, int *deleted) {$/;"	f	typeref:typename:int
RM_ZsetScore	src/module.c	/^int RM_ZsetScore(RedisModuleKey *key, RedisModuleString *ele, double *score) {$/;"	f	typeref:typename:int
RM__Assert	src/module.c	/^void RM__Assert(const char *estr, const char *file, int line) {$/;"	f	typeref:typename:void
ROTL	src/siphash.c	/^#define ROTL(/;"	d	file:
ROTLEFT	src/sha256.c	/^#define ROTLEFT(/;"	d	file:
ROTRIGHT	src/sha256.c	/^#define ROTRIGHT(/;"	d	file:
RO_MUTEX_CTL_GEN	deps/jemalloc/src/ctl.c	/^#define RO_MUTEX_CTL_GEN(/;"	d	file:
RPATH	deps/jemalloc/Makefile	/^RPATH = $(if $(1),$(call _RPATH,$(1)))$/;"	m
RPATH	deps/jemalloc/Makefile.in	/^RPATH = $(if $(1),$(call _RPATH,$(1)))$/;"	m
RPATH_EXTRA	deps/jemalloc/Makefile.in	/^RPATH_EXTRA := @RPATH_EXTRA@$/;"	m
RTREE_CACHE_CHECK_L2	deps/jemalloc/include/jemalloc/internal/rtree.h	/^#define RTREE_CACHE_CHECK_L2(/;"	d
RTREE_CTX_LG_NCACHE	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^#define RTREE_CTX_LG_NCACHE /;"	d
RTREE_CTX_NCACHE	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^#define RTREE_CTX_NCACHE /;"	d
RTREE_CTX_NCACHE_L2	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^#define RTREE_CTX_NCACHE_L2 /;"	d
RTREE_CTX_ZERO_INITIALIZER	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^#define RTREE_CTX_ZERO_INITIALIZER /;"	d
RTREE_GET_CHILD	deps/jemalloc/src/rtree.c	/^#define RTREE_GET_CHILD(/;"	d	file:
RTREE_GET_LEAF	deps/jemalloc/src/rtree.c	/^#define RTREE_GET_LEAF(/;"	d	file:
RTREE_HEIGHT	deps/jemalloc/include/jemalloc/internal/rtree.h	/^#  define RTREE_HEIGHT /;"	d
RTREE_LEAFKEY_INVALID	deps/jemalloc/include/jemalloc/internal/rtree.h	/^#define RTREE_LEAFKEY_INVALID /;"	d
RTREE_LEAF_COMPACT	deps/jemalloc/include/jemalloc/internal/rtree.h	/^#  define RTREE_LEAF_COMPACT$/;"	d
RTREE_NHIB	deps/jemalloc/include/jemalloc/internal/rtree.h	/^#define RTREE_NHIB /;"	d
RTREE_NLIB	deps/jemalloc/include/jemalloc/internal/rtree.h	/^#define RTREE_NLIB /;"	d
RTREE_NSB	deps/jemalloc/include/jemalloc/internal/rtree.h	/^#define RTREE_NSB /;"	d
R_CC	deps/hdr_histogram/Makefile	/^R_CC=$(CC) $(R_CFLAGS)$/;"	m
R_CC	deps/linenoise/Makefile	/^R_CC=$(CC) $(R_CFLAGS)$/;"	m
R_CFLAGS	deps/hdr_histogram/Makefile	/^R_CFLAGS= $(STD) $(WARN) $(OPT) $(DEBUG) $(CFLAGS)$/;"	m
R_CFLAGS	deps/linenoise/Makefile	/^R_CFLAGS= $(STD) $(WARN) $(OPT) $(DEBUG) $(CFLAGS)$/;"	m
R_LD	deps/hdr_histogram/Makefile	/^R_LD=$(CC) $(R_LDFLAGS)$/;"	m
R_LD	deps/linenoise/Makefile	/^R_LD=$(CC) $(R_LDFLAGS)$/;"	m
R_LDFLAGS	deps/hdr_histogram/Makefile	/^R_LDFLAGS= $(LDFLAGS)$/;"	m
R_LDFLAGS	deps/linenoise/Makefile	/^R_LDFLAGS= $(LDFLAGS)$/;"	m
R_MAJOR	src/geohash_helper.c	/^#define R_MAJOR /;"	d	file:
R_MINOR	src/geohash_helper.c	/^#define R_MINOR /;"	d	file:
R_Nan	src/server.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v	typeref:typename:double
R_NegInf	src/server.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v	typeref:typename:double
R_PosInf	src/server.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v	typeref:typename:double
R_Zero	src/server.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v	typeref:typename:double
RedisModule	src/module.c	/^struct RedisModule {$/;"	s	file:
RedisModule	src/module.c	/^typedef struct RedisModule RedisModule;$/;"	t	typeref:struct:RedisModule	file:
RedisModuleBlockedClient	src/module.c	/^typedef struct RedisModuleBlockedClient {$/;"	s	file:
RedisModuleBlockedClient	src/module.c	/^} RedisModuleBlockedClient;$/;"	t	typeref:struct:RedisModuleBlockedClient	file:
RedisModuleBlockedClient	src/redismodule.h	/^typedef struct RedisModuleBlockedClient RedisModuleBlockedClient;$/;"	t	typeref:struct:RedisModuleBlockedClient
RedisModuleCallReply	src/module.c	/^typedef struct RedisModuleCallReply {$/;"	s	file:
RedisModuleCallReply	src/module.c	/^} RedisModuleCallReply;$/;"	t	typeref:struct:RedisModuleCallReply	file:
RedisModuleCallReply	src/redismodule.h	/^typedef struct RedisModuleCallReply RedisModuleCallReply;$/;"	t	typeref:struct:RedisModuleCallReply
RedisModuleClientInfo	src/redismodule.h	/^#define RedisModuleClientInfo /;"	d
RedisModuleClientInfo	src/redismodule.h	/^typedef struct RedisModuleClientInfo {$/;"	s
RedisModuleClientInfoV1	src/redismodule.h	/^} RedisModuleClientInfoV1;$/;"	t	typeref:struct:RedisModuleClientInfo
RedisModuleClusterInfo	src/redismodule.h	/^typedef struct RedisModuleClusterInfo RedisModuleClusterInfo;$/;"	t	typeref:struct:RedisModuleClusterInfo
RedisModuleClusterMessageReceiver	src/module.c	/^typedef void (*RedisModuleClusterMessageReceiver)(RedisModuleCtx *ctx, const char *sender_id, ui/;"	t	typeref:typename:void (*)(RedisModuleCtx * ctx,const char * sender_id,uint8_t type,const unsigned char * payload,uint32_t len)	file:
RedisModuleClusterMessageReceiver	src/redismodule.h	/^typedef void (*RedisModuleClusterMessageReceiver)(RedisModuleCtx *ctx, const char *sender_id, ui/;"	t	typeref:typename:void (*)(RedisModuleCtx * ctx,const char * sender_id,uint8_t type,const unsigned char * payload,uint32_t len)
RedisModuleCmdFunc	src/module.c	/^typedef int (*RedisModuleCmdFunc) (RedisModuleCtx *ctx, void **argv, int argc);$/;"	t	typeref:typename:int (*)(RedisModuleCtx * ctx,void ** argv,int argc)	file:
RedisModuleCmdFunc	src/redismodule.h	/^typedef int (*RedisModuleCmdFunc)(RedisModuleCtx *ctx, RedisModuleString **argv, int argc);$/;"	t	typeref:typename:int (*)(RedisModuleCtx * ctx,RedisModuleString ** argv,int argc)
RedisModuleCommandDispatcher	src/module.c	/^void RedisModuleCommandDispatcher(client *c) {$/;"	f	typeref:typename:void
RedisModuleCommandFilter	src/module.c	/^typedef struct RedisModuleCommandFilter {$/;"	s	file:
RedisModuleCommandFilter	src/module.c	/^} RedisModuleCommandFilter;$/;"	t	typeref:struct:RedisModuleCommandFilter	file:
RedisModuleCommandFilter	src/redismodule.h	/^typedef struct RedisModuleCommandFilter RedisModuleCommandFilter;$/;"	t	typeref:struct:RedisModuleCommandFilter
RedisModuleCommandFilterCtx	src/module.c	/^typedef struct RedisModuleCommandFilterCtx {$/;"	s	file:
RedisModuleCommandFilterCtx	src/module.c	/^} RedisModuleCommandFilterCtx;$/;"	t	typeref:struct:RedisModuleCommandFilterCtx	file:
RedisModuleCommandFilterCtx	src/redismodule.h	/^typedef struct RedisModuleCommandFilterCtx RedisModuleCommandFilterCtx;$/;"	t	typeref:struct:RedisModuleCommandFilterCtx
RedisModuleCommandFilterFunc	src/module.c	/^typedef void (*RedisModuleCommandFilterFunc) (RedisModuleCommandFilterCtx *filter);$/;"	t	typeref:typename:void (*)(RedisModuleCommandFilterCtx * filter)	file:
RedisModuleCommandFilterFunc	src/redismodule.h	/^typedef void (*RedisModuleCommandFilterFunc) (RedisModuleCommandFilterCtx *filter);$/;"	t	typeref:typename:void (*)(RedisModuleCommandFilterCtx * filter)
RedisModuleCommandProxy	src/module.c	/^struct RedisModuleCommandProxy {$/;"	s	file:
RedisModuleCommandProxy	src/module.c	/^typedef struct RedisModuleCommandProxy RedisModuleCommandProxy;$/;"	t	typeref:struct:RedisModuleCommandProxy	file:
RedisModuleCronLoop	src/redismodule.h	/^#define RedisModuleCronLoop /;"	d
RedisModuleCronLoopInfo	src/redismodule.h	/^typedef struct RedisModuleCronLoopInfo {$/;"	s
RedisModuleCronLoopV1	src/redismodule.h	/^} RedisModuleCronLoopV1;$/;"	t	typeref:struct:RedisModuleCronLoopInfo
RedisModuleCtx	src/module.c	/^struct RedisModuleCtx {$/;"	s	file:
RedisModuleCtx	src/module.c	/^typedef struct RedisModuleCtx RedisModuleCtx;$/;"	t	typeref:struct:RedisModuleCtx	file:
RedisModuleCtx	src/redismodule.h	/^typedef struct RedisModuleCtx RedisModuleCtx;$/;"	t	typeref:struct:RedisModuleCtx
RedisModuleDefragCtx	src/module.c	/^typedef struct RedisModuleDefragCtx {$/;"	s	file:
RedisModuleDefragCtx	src/module.c	/^} RedisModuleDefragCtx;$/;"	t	typeref:struct:RedisModuleDefragCtx	file:
RedisModuleDefragCtx	src/redismodule.h	/^typedef struct RedisModuleDefragCtx RedisModuleDefragCtx;$/;"	t	typeref:struct:RedisModuleDefragCtx
RedisModuleDefragFunc	src/module.c	/^typedef void (*RedisModuleDefragFunc)(struct RedisModuleDefragCtx *ctx);$/;"	t	typeref:typename:void (*)(struct RedisModuleDefragCtx * ctx)	file:
RedisModuleDefragFunc	src/redismodule.h	/^typedef int (*RedisModuleDefragFunc)(RedisModuleDefragCtx *ctx);$/;"	t	typeref:typename:int (*)(RedisModuleDefragCtx * ctx)
RedisModuleDict	src/module.c	/^typedef struct RedisModuleDict {$/;"	s	file:
RedisModuleDict	src/module.c	/^} RedisModuleDict;$/;"	t	typeref:struct:RedisModuleDict	file:
RedisModuleDict	src/redismodule.h	/^typedef struct RedisModuleDict RedisModuleDict;$/;"	t	typeref:struct:RedisModuleDict
RedisModuleDictIter	src/module.c	/^typedef struct RedisModuleDictIter {$/;"	s	file:
RedisModuleDictIter	src/module.c	/^} RedisModuleDictIter;$/;"	t	typeref:struct:RedisModuleDictIter	file:
RedisModuleDictIter	src/redismodule.h	/^typedef struct RedisModuleDictIter RedisModuleDictIter;$/;"	t	typeref:struct:RedisModuleDictIter
RedisModuleDigest	src/redismodule.h	/^typedef struct RedisModuleDigest RedisModuleDigest;$/;"	t	typeref:struct:RedisModuleDigest
RedisModuleDigest	src/server.h	/^typedef struct RedisModuleDigest {$/;"	s
RedisModuleDigest	src/server.h	/^} RedisModuleDigest;$/;"	t	typeref:struct:RedisModuleDigest
RedisModuleDisconnectFunc	src/module.c	/^typedef void (*RedisModuleDisconnectFunc) (RedisModuleCtx *ctx, struct RedisModuleBlockedClient /;"	t	typeref:typename:void (*)(RedisModuleCtx * ctx,struct RedisModuleBlockedClient * bc)	file:
RedisModuleDisconnectFunc	src/redismodule.h	/^typedef void (*RedisModuleDisconnectFunc)(RedisModuleCtx *ctx, RedisModuleBlockedClient *bc);$/;"	t	typeref:typename:void (*)(RedisModuleCtx * ctx,RedisModuleBlockedClient * bc)
RedisModuleEvent	src/redismodule.h	/^typedef struct RedisModuleEvent {$/;"	s
RedisModuleEvent	src/redismodule.h	/^} RedisModuleEvent;$/;"	t	typeref:struct:RedisModuleEvent
RedisModuleEventCallback	src/redismodule.h	/^typedef void (*RedisModuleEventCallback)(struct RedisModuleCtx *ctx, RedisModuleEvent eid, uint6/;"	t	typeref:typename:void (*)(struct RedisModuleCtx * ctx,RedisModuleEvent eid,uint64_t subevent,void * data)
RedisModuleEventListener	src/module.c	/^typedef struct RedisModuleEventListener {$/;"	s	file:
RedisModuleEventListener	src/module.c	/^} RedisModuleEventListener;$/;"	t	typeref:struct:RedisModuleEventListener	file:
RedisModuleEvent_ClientChange	src/redismodule.h	/^    RedisModuleEvent_ClientChange = {$/;"	v	typeref:typename:const RedisModuleEvent
RedisModuleEvent_CronLoop	src/redismodule.h	/^    RedisModuleEvent_CronLoop = {$/;"	v	typeref:typename:const RedisModuleEvent
RedisModuleEvent_FlushDB	src/redismodule.h	/^    RedisModuleEvent_FlushDB = {$/;"	v	typeref:typename:const RedisModuleEvent
RedisModuleEvent_ForkChild	src/redismodule.h	/^    RedisModuleEvent_ForkChild = {$/;"	v	typeref:typename:const RedisModuleEvent
RedisModuleEvent_Loading	src/redismodule.h	/^    RedisModuleEvent_Loading = {$/;"	v	typeref:typename:const RedisModuleEvent
RedisModuleEvent_LoadingProgress	src/redismodule.h	/^    RedisModuleEvent_LoadingProgress = {$/;"	v	typeref:typename:const RedisModuleEvent
RedisModuleEvent_MasterLinkChange	src/redismodule.h	/^    RedisModuleEvent_MasterLinkChange = {$/;"	v	typeref:typename:const RedisModuleEvent
RedisModuleEvent_ModuleChange	src/redismodule.h	/^    RedisModuleEvent_ModuleChange = {$/;"	v	typeref:typename:const RedisModuleEvent
RedisModuleEvent_Persistence	src/redismodule.h	/^    RedisModuleEvent_Persistence = {$/;"	v	typeref:typename:const RedisModuleEvent
RedisModuleEvent_ReplBackup	src/redismodule.h	/^    RedisModuleEvent_ReplBackup = {$/;"	v	typeref:typename:const RedisModuleEvent
RedisModuleEvent_ReplicaChange	src/redismodule.h	/^    RedisModuleEvent_ReplicaChange = {$/;"	v	typeref:typename:const RedisModuleEvent
RedisModuleEvent_ReplicationRoleChanged	src/redismodule.h	/^    RedisModuleEvent_ReplicationRoleChanged = {$/;"	v	typeref:typename:const RedisModuleEvent
RedisModuleEvent_Shutdown	src/redismodule.h	/^    RedisModuleEvent_Shutdown = {$/;"	v	typeref:typename:const RedisModuleEvent
RedisModuleEvent_SwapDB	src/redismodule.h	/^    RedisModuleEvent_SwapDB = {$/;"	v	typeref:typename:const RedisModuleEvent
RedisModuleFlushInfo	src/redismodule.h	/^#define RedisModuleFlushInfo /;"	d
RedisModuleFlushInfo	src/redismodule.h	/^typedef struct RedisModuleFlushInfo {$/;"	s
RedisModuleFlushInfoV1	src/redismodule.h	/^} RedisModuleFlushInfoV1;$/;"	t	typeref:struct:RedisModuleFlushInfo
RedisModuleForkDoneHandler	src/module.c	/^typedef void (*RedisModuleForkDoneHandler) (int exitcode, int bysignal, void *user_data);$/;"	t	typeref:typename:void (*)(int exitcode,int bysignal,void * user_data)	file:
RedisModuleForkDoneHandler	src/redismodule.h	/^typedef void (*RedisModuleForkDoneHandler) (int exitcode, int bysignal, void *user_data);$/;"	t	typeref:typename:void (*)(int exitcode,int bysignal,void * user_data)
RedisModuleForkInfo	src/module.c	/^static struct RedisModuleForkInfo {$/;"	s	file:
RedisModuleIO	src/redismodule.h	/^typedef struct RedisModuleIO RedisModuleIO;$/;"	t	typeref:struct:RedisModuleIO
RedisModuleIO	src/server.h	/^typedef struct RedisModuleIO {$/;"	s
RedisModuleIO	src/server.h	/^} RedisModuleIO;$/;"	t	typeref:struct:RedisModuleIO
RedisModuleInfoCtx	src/module.c	/^typedef struct RedisModuleInfoCtx {$/;"	s	file:
RedisModuleInfoCtx	src/module.c	/^} RedisModuleInfoCtx;$/;"	t	typeref:struct:RedisModuleInfoCtx	file:
RedisModuleInfoCtx	src/redismodule.h	/^typedef struct RedisModuleInfoCtx RedisModuleInfoCtx;$/;"	t	typeref:struct:RedisModuleInfoCtx
RedisModuleInfoFunc	src/module.c	/^typedef void (*RedisModuleInfoFunc)(RedisModuleInfoCtx *ctx, int for_crash_report);$/;"	t	typeref:typename:void (*)(RedisModuleInfoCtx * ctx,int for_crash_report)	file:
RedisModuleInfoFunc	src/redismodule.h	/^typedef void (*RedisModuleInfoFunc)(RedisModuleInfoCtx *ctx, int for_crash_report);$/;"	t	typeref:typename:void (*)(RedisModuleInfoCtx * ctx,int for_crash_report)
RedisModuleKey	src/module.c	/^struct RedisModuleKey {$/;"	s	file:
RedisModuleKey	src/module.c	/^typedef struct RedisModuleKey RedisModuleKey;$/;"	t	typeref:struct:RedisModuleKey	file:
RedisModuleKey	src/redismodule.h	/^typedef struct RedisModuleKey RedisModuleKey;$/;"	t	typeref:struct:RedisModuleKey
RedisModuleKeyspaceSubscriber	src/module.c	/^typedef struct RedisModuleKeyspaceSubscriber {$/;"	s	file:
RedisModuleKeyspaceSubscriber	src/module.c	/^} RedisModuleKeyspaceSubscriber;$/;"	t	typeref:struct:RedisModuleKeyspaceSubscriber	file:
RedisModuleLoadingProgress	src/redismodule.h	/^#define RedisModuleLoadingProgress /;"	d
RedisModuleLoadingProgressInfo	src/redismodule.h	/^typedef struct RedisModuleLoadingProgressInfo {$/;"	s
RedisModuleLoadingProgressV1	src/redismodule.h	/^} RedisModuleLoadingProgressV1;$/;"	t	typeref:struct:RedisModuleLoadingProgressInfo
RedisModuleModuleChange	src/redismodule.h	/^#define RedisModuleModuleChange /;"	d
RedisModuleModuleChange	src/redismodule.h	/^typedef struct RedisModuleModuleChange {$/;"	s
RedisModuleModuleChangeV1	src/redismodule.h	/^} RedisModuleModuleChangeV1;$/;"	t	typeref:struct:RedisModuleModuleChange
RedisModuleNotificationFunc	src/module.c	/^typedef int (*RedisModuleNotificationFunc) (RedisModuleCtx *ctx, int type, const char *event, Re/;"	t	typeref:typename:int (*)(RedisModuleCtx * ctx,int type,const char * event,RedisModuleString * key)	file:
RedisModuleNotificationFunc	src/redismodule.h	/^typedef int (*RedisModuleNotificationFunc)(RedisModuleCtx *ctx, int type, const char *event, Red/;"	t	typeref:typename:int (*)(RedisModuleCtx * ctx,int type,const char * event,RedisModuleString * key)
RedisModulePoolAllocBlock	src/module.c	/^typedef struct RedisModulePoolAllocBlock {$/;"	s	file:
RedisModulePoolAllocBlock	src/module.c	/^} RedisModulePoolAllocBlock;$/;"	t	typeref:struct:RedisModulePoolAllocBlock	file:
RedisModuleReplicationInfo	src/redismodule.h	/^#define RedisModuleReplicationInfo /;"	d
RedisModuleReplicationInfo	src/redismodule.h	/^typedef struct RedisModuleReplicationInfo {$/;"	s
RedisModuleReplicationInfoV1	src/redismodule.h	/^} RedisModuleReplicationInfoV1;$/;"	t	typeref:struct:RedisModuleReplicationInfo
RedisModuleScanCB	src/module.c	/^typedef void (*RedisModuleScanCB)(RedisModuleCtx *ctx, RedisModuleString *keyname, RedisModuleKe/;"	t	typeref:typename:void (*)(RedisModuleCtx * ctx,RedisModuleString * keyname,RedisModuleKey * key,void * privdata)	file:
RedisModuleScanCB	src/redismodule.h	/^typedef void (*RedisModuleScanCB)(RedisModuleCtx *ctx, RedisModuleString *keyname, RedisModuleKe/;"	t	typeref:typename:void (*)(RedisModuleCtx * ctx,RedisModuleString * keyname,RedisModuleKey * key,void * privdata)
RedisModuleScanCursor	src/module.c	/^typedef struct RedisModuleScanCursor{$/;"	s	file:
RedisModuleScanCursor	src/module.c	/^}RedisModuleScanCursor;$/;"	t	typeref:struct:RedisModuleScanCursor	file:
RedisModuleScanCursor	src/redismodule.h	/^typedef struct RedisModuleScanCursor RedisModuleScanCursor;$/;"	t	typeref:struct:RedisModuleScanCursor
RedisModuleScanKeyCB	src/module.c	/^typedef void (*RedisModuleScanKeyCB)(RedisModuleKey *key, RedisModuleString *field, RedisModuleS/;"	t	typeref:typename:void (*)(RedisModuleKey * key,RedisModuleString * field,RedisModuleString * value,void * privdata)	file:
RedisModuleScanKeyCB	src/redismodule.h	/^typedef void (*RedisModuleScanKeyCB)(RedisModuleKey *key, RedisModuleString *field, RedisModuleS/;"	t	typeref:typename:void (*)(RedisModuleKey * key,RedisModuleString * field,RedisModuleString * value,void * privdata)
RedisModuleServerInfoData	src/module.c	/^typedef struct RedisModuleServerInfoData {$/;"	s	file:
RedisModuleServerInfoData	src/module.c	/^} RedisModuleServerInfoData;$/;"	t	typeref:struct:RedisModuleServerInfoData	file:
RedisModuleServerInfoData	src/redismodule.h	/^typedef struct RedisModuleServerInfoData RedisModuleServerInfoData;$/;"	t	typeref:struct:RedisModuleServerInfoData
RedisModuleSharedAPI	src/module.c	/^struct RedisModuleSharedAPI {$/;"	s	file:
RedisModuleSharedAPI	src/module.c	/^typedef struct RedisModuleSharedAPI RedisModuleSharedAPI;$/;"	t	typeref:struct:RedisModuleSharedAPI	file:
RedisModuleStreamID	src/redismodule.h	/^typedef struct RedisModuleStreamID {$/;"	s
RedisModuleStreamID	src/redismodule.h	/^} RedisModuleStreamID;$/;"	t	typeref:struct:RedisModuleStreamID
RedisModuleString	src/redismodule.h	/^#define RedisModuleString /;"	d
RedisModuleString	src/redismodule.h	/^typedef struct RedisModuleString RedisModuleString;$/;"	t	typeref:struct:RedisModuleString
RedisModuleSwapDbInfo	src/redismodule.h	/^#define RedisModuleSwapDbInfo /;"	d
RedisModuleSwapDbInfo	src/redismodule.h	/^typedef struct RedisModuleSwapDbInfo {$/;"	s
RedisModuleSwapDbInfoV1	src/redismodule.h	/^} RedisModuleSwapDbInfoV1;$/;"	t	typeref:struct:RedisModuleSwapDbInfo
RedisModuleTimer	src/module.c	/^typedef struct RedisModuleTimer {$/;"	s	file:
RedisModuleTimer	src/module.c	/^} RedisModuleTimer;$/;"	t	typeref:struct:RedisModuleTimer	file:
RedisModuleTimerID	src/redismodule.h	/^typedef uint64_t RedisModuleTimerID;$/;"	t	typeref:typename:uint64_t
RedisModuleTimerProc	src/module.c	/^typedef void (*RedisModuleTimerProc)(RedisModuleCtx *ctx, void *data);$/;"	t	typeref:typename:void (*)(RedisModuleCtx * ctx,void * data)	file:
RedisModuleTimerProc	src/redismodule.h	/^typedef void (*RedisModuleTimerProc)(RedisModuleCtx *ctx, void *data);$/;"	t	typeref:typename:void (*)(RedisModuleCtx * ctx,void * data)
RedisModuleType	src/redismodule.h	/^typedef struct RedisModuleType RedisModuleType;$/;"	t	typeref:struct:RedisModuleType
RedisModuleType	src/server.h	/^typedef struct RedisModuleType {$/;"	s
RedisModuleTypeAuxLoadFunc	src/redismodule.h	/^typedef int (*RedisModuleTypeAuxLoadFunc)(RedisModuleIO *rdb, int encver, int when);$/;"	t	typeref:typename:int (*)(RedisModuleIO * rdb,int encver,int when)
RedisModuleTypeAuxSaveFunc	src/redismodule.h	/^typedef void (*RedisModuleTypeAuxSaveFunc)(RedisModuleIO *rdb, int when);$/;"	t	typeref:typename:void (*)(RedisModuleIO * rdb,int when)
RedisModuleTypeCopyFunc	src/redismodule.h	/^typedef void *(*RedisModuleTypeCopyFunc)(RedisModuleString *fromkey, RedisModuleString *tokey, c/;"	t	typeref:typename:void * (*)(RedisModuleString * fromkey,RedisModuleString * tokey,const void * value)
RedisModuleTypeDefragFunc	src/redismodule.h	/^typedef int (*RedisModuleTypeDefragFunc)(RedisModuleDefragCtx *ctx, RedisModuleString *key, void/;"	t	typeref:typename:int (*)(RedisModuleDefragCtx * ctx,RedisModuleString * key,void ** value)
RedisModuleTypeDigestFunc	src/redismodule.h	/^typedef void (*RedisModuleTypeDigestFunc)(RedisModuleDigest *digest, void *value);$/;"	t	typeref:typename:void (*)(RedisModuleDigest * digest,void * value)
RedisModuleTypeFreeEffortFunc	src/redismodule.h	/^typedef size_t (*RedisModuleTypeFreeEffortFunc)(RedisModuleString *key, const void *value);$/;"	t	typeref:typename:size_t (*)(RedisModuleString * key,const void * value)
RedisModuleTypeFreeFunc	src/redismodule.h	/^typedef void (*RedisModuleTypeFreeFunc)(void *value);$/;"	t	typeref:typename:void (*)(void * value)
RedisModuleTypeLoadFunc	src/redismodule.h	/^typedef void *(*RedisModuleTypeLoadFunc)(RedisModuleIO *rdb, int encver);$/;"	t	typeref:typename:void * (*)(RedisModuleIO * rdb,int encver)
RedisModuleTypeMemUsageFunc	src/redismodule.h	/^typedef size_t (*RedisModuleTypeMemUsageFunc)(const void *value);$/;"	t	typeref:typename:size_t (*)(const void * value)
RedisModuleTypeMethods	src/redismodule.h	/^typedef struct RedisModuleTypeMethods {$/;"	s
RedisModuleTypeMethods	src/redismodule.h	/^} RedisModuleTypeMethods;$/;"	t	typeref:struct:RedisModuleTypeMethods
RedisModuleTypeRewriteFunc	src/redismodule.h	/^typedef void (*RedisModuleTypeRewriteFunc)(RedisModuleIO *aof, RedisModuleString *key, void *val/;"	t	typeref:typename:void (*)(RedisModuleIO * aof,RedisModuleString * key,void * value)
RedisModuleTypeSaveFunc	src/redismodule.h	/^typedef void (*RedisModuleTypeSaveFunc)(RedisModuleIO *rdb, void *value);$/;"	t	typeref:typename:void (*)(RedisModuleIO * rdb,void * value)
RedisModuleTypeUnlinkFunc	src/redismodule.h	/^typedef void (*RedisModuleTypeUnlinkFunc)(RedisModuleString *key, const void *value);$/;"	t	typeref:typename:void (*)(RedisModuleString * key,const void * value)
RedisModuleUser	src/module.c	/^typedef struct RedisModuleUser {$/;"	s	file:
RedisModuleUser	src/module.c	/^} RedisModuleUser;$/;"	t	typeref:struct:RedisModuleUser	file:
RedisModuleUser	src/redismodule.h	/^typedef struct RedisModuleUser RedisModuleUser;$/;"	t	typeref:struct:RedisModuleUser
RedisModuleUserChangedFunc	src/redismodule.h	/^typedef void (*RedisModuleUserChangedFunc) (uint64_t client_id, void *privdata);$/;"	t	typeref:typename:void (*)(uint64_t client_id,void * privdata)
RedisModuleUserChangedFunc	src/server.h	/^typedef void (*RedisModuleUserChangedFunc) (uint64_t client_id, void *privdata);$/;"	t	typeref:typename:void (*)(uint64_t client_id,void * privdata)
RedisModule_AbortBlock	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_AbortBlock)(RedisModuleBlockedClient *bc) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleBlockedClient * bc)
RedisModule_Alloc	src/redismodule.h	/^REDISMODULE_API void * (*RedisModule_Alloc)(size_t bytes) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void * (*)(size_t bytes)
RedisModule_Assert	src/redismodule.h	/^#define RedisModule_Assert(/;"	d
RedisModule_AuthenticateClientWithACLUser	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_AuthenticateClientWithACLUser)(RedisModuleCtx *ctx, const char/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,const char * name,size_t len,RedisModuleUserChangedFunc callback,void * privdata,uint64_t * client_id)
RedisModule_AuthenticateClientWithUser	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_AuthenticateClientWithUser)(RedisModuleCtx *ctx, RedisModuleUs/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,RedisModuleUser * user,RedisModuleUserChangedFunc callback,void * privdata,uint64_t * client_id)
RedisModule_AutoMemory	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_AutoMemory)(RedisModuleCtx *ctx) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCtx * ctx)
RedisModule_AvoidReplicaTraffic	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_AvoidReplicaTraffic)() REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)()
RedisModule_BlockClient	src/redismodule.h	/^REDISMODULE_API RedisModuleBlockedClient * (*RedisModule_BlockClient)(RedisModuleCtx *ctx, Redis/;"	v	typeref:typename:REDISMODULE_API RedisModuleBlockedClient * (*)(RedisModuleCtx * ctx,RedisModuleCmdFunc reply_callback,RedisModuleCmdFunc timeout_callback,void (* free_privdata)(RedisModuleCtx *,void *),long long timeout_ms)
RedisModule_BlockClientOnKeys	src/redismodule.h	/^REDISMODULE_API RedisModuleBlockedClient * (*RedisModule_BlockClientOnKeys)(RedisModuleCtx *ctx,/;"	v	typeref:typename:REDISMODULE_API RedisModuleBlockedClient * (*)(RedisModuleCtx * ctx,RedisModuleCmdFunc reply_callback,RedisModuleCmdFunc timeout_callback,void (* free_privdata)(RedisModuleCtx *,void *),long long timeout_ms,RedisModuleString ** keys,int numkeys,void * privdata)
RedisModule_BlockedClientDisconnected	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_BlockedClientDisconnected)(RedisModuleCtx *ctx) REDISMODULE_AT/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx)
RedisModule_BlockedClientMeasureTimeEnd	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_BlockedClientMeasureTimeEnd)(RedisModuleBlockedClient *bc) RED/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleBlockedClient * bc)
RedisModule_BlockedClientMeasureTimeStart	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_BlockedClientMeasureTimeStart)(RedisModuleBlockedClient *bc) R/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleBlockedClient * bc)
RedisModule_Call	src/redismodule.h	/^REDISMODULE_API RedisModuleCallReply * (*RedisModule_Call)(RedisModuleCtx *ctx, const char *cmdn/;"	v	typeref:typename:REDISMODULE_API RedisModuleCallReply * (*)(RedisModuleCtx * ctx,const char * cmdname,const char * fmt,...)
RedisModule_CallReplyArrayElement	src/redismodule.h	/^REDISMODULE_API RedisModuleCallReply * (*RedisModule_CallReplyArrayElement)(RedisModuleCallReply/;"	v	typeref:typename:REDISMODULE_API RedisModuleCallReply * (*)(RedisModuleCallReply * reply,size_t idx)
RedisModule_CallReplyInteger	src/redismodule.h	/^REDISMODULE_API long long (*RedisModule_CallReplyInteger)(RedisModuleCallReply *reply) REDISMODU/;"	v	typeref:typename:REDISMODULE_API long long (*)(RedisModuleCallReply * reply)
RedisModule_CallReplyLength	src/redismodule.h	/^REDISMODULE_API size_t (*RedisModule_CallReplyLength)(RedisModuleCallReply *reply) REDISMODULE_A/;"	v	typeref:typename:REDISMODULE_API size_t (*)(RedisModuleCallReply * reply)
RedisModule_CallReplyProto	src/redismodule.h	/^REDISMODULE_API const char * (*RedisModule_CallReplyProto)(RedisModuleCallReply *reply, size_t */;"	v	typeref:typename:REDISMODULE_API const char * (*)(RedisModuleCallReply * reply,size_t * len)
RedisModule_CallReplyStringPtr	src/redismodule.h	/^REDISMODULE_API const char * (*RedisModule_CallReplyStringPtr)(RedisModuleCallReply *reply, size/;"	v	typeref:typename:REDISMODULE_API const char * (*)(RedisModuleCallReply * reply,size_t * len)
RedisModule_CallReplyType	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_CallReplyType)(RedisModuleCallReply *reply) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCallReply * reply)
RedisModule_Calloc	src/redismodule.h	/^REDISMODULE_API void * (*RedisModule_Calloc)(size_t nmemb, size_t size) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void * (*)(size_t nmemb,size_t size)
RedisModule_CloseKey	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_CloseKey)(RedisModuleKey *kp) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleKey * kp)
RedisModule_CommandFilterArgDelete	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_CommandFilterArgDelete)(RedisModuleCommandFilterCtx *fctx, int/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCommandFilterCtx * fctx,int pos)
RedisModule_CommandFilterArgGet	src/redismodule.h	/^REDISMODULE_API const RedisModuleString * (*RedisModule_CommandFilterArgGet)(RedisModuleCommandF/;"	v	typeref:typename:REDISMODULE_API const RedisModuleString * (*)(RedisModuleCommandFilterCtx * fctx,int pos)
RedisModule_CommandFilterArgInsert	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_CommandFilterArgInsert)(RedisModuleCommandFilterCtx *fctx, int/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCommandFilterCtx * fctx,int pos,RedisModuleString * arg)
RedisModule_CommandFilterArgReplace	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_CommandFilterArgReplace)(RedisModuleCommandFilterCtx *fctx, in/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCommandFilterCtx * fctx,int pos,RedisModuleString * arg)
RedisModule_CommandFilterArgsCount	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_CommandFilterArgsCount)(RedisModuleCommandFilterCtx *fctx) RED/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCommandFilterCtx * fctx)
RedisModule_CreateCommand	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_CreateCommand)(RedisModuleCtx *ctx, const char *name, RedisMod/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,const char * name,RedisModuleCmdFunc cmdfunc,const char * strflags,int firstkey,int lastkey,int keystep)
RedisModule_CreateDataType	src/redismodule.h	/^REDISMODULE_API RedisModuleType * (*RedisModule_CreateDataType)(RedisModuleCtx *ctx, const char /;"	v	typeref:typename:REDISMODULE_API RedisModuleType * (*)(RedisModuleCtx * ctx,const char * name,int encver,RedisModuleTypeMethods * typemethods)
RedisModule_CreateDict	src/redismodule.h	/^REDISMODULE_API RedisModuleDict * (*RedisModule_CreateDict)(RedisModuleCtx *ctx) REDISMODULE_ATT/;"	v	typeref:typename:REDISMODULE_API RedisModuleDict * (*)(RedisModuleCtx * ctx)
RedisModule_CreateModuleUser	src/redismodule.h	/^REDISMODULE_API RedisModuleUser * (*RedisModule_CreateModuleUser)(const char *name) REDISMODULE_/;"	v	typeref:typename:REDISMODULE_API RedisModuleUser * (*)(const char * name)
RedisModule_CreateString	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_CreateString)(RedisModuleCtx *ctx, const char /;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCtx * ctx,const char * ptr,size_t len)
RedisModule_CreateStringFromCallReply	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_CreateStringFromCallReply)(RedisModuleCallRepl/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCallReply * reply)
RedisModule_CreateStringFromDouble	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_CreateStringFromDouble)(RedisModuleCtx *ctx, d/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCtx * ctx,double d)
RedisModule_CreateStringFromLongDouble	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_CreateStringFromLongDouble)(RedisModuleCtx *ct/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCtx * ctx,long double ld,int humanfriendly)
RedisModule_CreateStringFromLongLong	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_CreateStringFromLongLong)(RedisModuleCtx *ctx,/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCtx * ctx,long long ll)
RedisModule_CreateStringFromStreamID	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_CreateStringFromStreamID)(RedisModuleCtx *ctx,/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCtx * ctx,const RedisModuleStreamID * id)
RedisModule_CreateStringFromString	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_CreateStringFromString)(RedisModuleCtx *ctx, c/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCtx * ctx,const RedisModuleString * str)
RedisModule_CreateStringPrintf	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_CreateStringPrintf)(RedisModuleCtx *ctx, const/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCtx * ctx,const char * fmt,...)
RedisModule_CreateTimer	src/redismodule.h	/^REDISMODULE_API RedisModuleTimerID (*RedisModule_CreateTimer)(RedisModuleCtx *ctx, mstime_t peri/;"	v	typeref:typename:REDISMODULE_API RedisModuleTimerID (*)(RedisModuleCtx * ctx,mstime_t period,RedisModuleTimerProc callback,void * data)
RedisModule_DbSize	src/redismodule.h	/^REDISMODULE_API unsigned long long (*RedisModule_DbSize)(RedisModuleCtx *ctx) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API unsigned long long (*)(RedisModuleCtx * ctx)
RedisModule_DeauthenticateAndCloseClient	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_DeauthenticateAndCloseClient)(RedisModuleCtx *ctx, uint64_t cl/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,uint64_t client_id)
RedisModule_DefragAlloc	src/redismodule.h	/^REDISMODULE_API void *(*RedisModule_DefragAlloc)(RedisModuleDefragCtx *ctx, void *ptr) REDISMODU/;"	v	typeref:typename:REDISMODULE_API void * (*)(RedisModuleDefragCtx * ctx,void * ptr)
RedisModule_DefragCursorGet	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_DefragCursorGet)(RedisModuleDefragCtx *ctx, unsigned long *cur/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleDefragCtx * ctx,unsigned long * cursor)
RedisModule_DefragCursorSet	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_DefragCursorSet)(RedisModuleDefragCtx *ctx, unsigned long curs/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleDefragCtx * ctx,unsigned long cursor)
RedisModule_DefragRedisModuleString	src/redismodule.h	/^REDISMODULE_API RedisModuleString *(*RedisModule_DefragRedisModuleString)(RedisModuleDefragCtx */;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleDefragCtx * ctx,RedisModuleString * str)
RedisModule_DefragShouldStop	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_DefragShouldStop)(RedisModuleDefragCtx *ctx) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleDefragCtx * ctx)
RedisModule_DeleteKey	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_DeleteKey)(RedisModuleKey *key) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key)
RedisModule_DictCompare	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_DictCompare)(RedisModuleDictIter *di, const char *op, RedisMod/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleDictIter * di,const char * op,RedisModuleString * key)
RedisModule_DictCompareC	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_DictCompareC)(RedisModuleDictIter *di, const char *op, void *k/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleDictIter * di,const char * op,void * key,size_t keylen)
RedisModule_DictDel	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_DictDel)(RedisModuleDict *d, RedisModuleString *key, void *old/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleDict * d,RedisModuleString * key,void * oldval)
RedisModule_DictDelC	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_DictDelC)(RedisModuleDict *d, void *key, size_t keylen, void */;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleDict * d,void * key,size_t keylen,void * oldval)
RedisModule_DictGet	src/redismodule.h	/^REDISMODULE_API void * (*RedisModule_DictGet)(RedisModuleDict *d, RedisModuleString *key, int *n/;"	v	typeref:typename:REDISMODULE_API void * (*)(RedisModuleDict * d,RedisModuleString * key,int * nokey)
RedisModule_DictGetC	src/redismodule.h	/^REDISMODULE_API void * (*RedisModule_DictGetC)(RedisModuleDict *d, void *key, size_t keylen, int/;"	v	typeref:typename:REDISMODULE_API void * (*)(RedisModuleDict * d,void * key,size_t keylen,int * nokey)
RedisModule_DictIteratorReseek	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_DictIteratorReseek)(RedisModuleDictIter *di, const char *op, R/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleDictIter * di,const char * op,RedisModuleString * key)
RedisModule_DictIteratorReseekC	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_DictIteratorReseekC)(RedisModuleDictIter *di, const char *op, /;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleDictIter * di,const char * op,void * key,size_t keylen)
RedisModule_DictIteratorStart	src/redismodule.h	/^REDISMODULE_API RedisModuleDictIter * (*RedisModule_DictIteratorStart)(RedisModuleDict *d, const/;"	v	typeref:typename:REDISMODULE_API RedisModuleDictIter * (*)(RedisModuleDict * d,const char * op,RedisModuleString * key)
RedisModule_DictIteratorStartC	src/redismodule.h	/^REDISMODULE_API RedisModuleDictIter * (*RedisModule_DictIteratorStartC)(RedisModuleDict *d, cons/;"	v	typeref:typename:REDISMODULE_API RedisModuleDictIter * (*)(RedisModuleDict * d,const char * op,void * key,size_t keylen)
RedisModule_DictIteratorStop	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_DictIteratorStop)(RedisModuleDictIter *di) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleDictIter * di)
RedisModule_DictNext	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_DictNext)(RedisModuleCtx *ctx, RedisModuleDict/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCtx * ctx,RedisModuleDictIter * di,void ** dataptr)
RedisModule_DictNextC	src/redismodule.h	/^REDISMODULE_API void * (*RedisModule_DictNextC)(RedisModuleDictIter *di, size_t *keylen, void **/;"	v	typeref:typename:REDISMODULE_API void * (*)(RedisModuleDictIter * di,size_t * keylen,void ** dataptr)
RedisModule_DictPrev	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_DictPrev)(RedisModuleCtx *ctx, RedisModuleDict/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCtx * ctx,RedisModuleDictIter * di,void ** dataptr)
RedisModule_DictPrevC	src/redismodule.h	/^REDISMODULE_API void * (*RedisModule_DictPrevC)(RedisModuleDictIter *di, size_t *keylen, void **/;"	v	typeref:typename:REDISMODULE_API void * (*)(RedisModuleDictIter * di,size_t * keylen,void ** dataptr)
RedisModule_DictReplace	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_DictReplace)(RedisModuleDict *d, RedisModuleString *key, void /;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleDict * d,RedisModuleString * key,void * ptr)
RedisModule_DictReplaceC	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_DictReplaceC)(RedisModuleDict *d, void *key, size_t keylen, vo/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleDict * d,void * key,size_t keylen,void * ptr)
RedisModule_DictSet	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_DictSet)(RedisModuleDict *d, RedisModuleString *key, void *ptr/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleDict * d,RedisModuleString * key,void * ptr)
RedisModule_DictSetC	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_DictSetC)(RedisModuleDict *d, void *key, size_t keylen, void */;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleDict * d,void * key,size_t keylen,void * ptr)
RedisModule_DictSize	src/redismodule.h	/^REDISMODULE_API uint64_t (*RedisModule_DictSize)(RedisModuleDict *d) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API uint64_t (*)(RedisModuleDict * d)
RedisModule_DigestAddLongLong	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_DigestAddLongLong)(RedisModuleDigest *md, long long ele) REDI/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleDigest * md,long long ele)
RedisModule_DigestAddStringBuffer	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_DigestAddStringBuffer)(RedisModuleDigest *md, unsigned char */;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleDigest * md,unsigned char * ele,size_t len)
RedisModule_DigestEndSequence	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_DigestEndSequence)(RedisModuleDigest *md) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleDigest * md)
RedisModule_EmitAOF	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_EmitAOF)(RedisModuleIO *io, const char *cmdname, const char */;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleIO * io,const char * cmdname,const char * fmt,...)
RedisModule_EventListeners	src/module.c	/^list *RedisModule_EventListeners; \/* Global list of all the active events. *\/$/;"	v	typeref:typename:list *
RedisModule_ExitFromChild	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ExitFromChild)(int retcode) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(int retcode)
RedisModule_ExportSharedAPI	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ExportSharedAPI)(RedisModuleCtx *ctx, const char *apiname, voi/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,const char * apiname,void * func)
RedisModule_Fork	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_Fork)(RedisModuleForkDoneHandler cb, void *user_data) REDISMOD/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleForkDoneHandler cb,void * user_data)
RedisModule_Free	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_Free)(void *ptr) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void (*)(void * ptr)
RedisModule_FreeCallReply	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_FreeCallReply)(RedisModuleCallReply *reply) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCallReply * reply)
RedisModule_FreeClusterNodesList	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_FreeClusterNodesList)(char **ids) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void (*)(char ** ids)
RedisModule_FreeDict	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_FreeDict)(RedisModuleCtx *ctx, RedisModuleDict *d) REDISMODUL/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCtx * ctx,RedisModuleDict * d)
RedisModule_FreeModuleUser	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_FreeModuleUser)(RedisModuleUser *user) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleUser * user)
RedisModule_FreeServerInfo	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_FreeServerInfo)(RedisModuleCtx *ctx, RedisModuleServerInfoDat/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCtx * ctx,RedisModuleServerInfoData * data)
RedisModule_FreeString	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_FreeString)(RedisModuleCtx *ctx, RedisModuleString *str) REDI/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCtx * ctx,RedisModuleString * str)
RedisModule_FreeThreadSafeContext	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_FreeThreadSafeContext)(RedisModuleCtx *ctx) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCtx * ctx)
RedisModule_GetAbsExpire	src/redismodule.h	/^REDISMODULE_API mstime_t (*RedisModule_GetAbsExpire)(RedisModuleKey *key) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API mstime_t (*)(RedisModuleKey * key)
RedisModule_GetApi	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_GetApi)(const char *, void *) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(const char *,void *)
RedisModule_GetBlockedClientHandle	src/redismodule.h	/^REDISMODULE_API RedisModuleBlockedClient * (*RedisModule_GetBlockedClientHandle)(RedisModuleCtx /;"	v	typeref:typename:REDISMODULE_API RedisModuleBlockedClient * (*)(RedisModuleCtx * ctx)
RedisModule_GetBlockedClientPrivateData	src/redismodule.h	/^REDISMODULE_API void * (*RedisModule_GetBlockedClientPrivateData)(RedisModuleCtx *ctx) REDISMODU/;"	v	typeref:typename:REDISMODULE_API void * (*)(RedisModuleCtx * ctx)
RedisModule_GetBlockedClientReadyKey	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_GetBlockedClientReadyKey)(RedisModuleCtx *ctx)/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCtx * ctx)
RedisModule_GetClientCertificate	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_GetClientCertificate)(RedisModuleCtx *ctx, uin/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCtx * ctx,uint64_t id)
RedisModule_GetClientId	src/redismodule.h	/^REDISMODULE_API unsigned long long (*RedisModule_GetClientId)(RedisModuleCtx *ctx) REDISMODULE_A/;"	v	typeref:typename:REDISMODULE_API unsigned long long (*)(RedisModuleCtx * ctx)
RedisModule_GetClientInfoById	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_GetClientInfoById)(void *ci, uint64_t id) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(void * ci,uint64_t id)
RedisModule_GetClientUserNameById	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_GetClientUserNameById)(RedisModuleCtx *ctx, ui/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCtx * ctx,uint64_t id)
RedisModule_GetClusterNodeInfo	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_GetClusterNodeInfo)(RedisModuleCtx *ctx, const char *id, char /;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,const char * id,char * ip,char * master_id,int * port,int * flags)
RedisModule_GetClusterNodesList	src/redismodule.h	/^REDISMODULE_API char ** (*RedisModule_GetClusterNodesList)(RedisModuleCtx *ctx, size_t *numnodes/;"	v	typeref:typename:REDISMODULE_API char ** (*)(RedisModuleCtx * ctx,size_t * numnodes)
RedisModule_GetClusterSize	src/redismodule.h	/^REDISMODULE_API size_t (*RedisModule_GetClusterSize)(void) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API size_t (*)(void)
RedisModule_GetCommandKeys	src/redismodule.h	/^REDISMODULE_API int *(*RedisModule_GetCommandKeys)(RedisModuleCtx *ctx, RedisModuleString **argv/;"	v	typeref:typename:REDISMODULE_API int * (*)(RedisModuleCtx * ctx,RedisModuleString ** argv,int argc,int * num_keys)
RedisModule_GetContextFlags	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_GetContextFlags)(RedisModuleCtx *ctx) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx)
RedisModule_GetContextFlagsAll	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_GetContextFlagsAll)() REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)()
RedisModule_GetContextFromIO	src/redismodule.h	/^REDISMODULE_API RedisModuleCtx * (*RedisModule_GetContextFromIO)(RedisModuleIO *io) REDISMODULE_/;"	v	typeref:typename:REDISMODULE_API RedisModuleCtx * (*)(RedisModuleIO * io)
RedisModule_GetCurrentCommandName	src/redismodule.h	/^REDISMODULE_API const char *(*RedisModule_GetCurrentCommandName)(RedisModuleCtx *ctx) REDISMODUL/;"	v	typeref:typename:REDISMODULE_API const char * (*)(RedisModuleCtx * ctx)
RedisModule_GetDetachedThreadSafeContext	src/redismodule.h	/^REDISMODULE_API RedisModuleCtx * (*RedisModule_GetDetachedThreadSafeContext)(RedisModuleCtx *ctx/;"	v	typeref:typename:REDISMODULE_API RedisModuleCtx * (*)(RedisModuleCtx * ctx)
RedisModule_GetExpire	src/redismodule.h	/^REDISMODULE_API mstime_t (*RedisModule_GetExpire)(RedisModuleKey *key) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API mstime_t (*)(RedisModuleKey * key)
RedisModule_GetKeyNameFromIO	src/redismodule.h	/^REDISMODULE_API const RedisModuleString * (*RedisModule_GetKeyNameFromIO)(RedisModuleIO *io) RED/;"	v	typeref:typename:REDISMODULE_API const RedisModuleString * (*)(RedisModuleIO * io)
RedisModule_GetKeyNameFromModuleKey	src/redismodule.h	/^REDISMODULE_API const RedisModuleString * (*RedisModule_GetKeyNameFromModuleKey)(RedisModuleKey /;"	v	typeref:typename:REDISMODULE_API const RedisModuleString * (*)(RedisModuleKey * key)
RedisModule_GetKeyspaceNotificationFlagsAll	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_GetKeyspaceNotificationFlagsAll)() REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)()
RedisModule_GetLFU	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_GetLFU)(RedisModuleKey *key, long long *lfu_freq) REDISMODULE_/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,long long * lfu_freq)
RedisModule_GetLRU	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_GetLRU)(RedisModuleKey *key, mstime_t *lru_idle) REDISMODULE_A/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,mstime_t * lru_idle)
RedisModule_GetMyClusterID	src/redismodule.h	/^REDISMODULE_API const char * (*RedisModule_GetMyClusterID)(void) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API const char * (*)(void)
RedisModule_GetNotifyKeyspaceEvents	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_GetNotifyKeyspaceEvents)() REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)()
RedisModule_GetRandomBytes	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_GetRandomBytes)(unsigned char *dst, size_t len) REDISMODULE_A/;"	v	typeref:typename:REDISMODULE_API void (*)(unsigned char * dst,size_t len)
RedisModule_GetRandomHexChars	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_GetRandomHexChars)(char *dst, size_t len) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void (*)(char * dst,size_t len)
RedisModule_GetSelectedDb	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_GetSelectedDb)(RedisModuleCtx *ctx) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx)
RedisModule_GetServerInfo	src/redismodule.h	/^REDISMODULE_API RedisModuleServerInfoData * (*RedisModule_GetServerInfo)(RedisModuleCtx *ctx, co/;"	v	typeref:typename:REDISMODULE_API RedisModuleServerInfoData * (*)(RedisModuleCtx * ctx,const char * section)
RedisModule_GetServerVersion	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_GetServerVersion)() REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)()
RedisModule_GetSharedAPI	src/redismodule.h	/^REDISMODULE_API void * (*RedisModule_GetSharedAPI)(RedisModuleCtx *ctx, const char *apiname) RED/;"	v	typeref:typename:REDISMODULE_API void * (*)(RedisModuleCtx * ctx,const char * apiname)
RedisModule_GetThreadSafeContext	src/redismodule.h	/^REDISMODULE_API RedisModuleCtx * (*RedisModule_GetThreadSafeContext)(RedisModuleBlockedClient *b/;"	v	typeref:typename:REDISMODULE_API RedisModuleCtx * (*)(RedisModuleBlockedClient * bc)
RedisModule_GetTimerInfo	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_GetTimerInfo)(RedisModuleCtx *ctx, RedisModuleTimerID id, uint/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,RedisModuleTimerID id,uint64_t * remaining,void ** data)
RedisModule_GetTypeMethodVersion	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_GetTypeMethodVersion)() REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)()
RedisModule_GetUsedMemoryRatio	src/redismodule.h	/^REDISMODULE_API float (*RedisModule_GetUsedMemoryRatio)() REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API float (*)()
RedisModule_HashGet	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_HashGet)(RedisModuleKey *key, int flags, ...) REDISMODULE_ATTR/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,int flags,...)
RedisModule_HashSet	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_HashSet)(RedisModuleKey *key, int flags, ...) REDISMODULE_ATTR/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,int flags,...)
RedisModule_HoldString	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_HoldString)(RedisModuleCtx *ctx, RedisModuleSt/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCtx * ctx,RedisModuleString * str)
RedisModule_InfoAddFieldCString	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_InfoAddFieldCString)(RedisModuleInfoCtx *ctx, char *field, cha/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleInfoCtx * ctx,char * field,char * value)
RedisModule_InfoAddFieldDouble	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_InfoAddFieldDouble)(RedisModuleInfoCtx *ctx, char *field, doub/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleInfoCtx * ctx,char * field,double value)
RedisModule_InfoAddFieldLongLong	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_InfoAddFieldLongLong)(RedisModuleInfoCtx *ctx, char *field, lo/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleInfoCtx * ctx,char * field,long long value)
RedisModule_InfoAddFieldString	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_InfoAddFieldString)(RedisModuleInfoCtx *ctx, char *field, Redi/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleInfoCtx * ctx,char * field,RedisModuleString * value)
RedisModule_InfoAddFieldULongLong	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_InfoAddFieldULongLong)(RedisModuleInfoCtx *ctx, char *field, u/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleInfoCtx * ctx,char * field,unsigned long long value)
RedisModule_InfoAddSection	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_InfoAddSection)(RedisModuleInfoCtx *ctx, char *name) REDISMODU/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleInfoCtx * ctx,char * name)
RedisModule_InfoBeginDictField	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_InfoBeginDictField)(RedisModuleInfoCtx *ctx, char *name) REDIS/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleInfoCtx * ctx,char * name)
RedisModule_InfoEndDictField	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_InfoEndDictField)(RedisModuleInfoCtx *ctx) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleInfoCtx * ctx)
RedisModule_Init	src/redismodule.h	/^static int RedisModule_Init(RedisModuleCtx *ctx, const char *name, int ver, int apiver) {$/;"	f	typeref:typename:int
RedisModule_IsAOFClient	src/redismodule.h	/^#define RedisModule_IsAOFClient(/;"	d
RedisModule_IsBlockedReplyRequest	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_IsBlockedReplyRequest)(RedisModuleCtx *ctx) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx)
RedisModule_IsBlockedTimeoutRequest	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_IsBlockedTimeoutRequest)(RedisModuleCtx *ctx) REDISMODULE_ATTR/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx)
RedisModule_IsIOError	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_IsIOError)(RedisModuleIO *io) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleIO * io)
RedisModule_IsKeysPositionRequest	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_IsKeysPositionRequest)(RedisModuleCtx *ctx) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx)
RedisModule_IsModuleNameBusy	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_IsModuleNameBusy)(const char *name) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(const char * name)
RedisModule_IsSubEventSupported	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_IsSubEventSupported)(RedisModuleEvent event, uint64_t subevent/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleEvent event,uint64_t subevent)
RedisModule_KeyAtPos	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_KeyAtPos)(RedisModuleCtx *ctx, int pos) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCtx * ctx,int pos)
RedisModule_KeyType	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_KeyType)(RedisModuleKey *kp) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * kp)
RedisModule_KillForkChild	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_KillForkChild)(int child_pid) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(int child_pid)
RedisModule_LatencyAddSample	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_LatencyAddSample)(const char *event, mstime_t latency) REDISM/;"	v	typeref:typename:REDISMODULE_API void (*)(const char * event,mstime_t latency)
RedisModule_ListPop	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_ListPop)(RedisModuleKey *key, int where) REDIS/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleKey * key,int where)
RedisModule_ListPush	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ListPush)(RedisModuleKey *kp, int where, RedisModuleString *el/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * kp,int where,RedisModuleString * ele)
RedisModule_LoadDataTypeFromString	src/redismodule.h	/^REDISMODULE_API void * (*RedisModule_LoadDataTypeFromString)(const RedisModuleString *str, const/;"	v	typeref:typename:REDISMODULE_API void * (*)(const RedisModuleString * str,const RedisModuleType * mt)
RedisModule_LoadDouble	src/redismodule.h	/^REDISMODULE_API double (*RedisModule_LoadDouble)(RedisModuleIO *io) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API double (*)(RedisModuleIO * io)
RedisModule_LoadFloat	src/redismodule.h	/^REDISMODULE_API float (*RedisModule_LoadFloat)(RedisModuleIO *io) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API float (*)(RedisModuleIO * io)
RedisModule_LoadLongDouble	src/redismodule.h	/^REDISMODULE_API long double (*RedisModule_LoadLongDouble)(RedisModuleIO *io) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API long double (*)(RedisModuleIO * io)
RedisModule_LoadSigned	src/redismodule.h	/^REDISMODULE_API int64_t (*RedisModule_LoadSigned)(RedisModuleIO *io) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int64_t (*)(RedisModuleIO * io)
RedisModule_LoadString	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_LoadString)(RedisModuleIO *io) REDISMODULE_ATT/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleIO * io)
RedisModule_LoadStringBuffer	src/redismodule.h	/^REDISMODULE_API char * (*RedisModule_LoadStringBuffer)(RedisModuleIO *io, size_t *lenptr) REDISM/;"	v	typeref:typename:REDISMODULE_API char * (*)(RedisModuleIO * io,size_t * lenptr)
RedisModule_LoadUnsigned	src/redismodule.h	/^REDISMODULE_API uint64_t (*RedisModule_LoadUnsigned)(RedisModuleIO *io) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API uint64_t (*)(RedisModuleIO * io)
RedisModule_Log	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_Log)(RedisModuleCtx *ctx, const char *level, const char *fmt,/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCtx * ctx,const char * level,const char * fmt,...)
RedisModule_LogIOError	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_LogIOError)(RedisModuleIO *io, const char *levelstr, const ch/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleIO * io,const char * levelstr,const char * fmt,...)
RedisModule_MallocSize	src/redismodule.h	/^REDISMODULE_API size_t (*RedisModule_MallocSize)(void* ptr) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API size_t (*)(void * ptr)
RedisModule_Milliseconds	src/redismodule.h	/^REDISMODULE_API long long (*RedisModule_Milliseconds)(void) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API long long (*)(void)
RedisModule_ModuleTypeGetType	src/redismodule.h	/^REDISMODULE_API RedisModuleType * (*RedisModule_ModuleTypeGetType)(RedisModuleKey *key) REDISMOD/;"	v	typeref:typename:REDISMODULE_API RedisModuleType * (*)(RedisModuleKey * key)
RedisModule_ModuleTypeGetValue	src/redismodule.h	/^REDISMODULE_API void * (*RedisModule_ModuleTypeGetValue)(RedisModuleKey *key) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void * (*)(RedisModuleKey * key)
RedisModule_ModuleTypeReplaceValue	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ModuleTypeReplaceValue)(RedisModuleKey *key, RedisModuleType */;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,RedisModuleType * mt,void * new_value,void ** old_value)
RedisModule_ModuleTypeSetValue	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ModuleTypeSetValue)(RedisModuleKey *key, RedisModuleType *mt, /;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,RedisModuleType * mt,void * value)
RedisModule_NotifyKeyspaceEvent	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_NotifyKeyspaceEvent)(RedisModuleCtx *ctx, int type, const char/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,int type,const char * event,RedisModuleString * key)
RedisModule_OnLoad	src/modules/helloacl.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	src/modules/helloblock.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	src/modules/hellocluster.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	src/modules/hellodict.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	src/modules/hellohook.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	src/modules/hellotimer.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	src/modules/hellotype.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	src/modules/helloworld.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/auth.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/basics.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/blockedclient.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/blockonbackground.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/blockonkeys.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/commandfilter.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/datatype.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/defragtest.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/fork.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/getkeys.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/hash.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/hooks.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/infotest.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/keyspace_events.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/misc.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/propagate.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/scan.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/stream.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/test_lazyfree.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/testrdb.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/timer.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnLoad	tests/modules/zset.c	/^int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RedisModule_OnUnload	tests/modules/commandfilter.c	/^int RedisModule_OnUnload(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RedisModule_OnUnload	tests/modules/hooks.c	/^int RedisModule_OnUnload(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RedisModule_OnUnload	tests/modules/keyspace_events.c	/^int RedisModule_OnUnload(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RedisModule_OnUnload	tests/modules/testrdb.c	/^int RedisModule_OnUnload(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:int
RedisModule_OpenKey	src/redismodule.h	/^REDISMODULE_API void * (*RedisModule_OpenKey)(RedisModuleCtx *ctx, RedisModuleString *keyname, i/;"	v	typeref:typename:REDISMODULE_API void * (*)(RedisModuleCtx * ctx,RedisModuleString * keyname,int mode)
RedisModule_PoolAlloc	src/redismodule.h	/^REDISMODULE_API void * (*RedisModule_PoolAlloc)(RedisModuleCtx *ctx, size_t bytes) REDISMODULE_A/;"	v	typeref:typename:REDISMODULE_API void * (*)(RedisModuleCtx * ctx,size_t bytes)
RedisModule_PublishMessage	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_PublishMessage)(RedisModuleCtx *ctx, RedisModuleString *channe/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,RedisModuleString * channel,RedisModuleString * message)
RedisModule_RandomKey	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_RandomKey)(RedisModuleCtx *ctx) REDISMODULE_AT/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCtx * ctx)
RedisModule_Realloc	src/redismodule.h	/^REDISMODULE_API void * (*RedisModule_Realloc)(void *ptr, size_t bytes) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void * (*)(void * ptr,size_t bytes)
RedisModule_RegisterClusterMessageReceiver	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_RegisterClusterMessageReceiver)(RedisModuleCtx *ctx, uint8_t /;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCtx * ctx,uint8_t type,RedisModuleClusterMessageReceiver callback)
RedisModule_RegisterCommandFilter	src/redismodule.h	/^REDISMODULE_API RedisModuleCommandFilter * (*RedisModule_RegisterCommandFilter)(RedisModuleCtx */;"	v	typeref:typename:REDISMODULE_API RedisModuleCommandFilter * (*)(RedisModuleCtx * ctx,RedisModuleCommandFilterFunc cb,int flags)
RedisModule_RegisterDefragFunc	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_RegisterDefragFunc)(RedisModuleCtx *ctx, RedisModuleDefragFunc/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,RedisModuleDefragFunc func)
RedisModule_RegisterInfoFunc	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_RegisterInfoFunc)(RedisModuleCtx *ctx, RedisModuleInfoFunc cb)/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,RedisModuleInfoFunc cb)
RedisModule_Replicate	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_Replicate)(RedisModuleCtx *ctx, const char *cmdname, const cha/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,const char * cmdname,const char * fmt,...)
RedisModule_ReplicateVerbatim	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ReplicateVerbatim)(RedisModuleCtx *ctx) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx)
RedisModule_ReplySetArrayLength	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_ReplySetArrayLength)(RedisModuleCtx *ctx, long len) REDISMODU/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCtx * ctx,long len)
RedisModule_ReplyWithArray	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ReplyWithArray)(RedisModuleCtx *ctx, long len) REDISMODULE_ATT/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,long len)
RedisModule_ReplyWithCString	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ReplyWithCString)(RedisModuleCtx *ctx, const char *buf) REDISM/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,const char * buf)
RedisModule_ReplyWithCallReply	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ReplyWithCallReply)(RedisModuleCtx *ctx, RedisModuleCallReply /;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,RedisModuleCallReply * reply)
RedisModule_ReplyWithDouble	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ReplyWithDouble)(RedisModuleCtx *ctx, double d) REDISMODULE_AT/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,double d)
RedisModule_ReplyWithEmptyArray	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ReplyWithEmptyArray)(RedisModuleCtx *ctx) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx)
RedisModule_ReplyWithEmptyString	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ReplyWithEmptyString)(RedisModuleCtx *ctx) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx)
RedisModule_ReplyWithError	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ReplyWithError)(RedisModuleCtx *ctx, const char *err) REDISMOD/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,const char * err)
RedisModule_ReplyWithLongDouble	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ReplyWithLongDouble)(RedisModuleCtx *ctx, long double d) REDIS/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,long double d)
RedisModule_ReplyWithLongLong	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ReplyWithLongLong)(RedisModuleCtx *ctx, long long ll) REDISMOD/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,long long ll)
RedisModule_ReplyWithNull	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ReplyWithNull)(RedisModuleCtx *ctx) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx)
RedisModule_ReplyWithNullArray	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ReplyWithNullArray)(RedisModuleCtx *ctx) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx)
RedisModule_ReplyWithSimpleString	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ReplyWithSimpleString)(RedisModuleCtx *ctx, const char *msg) R/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,const char * msg)
RedisModule_ReplyWithString	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ReplyWithString)(RedisModuleCtx *ctx, RedisModuleString *str) /;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,RedisModuleString * str)
RedisModule_ReplyWithStringBuffer	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ReplyWithStringBuffer)(RedisModuleCtx *ctx, const char *buf, s/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,const char * buf,size_t len)
RedisModule_ReplyWithVerbatimString	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ReplyWithVerbatimString)(RedisModuleCtx *ctx, const char *buf,/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,const char * buf,size_t len)
RedisModule_ResetDataset	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_ResetDataset)(int restart_aof, int async) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void (*)(int restart_aof,int async)
RedisModule_RetainString	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_RetainString)(RedisModuleCtx *ctx, RedisModuleString *str) RE/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCtx * ctx,RedisModuleString * str)
RedisModule_SaveDataTypeToString	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_SaveDataTypeToString)(RedisModuleCtx *ctx, voi/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCtx * ctx,void * data,const RedisModuleType * mt)
RedisModule_SaveDouble	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_SaveDouble)(RedisModuleIO *io, double value) REDISMODULE_ATTR/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleIO * io,double value)
RedisModule_SaveFloat	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_SaveFloat)(RedisModuleIO *io, float value) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleIO * io,float value)
RedisModule_SaveLongDouble	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_SaveLongDouble)(RedisModuleIO *io, long double value) REDISMO/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleIO * io,long double value)
RedisModule_SaveSigned	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_SaveSigned)(RedisModuleIO *io, int64_t value) REDISMODULE_ATT/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleIO * io,int64_t value)
RedisModule_SaveString	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_SaveString)(RedisModuleIO *io, RedisModuleString *s) REDISMOD/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleIO * io,RedisModuleString * s)
RedisModule_SaveStringBuffer	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_SaveStringBuffer)(RedisModuleIO *io, const char *str, size_t /;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleIO * io,const char * str,size_t len)
RedisModule_SaveUnsigned	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_SaveUnsigned)(RedisModuleIO *io, uint64_t value) REDISMODULE_/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleIO * io,uint64_t value)
RedisModule_Scan	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_Scan)(RedisModuleCtx *ctx, RedisModuleScanCursor *cursor, Redi/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,RedisModuleScanCursor * cursor,RedisModuleScanCB fn,void * privdata)
RedisModule_ScanCursorCreate	src/redismodule.h	/^REDISMODULE_API RedisModuleScanCursor * (*RedisModule_ScanCursorCreate)() REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API RedisModuleScanCursor * (*)()
RedisModule_ScanCursorDestroy	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_ScanCursorDestroy)(RedisModuleScanCursor *cursor) REDISMODULE/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleScanCursor * cursor)
RedisModule_ScanCursorRestart	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_ScanCursorRestart)(RedisModuleScanCursor *cursor) REDISMODULE/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleScanCursor * cursor)
RedisModule_ScanKey	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ScanKey)(RedisModuleKey *key, RedisModuleScanCursor *cursor, R/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,RedisModuleScanCursor * cursor,RedisModuleScanKeyCB fn,void * privdata)
RedisModule_SelectDb	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_SelectDb)(RedisModuleCtx *ctx, int newid) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,int newid)
RedisModule_SendChildHeartbeat	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_SendChildHeartbeat)(double progress) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void (*)(double progress)
RedisModule_SendClusterMessage	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_SendClusterMessage)(RedisModuleCtx *ctx, char *target_id, uint/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,char * target_id,uint8_t type,unsigned char * msg,uint32_t len)
RedisModule_ServerInfoGetField	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_ServerInfoGetField)(RedisModuleCtx *ctx, Redis/;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleCtx * ctx,RedisModuleServerInfoData * data,const char * field)
RedisModule_ServerInfoGetFieldC	src/redismodule.h	/^REDISMODULE_API const char * (*RedisModule_ServerInfoGetFieldC)(RedisModuleServerInfoData *data,/;"	v	typeref:typename:REDISMODULE_API const char * (*)(RedisModuleServerInfoData * data,const char * field)
RedisModule_ServerInfoGetFieldDouble	src/redismodule.h	/^REDISMODULE_API double (*RedisModule_ServerInfoGetFieldDouble)(RedisModuleServerInfoData *data, /;"	v	typeref:typename:REDISMODULE_API double (*)(RedisModuleServerInfoData * data,const char * field,int * out_err)
RedisModule_ServerInfoGetFieldSigned	src/redismodule.h	/^REDISMODULE_API long long (*RedisModule_ServerInfoGetFieldSigned)(RedisModuleServerInfoData *dat/;"	v	typeref:typename:REDISMODULE_API long long (*)(RedisModuleServerInfoData * data,const char * field,int * out_err)
RedisModule_ServerInfoGetFieldUnsigned	src/redismodule.h	/^REDISMODULE_API unsigned long long (*RedisModule_ServerInfoGetFieldUnsigned)(RedisModuleServerIn/;"	v	typeref:typename:REDISMODULE_API unsigned long long (*)(RedisModuleServerInfoData * data,const char * field,int * out_err)
RedisModule_SetAbsExpire	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_SetAbsExpire)(RedisModuleKey *key, mstime_t expire) REDISMODUL/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,mstime_t expire)
RedisModule_SetClusterFlags	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_SetClusterFlags)(RedisModuleCtx *ctx, uint64_t flags) REDISMO/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCtx * ctx,uint64_t flags)
RedisModule_SetDisconnectCallback	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_SetDisconnectCallback)(RedisModuleBlockedClient *bc, RedisMod/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleBlockedClient * bc,RedisModuleDisconnectFunc callback)
RedisModule_SetExpire	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_SetExpire)(RedisModuleKey *key, mstime_t expire) REDISMODULE_A/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,mstime_t expire)
RedisModule_SetLFU	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_SetLFU)(RedisModuleKey *key, long long lfu_freq) REDISMODULE_A/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,long long lfu_freq)
RedisModule_SetLRU	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_SetLRU)(RedisModuleKey *key, mstime_t lru_idle) REDISMODULE_AT/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,mstime_t lru_idle)
RedisModule_SetModuleAttribs	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_SetModuleAttribs)(RedisModuleCtx *ctx, const char *name, int /;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCtx * ctx,const char * name,int ver,int apiver)
RedisModule_SetModuleOptions	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_SetModuleOptions)(RedisModuleCtx *ctx, int options) REDISMODU/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCtx * ctx,int options)
RedisModule_SetModuleUserACL	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_SetModuleUserACL)(RedisModuleUser *user, const char* acl) REDI/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleUser * user,const char * acl)
RedisModule_SignalKeyAsReady	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_SignalKeyAsReady)(RedisModuleCtx *ctx, RedisModuleString *key/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCtx * ctx,RedisModuleString * key)
RedisModule_SignalModifiedKey	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_SignalModifiedKey)(RedisModuleCtx *ctx, RedisModuleString *key/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,RedisModuleString * keyname)
RedisModule_StopTimer	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_StopTimer)(RedisModuleCtx *ctx, RedisModuleTimerID id, void **/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,RedisModuleTimerID id,void ** data)
RedisModule_Strdup	src/redismodule.h	/^REDISMODULE_API char * (*RedisModule_Strdup)(const char *str) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API char * (*)(const char * str)
RedisModule_StreamAdd	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_StreamAdd)(RedisModuleKey *key, int flags, RedisModuleStreamID/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,int flags,RedisModuleStreamID * id,RedisModuleString ** argv,int64_t numfields)
RedisModule_StreamDelete	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_StreamDelete)(RedisModuleKey *key, RedisModuleStreamID *id) RE/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,RedisModuleStreamID * id)
RedisModule_StreamIteratorDelete	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_StreamIteratorDelete)(RedisModuleKey *key) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key)
RedisModule_StreamIteratorNextField	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_StreamIteratorNextField)(RedisModuleKey *key, RedisModuleStrin/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,RedisModuleString ** field_ptr,RedisModuleString ** value_ptr)
RedisModule_StreamIteratorNextID	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_StreamIteratorNextID)(RedisModuleKey *key, RedisModuleStreamID/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,RedisModuleStreamID * id,long * numfields)
RedisModule_StreamIteratorStart	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_StreamIteratorStart)(RedisModuleKey *key, int flags, RedisModu/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,int flags,RedisModuleStreamID * startid,RedisModuleStreamID * endid)
RedisModule_StreamIteratorStop	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_StreamIteratorStop)(RedisModuleKey *key) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key)
RedisModule_StreamTrimByID	src/redismodule.h	/^REDISMODULE_API long long (*RedisModule_StreamTrimByID)(RedisModuleKey *key, int flags, RedisMod/;"	v	typeref:typename:REDISMODULE_API long long (*)(RedisModuleKey * key,int flags,RedisModuleStreamID * id)
RedisModule_StreamTrimByLength	src/redismodule.h	/^REDISMODULE_API long long (*RedisModule_StreamTrimByLength)(RedisModuleKey *key, int flags, long/;"	v	typeref:typename:REDISMODULE_API long long (*)(RedisModuleKey * key,int flags,long long length)
RedisModule_StringAppendBuffer	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_StringAppendBuffer)(RedisModuleCtx *ctx, RedisModuleString *st/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,RedisModuleString * str,const char * buf,size_t len)
RedisModule_StringCompare	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_StringCompare)(RedisModuleString *a, RedisModuleString *b) RED/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleString * a,RedisModuleString * b)
RedisModule_StringDMA	src/redismodule.h	/^REDISMODULE_API char * (*RedisModule_StringDMA)(RedisModuleKey *key, size_t *len, int mode) REDI/;"	v	typeref:typename:REDISMODULE_API char * (*)(RedisModuleKey * key,size_t * len,int mode)
RedisModule_StringPtrLen	src/redismodule.h	/^REDISMODULE_API const char * (*RedisModule_StringPtrLen)(const RedisModuleString *str, size_t *l/;"	v	typeref:typename:REDISMODULE_API const char * (*)(const RedisModuleString * str,size_t * len)
RedisModule_StringSet	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_StringSet)(RedisModuleKey *key, RedisModuleString *str) REDISM/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,RedisModuleString * str)
RedisModule_StringToDouble	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_StringToDouble)(const RedisModuleString *str, double *d) REDIS/;"	v	typeref:typename:REDISMODULE_API int (*)(const RedisModuleString * str,double * d)
RedisModule_StringToLongDouble	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_StringToLongDouble)(const RedisModuleString *str, long double /;"	v	typeref:typename:REDISMODULE_API int (*)(const RedisModuleString * str,long double * d)
RedisModule_StringToLongLong	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_StringToLongLong)(const RedisModuleString *str, long long *ll)/;"	v	typeref:typename:REDISMODULE_API int (*)(const RedisModuleString * str,long long * ll)
RedisModule_StringToStreamID	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_StringToStreamID)(const RedisModuleString *str, RedisModuleStr/;"	v	typeref:typename:REDISMODULE_API int (*)(const RedisModuleString * str,RedisModuleStreamID * id)
RedisModule_StringTruncate	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_StringTruncate)(RedisModuleKey *key, size_t newlen) REDISMODUL/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,size_t newlen)
RedisModule_SubscribeToKeyspaceEvents	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_SubscribeToKeyspaceEvents)(RedisModuleCtx *ctx, int types, Red/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,int types,RedisModuleNotificationFunc cb)
RedisModule_SubscribeToServerEvent	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_SubscribeToServerEvent)(RedisModuleCtx *ctx, RedisModuleEvent /;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,RedisModuleEvent event,RedisModuleEventCallback callback)
RedisModule_ThreadSafeContextLock	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_ThreadSafeContextLock)(RedisModuleCtx *ctx) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCtx * ctx)
RedisModule_ThreadSafeContextTryLock	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ThreadSafeContextTryLock)(RedisModuleCtx *ctx) REDISMODULE_ATT/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx)
RedisModule_ThreadSafeContextUnlock	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_ThreadSafeContextUnlock)(RedisModuleCtx *ctx) REDISMODULE_ATT/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleCtx * ctx)
RedisModule_UnblockClient	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_UnblockClient)(RedisModuleBlockedClient *bc, void *privdata) R/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleBlockedClient * bc,void * privdata)
RedisModule_UnlinkKey	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_UnlinkKey)(RedisModuleKey *key) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key)
RedisModule_UnregisterCommandFilter	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_UnregisterCommandFilter)(RedisModuleCtx *ctx, RedisModuleComma/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx,RedisModuleCommandFilter * filter)
RedisModule_ValueLength	src/redismodule.h	/^REDISMODULE_API size_t (*RedisModule_ValueLength)(RedisModuleKey *kp) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API size_t (*)(RedisModuleKey * kp)
RedisModule_WrongArity	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_WrongArity)(RedisModuleCtx *ctx) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleCtx * ctx)
RedisModule_ZsetAdd	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ZsetAdd)(RedisModuleKey *key, double score, RedisModuleString /;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,double score,RedisModuleString * ele,int * flagsptr)
RedisModule_ZsetFirstInLexRange	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ZsetFirstInLexRange)(RedisModuleKey *key, RedisModuleString *m/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,RedisModuleString * min,RedisModuleString * max)
RedisModule_ZsetFirstInScoreRange	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ZsetFirstInScoreRange)(RedisModuleKey *key, double min, double/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,double min,double max,int minex,int maxex)
RedisModule_ZsetIncrby	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ZsetIncrby)(RedisModuleKey *key, double score, RedisModuleStri/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,double score,RedisModuleString * ele,int * flagsptr,double * newscore)
RedisModule_ZsetLastInLexRange	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ZsetLastInLexRange)(RedisModuleKey *key, RedisModuleString *mi/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,RedisModuleString * min,RedisModuleString * max)
RedisModule_ZsetLastInScoreRange	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ZsetLastInScoreRange)(RedisModuleKey *key, double min, double /;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,double min,double max,int minex,int maxex)
RedisModule_ZsetRangeCurrentElement	src/redismodule.h	/^REDISMODULE_API RedisModuleString * (*RedisModule_ZsetRangeCurrentElement)(RedisModuleKey *key, /;"	v	typeref:typename:REDISMODULE_API RedisModuleString * (*)(RedisModuleKey * key,double * score)
RedisModule_ZsetRangeEndReached	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ZsetRangeEndReached)(RedisModuleKey *key) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key)
RedisModule_ZsetRangeNext	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ZsetRangeNext)(RedisModuleKey *key) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key)
RedisModule_ZsetRangePrev	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ZsetRangePrev)(RedisModuleKey *key) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key)
RedisModule_ZsetRangeStop	src/redismodule.h	/^REDISMODULE_API void (*RedisModule_ZsetRangeStop)(RedisModuleKey *key) REDISMODULE_ATTR;$/;"	v	typeref:typename:REDISMODULE_API void (*)(RedisModuleKey * key)
RedisModule_ZsetRem	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ZsetRem)(RedisModuleKey *key, RedisModuleString *ele, int *del/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,RedisModuleString * ele,int * deleted)
RedisModule_ZsetScore	src/redismodule.h	/^REDISMODULE_API int (*RedisModule_ZsetScore)(RedisModuleKey *key, RedisModuleString *ele, double/;"	v	typeref:typename:REDISMODULE_API int (*)(RedisModuleKey * key,RedisModuleString * ele,double * score)
RedisModule__Assert	src/redismodule.h	/^REDISMODULE_API void (*RedisModule__Assert)(const char *estr, const char *file, int line) REDISM/;"	v	typeref:typename:REDISMODULE_API void (*)(const char * estr,const char * file,int line)
RedisQtAdapter	deps/hiredis/adapters/qt.h	/^        RedisQtAdapter(QObject * parent = 0)$/;"	f	class:RedisQtAdapter
RedisQtAdapter	deps/hiredis/adapters/qt.h	/^class RedisQtAdapter : public QObject {$/;"	c
RedisQtAddRead	deps/hiredis/adapters/qt.h	/^    void RedisQtAddRead(void * adapter) {$/;"	f	typeref:typename:Q_OBJECT void
RedisQtAddWrite	deps/hiredis/adapters/qt.h	/^    void RedisQtAddWrite(void * adapter) {$/;"	f	typeref:typename:void
RedisQtCleanup	deps/hiredis/adapters/qt.h	/^    void RedisQtCleanup(void * adapter) {$/;"	f	typeref:typename:void
RedisQtDelRead	deps/hiredis/adapters/qt.h	/^    void RedisQtDelRead(void * adapter) {$/;"	f	typeref:typename:void
RedisQtDelWrite	deps/hiredis/adapters/qt.h	/^    void RedisQtDelWrite(void * adapter) {$/;"	f	typeref:typename:void
RedisRunLoop	deps/hiredis/adapters/macosx.h	/^} RedisRunLoop;$/;"	t	typeref:struct:__anona6f175db0108
RedisSource	deps/hiredis/adapters/glib.h	/^} RedisSource;$/;"	t	typeref:struct:__anonad20ee0e0108
Release_RedisCommand	tests/modules/blockonbackground.c	/^int Release_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
ResetCommand_RedisCommand	src/modules/helloacl.c	/^int ResetCommand_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
RevokeCommand_RedisCommand	src/modules/helloacl.c	/^int RevokeCommand_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
S	deps/lua/src/print.c	/^#define S(/;"	d	file:
S2B_0	deps/jemalloc/src/sz.c	/^#define S2B_0(/;"	d	file:
S2B_1	deps/jemalloc/src/sz.c	/^#define S2B_1(/;"	d	file:
S2B_10	deps/jemalloc/src/sz.c	/^#define S2B_10(/;"	d	file:
S2B_11	deps/jemalloc/src/sz.c	/^#define S2B_11(/;"	d	file:
S2B_2	deps/jemalloc/src/sz.c	/^#define S2B_2(/;"	d	file:
S2B_3	deps/jemalloc/src/sz.c	/^#define S2B_3(/;"	d	file:
S2B_4	deps/jemalloc/src/sz.c	/^#define S2B_4(/;"	d	file:
S2B_5	deps/jemalloc/src/sz.c	/^#define S2B_5(/;"	d	file:
S2B_6	deps/jemalloc/src/sz.c	/^#define S2B_6(/;"	d	file:
S2B_7	deps/jemalloc/src/sz.c	/^#define S2B_7(/;"	d	file:
S2B_8	deps/jemalloc/src/sz.c	/^#define S2B_8(/;"	d	file:
S2B_9	deps/jemalloc/src/sz.c	/^#define S2B_9(/;"	d	file:
S2B_no	deps/jemalloc/src/sz.c	/^#define S2B_no(/;"	d	file:
SANITIZE_DUMP_CLIENTS	src/server.h	/^#define SANITIZE_DUMP_CLIENTS /;"	d
SANITIZE_DUMP_NO	src/server.h	/^#define SANITIZE_DUMP_NO /;"	d
SANITIZE_DUMP_YES	src/server.h	/^#define SANITIZE_DUMP_YES /;"	d
SA_ONSTACK	src/debug.c	/^#define SA_ONSTACK /;"	d	file:
SBits	deps/lua/src/lua_bit.c	/^typedef int32_t SBits;$/;"	t	typeref:typename:int32_t	file:
SC	deps/jemalloc/src/arena.c	/^    lg_delta_lookup)							\\$/;"	d	file:
SC	deps/jemalloc/src/bin.c	/^    lg_delta_lookup)							\\$/;"	d	file:
SC	deps/jemalloc/src/sz.c	/^#define SC(/;"	d	file:
SDS_HDR	src/sds.h	/^#define SDS_HDR(/;"	d
SDS_HDR_VAR	src/sds.h	/^#define SDS_HDR_VAR(/;"	d
SDS_LLSTR_SIZE	src/sds.c	/^#define SDS_LLSTR_SIZE /;"	d	file:
SDS_MAX_PREALLOC	src/sds.h	/^#define SDS_MAX_PREALLOC /;"	d
SDS_NOINIT	src/sds.c	/^const char *SDS_NOINIT = "SDS_NOINIT";$/;"	v	typeref:typename:const char *
SDS_TYPE_16	src/sds.h	/^#define SDS_TYPE_16 /;"	d
SDS_TYPE_32	src/sds.h	/^#define SDS_TYPE_32 /;"	d
SDS_TYPE_5	src/sds.h	/^#define SDS_TYPE_5 /;"	d
SDS_TYPE_5_LEN	src/sds.h	/^#define SDS_TYPE_5_LEN(/;"	d
SDS_TYPE_64	src/sds.h	/^#define SDS_TYPE_64 /;"	d
SDS_TYPE_8	src/sds.h	/^#define SDS_TYPE_8 /;"	d
SDS_TYPE_BITS	src/sds.h	/^#define SDS_TYPE_BITS /;"	d
SDS_TYPE_MASK	src/sds.h	/^#define SDS_TYPE_MASK /;"	d
SEED	deps/jemalloc/test/unit/ph.c	/^#define SEED /;"	d	file:
SEED	deps/jemalloc/test/unit/rb.c	/^#define SEED /;"	d	file:
SEED	deps/jemalloc/test/unit/rtree.c	/^#define SEED /;"	d	file:
SEED	src/rand.c	/^#define SEED(/;"	d	file:
SENSITIVE_CONFIG	src/config.c	/^#define SENSITIVE_CONFIG /;"	d	file:
SENTINEL_ASK_FORCED	src/sentinel.c	/^#define SENTINEL_ASK_FORCED /;"	d	file:
SENTINEL_ASK_PERIOD	src/sentinel.c	/^#define SENTINEL_ASK_PERIOD /;"	d	file:
SENTINEL_DEFAULT_ANNOUNCE_HOSTNAMES	src/sentinel.c	/^#define SENTINEL_DEFAULT_ANNOUNCE_HOSTNAMES /;"	d	file:
SENTINEL_DEFAULT_DENY_SCRIPTS_RECONFIG	src/sentinel.c	/^#define SENTINEL_DEFAULT_DENY_SCRIPTS_RECONFIG /;"	d	file:
SENTINEL_DEFAULT_DOWN_AFTER	src/sentinel.c	/^#define SENTINEL_DEFAULT_DOWN_AFTER /;"	d	file:
SENTINEL_DEFAULT_FAILOVER_TIMEOUT	src/sentinel.c	/^#define SENTINEL_DEFAULT_FAILOVER_TIMEOUT /;"	d	file:
SENTINEL_DEFAULT_PARALLEL_SYNCS	src/sentinel.c	/^#define SENTINEL_DEFAULT_PARALLEL_SYNCS /;"	d	file:
SENTINEL_DEFAULT_RESOLVE_HOSTNAMES	src/sentinel.c	/^#define SENTINEL_DEFAULT_RESOLVE_HOSTNAMES /;"	d	file:
SENTINEL_DEFAULT_SLAVE_PRIORITY	src/sentinel.c	/^#define SENTINEL_DEFAULT_SLAVE_PRIORITY /;"	d	file:
SENTINEL_ELECTION_TIMEOUT	src/sentinel.c	/^#define SENTINEL_ELECTION_TIMEOUT /;"	d	file:
SENTINEL_FAILOVER_STATE_NONE	src/sentinel.c	/^#define SENTINEL_FAILOVER_STATE_NONE /;"	d	file:
SENTINEL_FAILOVER_STATE_RECONF_SLAVES	src/sentinel.c	/^#define SENTINEL_FAILOVER_STATE_RECONF_SLAVES /;"	d	file:
SENTINEL_FAILOVER_STATE_SELECT_SLAVE	src/sentinel.c	/^#define SENTINEL_FAILOVER_STATE_SELECT_SLAVE /;"	d	file:
SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE	src/sentinel.c	/^#define SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE /;"	d	file:
SENTINEL_FAILOVER_STATE_UPDATE_CONFIG	src/sentinel.c	/^#define SENTINEL_FAILOVER_STATE_UPDATE_CONFIG /;"	d	file:
SENTINEL_FAILOVER_STATE_WAIT_PROMOTION	src/sentinel.c	/^#define SENTINEL_FAILOVER_STATE_WAIT_PROMOTION /;"	d	file:
SENTINEL_FAILOVER_STATE_WAIT_START	src/sentinel.c	/^#define SENTINEL_FAILOVER_STATE_WAIT_START /;"	d	file:
SENTINEL_GENERATE_EVENT	src/sentinel.c	/^#define SENTINEL_GENERATE_EVENT /;"	d	file:
SENTINEL_HELLO_CHANNEL	src/sentinel.c	/^#define SENTINEL_HELLO_CHANNEL /;"	d	file:
SENTINEL_INFO_PERIOD	src/sentinel.c	/^#define SENTINEL_INFO_PERIOD /;"	d	file:
SENTINEL_ISQR_NOAUTH	src/sentinel.c	/^#define SENTINEL_ISQR_NOAUTH /;"	d	file:
SENTINEL_ISQR_NOQUORUM	src/sentinel.c	/^#define SENTINEL_ISQR_NOQUORUM /;"	d	file:
SENTINEL_ISQR_OK	src/sentinel.c	/^#define SENTINEL_ISQR_OK /;"	d	file:
SENTINEL_LEADER	src/sentinel.c	/^#define SENTINEL_LEADER /;"	d	file:
SENTINEL_MASTER_LINK_STATUS_DOWN	src/sentinel.c	/^#define SENTINEL_MASTER_LINK_STATUS_DOWN /;"	d	file:
SENTINEL_MASTER_LINK_STATUS_UP	src/sentinel.c	/^#define SENTINEL_MASTER_LINK_STATUS_UP /;"	d	file:
SENTINEL_MAX_DESYNC	src/sentinel.c	/^#define SENTINEL_MAX_DESYNC /;"	d	file:
SENTINEL_MAX_PENDING_COMMANDS	src/sentinel.c	/^#define SENTINEL_MAX_PENDING_COMMANDS /;"	d	file:
SENTINEL_MIN_LINK_RECONNECT_PERIOD	src/sentinel.c	/^#define SENTINEL_MIN_LINK_RECONNECT_PERIOD /;"	d	file:
SENTINEL_NO_FLAGS	src/sentinel.c	/^#define SENTINEL_NO_FLAGS /;"	d	file:
SENTINEL_OBSERVER	src/sentinel.c	/^#define SENTINEL_OBSERVER /;"	d	file:
SENTINEL_PING_PERIOD	src/sentinel.c	/^#define SENTINEL_PING_PERIOD /;"	d	file:
SENTINEL_PUBLISH_PERIOD	src/sentinel.c	/^#define SENTINEL_PUBLISH_PERIOD /;"	d	file:
SENTINEL_RESET_NO_SENTINELS	src/sentinel.c	/^#define SENTINEL_RESET_NO_SENTINELS /;"	d	file:
SENTINEL_SCRIPT_MAX_ARGS	src/sentinel.c	/^#define SENTINEL_SCRIPT_MAX_ARGS /;"	d	file:
SENTINEL_SCRIPT_MAX_QUEUE	src/sentinel.c	/^#define SENTINEL_SCRIPT_MAX_QUEUE /;"	d	file:
SENTINEL_SCRIPT_MAX_RETRY	src/sentinel.c	/^#define SENTINEL_SCRIPT_MAX_RETRY /;"	d	file:
SENTINEL_SCRIPT_MAX_RUNNING	src/sentinel.c	/^#define SENTINEL_SCRIPT_MAX_RUNNING /;"	d	file:
SENTINEL_SCRIPT_MAX_RUNTIME	src/sentinel.c	/^#define SENTINEL_SCRIPT_MAX_RUNTIME /;"	d	file:
SENTINEL_SCRIPT_NONE	src/sentinel.c	/^#define SENTINEL_SCRIPT_NONE /;"	d	file:
SENTINEL_SCRIPT_RETRY_DELAY	src/sentinel.c	/^#define SENTINEL_SCRIPT_RETRY_DELAY /;"	d	file:
SENTINEL_SCRIPT_RUNNING	src/sentinel.c	/^#define SENTINEL_SCRIPT_RUNNING /;"	d	file:
SENTINEL_SIMFAILURE_CRASH_AFTER_ELECTION	src/sentinel.c	/^#define SENTINEL_SIMFAILURE_CRASH_AFTER_ELECTION /;"	d	file:
SENTINEL_SIMFAILURE_CRASH_AFTER_PROMOTION	src/sentinel.c	/^#define SENTINEL_SIMFAILURE_CRASH_AFTER_PROMOTION /;"	d	file:
SENTINEL_SIMFAILURE_NONE	src/sentinel.c	/^#define SENTINEL_SIMFAILURE_NONE /;"	d	file:
SENTINEL_SLAVE_RECONF_TIMEOUT	src/sentinel.c	/^#define SENTINEL_SLAVE_RECONF_TIMEOUT /;"	d	file:
SENTINEL_TILT_PERIOD	src/sentinel.c	/^#define SENTINEL_TILT_PERIOD /;"	d	file:
SENTINEL_TILT_TRIGGER	src/sentinel.c	/^#define SENTINEL_TILT_TRIGGER /;"	d	file:
SERVER_CHILD_NOERROR_RETVAL	src/server.h	/^#define SERVER_CHILD_NOERROR_RETVAL /;"	d
SET3	src/rand.c	/^#define SET3(/;"	d	file:
SETARG_A	deps/lua/src/lopcodes.h	/^#define SETARG_A(/;"	d
SETARG_B	deps/lua/src/lopcodes.h	/^#define SETARG_B(/;"	d
SETARG_Bx	deps/lua/src/lopcodes.h	/^#define SETARG_Bx(/;"	d
SETARG_C	deps/lua/src/lopcodes.h	/^#define SETARG_C(/;"	d
SETARG_sBx	deps/lua/src/lopcodes.h	/^#define SETARG_sBx(/;"	d
SETLOW	src/rand.c	/^#define SETLOW(/;"	d	file:
SET_ERRNO	src/lzf_d.c	/^# define SET_ERRNO(/;"	d	file:
SET_NUMERIC_TYPE	src/config.c	/^#define SET_NUMERIC_TYPE(/;"	d	file:
SET_OPCODE	deps/lua/src/lopcodes.h	/^#define SET_OPCODE(/;"	d
SET_OP_DIFF	src/server.h	/^#define SET_OP_DIFF /;"	d
SET_OP_DIFF	src/t_set.c	/^#define SET_OP_DIFF /;"	d	file:
SET_OP_INTER	src/server.h	/^#define SET_OP_INTER /;"	d
SET_OP_INTER	src/t_set.c	/^#define SET_OP_INTER /;"	d	file:
SET_OP_UNION	src/server.h	/^#define SET_OP_UNION /;"	d
SET_OP_UNION	src/t_set.c	/^#define SET_OP_UNION /;"	d	file:
SFIXEDBIT	deps/lua/src/lgc.h	/^#define SFIXEDBIT	/;"	d
SFMT_ALTI_H	deps/jemalloc/test/include/test/SFMT-alti.h	/^#define SFMT_ALTI_H$/;"	d
SFMT_C_	deps/jemalloc/test/src/SFMT.c	/^#define SFMT_C_$/;"	d	file:
SFMT_H	deps/jemalloc/test/include/test/SFMT.h	/^#define SFMT_H$/;"	d
SFMT_PARAMS11213_H	deps/jemalloc/test/include/test/SFMT-params11213.h	/^#define SFMT_PARAMS11213_H$/;"	d
SFMT_PARAMS1279_H	deps/jemalloc/test/include/test/SFMT-params1279.h	/^#define SFMT_PARAMS1279_H$/;"	d
SFMT_PARAMS132049_H	deps/jemalloc/test/include/test/SFMT-params132049.h	/^#define SFMT_PARAMS132049_H$/;"	d
SFMT_PARAMS19937_H	deps/jemalloc/test/include/test/SFMT-params19937.h	/^#define SFMT_PARAMS19937_H$/;"	d
SFMT_PARAMS216091_H	deps/jemalloc/test/include/test/SFMT-params216091.h	/^#define SFMT_PARAMS216091_H$/;"	d
SFMT_PARAMS2281_H	deps/jemalloc/test/include/test/SFMT-params2281.h	/^#define SFMT_PARAMS2281_H$/;"	d
SFMT_PARAMS4253_H	deps/jemalloc/test/include/test/SFMT-params4253.h	/^#define SFMT_PARAMS4253_H$/;"	d
SFMT_PARAMS44497_H	deps/jemalloc/test/include/test/SFMT-params44497.h	/^#define SFMT_PARAMS44497_H$/;"	d
SFMT_PARAMS607_H	deps/jemalloc/test/include/test/SFMT-params607.h	/^#define SFMT_PARAMS607_H$/;"	d
SFMT_PARAMS86243_H	deps/jemalloc/test/include/test/SFMT-params86243.h	/^#define SFMT_PARAMS86243_H$/;"	d
SFMT_PARAMS_H	deps/jemalloc/test/include/test/SFMT-params.h	/^#define SFMT_PARAMS_H$/;"	d
SFMT_SSE2_H	deps/jemalloc/test/include/test/SFMT-sse2.h	/^#define SFMT_SSE2_H$/;"	d
SHA1Final	src/sha1.c	/^void SHA1Final(unsigned char digest[20], SHA1_CTX* context)$/;"	f	typeref:typename:void
SHA1HANDSOFF	src/sha1.c	/^#define SHA1HANDSOFF$/;"	d	file:
SHA1Init	src/sha1.c	/^void SHA1Init(SHA1_CTX* context)$/;"	f	typeref:typename:void
SHA1Transform	src/sha1.c	/^void SHA1Transform(uint32_t state[5], const unsigned char buffer[64])$/;"	f	typeref:typename:void
SHA1Update	src/sha1.c	/^void SHA1Update(SHA1_CTX* context, const unsigned char* data, uint32_t len)$/;"	f	typeref:typename:void
SHA1_CTX	src/sha1.h	/^} SHA1_CTX;$/;"	t	typeref:struct:__anon790f1a3f0108
SHA1_H	src/sha1.h	/^#define SHA1_H$/;"	d
SHA256_BLOCK_SIZE	src/sha256.h	/^#define SHA256_BLOCK_SIZE /;"	d
SHA256_CTX	src/sha256.h	/^} SHA256_CTX;$/;"	t	typeref:struct:__anonf953c6cb0108
SHA256_H	src/sha256.h	/^#define SHA256_H$/;"	d
SHELL	deps/jemalloc/Makefile	/^SHELL := \/bin\/sh$/;"	m
SHELL	deps/jemalloc/Makefile.in	/^SHELL := \/bin\/sh$/;"	m
SHOBJ_CFLAGS	src/modules/Makefile	/^	SHOBJ_CFLAGS ?= -W -Wall -dynamic -fno-common -g -ggdb -std=c99 -O2$/;"	m
SHOBJ_CFLAGS	src/modules/Makefile	/^	SHOBJ_CFLAGS ?= -W -Wall -fno-common -g -ggdb -std=c99 -O2$/;"	m
SHOBJ_CFLAGS	tests/modules/Makefile	/^	SHOBJ_CFLAGS ?= -W -Wall -dynamic -fno-common -g -ggdb -std=c99 -O2$/;"	m
SHOBJ_CFLAGS	tests/modules/Makefile	/^	SHOBJ_CFLAGS ?= -W -Wall -fno-common -g -ggdb -std=c99 -O2$/;"	m
SHOBJ_LDFLAGS	src/modules/Makefile	/^	SHOBJ_LDFLAGS ?= -bundle -undefined dynamic_lookup$/;"	m
SHOBJ_LDFLAGS	src/modules/Makefile	/^	SHOBJ_LDFLAGS ?= -shared$/;"	m
SHOBJ_LDFLAGS	tests/modules/Makefile	/^	SHOBJ_LDFLAGS ?= -bundle -undefined dynamic_lookup$/;"	m
SHOBJ_LDFLAGS	tests/modules/Makefile	/^	SHOBJ_LDFLAGS ?= -shared$/;"	m
SHOULD_SIGNAL_MODIFIED_KEYS	src/module.c	/^#define SHOULD_SIGNAL_MODIFIED_KEYS(/;"	d	file:
SHRINKING_LEVEL	src/Config.h	/^#define SHRINKING_LEVEL /;"	d
SHUTDOWN_NOFLAGS	src/server.h	/^#define SHUTDOWN_NOFLAGS /;"	d
SHUTDOWN_NOSAVE	src/server.h	/^#define SHUTDOWN_NOSAVE /;"	d
SHUTDOWN_SAVE	src/server.h	/^#define SHUTDOWN_SAVE /;"	d
SIG0	src/sha256.c	/^#define SIG0(/;"	d	file:
SIG1	src/sha256.c	/^#define SIG1(/;"	d	file:
SIG_ATOMIC_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define SIG_ATOMIC_MAX /;"	d
SIG_ATOMIC_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define SIG_ATOMIC_MIN /;"	d
SIPROUND	src/siphash.c	/^#define SIPROUND /;"	d	file:
SIZEOF_PTR	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define SIZEOF_PTR	/;"	d
SIZE_A	deps/lua/src/lopcodes.h	/^#define SIZE_A	/;"	d
SIZE_B	deps/lua/src/lopcodes.h	/^#define SIZE_B	/;"	d
SIZE_Bx	deps/lua/src/lopcodes.h	/^#define SIZE_Bx	/;"	d
SIZE_C	deps/lua/src/lopcodes.h	/^#define SIZE_C	/;"	d
SIZE_CLASSES	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define SIZE_CLASSES /;"	d
SIZE_CLASSES_DEFINED	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define SIZE_CLASSES_DEFINED$/;"	d
SIZE_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#     define SIZE_MAX /;"	d
SIZE_OP	deps/lua/src/lopcodes.h	/^#define SIZE_OP	/;"	d
SIZE_SAFETY_LIMIT	src/quicklist.c	/^#define SIZE_SAFETY_LIMIT /;"	d	file:
SIZE_T_MAX	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	/^#  define SIZE_T_MAX	/;"	d
SIZE_T_MAX	deps/jemalloc/test/include/test/jemalloc_test.h	/^#  define SIZE_T_MAX	/;"	d
SIZE_T_MAX	deps/jemalloc/test/include/test/jemalloc_test.h.in	/^#  define SIZE_T_MAX	/;"	d	file:
SL1	deps/jemalloc/test/include/test/SFMT-params11213.h	/^#define SL1	/;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params1279.h	/^#define SL1	/;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params132049.h	/^#define SL1	/;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params19937.h	/^#define SL1	/;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params216091.h	/^#define SL1	/;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params2281.h	/^#define SL1	/;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params4253.h	/^#define SL1	/;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params44497.h	/^#define SL1	/;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params607.h	/^#define SL1	/;"	d
SL1	deps/jemalloc/test/include/test/SFMT-params86243.h	/^#define SL1	/;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params11213.h	/^#define SL2	/;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params1279.h	/^#define SL2	/;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params132049.h	/^#define SL2	/;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params19937.h	/^#define SL2	/;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params216091.h	/^#define SL2	/;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params2281.h	/^#define SL2	/;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params4253.h	/^#define SL2	/;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params44497.h	/^#define SL2	/;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params607.h	/^#define SL2	/;"	d
SL2	deps/jemalloc/test/include/test/SFMT-params86243.h	/^#define SL2	/;"	d
SLAB_MAXREGS	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^#define SLAB_MAXREGS	/;"	d
SLAVE_CAPA_EOF	src/server.h	/^#define SLAVE_CAPA_EOF /;"	d
SLAVE_CAPA_NONE	src/server.h	/^#define SLAVE_CAPA_NONE /;"	d
SLAVE_CAPA_PSYNC2	src/server.h	/^#define SLAVE_CAPA_PSYNC2 /;"	d
SLAVE_STATE_ONLINE	src/server.h	/^#define SLAVE_STATE_ONLINE /;"	d
SLAVE_STATE_SEND_BULK	src/server.h	/^#define SLAVE_STATE_SEND_BULK /;"	d
SLAVE_STATE_WAIT_BGSAVE_END	src/server.h	/^#define SLAVE_STATE_WAIT_BGSAVE_END /;"	d
SLAVE_STATE_WAIT_BGSAVE_START	src/server.h	/^#define SLAVE_STATE_WAIT_BGSAVE_START /;"	d
SLC_NOCREAT	src/stream.h	/^#define SLC_NOCREAT /;"	d
SLC_NONE	src/stream.h	/^#define SLC_NONE /;"	d
SLC_NOREFRESH	src/stream.h	/^#define SLC_NOREFRESH /;"	d
SLOWLOG_ENTRY_MAX_ARGC	src/slowlog.h	/^#define SLOWLOG_ENTRY_MAX_ARGC /;"	d
SLOWLOG_ENTRY_MAX_STRING	src/slowlog.h	/^#define SLOWLOG_ENTRY_MAX_STRING /;"	d
SMALL_MAXCLASS	deps/jemalloc/include/jemalloc/internal/size_classes.h	/^#define SMALL_MAXCLASS	/;"	d
SMALL_SIZE_INCREASE	src/Config.h	/^#define SMALL_SIZE_INCREASE /;"	d
SMOOTHSTEP	deps/jemalloc/include/jemalloc/internal/smoothstep.h	/^#define SMOOTHSTEP /;"	d
SMOOTHSTEP_BFP	deps/jemalloc/include/jemalloc/internal/smoothstep.h	/^#define SMOOTHSTEP_BFP	/;"	d
SMOOTHSTEP_NSTEPS	deps/jemalloc/include/jemalloc/internal/smoothstep.h	/^#define SMOOTHSTEP_NSTEPS	/;"	d
SMOOTHSTEP_VARIANT	deps/jemalloc/include/jemalloc/internal/smoothstep.h	/^#define SMOOTHSTEP_VARIANT	/;"	d
SO	deps/jemalloc/Makefile	/^SO := so$/;"	m
SO	deps/jemalloc/Makefile.in	/^SO := @so@$/;"	m
SOREV	deps/jemalloc/Makefile	/^SOREV = so.2$/;"	m
SOREV	deps/jemalloc/Makefile.in	/^SOREV = @SOREV@$/;"	m
SORT_ASC	src/geo.c	/^#define SORT_ASC /;"	d	file:
SORT_DESC	src/geo.c	/^#define SORT_DESC /;"	d	file:
SORT_NONE	src/geo.c	/^#define SORT_NONE /;"	d	file:
SORT_OP_GET	src/server.h	/^#define SORT_OP_GET /;"	d
SPARKLINE_FILL	src/sparkline.h	/^#define SPARKLINE_FILL /;"	d
SPARKLINE_LOG_SCALE	src/sparkline.h	/^#define SPARKLINE_LOG_SCALE /;"	d
SPARKLINE_NO_FLAGS	src/sparkline.h	/^#define SPARKLINE_NO_FLAGS /;"	d
SPECIALS	deps/lua/src/lstrlib.c	/^#define SPECIALS	/;"	d	file:
SPECIFIED_CFLAGS	deps/jemalloc/Makefile	/^SPECIFIED_CFLAGS := -std=gnu99 -Wall -pipe -g3 -O3 -funroll-loops $/;"	m
SPECIFIED_CFLAGS	deps/jemalloc/Makefile.in	/^SPECIFIED_CFLAGS := @SPECIFIED_CFLAGS@$/;"	m
SPECIFIED_CXXFLAGS	deps/jemalloc/Makefile	/^SPECIFIED_CXXFLAGS := $/;"	m
SPECIFIED_CXXFLAGS	deps/jemalloc/Makefile.in	/^SPECIFIED_CXXFLAGS := @SPECIFIED_CXXFLAGS@$/;"	m
SPIN_INITIALIZER	deps/jemalloc/include/jemalloc/internal/spin.h	/^#define SPIN_INITIALIZER /;"	d
SPLIT_INDEX	deps/jemalloc/test/unit/qr.c	/^#define SPLIT_INDEX /;"	d	file:
SPOP_MOVE_STRATEGY_MUL	src/t_set.c	/^#define SPOP_MOVE_STRATEGY_MUL /;"	d	file:
SPT	src/setproctitle.c	/^} SPT;$/;"	v	typeref:struct:__anon6a58858f0108
SPT_MAXTITLE	src/setproctitle.c	/^#define SPT_MAXTITLE /;"	d	file:
SPT_MIN	src/setproctitle.c	/^#define SPT_MIN(/;"	d	file:
SParser	deps/lua/src/ldo.c	/^struct SParser {  \/* data to `f_parser' *\/$/;"	s	file:
SR1	deps/jemalloc/test/include/test/SFMT-params11213.h	/^#define SR1	/;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params1279.h	/^#define SR1	/;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params132049.h	/^#define SR1	/;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params19937.h	/^#define SR1	/;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params216091.h	/^#define SR1	/;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params2281.h	/^#define SR1	/;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params4253.h	/^#define SR1	/;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params44497.h	/^#define SR1	/;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params607.h	/^#define SR1	/;"	d
SR1	deps/jemalloc/test/include/test/SFMT-params86243.h	/^#define SR1	/;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params11213.h	/^#define SR2	/;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params1279.h	/^#define SR2	/;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params132049.h	/^#define SR2	/;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params19937.h	/^#define SR2	/;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params216091.h	/^#define SR2	/;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params2281.h	/^#define SR2	/;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params4253.h	/^#define SR2	/;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params44497.h	/^#define SR2	/;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params607.h	/^#define SR2	/;"	d
SR2	deps/jemalloc/test/include/test/SFMT-params86243.h	/^#define SR2	/;"	d
SRANDMEMBER_SUB_STRATEGY_MUL	src/t_set.c	/^#define SRANDMEMBER_SUB_STRATEGY_MUL /;"	d	file:
SRC	deps/lua/etc/Makefile	/^SRC= $(TOP)\/src$/;"	m
SRCCOLOR	deps/Makefile	/^SRCCOLOR="\\033[33m"$/;"	m
SRCCOLOR	src/Makefile	/^SRCCOLOR="\\033[33m"$/;"	m
SRI_FAILOVER_IN_PROGRESS	src/sentinel.c	/^#define SRI_FAILOVER_IN_PROGRESS /;"	d	file:
SRI_FORCE_FAILOVER	src/sentinel.c	/^#define SRI_FORCE_FAILOVER /;"	d	file:
SRI_MASTER	src/sentinel.c	/^#define SRI_MASTER /;"	d	file:
SRI_MASTER_DOWN	src/sentinel.c	/^#define SRI_MASTER_DOWN /;"	d	file:
SRI_O_DOWN	src/sentinel.c	/^#define SRI_O_DOWN /;"	d	file:
SRI_PROMOTED	src/sentinel.c	/^#define SRI_PROMOTED /;"	d	file:
SRI_RECONF_DONE	src/sentinel.c	/^#define SRI_RECONF_DONE /;"	d	file:
SRI_RECONF_INPROG	src/sentinel.c	/^#define SRI_RECONF_INPROG /;"	d	file:
SRI_RECONF_SENT	src/sentinel.c	/^#define SRI_RECONF_SENT /;"	d	file:
SRI_SCRIPT_KILL_SENT	src/sentinel.c	/^#define SRI_SCRIPT_KILL_SENT /;"	d	file:
SRI_SENTINEL	src/sentinel.c	/^#define SRI_SENTINEL /;"	d	file:
SRI_SLAVE	src/sentinel.c	/^#define SRI_SLAVE /;"	d	file:
SRI_S_DOWN	src/sentinel.c	/^#define SRI_S_DOWN /;"	d	file:
SS	deps/lua/src/print.c	/^#define SS(/;"	d	file:
SSIZE_MAX	deps/hiredis/sds.h	/^#define SSIZE_MAX /;"	d
SSIZE_MAX	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	/^#  define SSIZE_MAX	/;"	d
SSL_DYLIBNAME	deps/hiredis/Makefile	/^SSL_DYLIBNAME=$(SSL_LIBNAME).$(DYLIBSUFFIX)$/;"	m
SSL_DYLIB_MAJOR_NAME	deps/hiredis/Makefile	/^SSL_DYLIB_MAJOR_NAME=$(SSL_LIBNAME).$(DYLIBSUFFIX).$(HIREDIS_MAJOR)$/;"	m
SSL_DYLIB_MAKE_CMD	deps/hiredis/Makefile	/^  SSL_DYLIB_MAKE_CMD=$(CC) $(SUN_SHARED_FLAG) -o $(SSL_DYLIBNAME) -h $(SSL_DYLIB_MINOR_NAME) $(L/;"	m
SSL_DYLIB_MAKE_CMD	deps/hiredis/Makefile	/^  SSL_DYLIB_MAKE_CMD=$(CC) -dynamiclib -Wl,-install_name,$(PREFIX)\/$(LIBRARY_PATH)\/$(SSL_DYLIB/;"	m
SSL_DYLIB_MAKE_CMD	deps/hiredis/Makefile	/^SSL_DYLIB_MAKE_CMD=$(CC) -shared -Wl,-soname,$(SSL_DYLIB_MINOR_NAME)$/;"	m
SSL_DYLIB_MINOR_NAME	deps/hiredis/Makefile	/^SSL_DYLIB_MINOR_NAME=$(SSL_LIBNAME).$(DYLIBSUFFIX).$(HIREDIS_SONAME)$/;"	m
SSL_LDFLAGS	deps/hiredis/Makefile	/^    SSL_LDFLAGS=-lssl -lcrypto$/;"	m
SSL_LIBNAME	deps/hiredis/Makefile	/^SSL_LIBNAME=libhiredis_ssl$/;"	m
SSL_OBJ	deps/hiredis/Makefile	/^SSL_OBJ=ssl.o$/;"	m
SSL_PKGCONFNAME	deps/hiredis/Makefile	/^SSL_PKGCONFNAME=hiredis_ssl.pc$/;"	m
SSL_STLIBNAME	deps/hiredis/Makefile	/^SSL_STLIBNAME=$(SSL_LIBNAME).$(STLIBSUFFIX)$/;"	m
STANDALONE	src/lzfP.h	/^#define STANDALONE /;"	d
STATE_ACCEPT	deps/jemalloc/test/unit/stats_print.c	/^		STATE_ACCEPT$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_CHARS	deps/jemalloc/test/unit/stats_print.c	/^		STATE_CHARS,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_CHAR_ESCAPE	deps/jemalloc/test/unit/stats_print.c	/^		STATE_CHAR_ESCAPE,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_CHAR_U	deps/jemalloc/test/unit/stats_print.c	/^		STATE_CHAR_U, STATE_CHAR_UD, STATE_CHAR_UDD, STATE_CHAR_UDDD,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_CHAR_UD	deps/jemalloc/test/unit/stats_print.c	/^		STATE_CHAR_U, STATE_CHAR_UD, STATE_CHAR_UDD, STATE_CHAR_UDDD,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_CHAR_UDD	deps/jemalloc/test/unit/stats_print.c	/^		STATE_CHAR_U, STATE_CHAR_UD, STATE_CHAR_UDD, STATE_CHAR_UDDD,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_CHAR_UDDD	deps/jemalloc/test/unit/stats_print.c	/^		STATE_CHAR_U, STATE_CHAR_UD, STATE_CHAR_UDD, STATE_CHAR_UDDD,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_COLON	deps/jemalloc/test/unit/stats_print.c	/^		STATE_COLON,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_COMMA	deps/jemalloc/test/unit/stats_print.c	/^		STATE_COMMA,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_DECIMAL	deps/jemalloc/test/unit/stats_print.c	/^		STATE_DECIMAL,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_DIGITS	deps/jemalloc/test/unit/stats_print.c	/^		STATE_DIGITS,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_EOI	deps/jemalloc/test/unit/stats_print.c	/^		STATE_EOI,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_EXP	deps/jemalloc/test/unit/stats_print.c	/^		STATE_EXP,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_EXP_DIGITS	deps/jemalloc/test/unit/stats_print.c	/^		STATE_EXP_DIGITS,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_EXP_SIGN	deps/jemalloc/test/unit/stats_print.c	/^		STATE_EXP_SIGN,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_F	deps/jemalloc/test/unit/stats_print.c	/^		STATE_F, STATE_FA, STATE_FAL, STATE_FALS, STATE_FALSE,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_FA	deps/jemalloc/test/unit/stats_print.c	/^		STATE_F, STATE_FA, STATE_FAL, STATE_FALS, STATE_FALSE,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_FAL	deps/jemalloc/test/unit/stats_print.c	/^		STATE_F, STATE_FA, STATE_FAL, STATE_FALS, STATE_FALSE,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_FALS	deps/jemalloc/test/unit/stats_print.c	/^		STATE_F, STATE_FA, STATE_FAL, STATE_FALS, STATE_FALSE,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_FALSE	deps/jemalloc/test/unit/stats_print.c	/^		STATE_F, STATE_FA, STATE_FAL, STATE_FALS, STATE_FALSE,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_FRAC_DIGITS	deps/jemalloc/test/unit/stats_print.c	/^		STATE_FRAC_DIGITS,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_LBRACE	deps/jemalloc/test/unit/stats_print.c	/^		STATE_LBRACE,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_LBRACKET	deps/jemalloc/test/unit/stats_print.c	/^		STATE_LBRACKET,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_LEADING_ZERO	deps/jemalloc/test/unit/stats_print.c	/^		STATE_LEADING_ZERO,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_MINUS	deps/jemalloc/test/unit/stats_print.c	/^		STATE_MINUS,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_N	deps/jemalloc/test/unit/stats_print.c	/^		STATE_N, STATE_NU, STATE_NUL, STATE_NULL,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_NU	deps/jemalloc/test/unit/stats_print.c	/^		STATE_N, STATE_NU, STATE_NUL, STATE_NULL,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_NUL	deps/jemalloc/test/unit/stats_print.c	/^		STATE_N, STATE_NU, STATE_NUL, STATE_NULL,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_NULL	deps/jemalloc/test/unit/stats_print.c	/^		STATE_N, STATE_NU, STATE_NUL, STATE_NULL,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_RBRACE	deps/jemalloc/test/unit/stats_print.c	/^		STATE_RBRACE,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_RBRACKET	deps/jemalloc/test/unit/stats_print.c	/^		STATE_RBRACKET,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_START	deps/jemalloc/test/unit/stats_print.c	/^		STATE_START,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_STRING	deps/jemalloc/test/unit/stats_print.c	/^		STATE_STRING,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_T	deps/jemalloc/test/unit/stats_print.c	/^		STATE_T, STATE_TR, STATE_TRU, STATE_TRUE,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_TR	deps/jemalloc/test/unit/stats_print.c	/^		STATE_T, STATE_TR, STATE_TRU, STATE_TRUE,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_TRU	deps/jemalloc/test/unit/stats_print.c	/^		STATE_T, STATE_TR, STATE_TRU, STATE_TRUE,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATE_TRUE	deps/jemalloc/test/unit/stats_print.c	/^		STATE_T, STATE_TR, STATE_TRU, STATE_TRUE,$/;"	e	enum:parser_tokenize::__anonb5a306e00303	file:
STATIC_LIBS	deps/jemalloc/Makefile	/^STATIC_LIBS := $(objroot)lib\/$(LIBJEMALLOC).$(A)$/;"	m
STATIC_LIBS	deps/jemalloc/Makefile.in	/^STATIC_LIBS := $(objroot)lib\/$(LIBJEMALLOC).$(A)$/;"	m
STATS_METRIC_COMMAND	src/server.h	/^#define STATS_METRIC_COMMAND /;"	d
STATS_METRIC_COUNT	src/server.h	/^#define STATS_METRIC_COUNT /;"	d
STATS_METRIC_NET_INPUT	src/server.h	/^#define STATS_METRIC_NET_INPUT /;"	d
STATS_METRIC_NET_OUTPUT	src/server.h	/^#define STATS_METRIC_NET_OUTPUT /;"	d
STATS_METRIC_SAMPLES	src/server.h	/^#define STATS_METRIC_SAMPLES /;"	d
STATS_PRINT_OPTIONS	deps/jemalloc/include/jemalloc/internal/stats.h	/^    STATS_PRINT_OPTIONS$/;"	e	enum:__anon66bdd4500103
STATS_PRINT_OPTIONS	deps/jemalloc/include/jemalloc/internal/stats.h	/^#define STATS_PRINT_OPTIONS	/;"	d
STD	deps/hdr_histogram/Makefile	/^STD=$/;"	m
STD	deps/linenoise/Makefile	/^STD=$/;"	m
STD	src/Makefile	/^STD=-pedantic -DREDIS_STATIC=''$/;"	m
STDERR_FILENO	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	/^#  define STDERR_FILENO /;"	d
STEP	deps/jemalloc/src/arena.c	/^#define STEP(/;"	d	file:
STEP	deps/jemalloc/test/unit/smoothstep.c	/^#define STEP(/;"	d	file:
STLIBNAME	deps/hiredis/Makefile	/^STLIBNAME=$(LIBNAME).$(STLIBSUFFIX)$/;"	m
STLIBSUFFIX	deps/hiredis/Makefile	/^STLIBSUFFIX=a$/;"	m
STLIB_MAKE_CMD	deps/hiredis/Makefile	/^STLIB_MAKE_CMD=$(AR) rcs$/;"	m
STRBUF_DEFAULT_INCREMENT	deps/lua/src/strbuf.h	/^#define STRBUF_DEFAULT_INCREMENT /;"	d
STRBUF_DEFAULT_SIZE	deps/lua/src/strbuf.h	/^#define STRBUF_DEFAULT_SIZE /;"	d
STREAMID_STATIC_VECTOR_LEN	src/t_stream.c	/^#define STREAMID_STATIC_VECTOR_LEN /;"	d	file:
STREAM_H	src/stream.h	/^#define STREAM_H$/;"	d
STREAM_ITEM_FLAG_DELETED	src/t_stream.c	/^#define STREAM_ITEM_FLAG_DELETED /;"	d	file:
STREAM_ITEM_FLAG_NONE	src/t_stream.c	/^#define STREAM_ITEM_FLAG_NONE /;"	d	file:
STREAM_ITEM_FLAG_SAMEFIELDS	src/t_stream.c	/^#define STREAM_ITEM_FLAG_SAMEFIELDS /;"	d	file:
STREAM_LISTPACK_MAX_PRE_ALLOCATE	src/t_stream.c	/^#define STREAM_LISTPACK_MAX_PRE_ALLOCATE /;"	d	file:
STREAM_LISTPACK_MAX_SIZE	src/t_stream.c	/^#define STREAM_LISTPACK_MAX_SIZE /;"	d	file:
STREAM_RWR_HISTORY	src/t_stream.c	/^#define STREAM_RWR_HISTORY /;"	d	file:
STREAM_RWR_NOACK	src/t_stream.c	/^#define STREAM_RWR_NOACK /;"	d	file:
STREAM_RWR_RAWENTRIES	src/t_stream.c	/^#define STREAM_RWR_RAWENTRIES /;"	d	file:
STRICT_ALIGN	src/lzfP.h	/^#  define STRICT_ALIGN /;"	d
STRINGIFY	deps/jemalloc/include/jemalloc/internal/util.h	/^#define STRINGIFY(/;"	d
STRINGIFY_HELPER	deps/jemalloc/include/jemalloc/internal/util.h	/^#define STRINGIFY_HELPER(/;"	d
STRUCT_INT	deps/lua/src/lua_struct.c	/^#define STRUCT_INT	/;"	d	file:
SUN_SHARED_FLAG	deps/hiredis/Makefile	/^    SUN_SHARED_FLAG=-G$/;"	m
SUN_SHARED_FLAG	deps/hiredis/Makefile	/^    SUN_SHARED_FLAG=-shared$/;"	m
SUPERVISED_AUTODETECT	src/server.h	/^#define SUPERVISED_AUTODETECT /;"	d
SUPERVISED_NONE	src/server.h	/^#define SUPERVISED_NONE /;"	d
SUPERVISED_SYSTEMD	src/server.h	/^#define SUPERVISED_SYSTEMD /;"	d
SUPERVISED_UPSTART	src/server.h	/^#define SUPERVISED_UPSTART /;"	d
SWAPINIT	src/pqsort.c	/^#define SWAPINIT(/;"	d	file:
SWITCH_POINT	src/Config.h	/^#define SWITCH_POINT /;"	d
SYNCIO__RESOLUTION	src/syncio.c	/^#define SYNCIO__RESOLUTION /;"	d	file:
SYS_write	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	/^#      define SYS_write /;"	d
SZ	deps/jemalloc/test/unit/pack.c	/^#define SZ	/;"	d	file:
SZ_MAX	deps/jemalloc/test/unit/extent_quantize.c	/^#define SZ_MAX	/;"	d	file:
ScanCBData	src/module.c	/^} ScanCBData;$/;"	t	typeref:struct:__anon967b47330a08	file:
ScanKeyCBData	src/module.c	/^} ScanKeyCBData;$/;"	t	typeref:struct:__anon967b47330b08	file:
SemInfo	deps/lua/src/llex.h	/^} SemInfo;  \/* semantics information *\/$/;"	t	typeref:union:__anon6e0980f3010a
SentReplyOnKeyMiss	src/db.c	/^void SentReplyOnKeyMiss(client *c, robj *reply){$/;"	f	typeref:typename:void
Sizeof	deps/lua/src/print.c	/^#define Sizeof(/;"	d	file:
Smain	deps/lua/src/lua.c	/^struct Smain {$/;"	s	file:
Smain	deps/lua/src/luac.c	/^struct Smain {$/;"	s	file:
StkId	deps/lua/src/lobject.h	/^typedef TValue *StkId;  \/* index to stack elements *\/$/;"	t	typeref:typename:TValue *
T	tests/modules/basics.c	/^#define T(/;"	d	file:
TAB	deps/linenoise/linenoise.c	/^	TAB = 9,            \/* Tab *\/$/;"	e	enum:KEY_ACTION	file:
TABLE_SIZE	utils/tracking_collisions.c	/^#define TABLE_SIZE /;"	d	file:
TCACHE_ENABLED_ZERO_INITIALIZER	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^#define TCACHE_ENABLED_ZERO_INITIALIZER /;"	d
TCACHE_GC_INCR	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^#define TCACHE_GC_INCR	/;"	d
TCACHE_GC_SWEEP	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^#define TCACHE_GC_SWEEP	/;"	d
TCACHE_IND_AUTOMATIC	deps/jemalloc/src/jemalloc.c	/^#define TCACHE_IND_AUTOMATIC /;"	d	file:
TCACHE_IND_NONE	deps/jemalloc/src/jemalloc.c	/^#define TCACHE_IND_NONE /;"	d	file:
TCACHE_NSLOTS_LARGE	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^#define TCACHE_NSLOTS_LARGE	/;"	d
TCACHE_NSLOTS_SMALL_MAX	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^#define TCACHE_NSLOTS_SMALL_MAX	/;"	d
TCACHE_NSLOTS_SMALL_MIN	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^#define TCACHE_NSLOTS_SMALL_MIN	/;"	d
TCACHE_STATE_DISABLED	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^#define TCACHE_STATE_DISABLED	/;"	d
TCACHE_STATE_MAX	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^#define TCACHE_STATE_MAX	/;"	d
TCACHE_STATE_PURGATORY	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^#define TCACHE_STATE_PURGATORY	/;"	d
TCACHE_STATE_REINCARNATED	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^#define TCACHE_STATE_REINCARNATED	/;"	d
TCACHE_ZERO_INITIALIZER	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^#define TCACHE_ZERO_INITIALIZER /;"	d
TEST	deps/jemalloc/test/unit/malloc_io.c	/^#define TEST(/;"	d	file:
TEST	src/quicklist.c	/^#define TEST(/;"	d	file:
TESTS	deps/hiredis/Makefile	/^TESTS=hiredis-test$/;"	m
TESTS	deps/jemalloc/Makefile	/^TESTS := $(TESTS_UNIT) $(TESTS_INTEGRATION) $(TESTS_INTEGRATION_CPP) $(TESTS_STRESS)$/;"	m
TESTS	deps/jemalloc/Makefile.in	/^TESTS := $(TESTS_UNIT) $(TESTS_INTEGRATION) $(TESTS_INTEGRATION_CPP) $(TESTS_STRESS)$/;"	m
TESTS_CPP_OBJS	deps/jemalloc/Makefile	/^TESTS_CPP_OBJS := $(TESTS_INTEGRATION_CPP_OBJS)$/;"	m
TESTS_CPP_OBJS	deps/jemalloc/Makefile.in	/^TESTS_CPP_OBJS := $(TESTS_INTEGRATION_CPP_OBJS)$/;"	m
TESTS_INTEGRATION	deps/jemalloc/Makefile	/^TESTS_INTEGRATION := $(srcroot)test\/integration\/aligned_alloc.c \\$/;"	m
TESTS_INTEGRATION	deps/jemalloc/Makefile.in	/^TESTS_INTEGRATION := $(srcroot)test\/integration\/aligned_alloc.c \\$/;"	m
TESTS_INTEGRATION_CPP	deps/jemalloc/Makefile	/^TESTS_INTEGRATION_CPP := $(srcroot)test\/integration\/cpp\/basic.cpp$/;"	m
TESTS_INTEGRATION_CPP	deps/jemalloc/Makefile	/^TESTS_INTEGRATION_CPP :=$/;"	m
TESTS_INTEGRATION_CPP	deps/jemalloc/Makefile.in	/^TESTS_INTEGRATION_CPP := $(srcroot)test\/integration\/cpp\/basic.cpp$/;"	m
TESTS_INTEGRATION_CPP	deps/jemalloc/Makefile.in	/^TESTS_INTEGRATION_CPP :=$/;"	m
TESTS_INTEGRATION_CPP_OBJS	deps/jemalloc/Makefile	/^TESTS_INTEGRATION_CPP_OBJS := $(TESTS_INTEGRATION_CPP:$(srcroot)%.cpp=$(objroot)%.$(O))$/;"	m
TESTS_INTEGRATION_CPP_OBJS	deps/jemalloc/Makefile.in	/^TESTS_INTEGRATION_CPP_OBJS := $(TESTS_INTEGRATION_CPP:$(srcroot)%.cpp=$(objroot)%.$(O))$/;"	m
TESTS_INTEGRATION_OBJS	deps/jemalloc/Makefile	/^TESTS_INTEGRATION_OBJS := $(TESTS_INTEGRATION:$(srcroot)%.c=$(objroot)%.$(O))$/;"	m
TESTS_INTEGRATION_OBJS	deps/jemalloc/Makefile.in	/^TESTS_INTEGRATION_OBJS := $(TESTS_INTEGRATION:$(srcroot)%.c=$(objroot)%.$(O))$/;"	m
TESTS_OBJS	deps/jemalloc/Makefile	/^TESTS_OBJS := $(TESTS_UNIT_OBJS) $(TESTS_INTEGRATION_OBJS) $(TESTS_STRESS_OBJS)$/;"	m
TESTS_OBJS	deps/jemalloc/Makefile.in	/^TESTS_OBJS := $(TESTS_UNIT_OBJS) $(TESTS_INTEGRATION_OBJS) $(TESTS_STRESS_OBJS)$/;"	m
TESTS_STRESS	deps/jemalloc/Makefile	/^TESTS_STRESS := $(srcroot)test\/stress\/microbench.c$/;"	m
TESTS_STRESS	deps/jemalloc/Makefile.in	/^TESTS_STRESS := $(srcroot)test\/stress\/microbench.c$/;"	m
TESTS_STRESS_OBJS	deps/jemalloc/Makefile	/^TESTS_STRESS_OBJS := $(TESTS_STRESS:$(srcroot)%.c=$(objroot)%.$(O))$/;"	m
TESTS_STRESS_OBJS	deps/jemalloc/Makefile.in	/^TESTS_STRESS_OBJS := $(TESTS_STRESS:$(srcroot)%.c=$(objroot)%.$(O))$/;"	m
TESTS_UNIT	deps/jemalloc/Makefile	/^TESTS_UNIT := \\$/;"	m
TESTS_UNIT	deps/jemalloc/Makefile.in	/^TESTS_UNIT := \\$/;"	m
TESTS_UNIT_OBJS	deps/jemalloc/Makefile	/^TESTS_UNIT_OBJS := $(TESTS_UNIT:$(srcroot)%.c=$(objroot)%.$(O))$/;"	m
TESTS_UNIT_OBJS	deps/jemalloc/Makefile.in	/^TESTS_UNIT_OBJS := $(TESTS_UNIT:$(srcroot)%.c=$(objroot)%.$(O))$/;"	m
TEST_ARENAS_BIN_CONSTANT	deps/jemalloc/test/unit/mallctl.c	/^#define TEST_ARENAS_BIN_CONSTANT(/;"	d	file:
TEST_ARENAS_CONSTANT	deps/jemalloc/test/unit/mallctl.c	/^#define TEST_ARENAS_CONSTANT(/;"	d	file:
TEST_ARENAS_LEXTENT_CONSTANT	deps/jemalloc/test/unit/mallctl.c	/^#define TEST_ARENAS_LEXTENT_CONSTANT(/;"	d	file:
TEST_BEGIN	deps/jemalloc/test/include/test/test.h	/^#define TEST_BEGIN(/;"	d
TEST_BEGIN	deps/jemalloc/test/integration/MALLOCX_ARENA.c	/^TEST_BEGIN(test_MALLOCX_ARENA) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/aligned_alloc.c	/^TEST_BEGIN(test_alignment_and_size) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/aligned_alloc.c	/^TEST_BEGIN(test_alignment_errors) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/aligned_alloc.c	/^TEST_BEGIN(test_oom_errors) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/allocated.c	/^TEST_BEGIN(test_main_thread) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/allocated.c	/^TEST_BEGIN(test_subthread) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/cpp/basic.cpp	/^TEST_BEGIN(test_basic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/extent.c	/^TEST_BEGIN(test_extent_auto_hook) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/extent.c	/^TEST_BEGIN(test_extent_manual_hook) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/mallocx.c	/^TEST_BEGIN(test_alignment_and_size) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/mallocx.c	/^TEST_BEGIN(test_basic) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/mallocx.c	/^TEST_BEGIN(test_oom) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/mallocx.c	/^TEST_BEGIN(test_overflow) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/overflow.c	/^TEST_BEGIN(test_overflow) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/posix_memalign.c	/^TEST_BEGIN(test_alignment_and_size) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/posix_memalign.c	/^TEST_BEGIN(test_alignment_errors) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/posix_memalign.c	/^TEST_BEGIN(test_oom_errors) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/rallocx.c	/^TEST_BEGIN(test_align) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/rallocx.c	/^TEST_BEGIN(test_grow_and_shrink) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/rallocx.c	/^TEST_BEGIN(test_lg_align_and_zero) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/rallocx.c	/^TEST_BEGIN(test_overflow) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/rallocx.c	/^TEST_BEGIN(test_zero) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/sdallocx.c	/^TEST_BEGIN(test_alignment_and_size) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/sdallocx.c	/^TEST_BEGIN(test_basic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/thread_arena.c	/^TEST_BEGIN(test_thread_arena) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/thread_tcache_enabled.c	/^TEST_BEGIN(test_main_thread) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/thread_tcache_enabled.c	/^TEST_BEGIN(test_subthread) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/xallocx.c	/^TEST_BEGIN(test_extra_large) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/xallocx.c	/^TEST_BEGIN(test_extra_no_move) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/xallocx.c	/^TEST_BEGIN(test_extra_small) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/xallocx.c	/^TEST_BEGIN(test_no_move_fail) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/xallocx.c	/^TEST_BEGIN(test_same_size) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/xallocx.c	/^TEST_BEGIN(test_size) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/integration/xallocx.c	/^TEST_BEGIN(test_size_extra_overflow) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/integration/xallocx.c	/^TEST_BEGIN(test_zero_large) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/stress/microbench.c	/^TEST_BEGIN(test_dallocx_vs_sdallocx) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/stress/microbench.c	/^TEST_BEGIN(test_free_vs_dallocx) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/stress/microbench.c	/^TEST_BEGIN(test_malloc_vs_mallocx) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/stress/microbench.c	/^TEST_BEGIN(test_mus_vs_sallocx) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/stress/microbench.c	/^TEST_BEGIN(test_sallocx_vs_nallocx) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/SFMT.c	/^TEST_BEGIN(test_by_array_32) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/SFMT.c	/^TEST_BEGIN(test_by_array_64) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/SFMT.c	/^TEST_BEGIN(test_gen_rand_32) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/SFMT.c	/^TEST_BEGIN(test_gen_rand_64) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/a0.c	/^TEST_BEGIN(test_a0) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/arena_reset.c	/^TEST_BEGIN(test_arena_destroy_hooks_default) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/arena_reset.c	/^TEST_BEGIN(test_arena_destroy_hooks_unmap) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/arena_reset.c	/^TEST_BEGIN(test_arena_destroy_initial) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/arena_reset.c	/^TEST_BEGIN(test_arena_reset) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/atomic.c	/^TEST_BEGIN(test_atomic_p) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/atomic.c	/^TEST_BEGIN(test_atomic_u) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/atomic.c	/^TEST_BEGIN(test_atomic_u32) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/atomic.c	/^TEST_BEGIN(test_atomic_u64) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/atomic.c	/^TEST_BEGIN(test_atomic_zd) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/atomic.c	/^TEST_BEGIN(test_atomic_zu) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/background_thread.c	/^TEST_BEGIN(test_background_thread_ctl) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/background_thread.c	/^TEST_BEGIN(test_background_thread_running) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/background_thread_enable.c	/^TEST_BEGIN(test_deferred) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/background_thread_enable.c	/^TEST_BEGIN(test_max_background_threads) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/base.c	/^TEST_BEGIN(test_base_hooks_default) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/base.c	/^TEST_BEGIN(test_base_hooks_not_null) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/base.c	/^TEST_BEGIN(test_base_hooks_null) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/bit_util.c	/^TEST_BEGIN(test_pow2_ceil_u32) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/bit_util.c	/^TEST_BEGIN(test_pow2_ceil_u64) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/bit_util.c	/^TEST_BEGIN(test_pow2_ceil_zu) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/bitmap.c	/^TEST_BEGIN(test_bitmap_init) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/bitmap.c	/^TEST_BEGIN(test_bitmap_initializer) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/bitmap.c	/^TEST_BEGIN(test_bitmap_set) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/bitmap.c	/^TEST_BEGIN(test_bitmap_size) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/bitmap.c	/^TEST_BEGIN(test_bitmap_unset) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/bitmap.c	/^TEST_BEGIN(test_bitmap_xfu) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ckh.c	/^TEST_BEGIN(test_count_insert_search_remove) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/ckh.c	/^TEST_BEGIN(test_insert_iter_remove) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/ckh.c	/^TEST_BEGIN(test_new_delete) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/decay.c	/^TEST_BEGIN(test_decay_never) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/decay.c	/^TEST_BEGIN(test_decay_nonmonotonic) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/decay.c	/^TEST_BEGIN(test_decay_now) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/decay.c	/^TEST_BEGIN(test_decay_ticker) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/decay.c	/^TEST_BEGIN(test_decay_ticks) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/div.c	/^TEST_BEGIN(test_div_exhaustive) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/emitter.c	/^TEST_BEGIN(test_dict) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/emitter.c	/^TEST_BEGIN(test_json_arr) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/emitter.c	/^TEST_BEGIN(test_modal) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/emitter.c	/^TEST_BEGIN(test_nested_dict) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/emitter.c	/^TEST_BEGIN(test_table_printf) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/emitter.c	/^TEST_BEGIN(test_table_row) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/emitter.c	/^TEST_BEGIN(test_types) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/extent_quantize.c	/^TEST_BEGIN(test_large_extent_size) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/extent_quantize.c	/^TEST_BEGIN(test_monotonic) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/extent_quantize.c	/^TEST_BEGIN(test_small_extent_size) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/fork.c	/^TEST_BEGIN(test_fork) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/fork.c	/^TEST_BEGIN(test_fork_multithreaded) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/hash.c	/^TEST_BEGIN(test_hash_x64_128) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/hash.c	/^TEST_BEGIN(test_hash_x86_128) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/hash.c	/^TEST_BEGIN(test_hash_x86_32) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/hooks.c	/^TEST_BEGIN(hooked_call) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/hooks.c	/^TEST_BEGIN(unhooked_call) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/junk.c	/^TEST_BEGIN(test_junk_large) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/junk.c	/^TEST_BEGIN(test_junk_small) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/log.c	/^TEST_BEGIN(test_log_disabled) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/log.c	/^TEST_BEGIN(test_log_enabled_direct) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/log.c	/^TEST_BEGIN(test_log_enabled_global) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/log.c	/^TEST_BEGIN(test_log_enabled_indirect) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/log.c	/^TEST_BEGIN(test_log_only_format_string) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/log.c	/^TEST_BEGIN(test_logs_if_no_init) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arena_i_decay) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arena_i_dirty_decay_ms) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arena_i_dss) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arena_i_initialized) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arena_i_muzzy_decay_ms) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arena_i_purge) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arena_i_retain_grow_limit) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arenas_bin_constants) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arenas_constants) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arenas_create) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arenas_dirty_decay_ms) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arenas_lextent_constants) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arenas_lookup) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_arenas_muzzy_decay_ms) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_mallctl_config) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_mallctl_errors) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_mallctl_opt) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_mallctl_read_write) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_mallctlbymib_errors) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_mallctlnametomib_errors) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_mallctlnametomib_short_mib) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_manpage_example) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_stats_arenas) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_tcache) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_tcache_none) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/mallctl.c	/^TEST_BEGIN(test_thread_arena) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/malloc_io.c	/^TEST_BEGIN(test_malloc_snprintf) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/malloc_io.c	/^TEST_BEGIN(test_malloc_snprintf_truncated) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/malloc_io.c	/^TEST_BEGIN(test_malloc_strtoumax) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/malloc_io.c	/^TEST_BEGIN(test_malloc_strtoumax_no_endptr) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/math.c	/^TEST_BEGIN(test_ln_gamma_factorial) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/math.c	/^TEST_BEGIN(test_ln_gamma_misc) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/math.c	/^TEST_BEGIN(test_pt_chi2) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/math.c	/^TEST_BEGIN(test_pt_gamma_scale) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/math.c	/^TEST_BEGIN(test_pt_gamma_shape) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/math.c	/^TEST_BEGIN(test_pt_norm) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mq.c	/^TEST_BEGIN(test_mq_threaded) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mtx.c	/^TEST_BEGIN(test_mtx_basic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/mtx.c	/^TEST_BEGIN(test_mtx_race) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_add) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_compare) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_copy) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_divide) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_iadd) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_idivide) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_imultiply) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_init) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_init2) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_isubtract) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_monotonic) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_subtract) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/nstime.c	/^TEST_BEGIN(test_nstime_update) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/pack.c	/^TEST_BEGIN(test_pack) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/pages.c	/^TEST_BEGIN(test_pages_huge) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ph.c	/^TEST_BEGIN(test_ph_empty) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ph.c	/^TEST_BEGIN(test_ph_random) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_lg_range_u32_atomic) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_lg_range_u32_nonatomic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_lg_range_u64_nonatomic) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_lg_range_zu_atomic) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_lg_range_zu_nonatomic) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_range_u32_atomic) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_range_u32_nonatomic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_range_u64_nonatomic) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_range_zu_atomic) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/prng.c	/^TEST_BEGIN(test_prng_range_zu_nonatomic) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/prof_accum.c	/^TEST_BEGIN(test_idump) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_active.c	/^TEST_BEGIN(test_prof_active) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_gdump.c	/^TEST_BEGIN(test_gdump) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_idump.c	/^TEST_BEGIN(test_idump) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_reset.c	/^TEST_BEGIN(test_prof_reset) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_reset.c	/^TEST_BEGIN(test_prof_reset_basic) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_reset.c	/^TEST_BEGIN(test_prof_reset_cleanup) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_reset.c	/^TEST_BEGIN(test_xallocx) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/prof_tctx.c	/^TEST_BEGIN(test_prof_realloc) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_thread_name.c	/^TEST_BEGIN(test_prof_thread_name_threaded) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/prof_thread_name.c	/^TEST_BEGIN(test_prof_thread_name_validation) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ql.c	/^TEST_BEGIN(test_ql_empty) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ql.c	/^TEST_BEGIN(test_ql_head_insert) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/ql.c	/^TEST_BEGIN(test_ql_head_remove) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/ql.c	/^TEST_BEGIN(test_ql_insert) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/ql.c	/^TEST_BEGIN(test_ql_tail_insert) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ql.c	/^TEST_BEGIN(test_ql_tail_remove) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/qr.c	/^TEST_BEGIN(test_qr_after_insert) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/qr.c	/^TEST_BEGIN(test_qr_before_insert) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/qr.c	/^TEST_BEGIN(test_qr_meld_split) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/qr.c	/^TEST_BEGIN(test_qr_one) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/qr.c	/^TEST_BEGIN(test_qr_remove) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/rb.c	/^TEST_BEGIN(test_rb_empty) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/rb.c	/^TEST_BEGIN(test_rb_random) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/retained.c	/^TEST_BEGIN(test_retained) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/rtree.c	/^TEST_BEGIN(test_rtree_bits) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/rtree.c	/^TEST_BEGIN(test_rtree_extrema) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/rtree.c	/^TEST_BEGIN(test_rtree_random) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/rtree.c	/^TEST_BEGIN(test_rtree_read_empty) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/size_classes.c	/^TEST_BEGIN(test_overflow) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/size_classes.c	/^TEST_BEGIN(test_psize_classes) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/size_classes.c	/^TEST_BEGIN(test_size_classes) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/slab.c	/^TEST_BEGIN(test_arena_slab_regind) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/smoothstep.c	/^TEST_BEGIN(test_smoothstep_integral) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/smoothstep.c	/^TEST_BEGIN(test_smoothstep_monotonic) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/smoothstep.c	/^TEST_BEGIN(test_smoothstep_slope) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/spin.c	/^TEST_BEGIN(test_spin) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/stats.c	/^TEST_BEGIN(test_stats_arenas_bins) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/stats.c	/^TEST_BEGIN(test_stats_arenas_large) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/stats.c	/^TEST_BEGIN(test_stats_arenas_lextents) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/stats.c	/^TEST_BEGIN(test_stats_arenas_small) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/stats.c	/^TEST_BEGIN(test_stats_arenas_summary) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/stats.c	/^TEST_BEGIN(test_stats_large) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/stats.c	/^TEST_BEGIN(test_stats_summary) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/stats_print.c	/^TEST_BEGIN(test_json_parser) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/stats_print.c	/^TEST_BEGIN(test_stats_print_json) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ticker.c	/^TEST_BEGIN(test_ticker_copy) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/ticker.c	/^TEST_BEGIN(test_ticker_tick) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/ticker.c	/^TEST_BEGIN(test_ticker_ticks) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/tsd.c	/^TEST_BEGIN(test_tsd_main_thread) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/tsd.c	/^TEST_BEGIN(test_tsd_reincarnation) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/tsd.c	/^TEST_BEGIN(test_tsd_sub_thread) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/witness.c	/^TEST_BEGIN(test_witness) {$/;"	f
TEST_BEGIN	deps/jemalloc/test/unit/witness.c	/^TEST_BEGIN(test_witness_comp) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/witness.c	/^TEST_BEGIN(test_witness_depth) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/witness.c	/^TEST_BEGIN(test_witness_recursive) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/witness.c	/^TEST_BEGIN(test_witness_reversal) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/witness.c	/^TEST_BEGIN(test_witness_unlock_not_owned) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/zero.c	/^TEST_BEGIN(test_zero_large) {$/;"	f	typeref:typename:TEST_END
TEST_BEGIN	deps/jemalloc/test/unit/zero.c	/^TEST_BEGIN(test_zero_small) {$/;"	f
TEST_BODY	deps/jemalloc/test/unit/atomic.c	/^#define TEST_BODY(/;"	d	file:
TEST_CASES	deps/jemalloc/test/unit/atomic.c	/^#define TEST_CASES(/;"	d	file:
TEST_DESC	src/quicklist.c	/^#define TEST_DESC(/;"	d	file:
TEST_END	deps/jemalloc/test/include/test/test.h	/^#define TEST_END	/;"	d
TEST_LDFLAGS	deps/hiredis/Makefile	/^    TEST_LDFLAGS = $(SSL_LDFLAGS) -lssl -lcrypto -lpthread$/;"	m
TEST_LD_MODE	deps/jemalloc/Makefile	/^TEST_LD_MODE = $/;"	m
TEST_LD_MODE	deps/jemalloc/Makefile.in	/^TEST_LD_MODE = @TEST_LD_MODE@$/;"	m
TEST_LIBRARY_PATH	deps/jemalloc/Makefile	/^TEST_LIBRARY_PATH := DYLD_FALLBACK_LIBRARY_PATH="$(objroot)lib"$/;"	m
TEST_LIBRARY_PATH	deps/jemalloc/Makefile	/^TEST_LIBRARY_PATH := PATH="$(PATH):$(objroot)lib"$/;"	m
TEST_LIBRARY_PATH	deps/jemalloc/Makefile	/^TEST_LIBRARY_PATH :=$/;"	m
TEST_LIBRARY_PATH	deps/jemalloc/Makefile.in	/^TEST_LIBRARY_PATH := DYLD_FALLBACK_LIBRARY_PATH="$(objroot)lib"$/;"	m
TEST_LIBRARY_PATH	deps/jemalloc/Makefile.in	/^TEST_LIBRARY_PATH := PATH="$(PATH):$(objroot)lib"$/;"	m
TEST_LIBRARY_PATH	deps/jemalloc/Makefile.in	/^TEST_LIBRARY_PATH :=$/;"	m
TEST_LIBS	deps/hiredis/Makefile	/^TEST_LIBS = $(STLIBNAME)$/;"	m
TEST_MALLCTL_CONFIG	deps/jemalloc/test/unit/mallctl.c	/^#define TEST_MALLCTL_CONFIG(/;"	d	file:
TEST_MALLCTL_OPT	deps/jemalloc/test/unit/mallctl.c	/^#define TEST_MALLCTL_OPT(/;"	d	file:
TEST_MODULES	tests/modules/Makefile	/^TEST_MODULES = \\$/;"	m
TEST_POW2_CEIL	deps/jemalloc/test/unit/bit_util.c	/^#define TEST_POW2_CEIL(/;"	d	file:
TEST_STATS_ARENAS	deps/jemalloc/test/unit/mallctl.c	/^#define TEST_STATS_ARENAS(/;"	d	file:
TEST_STRUCT	deps/jemalloc/test/unit/atomic.c	/^#define TEST_STRUCT(/;"	d	file:
THPDisable	src/latency.c	/^int THPDisable(void) {$/;"	f	typeref:typename:int
THPGetAnonHugePagesSize	src/latency.c	/^int THPGetAnonHugePagesSize(void) {$/;"	f	typeref:typename:int
THPIsEnabled	src/latency.c	/^int THPIsEnabled(void) {$/;"	f	typeref:typename:int
THP_MODE_DEFAULT	deps/jemalloc/include/jemalloc/internal/pages.h	/^#define THP_MODE_DEFAULT /;"	d
TIMEOUT_TIME	src/modules/helloacl.c	/^#define TIMEOUT_TIME /;"	d	file:
TINY_MIN	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#define TINY_MIN	/;"	d
TK_AND	deps/lua/src/llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_BREAK	deps/lua/src/llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_CONCAT	deps/lua/src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_DO	deps/lua/src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_DOTS	deps/lua/src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_ELSE	deps/lua/src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_ELSEIF	deps/lua/src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_END	deps/lua/src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_EOS	deps/lua/src/llex.h	/^  TK_NAME, TK_STRING, TK_EOS$/;"	e	enum:RESERVED
TK_EQ	deps/lua/src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_FALSE	deps/lua/src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FOR	deps/lua/src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FUNCTION	deps/lua/src/llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_GE	deps/lua/src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_IF	deps/lua/src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IN	deps/lua/src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_LE	deps/lua/src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_LOCAL	deps/lua/src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NAME	deps/lua/src/llex.h	/^  TK_NAME, TK_STRING, TK_EOS$/;"	e	enum:RESERVED
TK_NE	deps/lua/src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_NIL	deps/lua/src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NOT	deps/lua/src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NUMBER	deps/lua/src/llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_NUMBER,$/;"	e	enum:RESERVED
TK_OR	deps/lua/src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_REPEAT	deps/lua/src/llex.h	/^  TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_RETURN	deps/lua/src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_STRING	deps/lua/src/llex.h	/^  TK_NAME, TK_STRING, TK_EOS$/;"	e	enum:RESERVED
TK_THEN	deps/lua/src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_TRUE	deps/lua/src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_UNTIL	deps/lua/src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_WHILE	deps/lua/src/llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TKey	deps/lua/src/lobject.h	/^typedef union TKey {$/;"	u
TKey	deps/lua/src/lobject.h	/^} TKey;$/;"	t	typeref:union:TKey
TLSCONN_DEBUG	src/tls.c	/^#define TLSCONN_DEBUG(/;"	d	file:
TLS_CLIENT_AUTH_NO	src/server.h	/^#define TLS_CLIENT_AUTH_NO /;"	d
TLS_CLIENT_AUTH_OPTIONAL	src/server.h	/^#define TLS_CLIENT_AUTH_OPTIONAL /;"	d
TLS_CLIENT_AUTH_YES	src/server.h	/^#define TLS_CLIENT_AUTH_YES /;"	d
TLS_CONN_FLAG_FD_SET	src/tls.c	/^#define TLS_CONN_FLAG_FD_SET /;"	d	file:
TLS_CONN_FLAG_READ_WANT_WRITE	src/tls.c	/^#define TLS_CONN_FLAG_READ_WANT_WRITE /;"	d	file:
TLS_CONN_FLAG_WRITE_WANT_READ	src/tls.c	/^#define TLS_CONN_FLAG_WRITE_WANT_READ /;"	d	file:
TMS	deps/lua/src/ltm.h	/^} TMS;$/;"	t	typeref:enum:__anonc54a96eb0103
TM_ADD	deps/lua/src/ltm.h	/^  TM_ADD,$/;"	e	enum:__anonc54a96eb0103
TM_CALL	deps/lua/src/ltm.h	/^  TM_CALL,$/;"	e	enum:__anonc54a96eb0103
TM_CONCAT	deps/lua/src/ltm.h	/^  TM_CONCAT,$/;"	e	enum:__anonc54a96eb0103
TM_DIV	deps/lua/src/ltm.h	/^  TM_DIV,$/;"	e	enum:__anonc54a96eb0103
TM_EQ	deps/lua/src/ltm.h	/^  TM_EQ,  \/* last tag method with `fast' access *\/$/;"	e	enum:__anonc54a96eb0103
TM_GC	deps/lua/src/ltm.h	/^  TM_GC,$/;"	e	enum:__anonc54a96eb0103
TM_INDEX	deps/lua/src/ltm.h	/^  TM_INDEX,$/;"	e	enum:__anonc54a96eb0103
TM_LE	deps/lua/src/ltm.h	/^  TM_LE,$/;"	e	enum:__anonc54a96eb0103
TM_LEN	deps/lua/src/ltm.h	/^  TM_LEN,$/;"	e	enum:__anonc54a96eb0103
TM_LT	deps/lua/src/ltm.h	/^  TM_LT,$/;"	e	enum:__anonc54a96eb0103
TM_MOD	deps/lua/src/ltm.h	/^  TM_MOD,$/;"	e	enum:__anonc54a96eb0103
TM_MODE	deps/lua/src/ltm.h	/^  TM_MODE,$/;"	e	enum:__anonc54a96eb0103
TM_MUL	deps/lua/src/ltm.h	/^  TM_MUL,$/;"	e	enum:__anonc54a96eb0103
TM_N	deps/lua/src/ltm.h	/^  TM_N		\/* number of elements in the enum *\/$/;"	e	enum:__anonc54a96eb0103
TM_NEWINDEX	deps/lua/src/ltm.h	/^  TM_NEWINDEX,$/;"	e	enum:__anonc54a96eb0103
TM_POW	deps/lua/src/ltm.h	/^  TM_POW,$/;"	e	enum:__anonc54a96eb0103
TM_SUB	deps/lua/src/ltm.h	/^  TM_SUB,$/;"	e	enum:__anonc54a96eb0103
TM_UNM	deps/lua/src/ltm.h	/^  TM_UNM,$/;"	e	enum:__anonc54a96eb0103
TOKEN_LEN	deps/lua/src/llex.h	/^#define TOKEN_LEN	/;"	d
TOKEN_TYPE_COLON	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_COLON,$/;"	e	enum:__anonb5a306e00103	file:
TOKEN_TYPE_COMMA	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_COMMA,$/;"	e	enum:__anonb5a306e00103	file:
TOKEN_TYPE_EOI	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_EOI,$/;"	e	enum:__anonb5a306e00103	file:
TOKEN_TYPE_ERROR	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_ERROR,$/;"	e	enum:__anonb5a306e00103	file:
TOKEN_TYPE_FALSE	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_FALSE,$/;"	e	enum:__anonb5a306e00103	file:
TOKEN_TYPE_LBRACE	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_LBRACE,$/;"	e	enum:__anonb5a306e00103	file:
TOKEN_TYPE_LBRACKET	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_LBRACKET,$/;"	e	enum:__anonb5a306e00103	file:
TOKEN_TYPE_NONE	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_NONE,$/;"	e	enum:__anonb5a306e00103	file:
TOKEN_TYPE_NULL	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_NULL,$/;"	e	enum:__anonb5a306e00103	file:
TOKEN_TYPE_NUMBER	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_NUMBER$/;"	e	enum:__anonb5a306e00103	file:
TOKEN_TYPE_RBRACE	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_RBRACE,$/;"	e	enum:__anonb5a306e00103	file:
TOKEN_TYPE_RBRACKET	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_RBRACKET,$/;"	e	enum:__anonb5a306e00103	file:
TOKEN_TYPE_STRING	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_STRING,$/;"	e	enum:__anonb5a306e00103	file:
TOKEN_TYPE_TRUE	deps/jemalloc/test/unit/stats_print.c	/^	TOKEN_TYPE_TRUE,$/;"	e	enum:__anonb5a306e00103	file:
TOP	deps/lua/etc/Makefile	/^TOP= ..$/;"	m
TO_BIN	deps/lua/Makefile	/^TO_BIN= lua luac$/;"	m
TO_INC	deps/lua/Makefile	/^TO_INC= lua.h luaconf.h lualib.h lauxlib.h ..\/etc\/lua.hpp$/;"	m
TO_LIB	deps/lua/Makefile	/^TO_LIB= liblua.a$/;"	m
TO_MAN	deps/lua/Makefile	/^TO_MAN= lua.1 luac.1$/;"	m
TRACE_HOOK	deps/jemalloc/test/include/test/extent_hooks.h	/^#  define TRACE_HOOK(/;"	d
TRIM_STRATEGY_MAXLEN	src/t_stream.c	/^#define TRIM_STRATEGY_MAXLEN /;"	d	file:
TRIM_STRATEGY_MINID	src/t_stream.c	/^#define TRIM_STRATEGY_MINID /;"	d	file:
TRIM_STRATEGY_NONE	src/t_stream.c	/^#define TRIM_STRATEGY_NONE /;"	d	file:
TSDN_NULL	deps/jemalloc/include/jemalloc/internal/tsd.h	/^#define TSDN_NULL /;"	d
TSD_INITIALIZER	deps/jemalloc/include/jemalloc/internal/tsd.h	/^#define TSD_INITIALIZER /;"	d
TST	deps/lua/etc/Makefile	/^TST= $(TOP)\/test$/;"	m
TString	deps/lua/src/lobject.h	/^typedef union TString {$/;"	u
TString	deps/lua/src/lobject.h	/^} TString;$/;"	t	typeref:union:TString
TValue	deps/lua/src/lobject.h	/^} TValue;$/;"	t	typeref:struct:lua_TValue
TValuefields	deps/lua/src/lobject.h	/^#define TValuefields	/;"	d
T_ARR_BEGIN	deps/lua/src/lua_cjson.c	/^    T_ARR_BEGIN,$/;"	e	enum:__anona3a73c770103	file:
T_ARR_END	deps/lua/src/lua_cjson.c	/^    T_ARR_END,$/;"	e	enum:__anona3a73c770103	file:
T_BOOLEAN	deps/lua/src/lua_cjson.c	/^    T_BOOLEAN,$/;"	e	enum:__anona3a73c770103	file:
T_COLON	deps/lua/src/lua_cjson.c	/^    T_COLON,$/;"	e	enum:__anona3a73c770103	file:
T_COMMA	deps/lua/src/lua_cjson.c	/^    T_COMMA,$/;"	e	enum:__anona3a73c770103	file:
T_END	deps/lua/src/lua_cjson.c	/^    T_END,$/;"	e	enum:__anona3a73c770103	file:
T_ERROR	deps/lua/src/lua_cjson.c	/^    T_ERROR,$/;"	e	enum:__anona3a73c770103	file:
T_NULL	deps/lua/src/lua_cjson.c	/^    T_NULL,$/;"	e	enum:__anona3a73c770103	file:
T_NUMBER	deps/lua/src/lua_cjson.c	/^    T_NUMBER,$/;"	e	enum:__anona3a73c770103	file:
T_OBJ_BEGIN	deps/lua/src/lua_cjson.c	/^    T_OBJ_BEGIN,$/;"	e	enum:__anona3a73c770103	file:
T_OBJ_END	deps/lua/src/lua_cjson.c	/^    T_OBJ_END,$/;"	e	enum:__anona3a73c770103	file:
T_STRING	deps/lua/src/lua_cjson.c	/^    T_STRING,$/;"	e	enum:__anona3a73c770103	file:
T_UNKNOWN	deps/lua/src/lua_cjson.c	/^    T_UNKNOWN$/;"	e	enum:__anona3a73c770103	file:
T_WHITESPACE	deps/lua/src/lua_cjson.c	/^    T_WHITESPACE,$/;"	e	enum:__anona3a73c770103	file:
Table	deps/lua/src/lobject.h	/^typedef struct Table {$/;"	s
Table	deps/lua/src/lobject.h	/^} Table;$/;"	t	typeref:struct:Table
Table	utils/tracking_collisions.c	/^int Table[TABLE_SIZE];$/;"	v	typeref:typename:int[]
TerminateModuleForkChild	src/module.c	/^int TerminateModuleForkChild(int child_pid, int wait) {$/;"	f	typeref:typename:int
TestAssertIntegerReply	tests/modules/basics.c	/^int TestAssertIntegerReply(RedisModuleCtx *ctx, RedisModuleCallReply *reply, long long expected)/;"	f	typeref:typename:int
TestAssertStringReply	tests/modules/basics.c	/^int TestAssertStringReply(RedisModuleCtx *ctx, RedisModuleCallReply *reply, char *str, size_t le/;"	f	typeref:typename:int
TestBasics	tests/modules/basics.c	/^int TestBasics(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
TestCall	tests/modules/basics.c	/^int TestCall(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
TestCtxFlags	tests/modules/basics.c	/^int TestCtxFlags(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
TestMatchReply	tests/modules/basics.c	/^int TestMatchReply(RedisModuleCallReply *reply, char *str) {$/;"	f	typeref:typename:int
TestNotifications	tests/modules/basics.c	/^int TestNotifications(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
TestStringAppend	tests/modules/basics.c	/^int TestStringAppend(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
TestStringAppendAM	tests/modules/basics.c	/^int TestStringAppendAM(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
TestStringPrintf	tests/modules/basics.c	/^int TestStringPrintf(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
TestStringTruncate	tests/modules/basics.c	/^int TestStringTruncate(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
TestUnlink	tests/modules/basics.c	/^int TestUnlink(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
TimerCommand_RedisCommand	src/modules/hellotimer.c	/^int TimerCommand_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
Timers	src/module.c	/^static rax *Timers;     \/* The radix tree of all the timers sorted by expire. *\/$/;"	v	typeref:typename:rax *	file:
Token	deps/lua/src/llex.h	/^typedef struct Token {$/;"	s
Token	deps/lua/src/llex.h	/^} Token;$/;"	t	typeref:struct:Token
TrackingChannelName	src/tracking.c	/^robj *TrackingChannelName;$/;"	v	typeref:typename:robj *
TrackingTable	src/tracking.c	/^rax *TrackingTable = NULL;$/;"	v	typeref:typename:rax *
TrackingTableTotalItems	src/tracking.c	/^uint64_t TrackingTableTotalItems = 0; \/* Total number of IDs stored across$/;"	v	typeref:typename:uint64_t
U2S_BUFSIZE	deps/jemalloc/src/malloc_io.c	/^#define U2S_BUFSIZE /;"	d	file:
U32TO8_LE	src/siphash.c	/^#define U32TO8_LE(/;"	d	file:
U64TO8_LE	src/siphash.c	/^#define U64TO8_LE(/;"	d	file:
U8TO64_LE	src/siphash.c	/^#define U8TO64_LE(/;"	d	file:
U8TO64_LE_NOCASE	src/siphash.c	/^#define U8TO64_LE_NOCASE(/;"	d	file:
UBits	deps/lua/src/lua_bit.c	/^typedef uint32_t UBits;$/;"	t	typeref:typename:uint32_t	file:
UINT16_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINT16_C(/;"	d
UINT16_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINT16_MAX /;"	d
UINT32_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINT32_C(/;"	d
UINT32_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINT32_MAX /;"	d
UINT64_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINT64_C(/;"	d
UINT64_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINT64_MAX /;"	d
UINT8_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINT8_C(/;"	d
UINT8_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINT8_MAX /;"	d
UINTMAX_C	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINTMAX_C /;"	d
UINTMAX_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINTMAX_MAX /;"	d
UINTPTR_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#  define UINTPTR_MAX /;"	d
UINT_FAST16_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINT_FAST16_MAX /;"	d
UINT_FAST32_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINT_FAST32_MAX /;"	d
UINT_FAST64_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINT_FAST64_MAX /;"	d
UINT_FAST8_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINT_FAST8_MAX /;"	d
UINT_LEAST16_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINT_LEAST16_MAX /;"	d
UINT_LEAST32_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINT_LEAST32_MAX /;"	d
UINT_LEAST64_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINT_LEAST64_MAX /;"	d
UINT_LEAST8_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define UINT_LEAST8_MAX /;"	d
ULONG_ONEZERO	src/memtest.c	/^#define ULONG_ONEZERO /;"	d	file:
ULONG_ZEROONE	src/memtest.c	/^#define ULONG_ZEROONE /;"	d	file:
ULTRA_FAST	src/lzfP.h	/^# define ULTRA_FAST /;"	d
UM	src/mt19937-64.c	/^#define UM /;"	d	file:
UNALIGNED_LE_CPU	src/siphash.c	/^#define UNALIGNED_LE_CPU$/;"	d	file:
UNARY_PRIORITY	deps/lua/src/lparser.c	/^#define UNARY_PRIORITY	/;"	d	file:
UNIT_MILLISECONDS	src/server.h	/^#define UNIT_MILLISECONDS /;"	d
UNIT_SECONDS	src/server.h	/^#define UNIT_SECONDS /;"	d
UNLOCK_RETURN	deps/jemalloc/src/jemalloc.c	/^#define UNLOCK_RETURN(/;"	d	file:
UNSHRINK_THRESHOULD	src/Config.h	/^#define UNSHRINK_THRESHOULD /;"	d
UNUSED	deps/hiredis/sds.c	/^#define UNUSED(/;"	d	file:
UNUSED	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#define UNUSED /;"	d
UNUSED	deps/lua/src/llimits.h	/^#define UNUSED(/;"	d
UNUSED	src/crc64.c	/^#define UNUSED(/;"	d	file:
UNUSED	src/endianconv.c	/^#define UNUSED(/;"	d	file:
UNUSED	src/intset.c	/^#define UNUSED(/;"	d	file:
UNUSED	src/quicklist.c	/^#define UNUSED(/;"	d	file:
UNUSED	src/redis-benchmark.c	/^#define UNUSED(/;"	d	file:
UNUSED	src/redis-cli.c	/^#define UNUSED(/;"	d	file:
UNUSED	src/sds.c	/^#define UNUSED(/;"	d	file:
UNUSED	src/server.h	/^#define UNUSED(/;"	d
UNUSED	src/sha1.c	/^#define UNUSED(/;"	d	file:
UNUSED	src/util.c	/^#define UNUSED(/;"	d	file:
UNUSED	src/zipmap.c	/^#define UNUSED(/;"	d	file:
UNUSED	src/zmalloc.c	/^#define UNUSED(/;"	d	file:
UNUSED	tests/modules/blockedclient.c	/^#define UNUSED(/;"	d	file:
UNUSED	tests/modules/blockonbackground.c	/^#define UNUSED(/;"	d	file:
UNUSED	tests/modules/fork.c	/^#define UNUSED(/;"	d	file:
UNUSED	tests/modules/getkeys.c	/^#define UNUSED(/;"	d	file:
UNUSED	tests/modules/misc.c	/^#define UNUSED(/;"	d	file:
UNW_LOCAL_ONLY	deps/jemalloc/src/prof.c	/^#define UNW_LOCAL_ONLY$/;"	d	file:
USER_COMMAND_BITS_COUNT	src/server.h	/^#define USER_COMMAND_BITS_COUNT /;"	d
USER_FLAG_ALLCHANNELS	src/server.h	/^#define USER_FLAG_ALLCHANNELS /;"	d
USER_FLAG_ALLCOMMANDS	src/server.h	/^#define USER_FLAG_ALLCOMMANDS /;"	d
USER_FLAG_ALLKEYS	src/server.h	/^#define USER_FLAG_ALLKEYS /;"	d
USER_FLAG_DISABLED	src/server.h	/^#define USER_FLAG_DISABLED /;"	d
USER_FLAG_ENABLED	src/server.h	/^#define USER_FLAG_ENABLED /;"	d
USER_FLAG_NOPASS	src/server.h	/^#define USER_FLAG_NOPASS /;"	d
USER_FLAG_SANITIZE_PAYLOAD	src/server.h	/^#define USER_FLAG_SANITIZE_PAYLOAD /;"	d
USER_FLAG_SANITIZE_PAYLOAD_SKIP	src/server.h	/^#define USER_FLAG_SANITIZE_PAYLOAD_SKIP /;"	d
USE_ALIGNED_ACCESS	src/config.h	/^#define USE_ALIGNED_ACCESS$/;"	d
USE_CRYPTO_LOCKS	src/tls.c	/^#define USE_CRYPTO_LOCKS$/;"	d	file:
USE_SETCPUAFFINITY	src/config.h	/^#define USE_SETCPUAFFINITY$/;"	d
USE_SETPROCTITLE	src/config.h	/^#define USE_SETPROCTITLE$/;"	d
USE_SSL	deps/hiredis/Makefile	/^USE_SSL?=0$/;"	m
UTIL_INLINE	deps/jemalloc/include/jemalloc/internal/util.h	/^#define UTIL_INLINE /;"	d
UTRACE	deps/jemalloc/src/jemalloc.c	/^#  define UTRACE(/;"	d	file:
Udata	deps/lua/src/lobject.h	/^typedef union Udata {$/;"	u
Udata	deps/lua/src/lobject.h	/^} Udata;$/;"	t	typeref:union:Udata
Uinttype	deps/lua/src/lua_struct.c	/^typedef unsigned STRUCT_INT Uinttype;$/;"	t	typeref:typename:unsigned STRUCT_INT	file:
UnOpr	deps/lua/src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	g
UnOpr	deps/lua/src/lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	t	typeref:enum:UnOpr
UpVal	deps/lua/src/lobject.h	/^typedef struct UpVal {$/;"	s
UpVal	deps/lua/src/lobject.h	/^} UpVal;$/;"	t	typeref:struct:UpVal
UserChangedCallback	tests/modules/auth.c	/^void UserChangedCallback(uint64_t client_id, void *privdata) {$/;"	f	typeref:typename:void
Users	src/acl.c	/^rax *Users; \/* Table mapping usernames to user structures. *\/$/;"	v	typeref:typename:rax *
UsersToLoad	src/acl.c	/^list *UsersToLoad;  \/* This is a list of users found in the configuration file$/;"	v	typeref:typename:list *
V	deps/lua/Makefile	/^V= 5.1$/;"	m
VALUEWEAK	deps/lua/src/lgc.c	/^#define VALUEWEAK /;"	d	file:
VALUEWEAKBIT	deps/lua/src/lgc.h	/^#define VALUEWEAKBIT	/;"	d
VARARG_HASARG	deps/lua/src/lobject.h	/^#define VARARG_HASARG	/;"	d
VARARG_ISVARARG	deps/lua/src/lobject.h	/^#define VARARG_ISVARARG	/;"	d
VARARG_NEEDSARG	deps/lua/src/lobject.h	/^#define VARARG_NEEDSARG	/;"	d
VARIABLE_ARRAY	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#  define VARIABLE_ARRAY(/;"	d
VCALL	deps/lua/src/lparser.h	/^  VCALL,	\/* info = instruction pc *\/$/;"	e	enum:__anon581f0db70103
VERY_FAST	src/lzfP.h	/^# define VERY_FAST /;"	d
VFALSE	deps/lua/src/lparser.h	/^  VFALSE,$/;"	e	enum:__anon581f0db70103
VGLOBAL	deps/lua/src/lparser.h	/^  VGLOBAL,	\/* info = index of table; aux = index of global name in `k' *\/$/;"	e	enum:__anon581f0db70103
VINDEXED	deps/lua/src/lparser.h	/^  VINDEXED,	\/* info = table register; aux = index register (or `k') *\/$/;"	e	enum:__anon581f0db70103
VJMP	deps/lua/src/lparser.h	/^  VJMP,		\/* info = instruction pc *\/$/;"	e	enum:__anon581f0db70103
VK	deps/lua/src/lparser.h	/^  VK,		\/* info = index of constant in `k' *\/$/;"	e	enum:__anon581f0db70103
VKNUM	deps/lua/src/lparser.h	/^  VKNUM,	\/* nval = numerical value *\/$/;"	e	enum:__anon581f0db70103
VLOCAL	deps/lua/src/lparser.h	/^  VLOCAL,	\/* info = local register *\/$/;"	e	enum:__anon581f0db70103
VNIL	deps/lua/src/lparser.h	/^  VNIL,$/;"	e	enum:__anon581f0db70103
VNONRELOC	deps/lua/src/lparser.h	/^  VNONRELOC,	\/* info = result register *\/$/;"	e	enum:__anon581f0db70103
VOID	deps/lua/src/print.c	/^#define VOID(/;"	d	file:
VRELOCABLE	deps/lua/src/lparser.h	/^  VRELOCABLE,	\/* info = instruction pc *\/$/;"	e	enum:__anon581f0db70103
VSEQ_INVALID	deps/jemalloc/src/prof.c	/^#define VSEQ_INVALID	/;"	d	file:
VTRUE	deps/lua/src/lparser.h	/^  VTRUE,$/;"	e	enum:__anon581f0db70103
VUPVAL	deps/lua/src/lparser.h	/^  VUPVAL,       \/* info = index of upvalue in `upvalues' *\/$/;"	e	enum:__anon581f0db70103
VVARARG	deps/lua/src/lparser.h	/^  VVARARG	\/* info = instruction pc *\/$/;"	e	enum:__anon581f0db70103
VVOID	deps/lua/src/lparser.h	/^  VVOID,	\/* no value *\/$/;"	e	enum:__anon581f0db70103
Value	deps/lua/src/lobject.h	/^} Value;$/;"	t	typeref:union:__anona52fc941010a
VerifySubEventSupported	tests/modules/hooks.c	/^#define VerifySubEventSupported(/;"	d	file:
W128_T	deps/jemalloc/test/src/SFMT.c	/^struct W128_T {$/;"	s	file:
W128_T	deps/jemalloc/test/src/SFMT.c	/^union W128_T {$/;"	u	file:
WANT_READ	src/tls.c	/^    WANT_READ = 1,$/;"	e	enum:__anonb62c51600103	file:
WANT_WRITE	src/tls.c	/^    WANT_WRITE$/;"	e	enum:__anonb62c51600103	file:
WARN	deps/hdr_histogram/Makefile	/^WARN= -Wall$/;"	m
WARN	deps/linenoise/Makefile	/^WARN= -Wall$/;"	m
WARN	src/Makefile	/^WARN=-Wall -W -Wno-missing-field-initializers$/;"	m
WARNINGS	deps/hiredis/Makefile	/^WARNINGS=-Wall -W -Wstrict-prototypes -Wwrite-strings -Wno-missing-field-initializers$/;"	m
WCHAR_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#  define WCHAR_MAX /;"	d
WCHAR_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#  define WCHAR_MIN /;"	d
WHITE0BIT	deps/lua/src/lgc.h	/^#define WHITE0BIT	/;"	d
WHITE1BIT	deps/lua/src/lgc.h	/^#define WHITE1BIT	/;"	d
WHITEBITS	deps/lua/src/lgc.h	/^#define WHITEBITS	/;"	d
WIDTH_uint32_t	deps/jemalloc/src/stats.c	/^#define WIDTH_uint32_t /;"	d	file:
WIDTH_uint64_t	deps/jemalloc/src/stats.c	/^#define WIDTH_uint64_t /;"	d	file:
WINT_MAX	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define WINT_MAX /;"	d
WINT_MIN	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define WINT_MIN /;"	d
WITNESS_INITIALIZER	deps/jemalloc/include/jemalloc/internal/witness.h	/^#  define WITNESS_INITIALIZER(/;"	d
WITNESS_RANK_ARENAS	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_ARENAS	/;"	d
WITNESS_RANK_ARENA_LARGE	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_ARENA_LARGE	/;"	d
WITNESS_RANK_ARENA_STATS	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_ARENA_STATS	/;"	d
WITNESS_RANK_BACKGROUND_THREAD	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_BACKGROUND_THREAD	/;"	d
WITNESS_RANK_BACKGROUND_THREAD_GLOBAL	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_BACKGROUND_THREAD_GLOBAL	/;"	d
WITNESS_RANK_BASE	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_BASE	/;"	d
WITNESS_RANK_BIN	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_BIN	/;"	d
WITNESS_RANK_CORE	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_CORE	/;"	d
WITNESS_RANK_CTL	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_CTL	/;"	d
WITNESS_RANK_DECAY	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_DECAY	/;"	d
WITNESS_RANK_DSS	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_DSS	/;"	d
WITNESS_RANK_EXTENTS	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_EXTENTS	/;"	d
WITNESS_RANK_EXTENT_AVAIL	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_EXTENT_AVAIL	/;"	d
WITNESS_RANK_EXTENT_GROW	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_EXTENT_GROW	/;"	d
WITNESS_RANK_EXTENT_POOL	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_EXTENT_POOL	/;"	d
WITNESS_RANK_INIT	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_INIT	/;"	d
WITNESS_RANK_LEAF	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_LEAF	/;"	d
WITNESS_RANK_MIN	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_MIN	/;"	d
WITNESS_RANK_OMIT	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_OMIT	/;"	d
WITNESS_RANK_PROF_ACCUM	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_PROF_ACCUM	/;"	d
WITNESS_RANK_PROF_ACTIVE	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_PROF_ACTIVE	/;"	d
WITNESS_RANK_PROF_BT2GCTX	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_PROF_BT2GCTX	/;"	d
WITNESS_RANK_PROF_DUMP	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_PROF_DUMP	/;"	d
WITNESS_RANK_PROF_DUMP_SEQ	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_PROF_DUMP_SEQ	/;"	d
WITNESS_RANK_PROF_GCTX	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_PROF_GCTX	/;"	d
WITNESS_RANK_PROF_GDUMP	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_PROF_GDUMP	/;"	d
WITNESS_RANK_PROF_NEXT_THR_UID	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_PROF_NEXT_THR_UID	/;"	d
WITNESS_RANK_PROF_TDATA	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_PROF_TDATA	/;"	d
WITNESS_RANK_PROF_TDATAS	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_PROF_TDATAS	/;"	d
WITNESS_RANK_PROF_THREAD_ACTIVE_INIT	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_PROF_THREAD_ACTIVE_INIT	/;"	d
WITNESS_RANK_RTREE	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_RTREE	/;"	d
WITNESS_RANK_TCACHES	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_TCACHES	/;"	d
WITNESS_RANK_TCACHE_QL	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_RANK_TCACHE_QL	/;"	d
WITNESS_TSDN_NULL	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_TSDN_NULL /;"	d
WITNESS_TSD_INITIALIZER	deps/jemalloc/include/jemalloc/internal/witness.h	/^#define WITNESS_TSD_INITIALIZER /;"	d
WORD	src/sha256.h	/^typedef uint32_t WORD;  \/\/ 32-bit word$/;"	t	typeref:typename:uint32_t
WRITE	deps/jemalloc/src/ctl.c	/^#define WRITE(/;"	d	file:
WRITEONLY	deps/jemalloc/src/ctl.c	/^#define WRITEONLY(/;"	d	file:
WantIOType	src/tls.c	/^} WantIOType;$/;"	t	typeref:enum:__anonb62c51600103	file:
X0	src/rand.c	/^#define X0	/;"	d	file:
X1	src/rand.c	/^#define X1	/;"	d	file:
X2	src/rand.c	/^#define X2	/;"	d	file:
X2S_BUFSIZE	deps/jemalloc/src/malloc_io.c	/^#define X2S_BUFSIZE /;"	d	file:
XREAD_BLOCKED_DEFAULT_COUNT	src/t_stream.c	/^#define XREAD_BLOCKED_DEFAULT_COUNT /;"	d	file:
XSLTPROC	deps/jemalloc/Makefile	/^XSLTPROC := false$/;"	m
XSLTPROC	deps/jemalloc/Makefile.in	/^XSLTPROC := @XSLTPROC@$/;"	m
Z	deps/lua/src/lundump.c	/^ ZIO* Z;$/;"	m	struct:__anonbd9d9e9e0108	typeref:typename:ZIO *	file:
ZADD_IN_GT	src/server.h	/^#define ZADD_IN_GT /;"	d
ZADD_IN_INCR	src/server.h	/^#define ZADD_IN_INCR /;"	d
ZADD_IN_LT	src/server.h	/^#define ZADD_IN_LT /;"	d
ZADD_IN_NONE	src/server.h	/^#define ZADD_IN_NONE /;"	d
ZADD_IN_NX	src/server.h	/^#define ZADD_IN_NX /;"	d
ZADD_IN_XX	src/server.h	/^#define ZADD_IN_XX /;"	d
ZADD_OUT_ADDED	src/server.h	/^#define ZADD_OUT_ADDED /;"	d
ZADD_OUT_NAN	src/server.h	/^#define ZADD_OUT_NAN /;"	d
ZADD_OUT_NOP	src/server.h	/^#define ZADD_OUT_NOP /;"	d
ZADD_OUT_UPDATED	src/server.h	/^#define ZADD_OUT_UPDATED /;"	d
ZD	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#define ZD(/;"	d
ZIO	deps/lua/src/lzio.h	/^typedef struct Zio ZIO;$/;"	t	typeref:struct:Zio
ZIPLIST_BYTES	src/ziplist.c	/^#define ZIPLIST_BYTES(/;"	d	file:
ZIPLIST_END_SIZE	src/ziplist.c	/^#define ZIPLIST_END_SIZE /;"	d	file:
ZIPLIST_ENTRY_END	src/ziplist.c	/^#define ZIPLIST_ENTRY_END(/;"	d	file:
ZIPLIST_ENTRY_HEAD	src/ziplist.c	/^#define ZIPLIST_ENTRY_HEAD(/;"	d	file:
ZIPLIST_ENTRY_TAIL	src/ziplist.c	/^#define ZIPLIST_ENTRY_TAIL(/;"	d	file:
ZIPLIST_ENTRY_ZERO	src/ziplist.c	/^#define ZIPLIST_ENTRY_ZERO(/;"	d	file:
ZIPLIST_HEAD	src/ziplist.h	/^#define ZIPLIST_HEAD /;"	d
ZIPLIST_HEADER_SIZE	src/ziplist.c	/^#define ZIPLIST_HEADER_SIZE /;"	d	file:
ZIPLIST_INCR_LENGTH	src/ziplist.c	/^#define ZIPLIST_INCR_LENGTH(/;"	d	file:
ZIPLIST_LENGTH	src/ziplist.c	/^#define ZIPLIST_LENGTH(/;"	d	file:
ZIPLIST_MAX_SAFETY_SIZE	src/ziplist.c	/^#define ZIPLIST_MAX_SAFETY_SIZE /;"	d	file:
ZIPLIST_TAIL	src/ziplist.h	/^#define ZIPLIST_TAIL /;"	d
ZIPLIST_TAIL_OFFSET	src/ziplist.c	/^#define ZIPLIST_TAIL_OFFSET(/;"	d	file:
ZIPMAP_BIGLEN	src/zipmap.c	/^#define ZIPMAP_BIGLEN /;"	d	file:
ZIPMAP_END	src/zipmap.c	/^#define ZIPMAP_END /;"	d	file:
ZIPMAP_LEN_BYTES	src/zipmap.c	/^#define ZIPMAP_LEN_BYTES(/;"	d	file:
ZIPMAP_VALUE_MAX_FREE	src/zipmap.c	/^#define ZIPMAP_VALUE_MAX_FREE /;"	d	file:
ZIP_ASSERT_ENCODING	src/ziplist.c	/^#define ZIP_ASSERT_ENCODING(/;"	d	file:
ZIP_BIG_PREVLEN	src/ziplist.c	/^#define ZIP_BIG_PREVLEN /;"	d	file:
ZIP_DECODE_LENGTH	src/ziplist.c	/^#define ZIP_DECODE_LENGTH(/;"	d	file:
ZIP_DECODE_PREVLEN	src/ziplist.c	/^#define ZIP_DECODE_PREVLEN(/;"	d	file:
ZIP_DECODE_PREVLENSIZE	src/ziplist.c	/^#define ZIP_DECODE_PREVLENSIZE(/;"	d	file:
ZIP_ENCODING_SIZE_INVALID	src/ziplist.c	/^#define ZIP_ENCODING_SIZE_INVALID /;"	d	file:
ZIP_END	src/ziplist.c	/^#define ZIP_END /;"	d	file:
ZIP_ENTRY_ENCODING	src/ziplist.c	/^#define ZIP_ENTRY_ENCODING(/;"	d	file:
ZIP_INT_16B	src/ziplist.c	/^#define ZIP_INT_16B /;"	d	file:
ZIP_INT_24B	src/ziplist.c	/^#define ZIP_INT_24B /;"	d	file:
ZIP_INT_32B	src/ziplist.c	/^#define ZIP_INT_32B /;"	d	file:
ZIP_INT_64B	src/ziplist.c	/^#define ZIP_INT_64B /;"	d	file:
ZIP_INT_8B	src/ziplist.c	/^#define ZIP_INT_8B /;"	d	file:
ZIP_INT_IMM_MASK	src/ziplist.c	/^#define ZIP_INT_IMM_MASK /;"	d	file:
ZIP_INT_IMM_MAX	src/ziplist.c	/^#define ZIP_INT_IMM_MAX /;"	d	file:
ZIP_INT_IMM_MIN	src/ziplist.c	/^#define ZIP_INT_IMM_MIN /;"	d	file:
ZIP_INT_MASK	src/ziplist.c	/^#define ZIP_INT_MASK /;"	d	file:
ZIP_IS_STR	src/ziplist.c	/^#define ZIP_IS_STR(/;"	d	file:
ZIP_STR_06B	src/ziplist.c	/^#define ZIP_STR_06B /;"	d	file:
ZIP_STR_14B	src/ziplist.c	/^#define ZIP_STR_14B /;"	d	file:
ZIP_STR_32B	src/ziplist.c	/^#define ZIP_STR_32B /;"	d	file:
ZIP_STR_MASK	src/ziplist.c	/^#define ZIP_STR_MASK /;"	d	file:
ZMALLOC_LIB	src/zmalloc.h	/^#define ZMALLOC_LIB /;"	d
ZRANDMEMBER_RANDOM_SAMPLE_LIMIT	src/t_zset.c	/^#define ZRANDMEMBER_RANDOM_SAMPLE_LIMIT /;"	d	file:
ZRANDMEMBER_SUB_STRATEGY_MUL	src/t_zset.c	/^#define ZRANDMEMBER_SUB_STRATEGY_MUL /;"	d	file:
ZRANGE_AUTO	src/t_zset.c	/^    ZRANGE_AUTO = 0,$/;"	e	enum:__anon6fce03460303	file:
ZRANGE_CONSUMER_TYPE_CLIENT	src/t_zset.c	/^    ZRANGE_CONSUMER_TYPE_CLIENT = 0,$/;"	e	enum:__anon6fce03460c03	file:
ZRANGE_CONSUMER_TYPE_INTERNAL	src/t_zset.c	/^    ZRANGE_CONSUMER_TYPE_INTERNAL$/;"	e	enum:__anon6fce03460c03	file:
ZRANGE_DIRECTION_AUTO	src/t_zset.c	/^    ZRANGE_DIRECTION_AUTO = 0,$/;"	e	enum:__anon6fce03460b03	file:
ZRANGE_DIRECTION_FORWARD	src/t_zset.c	/^    ZRANGE_DIRECTION_FORWARD,$/;"	e	enum:__anon6fce03460b03	file:
ZRANGE_DIRECTION_REVERSE	src/t_zset.c	/^    ZRANGE_DIRECTION_REVERSE$/;"	e	enum:__anon6fce03460b03	file:
ZRANGE_LEX	src/t_zset.c	/^    ZRANGE_LEX,$/;"	e	enum:__anon6fce03460303	file:
ZRANGE_RANK	src/t_zset.c	/^    ZRANGE_RANK,$/;"	e	enum:__anon6fce03460303	file:
ZRANGE_SCORE	src/t_zset.c	/^    ZRANGE_SCORE,$/;"	e	enum:__anon6fce03460303	file:
ZSET_MAX	src/server.h	/^#define ZSET_MAX /;"	d
ZSET_MIN	src/server.h	/^#define ZSET_MIN /;"	d
ZSKIPLIST_MAXLEVEL	src/server.h	/^#define ZSKIPLIST_MAXLEVEL /;"	d
ZSKIPLIST_P	src/server.h	/^#define ZSKIPLIST_P /;"	d
ZU	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#define ZU(/;"	d
Zio	deps/lua/src/lzio.h	/^struct Zio {$/;"	s
_ALL_SOURCE	src/fmacros.h	/^#define _ALL_SOURCE$/;"	d
_BSD_SOURCE	src/fmacros.h	/^#define _BSD_SOURCE$/;"	d
_BSD_SOURCE	tests/modules/fork.c	/^#define _BSD_SOURCE$/;"	d	file:
_Bool	deps/jemalloc/include/msvc_compat/C99/stdbool.h	/^typedef BOOL _Bool;$/;"	t	typeref:typename:BOOL
_CRC16_TABLE_H__	src/crc16_slottable.h	/^#define _CRC16_TABLE_H__$/;"	d
_CRT_SPINCOUNT	deps/jemalloc/src/mutex.c	/^#define _CRT_SPINCOUNT /;"	d	file:
_CRT_SPINCOUNT	deps/jemalloc/test/src/mtx.c	/^#define _CRT_SPINCOUNT /;"	d	file:
_DARWIN_C_SOURCE	deps/hiredis/fmacros.h	/^#define _DARWIN_C_SOURCE$/;"	d
_DEFAULT_SOURCE	src/fmacros.h	/^#define _DEFAULT_SOURCE$/;"	d
_DEFAULT_SOURCE	tests/modules/fork.c	/^#define _DEFAULT_SOURCE$/;"	d	file:
_EL_ADD_READ	deps/hiredis/async_private.h	/^#define _EL_ADD_READ(/;"	d
_EL_ADD_WRITE	deps/hiredis/async_private.h	/^#define _EL_ADD_WRITE(/;"	d
_EL_CLEANUP	deps/hiredis/async_private.h	/^#define _EL_CLEANUP(/;"	d
_EL_DEL_READ	deps/hiredis/async_private.h	/^#define _EL_DEL_READ(/;"	d
_EL_DEL_WRITE	deps/hiredis/async_private.h	/^#define _EL_DEL_WRITE(/;"	d
_FILE_OFFSET_BITS	src/fmacros.h	/^#define _FILE_OFFSET_BITS /;"	d
_GNU_SOURCE	src/fmacros.h	/^#define _GNU_SOURCE$/;"	d
_GNU_SOURCE	src/setcpuaffinity.c	/^#define _GNU_SOURCE$/;"	d	file:
_GNU_SOURCE	src/setproctitle.c	/^#define _GNU_SOURCE$/;"	d	file:
_GNU_SOURCE	src/switchrealloc.h	/^#define _GNU_SOURCE /;"	d
_LARGEFILE_SOURCE	src/fmacros.h	/^#define _LARGEFILE_SOURCE$/;"	d
_MSC_STDINT_H_	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#define _MSC_STDINT_H_$/;"	d
_POSIX_C_SOURCE	deps/hiredis/fmacros.h	/^#define _POSIX_C_SOURCE /;"	d
_POSIX_C_SOURCE	src/fmacros.h	/^#define _POSIX_C_SOURCE /;"	d
_REDISMODULE_CTX_FLAGS_NEXT	src/redismodule.h	/^#define _REDISMODULE_CTX_FLAGS_NEXT /;"	d
_REDISMODULE_EVENT_NEXT	src/redismodule.h	/^#define _REDISMODULE_EVENT_NEXT /;"	d
_REDISMODULE_EVENT_REPLROLECHANGED_NEXT	src/redismodule.h	/^#define _REDISMODULE_EVENT_REPLROLECHANGED_NEXT /;"	d
_REDISMODULE_NOTIFY_NEXT	src/redismodule.h	/^#define _REDISMODULE_NOTIFY_NEXT /;"	d
_REDISMODULE_SUBEVENT_CLIENT_CHANGE_NEXT	src/redismodule.h	/^#define _REDISMODULE_SUBEVENT_CLIENT_CHANGE_NEXT /;"	d
_REDISMODULE_SUBEVENT_CRON_LOOP_NEXT	src/redismodule.h	/^#define _REDISMODULE_SUBEVENT_CRON_LOOP_NEXT /;"	d
_REDISMODULE_SUBEVENT_FLUSHDB_NEXT	src/redismodule.h	/^#define _REDISMODULE_SUBEVENT_FLUSHDB_NEXT /;"	d
_REDISMODULE_SUBEVENT_FORK_CHILD_NEXT	src/redismodule.h	/^#define _REDISMODULE_SUBEVENT_FORK_CHILD_NEXT /;"	d
_REDISMODULE_SUBEVENT_LOADING_NEXT	src/redismodule.h	/^#define _REDISMODULE_SUBEVENT_LOADING_NEXT /;"	d
_REDISMODULE_SUBEVENT_LOADING_PROGRESS_NEXT	src/redismodule.h	/^#define _REDISMODULE_SUBEVENT_LOADING_PROGRESS_NEXT /;"	d
_REDISMODULE_SUBEVENT_MASTER_NEXT	src/redismodule.h	/^#define _REDISMODULE_SUBEVENT_MASTER_NEXT /;"	d
_REDISMODULE_SUBEVENT_MODULE_NEXT	src/redismodule.h	/^#define _REDISMODULE_SUBEVENT_MODULE_NEXT /;"	d
_REDISMODULE_SUBEVENT_PERSISTENCE_NEXT	src/redismodule.h	/^#define _REDISMODULE_SUBEVENT_PERSISTENCE_NEXT /;"	d
_REDISMODULE_SUBEVENT_REPLICA_CHANGE_NEXT	src/redismodule.h	/^#define _REDISMODULE_SUBEVENT_REPLICA_CHANGE_NEXT /;"	d
_REDISMODULE_SUBEVENT_REPL_BACKUP_NEXT	src/redismodule.h	/^#define _REDISMODULE_SUBEVENT_REPL_BACKUP_NEXT /;"	d
_REDISMODULE_SUBEVENT_SHUTDOWN_NEXT	src/redismodule.h	/^#define _REDISMODULE_SUBEVENT_SHUTDOWN_NEXT /;"	d
_REDISMODULE_SUBEVENT_SWAPDB_NEXT	src/redismodule.h	/^#define _REDISMODULE_SUBEVENT_SWAPDB_NEXT /;"	d
_REDIS_FMACRO_H	src/fmacros.h	/^#define _REDIS_FMACRO_H$/;"	d
_RPATH	deps/jemalloc/Makefile	/^_RPATH = -Wl,-rpath,$(1)$/;"	m
_RPATH	deps/jemalloc/Makefile.in	/^_RPATH = @RPATH@$/;"	m
_Unwind_Backtrace	deps/jemalloc/include/jemalloc/internal/hooks.h	/^#define _Unwind_Backtrace /;"	d
_Unwind_Backtrace	deps/jemalloc/src/prof.c	/^#define _Unwind_Backtrace /;"	d	file:
_W64	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#     define _W64 /;"	d
_W64	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^#     define _W64$/;"	d
_WIN32_HELPER_INCLUDE	deps/hiredis/win32.h	/^#define _WIN32_HELPER_INCLUDE$/;"	d
_WIN32_WINNT	deps/hiredis/sockcompat.h	/^#define _WIN32_WINNT /;"	d
_XOPEN_SOURCE	deps/hiredis/fmacros.h	/^#define _XOPEN_SOURCE /;"	d
_XOPEN_SOURCE	src/fmacros.h	/^#define _XOPEN_SOURCE /;"	d
_XOPEN_SOURCE	src/fmacros.h	/^#define _XOPEN_SOURCE$/;"	d
_XOPEN_SOURCE	tests/modules/blockonbackground.c	/^#define _XOPEN_SOURCE /;"	d	file:
_ZIPLIST_H	src/ziplist.h	/^#define _ZIPLIST_H$/;"	d
_ZIPMAP_H	src/zipmap.h	/^#define _ZIPMAP_H$/;"	d
__ADLIST_H__	src/adlist.h	/^#define __ADLIST_H__$/;"	d
__AE_H__	src/ae.h	/^#define __AE_H__$/;"	d
__ALIGN_KERNEL	src/switchrealloc.c	/^#define __ALIGN_KERNEL(/;"	d	file:
__ALIGN_KERNEL_MASK	src/switchrealloc.c	/^#define __ALIGN_KERNEL_MASK(/;"	d	file:
__ATOMIC_VAR_H	src/atomicvar.h	/^#define __ATOMIC_VAR_H$/;"	d
__BIO_H	src/bio.h	/^#define __BIO_H$/;"	d
__CLICOMMON_H	src/cli_common.h	/^#define __CLICOMMON_H$/;"	d
__CLUSTER_H	src/cluster.h	/^#define __CLUSTER_H$/;"	d
__CONFIG_H	src/config.h	/^#define __CONFIG_H$/;"	d
__DECONST	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#  define	__DECONST(/;"	d
__DICT_H	deps/hiredis/dict.h	/^#define __DICT_H$/;"	d
__DICT_H	src/dict.h	/^#define __DICT_H$/;"	d
__ENDIANCONV_H	src/endianconv.h	/^#define __ENDIANCONV_H$/;"	d
__GEO_H__	src/geo.h	/^#define __GEO_H__$/;"	d
__HIREDIS_AE_H__	deps/hiredis/adapters/ae.h	/^#define __HIREDIS_AE_H__$/;"	d
__HIREDIS_ASYNC_H	deps/hiredis/async.h	/^#define __HIREDIS_ASYNC_H$/;"	d
__HIREDIS_ASYNC_PRIVATE_H	deps/hiredis/async_private.h	/^#define __HIREDIS_ASYNC_PRIVATE_H$/;"	d
__HIREDIS_EXAMPLE_QT_H	deps/hiredis/examples/example-qt.h	/^#define __HIREDIS_EXAMPLE_QT_H$/;"	d
__HIREDIS_FMACRO_H	deps/hiredis/fmacros.h	/^#define __HIREDIS_FMACRO_H$/;"	d
__HIREDIS_GLIB_H__	deps/hiredis/adapters/glib.h	/^#define __HIREDIS_GLIB_H__$/;"	d
__HIREDIS_H	deps/hiredis/hiredis.h	/^#define __HIREDIS_H$/;"	d
__HIREDIS_IVYKIS_H__	deps/hiredis/adapters/ivykis.h	/^#define __HIREDIS_IVYKIS_H__$/;"	d
__HIREDIS_LIBEVENT_H__	deps/hiredis/adapters/libevent.h	/^#define __HIREDIS_LIBEVENT_H__$/;"	d
__HIREDIS_LIBEV_H__	deps/hiredis/adapters/libev.h	/^#define __HIREDIS_LIBEV_H__$/;"	d
__HIREDIS_LIBUV_H__	deps/hiredis/adapters/libuv.h	/^#define __HIREDIS_LIBUV_H__$/;"	d
__HIREDIS_MACOSX_H__	deps/hiredis/adapters/macosx.h	/^#define __HIREDIS_MACOSX_H__$/;"	d
__HIREDIS_QT_H__	deps/hiredis/adapters/qt.h	/^#define __HIREDIS_QT_H__$/;"	d
__HIREDIS_READ_H	deps/hiredis/read.h	/^#define __HIREDIS_READ_H$/;"	d
__HIREDIS_SSL_H	deps/hiredis/hiredis_ssl.h	/^#define __HIREDIS_SSL_H$/;"	d
__INTSET_H	src/intset.h	/^#define __INTSET_H$/;"	d
__LATENCY_H	src/latency.h	/^#define __LATENCY_H$/;"	d
__LINENOISE_H	deps/linenoise/linenoise.h	/^#define __LINENOISE_H$/;"	d
__LISTPACK_H	src/listpack.h	/^#define __LISTPACK_H$/;"	d
__LOLWUT_H	src/lolwut.h	/^#define __LOLWUT_H$/;"	d
__MAX_MSEC	deps/hiredis/net.c	/^#define __MAX_MSEC /;"	d	file:
__MONOTONIC_H	src/monotonic.h	/^#define __MONOTONIC_H$/;"	d
__MT19937_64_H	src/mt19937-64.h	/^#define __MT19937_64_H$/;"	d
__NET_H	deps/hiredis/net.h	/^#define __NET_H$/;"	d
__PQSORT_H	src/pqsort.h	/^#define __PQSORT_H$/;"	d
__QUICKLIST_H__	src/quicklist.h	/^#define __QUICKLIST_H__$/;"	d
__RDB_H	src/rdb.h	/^#define __RDB_H$/;"	d
__REDIS_ASSERT_H__	src/redisassert.h	/^#define __REDIS_ASSERT_H__$/;"	d
__REDIS_CONNECTION_H	src/connection.h	/^#define __REDIS_CONNECTION_H$/;"	d
__REDIS_CONNHELPERS_H	src/connhelpers.h	/^#define __REDIS_CONNHELPERS_H$/;"	d
__REDIS_H	src/server.h	/^#define __REDIS_H$/;"	d
__REDIS_HELP_H	src/help.h	/^#define __REDIS_HELP_H$/;"	d
__REDIS_RIO_H	src/rio.h	/^#define __REDIS_RIO_H$/;"	d
__REDIS_UTIL_H	src/util.h	/^#define __REDIS_UTIL_H$/;"	d
__SDS_ALLOC_H__	src/sdsalloc.h	/^#define __SDS_ALLOC_H__$/;"	d
__SDS_H	src/sds.h	/^#define __SDS_H$/;"	d
__SLOWLOG_H__	src/slowlog.h	/^#define __SLOWLOG_H__$/;"	d
__SOCKCOMPAT_H	deps/hiredis/sockcompat.h	/^#define __SOCKCOMPAT_H$/;"	d
__SPARKLINE_H	src/sparkline.h	/^#define __SPARKLINE_H$/;"	d
__TESTHELP_H	src/testhelp.h	/^#define __TESTHELP_H$/;"	d
__ZMALLOC_H	src/zmalloc.h	/^#define __ZMALLOC_H$/;"	d
__anon0815b2e20103	src/connection.h	/^typedef enum {$/;"	g
__anon0a9ad5bb0108	deps/jemalloc/include/jemalloc/internal/spin.h	/^typedef struct {$/;"	s
__anon0ea0731b010a	deps/jemalloc/test/unit/ckh.c	/^		union {$/;"	u	function:TEST_BEGIN	file:
__anon0ea0731b020a	deps/jemalloc/test/unit/ckh.c	/^		union {$/;"	u	function:TEST_BEGIN	file:
__anon0f5a9b9e0108	deps/jemalloc/test/unit/mtx.c	/^typedef struct {$/;"	s	file:
__anon0fd28c700103	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^typedef enum {$/;"	g
__anon0fd28c70020a	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	union {$/;"	u	struct:extent_s
__anon0fd28c70030a	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	union {$/;"	u	struct:extent_s
__anon10f823b40108	deps/lua/src/strbuf.h	/^typedef struct {$/;"	s
__anon1a1c3d100108	src/geohash_helper.h	/^typedef struct {$/;"	s
__anon1dacebdb0108	deps/lua/src/ldump.c	/^typedef struct {$/;"	s	file:
__anon25f7a4b70108	deps/jemalloc/include/jemalloc/internal/ckh.h	/^typedef struct {$/;"	s
__anon25f7a4b70208	deps/jemalloc/include/jemalloc/internal/ckh.h	/^typedef struct {$/;"	s
__anon272f974c0103	deps/jemalloc/include/jemalloc/internal/tsd.h	/^enum {$/;"	g
__anon2cc7db540108	src/cluster.h	/^typedef struct {$/;"	s
__anon2cc7db540208	src/cluster.h	/^typedef struct {$/;"	s
__anon2cc7db540308	src/cluster.h	/^typedef struct {$/;"	s
__anon2cc7db540408	src/cluster.h	/^typedef struct {$/;"	s
__anon2cc7db540508	src/cluster.h	/^typedef struct {$/;"	s
__anon2cc7db540608	src/cluster.h	/^    struct {$/;"	s	union:clusterMsgData
__anon2cc7db540708	src/cluster.h	/^    struct {$/;"	s	union:clusterMsgData
__anon2cc7db540808	src/cluster.h	/^    struct {$/;"	s	union:clusterMsgData
__anon2cc7db540908	src/cluster.h	/^    struct {$/;"	s	union:clusterMsgData
__anon2cc7db540a08	src/cluster.h	/^    struct {$/;"	s	union:clusterMsgData
__anon2cc7db540b08	src/cluster.h	/^typedef struct {$/;"	s
__anon2e0c60e60103	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^typedef enum {$/;"	g
__anon309c720d0103	deps/jemalloc/test/src/test.c	/^typedef enum {$/;"	g	file:
__anon33497ff70103	deps/lua/src/lopcodes.h	/^typedef enum {$/;"	g
__anon3dd9610f0103	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^typedef enum {$/;"	g
__anon3ef696e90103	src/server.h	/^typedef enum {$/;"	g
__anon3ef696e90203	src/server.h	/^typedef enum {$/;"	g
__anon3ef696e90303	src/server.h	/^typedef enum {$/;"	g
__anon3ef696e90408	src/server.h	/^typedef struct {$/;"	s
__anon3ef696e90508	src/server.h	/^    struct {$/;"	s	struct:redisMemOverhead
__anon3ef696e90608	src/server.h	/^    struct {$/;"	s	struct:redisServer
__anon3ef696e90708	src/server.h	/^typedef struct {$/;"	s
__anon3ef696e9080a	src/server.h	/^    union {$/;"	u	struct:_redisSortObject
__anon3ef696e90908	src/server.h	/^typedef struct {$/;"	s
__anon3ef696e90a08	src/server.h	/^typedef struct {$/;"	s
__anon3ef696e90b08	src/server.h	/^typedef struct {$/;"	s
__anon3ef696e90c08	src/server.h	/^typedef struct {$/;"	s
__anon3ef696e90d08	src/server.h	/^typedef struct {$/;"	s
__anon3ef696e90e08	src/server.h	/^typedef struct {$/;"	s
__anon4492e9240108	src/t_hash.c	/^    struct {$/;"	s	function:_hashZiplistEntryValidation	file:
__anon4492e9240208	src/t_hash.c	/^    struct {$/;"	s	function:hashZiplistValidateIntegrity	file:
__anon4549dee60103	deps/hiredis/hiredis_ssl.h	/^typedef enum {$/;"	g
__anon4ad273d60108	src/defrag.c	/^typedef struct {$/;"	s	file:
__anon4ad273d60208	src/defrag.c	/^typedef struct {$/;"	s	file:
__anon4c1a01b90108	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^typedef struct {$/;"	s
__anon4d39dfdc0108	src/ziplist.c	/^    typedef struct {$/;"	s	function:ziplistRandomPairs	file:
__anon4d39dfe10108	src/ziplist.h	/^typedef struct {$/;"	s
__anon4e2331a50103	deps/jemalloc/src/jemalloc.c	/^typedef enum {$/;"	g	file:
__anon4e2331a50203	deps/jemalloc/src/jemalloc.c	/^enum {$/;"	g	file:
__anon4e2331a50308	deps/jemalloc/src/jemalloc.c	/^typedef struct {$/;"	s	file:
__anon51b74b560103	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^typedef enum {$/;"	g
__anon53e173710103	deps/jemalloc/include/jemalloc/internal/pages.h	/^typedef enum {$/;"	g
__anon56260716010a	src/dict.h	/^    union {$/;"	u	struct:dictEntry
__anon581f0db20108	deps/lua/src/lparser.c	/^static const struct {$/;"	s	file:
__anon581f0db70103	deps/lua/src/lparser.h	/^typedef enum {$/;"	g
__anon581f0db7020a	deps/lua/src/lparser.h	/^  union {$/;"	u	struct:expdesc
__anon581f0db70308	deps/lua/src/lparser.h	/^    struct { int info, aux; } s;$/;"	s	union:expdesc::__anon581f0db7020a
__anon601d21a40108	tests/modules/blockonkeys.c	/^typedef struct {$/;"	s	file:
__anon66bdd4500103	deps/jemalloc/include/jemalloc/internal/stats.h	/^enum {$/;"	g
__anon676e9ac0010a	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	union {$/;"	u	struct:tcaches_s
__anon6a58858f0108	src/setproctitle.c	/^static struct {$/;"	s	file:
__anon6af24fe90108	src/redis-cli.c	/^typedef struct {$/;"	s	file:
__anon6af24fe90208	src/redis-cli.c	/^typedef struct {$/;"	s	file:
__anon6e0980f3010a	deps/lua/src/llex.h	/^typedef union {$/;"	u
__anon6fce03460108	src/t_zset.c	/^    struct {$/;"	s	function:_zsetZiplistValidateIntegrity	file:
__anon6fce03460208	src/t_zset.c	/^    struct {$/;"	s	function:zsetZiplistValidateIntegrity	file:
__anon6fce03460303	src/t_zset.c	/^typedef enum {$/;"	g	file:
__anon6fce03460408	src/t_zset.c	/^typedef struct {$/;"	s	file:
__anon6fce0346050a	src/t_zset.c	/^    union {$/;"	u	struct:__anon6fce03460408	file:
__anon6fce03460608	src/t_zset.c	/^            struct {$/;"	s	union:__anon6fce03460408::__anon6fce0346050a::_iterset	file:
__anon6fce03460708	src/t_zset.c	/^            struct {$/;"	s	union:__anon6fce03460408::__anon6fce0346050a::_iterset	file:
__anon6fce03460808	src/t_zset.c	/^            struct {$/;"	s	union:__anon6fce03460408::__anon6fce0346050a::_iterzset	file:
__anon6fce03460908	src/t_zset.c	/^            struct {$/;"	s	union:__anon6fce03460408::__anon6fce0346050a::_iterzset	file:
__anon6fce03460a08	src/t_zset.c	/^typedef struct {$/;"	s	file:
__anon6fce03460b03	src/t_zset.c	/^typedef enum {$/;"	g	file:
__anon6fce03460c03	src/t_zset.c	/^typedef enum {$/;"	g	file:
__anon70b3c1880108	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^typedef struct {$/;"	s
__anon722b8083020a	src/config.c	/^    union {$/;"	u	struct:numericConfigData	file:
__anon790f1a3a010a	src/sha1.c	/^    typedef union {$/;"	u	function:SHA1Transform	file:
__anon790f1a3f0108	src/sha1.h	/^typedef struct {$/;"	s
__anon7a00f1d60108	deps/jemalloc/test/include/test/mtx.h	/^typedef struct {$/;"	s
__anon7b9bac700103	deps/jemalloc/include/jemalloc/internal/base_types.h	/^typedef enum {$/;"	g
__anon7daed6b50108	deps/hiredis/hiredis.h	/^typedef struct {$/;"	s
__anon7daed6b5020a	deps/hiredis/hiredis.h	/^    union {$/;"	u	struct:__anon7daed6b50108
__anon7daed6b50308	deps/hiredis/hiredis.h	/^        struct {$/;"	s	union:__anon7daed6b50108::__anon7daed6b5020a
__anon7daed6b50408	deps/hiredis/hiredis.h	/^    struct {$/;"	s	struct:redisContext
__anon7daed6b50508	deps/hiredis/hiredis.h	/^    struct {$/;"	s	struct:redisContext
__anon7dcd3f75010a	deps/jemalloc/src/prof.c	/^	union {$/;"	u	function:prof_lookup_global	file:
__anon7dcd3f75020a	deps/jemalloc/src/prof.c	/^	union {$/;"	u	function:prof_lookup_global	file:
__anon7dcd3f75030a	deps/jemalloc/src/prof.c	/^	union {$/;"	u	function:prof_lookup	file:
__anon7dcd3f75040a	deps/jemalloc/src/prof.c	/^		union {$/;"	u	function:prof_tdata_merge_iter	file:
__anon7dcd3f75050a	deps/jemalloc/src/prof.c	/^	union {$/;"	u	function:prof_dump_prep	file:
__anon7e97ef900103	src/util.h	/^typedef enum {$/;"	g
__anon7ec42b74010a	deps/jemalloc/include/msvc_compat/strings.h	/^	union {$/;"	u	function:ffsll
__anon7fbd88310108	deps/jemalloc/include/jemalloc/internal/nstime.h	/^typedef struct {$/;"	s
__anon818955940108	src/redis-check-rdb.c	/^struct {$/;"	s	file:
__anon89b0a8ab0108	deps/hiredis/async.h	/^    struct {$/;"	s	struct:redisAsyncContext
__anon89b0a8ab0208	deps/hiredis/async.h	/^    struct {$/;"	s	struct:redisAsyncContext
__anon8fe9202c0108	src/t_stream.c	/^typedef struct {$/;"	s	file:
__anon905d92fb010a	deps/hdr_histogram/hdr_histogram.h	/^    {$/;"	u	struct:hdr_iter
__anon905d92fb0203	deps/hdr_histogram/hdr_histogram.h	/^{$/;"	g
__anon94e9fb9a0108	deps/jemalloc/src/zone.c	/^typedef struct {$/;"	s	file:
__anon967b4733010a	src/module.c	/^    union {$/;"	u	struct:RedisModuleKey	file:
__anon967b47330208	src/module.c	/^        struct {$/;"	s	union:RedisModuleKey::__anon967b4733010a	file:
__anon967b47330308	src/module.c	/^        struct {$/;"	s	union:RedisModuleKey::__anon967b4733010a	file:
__anon967b4733040a	src/module.c	/^    union {$/;"	u	struct:RedisModuleCallReply	file:
__anon967b47330508	src/module.c	/^    static struct {$/;"	s	function:moduleTypeLookupModuleByID	file:
__anon967b47330608	src/module.c	/^        struct {$/;"	s	struct:RM_CreateDataType::typemethods	file:
__anon967b47330708	src/module.c	/^        struct {$/;"	s	struct:RM_CreateDataType::typemethods	file:
__anon967b4733080a	src/module.c	/^    union {uint64_t u; int64_t i;} conv;$/;"	u	function:RM_SaveSigned	file:
__anon967b4733090a	src/module.c	/^    union {uint64_t u; int64_t i;} conv;$/;"	u	function:RM_LoadSigned	file:
__anon967b47330a08	src/module.c	/^typedef struct {$/;"	s	file:
__anon967b47330b08	src/module.c	/^typedef struct {$/;"	s	file:
__anon99e813050108	tests/modules/scan.c	/^typedef struct {$/;"	s	file:
__anon99e813050208	tests/modules/scan.c	/^typedef struct {$/;"	s	file:
__anon9c853d940103	deps/jemalloc/include/jemalloc/internal/mutex.h	/^typedef enum {$/;"	g
__anon9c853d94020a	deps/jemalloc/include/jemalloc/internal/mutex.h	/^	union {$/;"	u	struct:malloc_mutex_s
__anon9c853d940308	deps/jemalloc/include/jemalloc/internal/mutex.h	/^		struct {$/;"	s	union:malloc_mutex_s::__anon9c853d94020a
__anona01652f10103	src/geohash.h	/^typedef enum {$/;"	g
__anona01652f10208	src/geohash.h	/^typedef struct {$/;"	s
__anona01652f10308	src/geohash.h	/^typedef struct {$/;"	s
__anona01652f10408	src/geohash.h	/^typedef struct {$/;"	s
__anona01652f10508	src/geohash.h	/^typedef struct {$/;"	s
__anona01652f10608	src/geohash.h	/^typedef struct {$/;"	s
__anona01652f1070a	src/geohash.h	/^    union {$/;"	u	struct:__anona01652f10608
__anona01652f10808	src/geohash.h	/^        struct {$/;"	s	union:__anona01652f10608::__anona01652f1070a
__anona0eb805b010a	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	union {$/;"	u	struct:emitter_col_s
__anona3a73c770103	deps/lua/src/lua_cjson.c	/^typedef enum {$/;"	g	file:
__anona3a73c770208	deps/lua/src/lua_cjson.c	/^typedef struct {$/;"	s	file:
__anona3a73c770308	deps/lua/src/lua_cjson.c	/^typedef struct {$/;"	s	file:
__anona3a73c770408	deps/lua/src/lua_cjson.c	/^typedef struct {$/;"	s	file:
__anona3a73c77050a	deps/lua/src/lua_cjson.c	/^    union {$/;"	u	struct:__anona3a73c770408	file:
__anona52fc941010a	deps/lua/src/lobject.h	/^typedef union {$/;"	u
__anona52fc9410208	deps/lua/src/lobject.h	/^  struct {$/;"	s	union:TString
__anona52fc9410308	deps/lua/src/lobject.h	/^  struct {$/;"	s	union:Udata
__anona52fc941040a	deps/lua/src/lobject.h	/^  union {$/;"	u	struct:UpVal
__anona52fc9410508	deps/lua/src/lobject.h	/^    struct {  \/* double linked list (when open) *\/$/;"	s	union:UpVal::__anona52fc941040a
__anona52fc9410608	deps/lua/src/lobject.h	/^  struct {$/;"	s	union:TKey
__anona5c96ad4010a	deps/jemalloc/src/ckh.c	/^	union {$/;"	u	function:ckh_pointer_hash	file:
__anona6f175db0108	deps/hiredis/adapters/macosx.h	/^typedef struct {$/;"	s
__anona8387ea20103	deps/jemalloc/include/jemalloc/internal/extent_dss.h	/^typedef enum {$/;"	g
__anonab9ca1680108	deps/hiredis/test.c	/^    struct {$/;"	s	struct:config	file:
__anonab9ca1680208	deps/hiredis/test.c	/^    struct {$/;"	s	struct:config	file:
__anonab9ca1680308	deps/hiredis/test.c	/^    struct {$/;"	s	struct:config	file:
__anonabe626b20102	deps/jemalloc/msvc/test_threads/test_threads.cpp	/^    workers.emplace_back([tid=i]() {$/;"	f	function:test_threads	file:
__anonabe626b20202	deps/jemalloc/msvc/test_threads/test_threads.cpp	/^        thread t([&]() {$/;"	f	function:test_threads::__anonabe626b20102	file:
__anonad20ee0e0108	deps/hiredis/adapters/glib.h	/^{$/;"	s
__anonb26b3fca0103	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^typedef enum {$/;"	g
__anonb26b3fca0203	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^typedef enum {$/;"	g
__anonb26b3fca0308	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^typedef struct {$/;"	s
__anonb5a306e00103	deps/jemalloc/test/unit/stats_print.c	/^typedef enum {$/;"	g	file:
__anonb5a306e00208	deps/jemalloc/test/unit/stats_print.c	/^typedef struct {$/;"	s	file:
__anonb5a306e00303	deps/jemalloc/test/unit/stats_print.c	/^	enum {$/;"	g	function:parser_tokenize	file:
__anonb6066a3c010a	src/rio.h	/^    union {$/;"	u	struct:_rio
__anonb6066a3c0208	src/rio.h	/^        struct {$/;"	s	union:_rio::__anonb6066a3c010a
__anonb6066a3c0308	src/rio.h	/^        struct {$/;"	s	union:_rio::__anonb6066a3c010a
__anonb6066a3c0408	src/rio.h	/^        struct {$/;"	s	union:_rio::__anonb6066a3c010a
__anonb6066a3c0508	src/rio.h	/^        struct {$/;"	s	union:_rio::__anonb6066a3c010a
__anonb62c51600103	src/tls.c	/^typedef enum {$/;"	g	file:
__anonb9428d530108	tests/modules/blockedclient.c	/^typedef struct {$/;"	s	file:
__anonbbe6eb5d0108	src/childinfo.c	/^typedef struct {$/;"	s	file:
__anonbd9d9e9e0108	deps/lua/src/lundump.c	/^typedef struct {$/;"	s	file:
__anonc2210a4f0108	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^typedef struct {$/;"	s
__anonc2210a4f0203	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^typedef enum {$/;"	g
__anonc54a96eb0103	deps/lua/src/ltm.h	/^typedef enum {$/;"	g
__anonc5c0b6fc0108	tests/modules/datatype.c	/^typedef struct {$/;"	s	file:
__anonc6b2191e010a	src/bitops.c	/^    union {uint64_t u; int64_t i;} conv;$/;"	u	function:getSignedBitfield	file:
__anonc7e4cb99010a	deps/lua/src/lua_bit.c	/^typedef union {$/;"	u	file:
__anonc84e73e60103	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^typedef enum {$/;"	g
__anonc9623e3d0103	deps/jemalloc/test/include/test/test.h	/^typedef enum {$/;"	g
__anoncf2eac130108	src/db.c	/^    struct {$/;"	s	function:sortGetKeys	file:
__anond2fa50950108	deps/lua/src/lstrlib.c	/^  struct {$/;"	s	struct:MatchState	file:
__anond596bd1c0103	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^typedef enum {$/;"	g
__anond8df51160103	deps/jemalloc/src/extent.c	/^typedef enum {$/;"	g	file:
__anond8df51160203	deps/jemalloc/src/extent.c	/^typedef enum {$/;"	g	file:
__anondc84fe7f010a	deps/lua/src/lua_struct.c	/^static union {$/;"	u	file:
__anondffa78830108	deps/jemalloc/include/jemalloc/internal/ticker.h	/^typedef struct {$/;"	s
__anone52e44c70102	deps/jemalloc/src/jemalloc_cpp.cpp	/^operator new[](std::size_t size, const std::nothrow_t &) noexcept {$/;"	f	file:
__anone52e44c70202	deps/jemalloc/src/jemalloc_cpp.cpp	/^operator delete(void *ptr) noexcept {$/;"	f	file:
__anone52e44c70302	deps/jemalloc/src/jemalloc_cpp.cpp	/^operator delete[](void *ptr) noexcept {$/;"	f	file:
__anone52e44c70402	deps/jemalloc/src/jemalloc_cpp.cpp	/^operator delete(void *ptr, const std::nothrow_t &) noexcept {$/;"	f	file:
__anone52e44c70502	deps/jemalloc/src/jemalloc_cpp.cpp	/^void operator delete[](void *ptr, const std::nothrow_t &) noexcept {$/;"	f	file:
__anone52e44c70602	deps/jemalloc/src/jemalloc_cpp.cpp	/^operator delete(void *ptr, std::size_t size) noexcept {$/;"	f	file:
__anone52e44c70702	deps/jemalloc/src/jemalloc_cpp.cpp	/^void operator delete[](void *ptr, std::size_t size) noexcept {$/;"	f	file:
__anonedaaa5090103	deps/jemalloc/test/unit/hash.c	/^typedef enum {$/;"	g	file:
__anonf953c6cb0108	src/sha256.h	/^typedef struct {$/;"	s
__anonfe8af5de0108	deps/jemalloc/test/include/test/timer.h	/^typedef struct {$/;"	s
__arm64__	src/config.h	/^#define __arm64__$/;"	d
__arm__	src/config.h	/^#define __arm__$/;"	d
__assign_header	src/switchrealloc.c	/^int *__assign_header(int *ptr, int count, int size)$/;"	f	typeref:typename:int *
__attribute__	deps/hiredis/sds.h	/^#define __attribute__(/;"	d
__bool_true_false_are_defined	deps/jemalloc/include/msvc_compat/C99/stdbool.h	/^#define __bool_true_false_are_defined /;"	d
__cntvct	src/monotonic.c	/^static inline uint64_t __cntvct() {$/;"	f	typeref:typename:uint64_t	file:
__create_fd	src/switchrealloc.c	/^int __create_fd(int size)$/;"	f	typeref:typename:int
__create_fd_share	src/switchrealloc.c	/^int __create_fd_share(int size)$/;"	f	typeref:typename:int
__failed_tests	src/testhelp.h	/^int __failed_tests = 0;$/;"	v	typeref:typename:int
__free_hook	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_EXPORT void (*__free_hook)(void *ptr) = je_free;$/;"	v	typeref:typename:JEMALLOC_EXPORT void (*)(void * ptr)
__func__	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	/^#  define __func__ /;"	d
__go_to_head	src/switchrealloc.c	/^void *__go_to_head(void *ptr)$/;"	f	typeref:typename:void *
__go_to_size	src/switchrealloc.c	/^void *__go_to_size(void *ptr)$/;"	f	typeref:typename:void *
__malloc_hook	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_EXPORT void *(*__malloc_hook)(size_t size) = je_malloc;$/;"	v	typeref:typename:JEMALLOC_EXPORT void * (*)(size_t size)
__memalign_hook	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_EXPORT void *(*__memalign_hook)(size_t alignment, size_t size) =$/;"	v	typeref:typename:JEMALLOC_EXPORT void * (*)(size_t alignment,size_t size)
__quicklistCompress	src/quicklist.c	/^REDIS_STATIC void __quicklistCompress(const quicklist *quicklist,$/;"	f	typeref:typename:REDIS_STATIC void
__quicklistCompressNode	src/quicklist.c	/^REDIS_STATIC int __quicklistCompressNode(quicklistNode *node) {$/;"	f	typeref:typename:REDIS_STATIC int
__quicklistDecompressNode	src/quicklist.c	/^REDIS_STATIC int __quicklistDecompressNode(quicklistNode *node) {$/;"	f	typeref:typename:REDIS_STATIC int
__quicklistDelNode	src/quicklist.c	/^REDIS_STATIC void __quicklistDelNode(quicklist *quicklist,$/;"	f	typeref:typename:REDIS_STATIC void
__quicklistInsertNode	src/quicklist.c	/^REDIS_STATIC void __quicklistInsertNode(quicklist *quicklist,$/;"	f	typeref:typename:REDIS_STATIC void
__realloc_hook	deps/jemalloc/src/jemalloc.c	/^JEMALLOC_EXPORT void *(*__realloc_hook)(void *ptr, size_t size) = je_realloc;$/;"	v	typeref:typename:JEMALLOC_EXPORT void * (*)(void * ptr,size_t size)
__redisAppendCommand	deps/hiredis/hiredis.c	/^int __redisAppendCommand(redisContext *c, const char *cmd, size_t len) {$/;"	f	typeref:typename:int
__redisAsyncCommand	deps/hiredis/async.c	/^static int __redisAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const/;"	f	typeref:typename:int	file:
__redisAsyncCopyError	deps/hiredis/async.c	/^static void __redisAsyncCopyError(redisAsyncContext *ac) {$/;"	f	typeref:typename:void	file:
__redisAsyncDisconnect	deps/hiredis/async.c	/^void __redisAsyncDisconnect(redisAsyncContext *ac) {$/;"	f	typeref:typename:void
__redisAsyncFree	deps/hiredis/async.c	/^static void __redisAsyncFree(redisAsyncContext *ac) {$/;"	f	typeref:typename:void	file:
__redisAsyncHandleConnect	deps/hiredis/async.c	/^static int __redisAsyncHandleConnect(redisAsyncContext *ac) {$/;"	f	typeref:typename:int	file:
__redisAsyncHandleConnectFailure	deps/hiredis/async.c	/^static void __redisAsyncHandleConnectFailure(redisAsyncContext *ac) {$/;"	f	typeref:typename:void	file:
__redisBlockForReply	deps/hiredis/hiredis.c	/^static void *__redisBlockForReply(redisContext *c) {$/;"	f	typeref:typename:void *	file:
__redisGetSubscribeCallback	deps/hiredis/async.c	/^static int __redisGetSubscribeCallback(redisAsyncContext *ac, redisReply *reply, redisCallback */;"	f	typeref:typename:int	file:
__redisPushCallback	deps/hiredis/async.c	/^static int __redisPushCallback(redisCallbackList *list, redisCallback *source) {$/;"	f	typeref:typename:int	file:
__redisReaderSetError	deps/hiredis/read.c	/^static void __redisReaderSetError(redisReader *r, int type, const char *str) {$/;"	f	typeref:typename:void	file:
__redisReaderSetErrorOOM	deps/hiredis/read.c	/^static void __redisReaderSetErrorOOM(redisReader *r) {$/;"	f	typeref:typename:void	file:
__redisReaderSetErrorProtocolByte	deps/hiredis/read.c	/^static void __redisReaderSetErrorProtocolByte(redisReader *r, char byte) {$/;"	f	typeref:typename:void	file:
__redisRunCallback	deps/hiredis/async.c	/^static void __redisRunCallback(redisAsyncContext *ac, redisCallback *cb, redisReply *reply) {$/;"	f	typeref:typename:void	file:
__redisRunPushCallback	deps/hiredis/async.c	/^static void __redisRunPushCallback(redisAsyncContext *ac, redisReply *reply) {$/;"	f	typeref:typename:void	file:
__redisSetError	deps/hiredis/hiredis.c	/^void __redisSetError(redisContext *c, int type, const char *str) {$/;"	f	typeref:typename:void
__redisSetErrorFromErrno	deps/hiredis/net.c	/^static void __redisSetErrorFromErrno(redisContext *c, int type, const char *prefix) {$/;"	f	typeref:typename:void	file:
__redisShiftCallback	deps/hiredis/async.c	/^static int __redisShiftCallback(redisCallbackList *list, redisCallback *target) {$/;"	f	typeref:typename:int	file:
__sparc__	src/config.h	/^#define __sparc__$/;"	d
__str	src/zmalloc.h	/^#define __str(/;"	d
__test_num	src/testhelp.h	/^int __test_num = 0;$/;"	v	typeref:typename:int
__xstr	src/zmalloc.h	/^#define __xstr(/;"	d
__ziplistCascadeUpdate	src/ziplist.c	/^unsigned char *__ziplistCascadeUpdate(unsigned char *zl, unsigned char *p) {$/;"	f	typeref:typename:unsigned char *
__ziplistDelete	src/ziplist.c	/^unsigned char *__ziplistDelete(unsigned char *zl, unsigned char *p, unsigned int num) {$/;"	f	typeref:typename:unsigned char *
__ziplistInsert	src/ziplist.c	/^unsigned char *__ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned i/;"	f	typeref:typename:unsigned char *
_addReplyProtoToList	src/networking.c	/^void _addReplyProtoToList(client *c, const char *s, size_t len) {$/;"	f	typeref:typename:void
_addReplyToBuffer	src/networking.c	/^int _addReplyToBuffer(client *c, const char *s, size_t len) {$/;"	f	typeref:typename:int
_anetTcpServer	src/anet.c	/^static int _anetTcpServer(char *err, int port, char *bindaddr, int af, int backlog)$/;"	f	typeref:typename:int	file:
_buf	src/t_zset.c	/^    unsigned char _buf[32]; \/* Private buffer. *\/$/;"	m	struct:__anon6fce03460a08	typeref:typename:unsigned char[32]	file:
_calloc	src/switchrealloc.c	/^void *_calloc(size_t nitems, size_t size) \/\/Further look$/;"	f	typeref:typename:void *
_client	src/redis-benchmark.c	/^typedef struct _client {$/;"	s	file:
_crc64	src/crc64.c	/^uint64_t _crc64(uint_fast64_t crc, const void *in_data, const uint64_t len) {$/;"	f	typeref:typename:uint64_t
_dictClear	deps/hiredis/dict.c	/^static int _dictClear(dict *ht) {$/;"	f	typeref:typename:int	file:
_dictClear	src/dict.c	/^int _dictClear(dict *d, dictht *ht, void(callback)(void *)) {$/;"	f	typeref:typename:int
_dictExpand	src/dict.c	/^int _dictExpand(dict *d, unsigned long size, int* malloc_failed)$/;"	f	typeref:typename:int
_dictExpandIfNeeded	deps/hiredis/dict.c	/^static int _dictExpandIfNeeded(dict *ht) {$/;"	f	typeref:typename:int	file:
_dictExpandIfNeeded	src/dict.c	/^static int _dictExpandIfNeeded(dict *d)$/;"	f	typeref:typename:int	file:
_dictGetStatsHt	src/dict.c	/^size_t _dictGetStatsHt(char *buf, size_t bufsize, dictht *ht, int tableid) {$/;"	f	typeref:typename:size_t
_dictInit	deps/hiredis/dict.c	/^static int _dictInit(dict *ht, dictType *type, void *privDataPtr) {$/;"	f	typeref:typename:int	file:
_dictInit	src/dict.c	/^int _dictInit(dict *d, dictType *type,$/;"	f	typeref:typename:int
_dictKeyIndex	deps/hiredis/dict.c	/^static int _dictKeyIndex(dict *ht, const void *key) {$/;"	f	typeref:typename:int	file:
_dictKeyIndex	src/dict.c	/^static long _dictKeyIndex(dict *d, const void *key, uint64_t hash, dictEntry **existing)$/;"	f	typeref:typename:long	file:
_dictNextPower	deps/hiredis/dict.c	/^static unsigned long _dictNextPower(unsigned long size) {$/;"	f	typeref:typename:unsigned long	file:
_dictNextPower	src/dict.c	/^static unsigned long _dictNextPower(unsigned long size)$/;"	f	typeref:typename:unsigned long	file:
_dictRehashStep	src/dict.c	/^static void _dictRehashStep(dict *d) {$/;"	f	typeref:typename:void	file:
_dictReset	deps/hiredis/dict.c	/^static void _dictReset(dict *ht) {$/;"	f	typeref:typename:void	file:
_dictReset	src/dict.c	/^static void _dictReset(dictht *ht)$/;"	f	typeref:typename:void	file:
_free	src/switchrealloc.c	/^void _free(void *ptr)$/;"	f	typeref:typename:void
_hashZiplistEntryValidation	src/t_hash.c	/^static int _hashZiplistEntryValidation(unsigned char *p, void *userdata) {$/;"	f	typeref:typename:int	file:
_initWinsock	deps/hiredis/sockcompat.c	/^static int _initWinsock() {$/;"	f	typeref:typename:int	file:
_intsetGet	src/intset.c	/^static int64_t _intsetGet(intset *is, int pos) {$/;"	f	typeref:typename:int64_t	file:
_intsetGetEncoded	src/intset.c	/^static int64_t _intsetGetEncoded(intset *is, int pos, uint8_t enc) {$/;"	f	typeref:typename:int64_t	file:
_intsetSet	src/intset.c	/^static void _intsetSet(intset *is, int pos, int64_t value) {$/;"	f	typeref:typename:void	file:
_intsetValueEncoding	src/intset.c	/^static uint8_t _intsetValueEncoding(int64_t v) {$/;"	f	typeref:typename:uint8_t	file:
_iterset	src/t_zset.c	/^        union _iterset {$/;"	u	union:__anon6fce03460408::__anon6fce0346050a	file:
_iterzset	src/t_zset.c	/^        union _iterzset {$/;"	u	union:__anon6fce03460408::__anon6fce0346050a	file:
_itrprintr	src/quicklist.c	/^static int _itrprintr(quicklist *ql, int print, int forward) {$/;"	f	typeref:typename:int	file:
_malloc	src/switchrealloc.c	/^void *_malloc(size_t size)$/;"	f	typeref:typename:void *
_malloc_share	src/switchrealloc.c	/^void *_malloc_share(size_t size)$/;"	f	typeref:typename:void *
_malloc_thread_cleanup	deps/jemalloc/src/tsd.c	/^_malloc_thread_cleanup(void) {$/;"	f	typeref:typename:JEMALLOC_EXPORT void
_malloc_zone_t	deps/jemalloc/src/zone.c	/^typedef struct _malloc_zone_t {$/;"	s	file:
_next_fp	deps/hdr_histogram/hdr_histogram.h	/^    bool (* _next_fp)(struct hdr_iter* iter);$/;"	m	struct:hdr_iter	typeref:typename:bool (*)(struct hdr_iter * iter)
_pqsort	src/pqsort.c	/^_pqsort(void *a, size_t n, size_t es,$/;"	f	typeref:typename:void	file:
_ql_verify	src/quicklist.c	/^static int _ql_verify(quicklist *ql, uint32_t len, uint32_t count,$/;"	f	typeref:typename:int	file:
_quicklistBookmarkDelete	src/quicklist.c	/^void _quicklistBookmarkDelete(quicklist *ql, quicklistBookmark *bm) {$/;"	f	typeref:typename:void
_quicklistBookmarkFindByName	src/quicklist.c	/^quicklistBookmark *_quicklistBookmarkFindByName(quicklist *ql, const char *name) {$/;"	f	typeref:typename:quicklistBookmark *
_quicklistBookmarkFindByNode	src/quicklist.c	/^quicklistBookmark *_quicklistBookmarkFindByNode(quicklist *ql, quicklistNode *node) {$/;"	f	typeref:typename:quicklistBookmark *
_quicklistInsert	src/quicklist.c	/^REDIS_STATIC void _quicklistInsert(quicklist *quicklist, quicklistEntry *entry,$/;"	f	typeref:typename:REDIS_STATIC void
_quicklistInsertNodeAfter	src/quicklist.c	/^REDIS_STATIC void _quicklistInsertNodeAfter(quicklist *quicklist,$/;"	f	typeref:typename:REDIS_STATIC void
_quicklistInsertNodeBefore	src/quicklist.c	/^REDIS_STATIC void _quicklistInsertNodeBefore(quicklist *quicklist,$/;"	f	typeref:typename:REDIS_STATIC void
_quicklistMergeNodes	src/quicklist.c	/^REDIS_STATIC void _quicklistMergeNodes(quicklist *quicklist,$/;"	f	typeref:typename:REDIS_STATIC void
_quicklistNodeAllowInsert	src/quicklist.c	/^REDIS_STATIC int _quicklistNodeAllowInsert(const quicklistNode *node,$/;"	f	typeref:typename:REDIS_STATIC int
_quicklistNodeAllowMerge	src/quicklist.c	/^REDIS_STATIC int _quicklistNodeAllowMerge(const quicklistNode *a,$/;"	f	typeref:typename:REDIS_STATIC int
_quicklistNodeSizeMeetsOptimizationRequirement	src/quicklist.c	/^_quicklistNodeSizeMeetsOptimizationRequirement(const size_t sz,$/;"	f	typeref:typename:REDIS_STATIC int
_quicklistSaver	src/quicklist.c	/^REDIS_STATIC void *_quicklistSaver(unsigned char *data, unsigned int sz) {$/;"	f	typeref:typename:REDIS_STATIC void *
_quicklistSplitNode	src/quicklist.c	/^REDIS_STATIC quicklistNode *_quicklistSplitNode(quicklistNode *node, int offset,$/;"	f	typeref:typename:REDIS_STATIC quicklistNode *
_quicklistZiplistMerge	src/quicklist.c	/^REDIS_STATIC quicklistNode *_quicklistZiplistMerge(quicklist *quicklist,$/;"	f	typeref:typename:REDIS_STATIC quicklistNode *
_realloc	src/switchrealloc.c	/^void *_realloc(void *ptr, size_t size)$/;"	f	typeref:typename:void *
_realloc_share	src/switchrealloc.c	/^void *_realloc_share(void *ptr, size_t size)$/;"	f	typeref:typename:void *
_redisAssert	utils/hashtable/rehashing.c	/^void _redisAssert(char *x, char *y, int l) {$/;"	f	typeref:typename:void
_redisContextConnectTcp	deps/hiredis/net.c	/^static int _redisContextConnectTcp(redisContext *c, const char *addr, int port,$/;"	f	typeref:typename:int	file:
_redisSortObject	src/server.h	/^typedef struct _redisSortObject {$/;"	s
_redisSortOperation	src/server.h	/^typedef struct _redisSortOperation {$/;"	s
_rfds	src/ae_select.c	/^    fd_set _rfds, _wfds;$/;"	m	struct:aeApiState	typeref:typename:fd_set	file:
_rio	src/rio.h	/^struct _rio {$/;"	s
_sdsnewlen	src/sds.c	/^sds _sdsnewlen(const void *init, size_t initlen, int trymalloc) {$/;"	f	typeref:typename:sds
_serverAssert	src/debug.c	/^void _serverAssert(const char *estr, const char *file, int line) {$/;"	f	typeref:typename:void
_serverAssert	src/redis-benchmark.c	/^void _serverAssert(const char *estr, const char *file, int line) {$/;"	f	typeref:typename:void
_serverAssert	src/redis-cli.c	/^void _serverAssert(const char *estr, const char *file, int line) {$/;"	f	typeref:typename:void
_serverAssertPrintClientInfo	src/debug.c	/^void _serverAssertPrintClientInfo(const client *c) {$/;"	f	typeref:typename:void
_serverAssertPrintObject	src/debug.c	/^void _serverAssertPrintObject(const robj *o) {$/;"	f	typeref:typename:void
_serverAssertWithInfo	src/debug.c	/^void _serverAssertWithInfo(const client *c, const robj *o, const char *estr, const char *file, i/;"	f	typeref:typename:void
_serverLog	src/server.c	/^void _serverLog(int level, const char *fmt, ...) {$/;"	f	typeref:typename:void
_serverPanic	src/debug.c	/^void _serverPanic(const char *file, int line, const char *msg, ...) {$/;"	f	typeref:typename:void
_ssl_ctx	deps/hiredis/test.c	/^redisSSLContext *_ssl_ctx = NULL;$/;"	v	typeref:typename:redisSSLContext *
_tls_callback	deps/jemalloc/src/tsd.c	/^_tls_callback(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) {$/;"	f	typeref:typename:BOOL WINAPI	file:
_updateErrno	deps/hiredis/sockcompat.c	/^static void _updateErrno(int success) {$/;"	f	typeref:typename:void	file:
_wfds	src/ae_select.c	/^    fd_set _rfds, _wfds;$/;"	m	struct:aeApiState	typeref:typename:fd_set	file:
_wsaErrorToErrno	deps/hiredis/sockcompat.c	/^static int _wsaErrorToErrno(int err) {$/;"	f	typeref:typename:int	file:
_zsetZiplistValidateIntegrity	src/t_zset.c	/^static int _zsetZiplistValidateIntegrity(unsigned char *p, void *userdata) {$/;"	f	typeref:typename:int	file:
a	deps/lua/src/Makefile	/^a:	$(ALL_A)$/;"	t
a	src/rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	typeref:typename:uint32_t[3][3]	file:
a0	deps/jemalloc/src/jemalloc.c	/^static arena_t		*a0; \/* arenas[0]; read-only after initialization. *\/$/;"	v	typeref:typename:arena_t *	file:
a0dalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define a0dalloc /;"	d
a0dalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define a0dalloc /;"	d
a0dalloc	deps/jemalloc/src/jemalloc.c	/^a0dalloc(void *ptr) {$/;"	f	typeref:typename:void
a0ialloc	deps/jemalloc/src/jemalloc.c	/^a0ialloc(size_t size, bool zero, bool is_internal) {$/;"	f	typeref:typename:void *	file:
a0idalloc	deps/jemalloc/src/jemalloc.c	/^a0idalloc(void *ptr, bool is_internal) {$/;"	f	typeref:typename:void	file:
a0malloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define a0malloc /;"	d
a0malloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define a0malloc /;"	d
a0malloc	deps/jemalloc/src/jemalloc.c	/^a0malloc(size_t size) {$/;"	f	typeref:typename:void *
abAppend	deps/linenoise/linenoise.c	/^static void abAppend(struct abuf *ab, const char *s, int len) {$/;"	f	typeref:typename:void	file:
abFree	deps/linenoise/linenoise.c	/^static void abFree(struct abuf *ab) {$/;"	f	typeref:typename:void	file:
abInit	deps/linenoise/linenoise.c	/^static void abInit(struct abuf *ab) {$/;"	f	typeref:typename:void	file:
abortFailover	src/replication.c	/^void abortFailover(const char *err) {$/;"	f	typeref:typename:void
about	src/cluster.h	/^        clusterMsgDataFail about;$/;"	m	struct:clusterMsgData::__anon2cc7db540708	typeref:typename:clusterMsgDataFail
abs_index	deps/lua/src/lauxlib.c	/^#define abs_index(/;"	d	file:
abs_objroot	deps/jemalloc/Makefile	/^abs_objroot := \/home\/weikangweng\/Documents\/Thesis\/Redis\/redis-6.2.6\/deps\/jemalloc\/$/;"	m
abs_objroot	deps/jemalloc/Makefile.in	/^abs_objroot := @abs_objroot@$/;"	m
abs_srcroot	deps/jemalloc/Makefile	/^abs_srcroot := \/home\/weikangweng\/Documents\/Thesis\/Redis\/redis-6.2.6\/deps\/jemalloc\/$/;"	m
abs_srcroot	deps/jemalloc/Makefile.in	/^abs_srcroot := @abs_srcroot@$/;"	m
abuf	deps/linenoise/linenoise.c	/^struct abuf {$/;"	s	file:
ac	deps/hiredis/adapters/glib.h	/^    redisAsyncContext *ac;$/;"	m	struct:__anonad20ee0e0108	typeref:typename:redisAsyncContext *
accept	src/connection.h	/^    int (*accept)(struct connection *conn, ConnectionCallbackFunc accept_handler);$/;"	m	struct:ConnectionType	typeref:typename:int (*)(struct connection * conn,ConnectionCallbackFunc accept_handler)
acceptCommonHandler	src/networking.c	/^static void acceptCommonHandler(connection *conn, int flags, char *ip) {$/;"	f	typeref:typename:void	file:
acceptTLSHandler	src/networking.c	/^void acceptTLSHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	typeref:typename:void
acceptTcpHandler	src/networking.c	/^void acceptTcpHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	typeref:typename:void
acceptUnixHandler	src/networking.c	/^void acceptUnixHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	typeref:typename:void
access_entry	utils/lru/lfu-simulation.c	/^void access_entry(struct entry *e) {$/;"	f	typeref:typename:void
accum_atomic_zu	deps/jemalloc/src/ctl.c	/^accum_atomic_zu(atomic_zu_t *dst, atomic_zu_t *src) {$/;"	f	typeref:typename:void	file:
accumbytes	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t	accumbytes;$/;"	m	struct:prof_accum_s	typeref:typename:uint64_t
accumbytes	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t	accumbytes;$/;"	m	struct:prof_cnt_s	typeref:typename:uint64_t
accumobjs	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t	accumobjs;$/;"	m	struct:prof_cnt_s	typeref:typename:uint64_t
accurate	src/server.c	/^typedef int redisTestProc(int argc, char **argv, int accurate);$/;"	t	typeref:typename:int redisTestProc (int argc,char ** argv,int)	file:
aclCommand	src/acl.c	/^void aclCommand(client *c) {$/;"	f	typeref:typename:void
acl_filename	src/server.h	/^    char *acl_filename;           \/* ACL Users file. NULL if not configured. *\/$/;"	m	struct:redisServer	typeref:typename:char *
acl_pubsub_default	src/server.h	/^    int acl_pubsub_default;      \/* Default ACL pub\/sub channels flag *\/$/;"	m	struct:redisServer	typeref:typename:int
acl_pubsub_default_enum	src/config.c	/^configEnum acl_pubsub_default_enum[] = {$/;"	v	typeref:typename:configEnum[]
acllog_max_len	src/server.h	/^    unsigned long acllog_max_len; \/* Maximum length of the ACL LOG list. *\/$/;"	m	struct:redisServer	typeref:typename:unsigned long
acquire_gil	tests/modules/blockedclient.c	/^int acquire_gil(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
act_ping_time	src/sentinel.c	/^    mstime_t act_ping_time;   \/* Time at which the last pending ping (no pong$/;"	m	struct:instanceLink	typeref:typename:mstime_t	file:
active	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t active;$/;"	m	struct:ctl_stats_s	typeref:typename:size_t
active	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	bool			active;$/;"	m	struct:prof_tdata_s	typeref:typename:bool
active	src/module.c	/^    int active;$/;"	m	struct:RedisModuleKeyspaceSubscriber	typeref:typename:int	file:
active	src/scripting.c	/^    int active; \/* Are we debugging EVAL right now? *\/$/;"	m	struct:ldbState	typeref:typename:int	file:
activeDefragAlloc	src/defrag.c	/^void *activeDefragAlloc(void *ptr) {$/;"	f	typeref:typename:void *
activeDefragAlloc	src/defrag.c	/^void* activeDefragAlloc(void *ptr) {$/;"	f	typeref:typename:void *
activeDefragCycle	src/defrag.c	/^void activeDefragCycle(void) {$/;"	f	typeref:typename:void
activeDefragList	src/defrag.c	/^long activeDefragList(list *l, int val_type) {$/;"	f	typeref:typename:long
activeDefragQuickListNode	src/defrag.c	/^long activeDefragQuickListNode(quicklist *ql, quicklistNode **node_ref) {$/;"	f	typeref:typename:long
activeDefragQuickListNodes	src/defrag.c	/^long activeDefragQuickListNodes(quicklist *ql) {$/;"	f	typeref:typename:long
activeDefragSds	src/defrag.c	/^sds activeDefragSds(sds sdsptr) {$/;"	f	typeref:typename:sds
activeDefragSdsDict	src/defrag.c	/^long activeDefragSdsDict(dict* d, int val_type) {$/;"	f	typeref:typename:long
activeDefragSdsListAndDict	src/defrag.c	/^long activeDefragSdsListAndDict(list *l, dict *d, int dict_val_type) {$/;"	f	typeref:typename:long
activeDefragStringOb	src/defrag.c	/^robj *activeDefragStringOb(robj *ob, long *defragged) {$/;"	f	typeref:typename:robj *
activeDefragStringOb	src/defrag.c	/^robj *activeDefragStringOb(robj* ob, long *defragged) {$/;"	f	typeref:typename:robj *
activeDefragZsetEntry	src/defrag.c	/^long activeDefragZsetEntry(zset *zs, dictEntry *de) {$/;"	f	typeref:typename:long
activeExpireCycle	src/expire.c	/^void activeExpireCycle(int type) {$/;"	f	typeref:typename:void
activeExpireCycleTryExpire	src/expire.c	/^int activeExpireCycleTryExpire(redisDb *db, dictEntry *de, long long now) {$/;"	f	typeref:typename:int
active_defrag_cycle_max	src/server.h	/^    int active_defrag_cycle_max;       \/* maximal effort for defrag in CPU percentage *\/$/;"	m	struct:redisServer	typeref:typename:int
active_defrag_cycle_min	src/server.h	/^    int active_defrag_cycle_min;       \/* minimal effort for defrag in CPU percentage *\/$/;"	m	struct:redisServer	typeref:typename:int
active_defrag_enabled	src/server.h	/^    int active_defrag_enabled;$/;"	m	struct:redisServer	typeref:typename:int
active_defrag_ignore_bytes	src/server.h	/^    size_t active_defrag_ignore_bytes; \/* minimum amount of fragmentation waste to start active/;"	m	struct:redisServer	typeref:typename:size_t
active_defrag_max_scan_fields	src/server.h	/^    unsigned long active_defrag_max_scan_fields; \/* maximum number of fields of set\/hash\/zset/;"	m	struct:redisServer	typeref:typename:unsigned long
active_defrag_running	src/server.h	/^    int active_defrag_running;  \/* Active defragmentation running (holds current scan aggressiv/;"	m	struct:redisServer	typeref:typename:int
active_defrag_threshold_lower	src/server.h	/^    int active_defrag_threshold_lower; \/* minimum percentage of fragmentation to start active d/;"	m	struct:redisServer	typeref:typename:int
active_defrag_threshold_upper	src/server.h	/^    int active_defrag_threshold_upper; \/* maximum percentage of fragmentation at which we use m/;"	m	struct:redisServer	typeref:typename:int
active_expire_effort	src/server.h	/^    int active_expire_effort;       \/* From 1 (default) to 10, active effort. *\/$/;"	m	struct:redisServer	typeref:typename:int
active_expire_enabled	src/server.h	/^    int active_expire_enabled;      \/* Can be disabled for testing purposes. *\/$/;"	m	struct:redisServer	typeref:typename:int
activerehashing	src/server.h	/^    int activerehashing;        \/* Incremental rehash in serverCron() *\/$/;"	m	struct:redisServer	typeref:typename:int
actvar	deps/lua/src/lparser.h	/^  unsigned short actvar[LUAI_MAXVARS];  \/* declared-variable stack *\/$/;"	m	struct:FuncState	typeref:typename:unsigned short[]
addACLLogEntry	src/acl.c	/^void addACLLogEntry(client *c, int reason, int argpos, sds username) {$/;"	f	typeref:typename:void
addClientToTimeoutTable	src/timeout.c	/^void addClientToTimeoutTable(client *c) {$/;"	f	typeref:typename:void
addClusterNode	src/redis-benchmark.c	/^static clusterNode **addClusterNode(clusterNode *node) {$/;"	f	typeref:typename:clusterNode **	file:
addEventMask	src/ae_kqueue.c	/^static inline void addEventMask(char *eventsMask, int fd, int mask) {$/;"	f	typeref:typename:void	file:
addHashFieldToReply	src/t_hash.c	/^static void addHashFieldToReply(client *c, robj *o, sds field) {$/;"	f	typeref:typename:void	file:
addHashIteratorCursorToReply	src/t_hash.c	/^static void addHashIteratorCursorToReply(client *c, hashTypeIterator *hi, int what) {$/;"	f	typeref:typename:void	file:
addListRangeReply	src/t_list.c	/^void addListRangeReply(client *c, robj *o, long start, long end, int reverse) {$/;"	f	typeref:typename:void
addNodeReplyForClusterSlot	src/cluster.c	/^void addNodeReplyForClusterSlot(client *c, clusterNode *node, int start_slot, int end_slot) {$/;"	f	typeref:typename:void
addRead	deps/hiredis/adapters/qt.h	/^        void addRead() {$/;"	f	class:RedisQtAdapter	typeref:typename:void
addRead	deps/hiredis/async.h	/^        void (*addRead)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon89b0a8ab0108	typeref:typename:void (*)(void * privdata)
addReply	src/networking.c	/^void addReply(client *c, robj *obj) {$/;"	f	typeref:typename:void
addReplyAggregateLen	src/networking.c	/^void addReplyAggregateLen(client *c, long length, int prefix) {$/;"	f	typeref:typename:void
addReplyArrayLen	src/networking.c	/^void addReplyArrayLen(client *c, long length) {$/;"	f	typeref:typename:void
addReplyAttributeLen	src/networking.c	/^void addReplyAttributeLen(client *c, long length) {$/;"	f	typeref:typename:void
addReplyBigNum	src/networking.c	/^void addReplyBigNum(client *c, const char* num, size_t len) {$/;"	f	typeref:typename:void
addReplyBool	src/networking.c	/^void addReplyBool(client *c, int b) {$/;"	f	typeref:typename:void
addReplyBulk	src/networking.c	/^void addReplyBulk(client *c, robj *obj) {$/;"	f	typeref:typename:void
addReplyBulkCBuffer	src/networking.c	/^void addReplyBulkCBuffer(client *c, const void *p, size_t len) {$/;"	f	typeref:typename:void
addReplyBulkCString	src/networking.c	/^void addReplyBulkCString(client *c, const char *s) {$/;"	f	typeref:typename:void
addReplyBulkLen	src/networking.c	/^void addReplyBulkLen(client *c, robj *obj) {$/;"	f	typeref:typename:void
addReplyBulkLongLong	src/networking.c	/^void addReplyBulkLongLong(client *c, long long ll) {$/;"	f	typeref:typename:void
addReplyBulkSds	src/networking.c	/^void addReplyBulkSds(client *c, sds s)  {$/;"	f	typeref:typename:void
addReplyCommand	src/server.c	/^void addReplyCommand(client *c, struct redisCommand *cmd) {$/;"	f	typeref:typename:void
addReplyCommandCategories	src/acl.c	/^void addReplyCommandCategories(client *c, struct redisCommand *cmd) {$/;"	f	typeref:typename:void
addReplyCommandFlag	src/server.c	/^int addReplyCommandFlag(client *c, struct redisCommand *cmd, int f, char *reply) {$/;"	f	typeref:typename:int
addReplyDeferredLen	src/networking.c	/^void *addReplyDeferredLen(client *c) {$/;"	f	typeref:typename:void *
addReplyDictOfRedisInstances	src/sentinel.c	/^void addReplyDictOfRedisInstances(client *c, dict *instances) {$/;"	f	typeref:typename:void
addReplyDouble	src/networking.c	/^void addReplyDouble(client *c, double d) {$/;"	f	typeref:typename:void
addReplyDoubleDistance	src/geo.c	/^void addReplyDoubleDistance(client *c, double d) {$/;"	f	typeref:typename:void
addReplyError	src/networking.c	/^void addReplyError(client *c, const char *err) {$/;"	f	typeref:typename:void
addReplyErrorFormat	src/networking.c	/^void addReplyErrorFormat(client *c, const char *fmt, ...) {$/;"	f	typeref:typename:void
addReplyErrorLength	src/networking.c	/^void addReplyErrorLength(client *c, const char *s, size_t len) {$/;"	f	typeref:typename:void
addReplyErrorObject	src/networking.c	/^void addReplyErrorObject(client *c, robj *err) {$/;"	f	typeref:typename:void
addReplyErrorSds	src/networking.c	/^void addReplyErrorSds(client *c, sds err) {$/;"	f	typeref:typename:void
addReplyGopherItem	src/gopher.c	/^void addReplyGopherItem(client *c, const char *type, const char *descr,$/;"	f	typeref:typename:void
addReplyHelp	src/networking.c	/^void addReplyHelp(client *c, const char **help) {$/;"	f	typeref:typename:void
addReplyHumanLongDouble	src/networking.c	/^void addReplyHumanLongDouble(client *c, long double d) {$/;"	f	typeref:typename:void
addReplyLoadedModules	src/module.c	/^void addReplyLoadedModules(client *c) {$/;"	f	typeref:typename:void
addReplyLongLong	src/networking.c	/^void addReplyLongLong(client *c, long long ll) {$/;"	f	typeref:typename:void
addReplyLongLongWithPrefix	src/networking.c	/^void addReplyLongLongWithPrefix(client *c, long long ll, char prefix) {$/;"	f	typeref:typename:void
addReplyMapLen	src/networking.c	/^void addReplyMapLen(client *c, long length) {$/;"	f	typeref:typename:void
addReplyNull	src/networking.c	/^void addReplyNull(client *c) {$/;"	f	typeref:typename:void
addReplyNullArray	src/networking.c	/^void addReplyNullArray(client *c) {$/;"	f	typeref:typename:void
addReplyProto	src/networking.c	/^void addReplyProto(client *c, const char *s, size_t len) {$/;"	f	typeref:typename:void
addReplyPubsubMessage	src/pubsub.c	/^void addReplyPubsubMessage(client *c, robj *channel, robj *msg) {$/;"	f	typeref:typename:void
addReplyPubsubPatMessage	src/pubsub.c	/^void addReplyPubsubPatMessage(client *c, robj *pat, robj *channel, robj *msg) {$/;"	f	typeref:typename:void
addReplyPubsubPatSubscribed	src/pubsub.c	/^void addReplyPubsubPatSubscribed(client *c, robj *pattern) {$/;"	f	typeref:typename:void
addReplyPubsubPatUnsubscribed	src/pubsub.c	/^void addReplyPubsubPatUnsubscribed(client *c, robj *pattern) {$/;"	f	typeref:typename:void
addReplyPubsubSubscribed	src/pubsub.c	/^void addReplyPubsubSubscribed(client *c, robj *channel) {$/;"	f	typeref:typename:void
addReplyPubsubUnsubscribed	src/pubsub.c	/^void addReplyPubsubUnsubscribed(client *c, robj *channel) {$/;"	f	typeref:typename:void
addReplyPushLen	src/networking.c	/^void addReplyPushLen(client *c, long length) {$/;"	f	typeref:typename:void
addReplyReplicationBacklog	src/replication.c	/^long long addReplyReplicationBacklog(client *c, long long offset) {$/;"	f	typeref:typename:long long
addReplySds	src/networking.c	/^void addReplySds(client *c, sds s) {$/;"	f	typeref:typename:void
addReplySentinelRedisInstance	src/sentinel.c	/^void addReplySentinelRedisInstance(client *c, sentinelRedisInstance *ri) {$/;"	f	typeref:typename:void
addReplySetLen	src/networking.c	/^void addReplySetLen(client *c, long length) {$/;"	f	typeref:typename:void
addReplyStatus	src/networking.c	/^void addReplyStatus(client *c, const char *status) {$/;"	f	typeref:typename:void
addReplyStatusFormat	src/networking.c	/^void addReplyStatusFormat(client *c, const char *fmt, ...) {$/;"	f	typeref:typename:void
addReplyStatusLength	src/networking.c	/^void addReplyStatusLength(client *c, const char *s, size_t len) {$/;"	f	typeref:typename:void
addReplyStreamID	src/t_stream.c	/^void addReplyStreamID(client *c, streamID *id) {$/;"	f	typeref:typename:void
addReplySubcommandSyntaxError	src/networking.c	/^void addReplySubcommandSyntaxError(client *c) {$/;"	f	typeref:typename:void
addReplyVerbatim	src/networking.c	/^void addReplyVerbatim(client *c, const char *s, size_t len, const char *ext) {$/;"	f	typeref:typename:void
addWrite	deps/hiredis/adapters/qt.h	/^        void addWrite() {$/;"	f	class:RedisQtAdapter	typeref:typename:void
addWrite	deps/hiredis/async.h	/^        void (*addWrite)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon89b0a8ab0108	typeref:typename:void (*)(void * privdata)
add_s	deps/lua/src/lstrlib.c	/^static void add_s (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	typeref:typename:void	file:
add_value	deps/lua/src/lstrlib.c	/^static void add_value (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	typeref:typename:void	file:
addfield	deps/lua/src/ltablib.c	/^static void addfield (lua_State *L, luaL_Buffer *b, int i) {$/;"	f	typeref:typename:void	file:
addinfo	deps/lua/src/ldebug.c	/^static void addinfo (lua_State *L, const char *msg) {$/;"	f	typeref:typename:void	file:
addintlen	deps/lua/src/lstrlib.c	/^static void addintlen (char *form) {$/;"	f	typeref:typename:void	file:
addk	deps/lua/src/lcode.c	/^static int addk (FuncState *fs, TValue *k, TValue *v) {$/;"	f	typeref:typename:int	file:
addquoted	deps/lua/src/lstrlib.c	/^static void addquoted (lua_State *L, luaL_Buffer *b, int arg) {$/;"	f	typeref:typename:void	file:
addr	src/redismodule.h	/^    char addr[46];          \/* IPv4 or IPv6 address. *\/$/;"	m	struct:RedisModuleClientInfo	typeref:typename:char[46]
addr	src/sentinel.c	/^    sentinelAddr *addr; \/* Master host. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:sentinelAddr *	file:
address	deps/jemalloc/src/zone.c	/^	vm_address_t address;$/;"	m	struct:__anon94e9fb9a0108	typeref:typename:vm_address_t	file:
addrlen	deps/hiredis/async.h	/^    size_t addrlen;$/;"	m	struct:redisAsyncContext	typeref:typename:size_t
addrlen	deps/hiredis/hiredis.h	/^    size_t addrlen;$/;"	m	struct:redisContext	typeref:typename:size_t
adjustOpenFilesLimit	src/server.c	/^void adjustOpenFilesLimit(void) {$/;"	f	typeref:typename:void
adjust_assign	deps/lua/src/lparser.c	/^static void adjust_assign (LexState *ls, int nvars, int nexps, expdesc *e) {$/;"	f	typeref:typename:void	file:
adjust_varargs	deps/lua/src/ldo.c	/^static StkId adjust_varargs (lua_State *L, Proto *p, int actual) {$/;"	f	typeref:typename:StkId	file:
adjustlocalvars	deps/lua/src/lparser.c	/^static void adjustlocalvars (LexState *ls, int nvars) {$/;"	f	typeref:typename:void	file:
adjustresults	deps/lua/src/lapi.c	/^#define adjustresults(/;"	d	file:
adjuststack	deps/lua/src/lauxlib.c	/^static void adjuststack (luaL_Buffer *B) {$/;"	f	typeref:typename:void	file:
aeApiAddEvent	src/ae_epoll.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	typeref:typename:int	file:
aeApiAddEvent	src/ae_evport.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	typeref:typename:int	file:
aeApiAddEvent	src/ae_kqueue.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	typeref:typename:int	file:
aeApiAddEvent	src/ae_select.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	typeref:typename:int	file:
aeApiAssociate	src/ae_evport.c	/^static int aeApiAssociate(const char *where, int portfd, int fd, int mask) {$/;"	f	typeref:typename:int	file:
aeApiCreate	src/ae_epoll.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	typeref:typename:int	file:
aeApiCreate	src/ae_evport.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	typeref:typename:int	file:
aeApiCreate	src/ae_kqueue.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	typeref:typename:int	file:
aeApiCreate	src/ae_select.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	typeref:typename:int	file:
aeApiDelEvent	src/ae_epoll.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int delmask) {$/;"	f	typeref:typename:void	file:
aeApiDelEvent	src/ae_evport.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	typeref:typename:void	file:
aeApiDelEvent	src/ae_kqueue.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	typeref:typename:void	file:
aeApiDelEvent	src/ae_select.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	typeref:typename:void	file:
aeApiFree	src/ae_epoll.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	typeref:typename:void	file:
aeApiFree	src/ae_evport.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	typeref:typename:void	file:
aeApiFree	src/ae_kqueue.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	typeref:typename:void	file:
aeApiFree	src/ae_select.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	typeref:typename:void	file:
aeApiLookupPending	src/ae_evport.c	/^static int aeApiLookupPending(aeApiState *state, int fd) {$/;"	f	typeref:typename:int	file:
aeApiName	src/ae_epoll.c	/^static char *aeApiName(void) {$/;"	f	typeref:typename:char *	file:
aeApiName	src/ae_evport.c	/^static char *aeApiName(void) {$/;"	f	typeref:typename:char *	file:
aeApiName	src/ae_kqueue.c	/^static char *aeApiName(void) {$/;"	f	typeref:typename:char *	file:
aeApiName	src/ae_select.c	/^static char *aeApiName(void) {$/;"	f	typeref:typename:char *	file:
aeApiPoll	src/ae_epoll.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	typeref:typename:int	file:
aeApiPoll	src/ae_evport.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	typeref:typename:int	file:
aeApiPoll	src/ae_kqueue.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	typeref:typename:int	file:
aeApiPoll	src/ae_select.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	typeref:typename:int	file:
aeApiResize	src/ae_epoll.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	typeref:typename:int	file:
aeApiResize	src/ae_evport.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	typeref:typename:int	file:
aeApiResize	src/ae_kqueue.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	typeref:typename:int	file:
aeApiResize	src/ae_select.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	typeref:typename:int	file:
aeApiState	src/ae_epoll.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	src/ae_epoll.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeApiState	src/ae_evport.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	src/ae_evport.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeApiState	src/ae_kqueue.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	src/ae_kqueue.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeApiState	src/ae_select.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	src/ae_select.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeCreateEventLoop	src/ae.c	/^aeEventLoop *aeCreateEventLoop(int setsize) {$/;"	f	typeref:typename:aeEventLoop *
aeCreateFileEvent	src/ae.c	/^int aeCreateFileEvent(aeEventLoop *eventLoop, int fd, int mask,$/;"	f	typeref:typename:int
aeCreateTimeEvent	src/ae.c	/^long long aeCreateTimeEvent(aeEventLoop *eventLoop, long long milliseconds,$/;"	f	typeref:typename:long long
aeDeleteEventLoop	src/ae.c	/^void aeDeleteEventLoop(aeEventLoop *eventLoop) {$/;"	f	typeref:typename:void
aeDeleteFileEvent	src/ae.c	/^void aeDeleteFileEvent(aeEventLoop *eventLoop, int fd, int mask)$/;"	f	typeref:typename:void
aeDeleteTimeEvent	src/ae.c	/^int aeDeleteTimeEvent(aeEventLoop *eventLoop, long long id)$/;"	f	typeref:typename:int
aeEventLoop	src/ae.h	/^typedef struct aeEventLoop {$/;"	s
aeEventLoop	src/ae.h	/^} aeEventLoop;$/;"	t	typeref:struct:aeEventLoop
aeFileEvent	src/ae.h	/^typedef struct aeFileEvent {$/;"	s
aeFileEvent	src/ae.h	/^} aeFileEvent;$/;"	t	typeref:struct:aeFileEvent
aeFiredEvent	src/ae.h	/^typedef struct aeFiredEvent {$/;"	s
aeFiredEvent	src/ae.h	/^} aeFiredEvent;$/;"	t	typeref:struct:aeFiredEvent
aeGetApiName	src/ae.c	/^char *aeGetApiName(void) {$/;"	f	typeref:typename:char *
aeGetFileEvents	src/ae.c	/^int aeGetFileEvents(aeEventLoop *eventLoop, int fd) {$/;"	f	typeref:typename:int
aeGetSetSize	src/ae.c	/^int aeGetSetSize(aeEventLoop *eventLoop) {$/;"	f	typeref:typename:int
aeMain	src/ae.c	/^void aeMain(aeEventLoop *eventLoop) {$/;"	f	typeref:typename:void
aeProcessEvents	src/ae.c	/^int aeProcessEvents(aeEventLoop *eventLoop, int flags)$/;"	f	typeref:typename:int
aeResizeSetSize	src/ae.c	/^int aeResizeSetSize(aeEventLoop *eventLoop, int setsize) {$/;"	f	typeref:typename:int
aeSetAfterSleepProc	src/ae.c	/^void aeSetAfterSleepProc(aeEventLoop *eventLoop, aeBeforeSleepProc *aftersleep) {$/;"	f	typeref:typename:void
aeSetBeforeSleepProc	src/ae.c	/^void aeSetBeforeSleepProc(aeEventLoop *eventLoop, aeBeforeSleepProc *beforesleep) {$/;"	f	typeref:typename:void
aeSetDontWait	src/ae.c	/^void aeSetDontWait(aeEventLoop *eventLoop, int noWait) {$/;"	f	typeref:typename:void
aeStop	src/ae.c	/^void aeStop(aeEventLoop *eventLoop) {$/;"	f	typeref:typename:void
aeTimeEvent	src/ae.h	/^typedef struct aeTimeEvent {$/;"	s
aeTimeEvent	src/ae.h	/^} aeTimeEvent;$/;"	t	typeref:struct:aeTimeEvent
aeTimer	src/module.c	/^long long aeTimer = -1; \/* Main event loop (ae.c) timer identifier. *\/$/;"	v	typeref:typename:long long
aeWait	src/ae.c	/^int aeWait(int fd, int mask, long long milliseconds) {$/;"	f	typeref:typename:int
ae_handler	src/connection.h	/^    void (*ae_handler)(struct aeEventLoop *el, int fd, void *clientData, int mask);$/;"	m	struct:ConnectionType	typeref:typename:void (*)(struct aeEventLoop * el,int fd,void * clientData,int mask)
afterErrorReply	src/networking.c	/^void afterErrorReply(client *c, const char *s, size_t len) {$/;"	f	typeref:typename:void
afterPropagateExec	src/multi.c	/^void afterPropagateExec() {$/;"	f	typeref:typename:void
afterSleep	src/server.c	/^void afterSleep(struct aeEventLoop *eventLoop) {$/;"	f	typeref:typename:void
after_str	tests/modules/testrdb.c	/^RedisModuleString *after_str = NULL;$/;"	v	typeref:typename:RedisModuleString *
aftersleep	src/ae.h	/^    aeBeforeSleepProc *aftersleep;$/;"	m	struct:aeEventLoop	typeref:typename:aeBeforeSleepProc *
aix	deps/lua/src/Makefile	/^aix:$/;"	t
alias	src/config.c	/^    const char *alias; \/* An alias that can also be used for this config *\/$/;"	m	struct:standardConfig	typeref:typename:const char *	file:
align	deps/lua/src/lua_struct.c	/^  int align;$/;"	m	struct:Header	typeref:typename:int	file:
aligned_alloc	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define aligned_alloc /;"	d
aligned_alloc	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define aligned_alloc /;"	d
aligned_alloc	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define aligned_alloc /;"	d
alignment	deps/jemalloc/src/jemalloc.c	/^	size_t alignment;$/;"	m	struct:dynamic_opts_s	typeref:typename:size_t	file:
all	deps/hiredis/Makefile	/^all: $(DYLIBNAME) $(STLIBNAME) hiredis-test $(PKGCONFNAME)$/;"	t
all	deps/hiredis/Makefile	/^all: $(SSL_DYLIBNAME) $(SSL_STLIBNAME) $(SSL_PKGCONFNAME)$/;"	t
all	deps/jemalloc/Makefile	/^all: build_lib$/;"	t
all	deps/jemalloc/Makefile.in	/^all: build_lib$/;"	t
all	deps/lua/Makefile	/^all:	$(PLAT)$/;"	t
all	deps/lua/src/Makefile	/^all:	$(ALL_T)$/;"	t
all	src/Makefile	/^all: $(REDIS_SERVER_NAME) $(REDIS_SENTINEL_NAME) $(REDIS_CLI_NAME) $(REDIS_BENCHMARK_NAME) $(RED/;"	t
all	src/modules/Makefile	/^all: helloworld.so hellotype.so helloblock.so hellocluster.so hellotimer.so hellodict.so helloho/;"	t
all	tests/modules/Makefile	/^all: $(TEST_MODULES)$/;"	t
allPersistenceDisabled	src/server.c	/^int allPersistenceDisabled(void) {$/;"	f	typeref:typename:int
all_time_high	src/latency.h	/^    uint32_t all_time_high; \/* Absolute max observed since latest reset. *\/$/;"	m	struct:latencyStats	typeref:typename:uint32_t
all_values_iter_next	deps/hdr_histogram/hdr_histogram.c	/^static bool all_values_iter_next(struct hdr_iter* iter)$/;"	f	typeref:typename:bool	file:
alloc	deps/hiredis/sds.h	/^    uint16_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:hisdshdr16	typeref:typename:uint16_t
alloc	deps/hiredis/sds.h	/^    uint32_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:hisdshdr32	typeref:typename:uint32_t
alloc	deps/hiredis/sds.h	/^    uint64_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:hisdshdr64	typeref:typename:uint64_t
alloc	deps/hiredis/sds.h	/^    uint8_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:hisdshdr8	typeref:typename:uint8_t
alloc	deps/jemalloc/include/jemalloc/jemalloc.h	/^	extent_alloc_t		*alloc;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_alloc_t *
alloc	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_alloc_t		*alloc;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_alloc_t *
alloc	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^	extent_alloc_t		*alloc;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_alloc_t *	file:
alloc	src/redis-cli.c	/^    clusterManagerNode **alloc; \/* Pointer to the allocated memory *\/$/;"	m	struct:clusterManagerNodeArray	typeref:typename:clusterManagerNode **	file:
alloc	src/sds.h	/^    uint16_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr16	typeref:typename:uint16_t
alloc	src/sds.h	/^    uint32_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr32	typeref:typename:uint32_t
alloc	src/sds.h	/^    uint64_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr64	typeref:typename:uint64_t
alloc	src/sds.h	/^    uint8_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr8	typeref:typename:uint8_t
alloc.o	deps/hiredis/Makefile	/^alloc.o: alloc.c fmacros.h alloc.h$/;"	t
alloc_ctx_s	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^struct alloc_ctx_s {$/;"	s
alloc_ctx_t	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^typedef struct alloc_ctx_s alloc_ctx_t;$/;"	t	typeref:struct:alloc_ctx_s
alloc_from_permuted_backtrace	deps/jemalloc/test/unit/prof_accum.c	/^alloc_from_permuted_backtrace(unsigned thd_ind, unsigned iteration) {$/;"	f	typeref:typename:void *	file:
alloca	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^#    define alloca /;"	d
allocated	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	size_t		allocated;$/;"	m	struct:base_s	typeref:typename:size_t
allocated	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t allocated;$/;"	m	struct:ctl_stats_s	typeref:typename:size_t
allocated_large	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	atomic_zu_t		allocated_large; \/* Derived. *\/$/;"	m	struct:arena_stats_s	typeref:typename:atomic_zu_t
allocated_small	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t allocated_small;$/;"	m	struct:ctl_arena_stats_s	typeref:typename:size_t
allocator_active	src/server.h	/^    size_t allocator_active;$/;"	m	struct:malloc_stats	typeref:typename:size_t
allocator_allocated	src/server.h	/^    size_t allocator_allocated;$/;"	m	struct:malloc_stats	typeref:typename:size_t
allocator_frag	src/server.h	/^    float allocator_frag;$/;"	m	struct:redisMemOverhead	typeref:typename:float
allocator_frag_bytes	src/server.h	/^    ssize_t allocator_frag_bytes;$/;"	m	struct:redisMemOverhead	typeref:typename:ssize_t
allocator_resident	src/server.h	/^    size_t allocator_resident;$/;"	m	struct:malloc_stats	typeref:typename:size_t
allocator_rss	src/server.h	/^    float allocator_rss;$/;"	m	struct:redisMemOverhead	typeref:typename:float
allocator_rss_bytes	src/server.h	/^    ssize_t allocator_rss_bytes;$/;"	m	struct:redisMemOverhead	typeref:typename:ssize_t
allowed_commands	src/server.h	/^    uint64_t allowed_commands[USER_COMMAND_BITS_COUNT\/64];$/;"	m	struct:__anon3ef696e90408	typeref:typename:uint64_t[]
allowed_subcommands	src/server.h	/^    sds **allowed_subcommands;$/;"	m	struct:__anon3ef696e90408	typeref:typename:sds **
allowhook	deps/lua/src/lstate.h	/^  lu_byte allowhook;$/;"	m	struct:lua_State	typeref:typename:lu_byte
already_expired	src/redis-check-rdb.c	/^    unsigned long already_expired;  \/* Number of keys already expired. *\/$/;"	m	struct:__anon818955940108	typeref:typename:unsigned long	file:
alsoPropagate	src/server.c	/^void alsoPropagate(struct redisCommand *cmd, int dbid, robj **argv, int argc,$/;"	f	typeref:typename:void
also_propagate	src/server.h	/^    redisOpArray also_propagate;    \/* Additional command to propagate. *\/$/;"	m	struct:redisServer	typeref:typename:redisOpArray
always_show_logo	src/server.h	/^    int always_show_logo;       \/* Show logo even for non-stdout logging. *\/$/;"	m	struct:redisServer	typeref:typename:int
amqueue	src/module.c	/^    struct AutoMemEntry *amqueue;   \/* Auto memory queue of objects to free. *\/$/;"	m	struct:RedisModuleCtx	typeref:struct:AutoMemEntry *	file:
amqueue_len	src/module.c	/^    int amqueue_len;                \/* Number of slots in amqueue. *\/$/;"	m	struct:RedisModuleCtx	typeref:typename:int	file:
amqueue_used	src/module.c	/^    int amqueue_used;               \/* Number of used slots in amqueue. *\/$/;"	m	struct:RedisModuleCtx	typeref:typename:int	file:
analyzeLatencyForEvent	src/latency.c	/^void analyzeLatencyForEvent(char *event, struct latencyStats *ls) {$/;"	f	typeref:typename:void
anchor_token	deps/lua/src/lparser.c	/^static void anchor_token (LexState *ls) {$/;"	f	typeref:typename:void	file:
anetBlock	src/anet.c	/^int anetBlock(char *err, int fd) {$/;"	f	typeref:typename:int
anetCloexec	src/anet.c	/^int anetCloexec(int fd) {$/;"	f	typeref:typename:int
anetCreateSocket	src/anet.c	/^static int anetCreateSocket(char *err, int domain) {$/;"	f	typeref:typename:int	file:
anetDisableTcpNoDelay	src/anet.c	/^int anetDisableTcpNoDelay(char *err, int fd)$/;"	f	typeref:typename:int
anetEnableTcpNoDelay	src/anet.c	/^int anetEnableTcpNoDelay(char *err, int fd)$/;"	f	typeref:typename:int
anetFdToString	src/anet.c	/^int anetFdToString(int fd, char *ip, size_t ip_len, int *port, int fd_to_str_type) {$/;"	f	typeref:typename:int
anetFormatAddr	src/anet.c	/^int anetFormatAddr(char *buf, size_t buf_len, char *ip, int port) {$/;"	f	typeref:typename:int
anetFormatFdAddr	src/anet.c	/^int anetFormatFdAddr(int fd, char *buf, size_t buf_len, int fd_to_str_type) {$/;"	f	typeref:typename:int
anetGenericAccept	src/anet.c	/^static int anetGenericAccept(char *err, int s, struct sockaddr *sa, socklen_t *len) {$/;"	f	typeref:typename:int	file:
anetKeepAlive	src/anet.c	/^int anetKeepAlive(char *err, int fd, int interval)$/;"	f	typeref:typename:int
anetListen	src/anet.c	/^static int anetListen(char *err, int s, struct sockaddr *sa, socklen_t len, int backlog) {$/;"	f	typeref:typename:int	file:
anetNonBlock	src/anet.c	/^int anetNonBlock(char *err, int fd) {$/;"	f	typeref:typename:int
anetRecvTimeout	src/anet.c	/^int anetRecvTimeout(char *err, int fd, long long ms) {$/;"	f	typeref:typename:int
anetResolve	src/anet.c	/^int anetResolve(char *err, char *host, char *ipbuf, size_t ipbuf_len,$/;"	f	typeref:typename:int
anetSendTimeout	src/anet.c	/^int anetSendTimeout(char *err, int fd, long long ms) {$/;"	f	typeref:typename:int
anetSetBlock	src/anet.c	/^int anetSetBlock(char *err, int fd, int non_block) {$/;"	f	typeref:typename:int
anetSetError	src/anet.c	/^static void anetSetError(char *err, const char *fmt, ...)$/;"	f	typeref:typename:void	file:
anetSetReuseAddr	src/anet.c	/^static int anetSetReuseAddr(char *err, int fd) {$/;"	f	typeref:typename:int	file:
anetSetTcpNoDelay	src/anet.c	/^static int anetSetTcpNoDelay(char *err, int fd, int val)$/;"	f	typeref:typename:int	file:
anetTcp6Server	src/anet.c	/^int anetTcp6Server(char *err, int port, char *bindaddr, int backlog)$/;"	f	typeref:typename:int
anetTcpAccept	src/anet.c	/^int anetTcpAccept(char *err, int s, char *ip, size_t ip_len, int *port) {$/;"	f	typeref:typename:int
anetTcpGenericConnect	src/anet.c	/^static int anetTcpGenericConnect(char *err, const char *addr, int port,$/;"	f	typeref:typename:int	file:
anetTcpNonBlockBestEffortBindConnect	src/anet.c	/^int anetTcpNonBlockBestEffortBindConnect(char *err, const char *addr, int port,$/;"	f	typeref:typename:int
anetTcpNonBlockConnect	src/anet.c	/^int anetTcpNonBlockConnect(char *err, const char *addr, int port)$/;"	f	typeref:typename:int
anetTcpServer	src/anet.c	/^int anetTcpServer(char *err, int port, char *bindaddr, int backlog)$/;"	f	typeref:typename:int
anetUnixAccept	src/anet.c	/^int anetUnixAccept(char *err, int s) {$/;"	f	typeref:typename:int
anetUnixGenericConnect	src/anet.c	/^int anetUnixGenericConnect(char *err, const char *path, int flags)$/;"	f	typeref:typename:int
anetUnixServer	src/anet.c	/^int anetUnixServer(char *err, char *path, mode_t perm, int backlog)$/;"	f	typeref:typename:int
anetV6Only	src/anet.c	/^static int anetV6Only(char *err, int s) {$/;"	f	typeref:typename:int	file:
announceSentinelAddr	src/sentinel.c	/^const char *announceSentinelAddr(const sentinelAddr *a) {$/;"	f	typeref:typename:const char *
announceSentinelAddrAndPort	src/sentinel.c	/^sds announceSentinelAddrAndPort(const sentinelAddr *a) {$/;"	f	typeref:typename:sds
announce_hostnames	src/sentinel.c	/^    int announce_hostnames;      \/* Announce hostnames instead of IPs when we have them. *\/$/;"	m	struct:sentinelState	typeref:typename:int	file:
announce_ip	src/sentinel.c	/^    char *announce_ip;  \/* IP addr that is gossiped to other sentinels if$/;"	m	struct:sentinelState	typeref:typename:char *	file:
announce_port	src/sentinel.c	/^    int announce_port;  \/* Port that is gossiped to other sentinels if$/;"	m	struct:sentinelState	typeref:typename:int	file:
ansi	deps/lua/src/Makefile	/^ansi:$/;"	t
anyOtherSlaveWaitRdb	src/networking.c	/^int anyOtherSlaveWaitRdb(client *except_me) {$/;"	f	typeref:typename:int
aofChildPipeReadable	src/aof.c	/^void aofChildPipeReadable(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	typeref:typename:void
aofChildWriteDiffData	src/aof.c	/^void aofChildWriteDiffData(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	typeref:typename:void
aofClosePipes	src/aof.c	/^void aofClosePipes(void) {$/;"	f	typeref:typename:void
aofCreatePipes	src/aof.c	/^int aofCreatePipes(void) {$/;"	f	typeref:typename:int
aofFsyncInProgress	src/aof.c	/^int aofFsyncInProgress(void) {$/;"	f	typeref:typename:int
aofReadDiffFromParent	src/aof.c	/^ssize_t aofReadDiffFromParent(void) {$/;"	f	typeref:typename:ssize_t
aofRemoveTempFile	src/aof.c	/^void aofRemoveTempFile(pid_t childpid) {$/;"	f	typeref:typename:void
aofRewriteBufferAppend	src/aof.c	/^void aofRewriteBufferAppend(unsigned char *s, unsigned long len) {$/;"	f	typeref:typename:void
aofRewriteBufferReset	src/aof.c	/^void aofRewriteBufferReset(void) {$/;"	f	typeref:typename:void
aofRewriteBufferSize	src/aof.c	/^unsigned long aofRewriteBufferSize(void) {$/;"	f	typeref:typename:unsigned long
aofRewriteBufferWrite	src/aof.c	/^ssize_t aofRewriteBufferWrite(int fd) {$/;"	f	typeref:typename:ssize_t
aofUpdateCurrentSize	src/aof.c	/^void aofUpdateCurrentSize(void) {$/;"	f	typeref:typename:void
aofWrite	src/aof.c	/^ssize_t aofWrite(int fd, const char *buf, size_t len) {$/;"	f	typeref:typename:ssize_t
aof_background_fsync	src/aof.c	/^void aof_background_fsync(int fd) {$/;"	f	typeref:typename:void
aof_bio_fsync_errno	src/server.h	/^    redisAtomic int aof_bio_fsync_errno;  \/* Errno of AOF fsync in bio job. *\/$/;"	m	struct:redisServer	typeref:typename:redisAtomic int
aof_bio_fsync_status	src/server.h	/^    redisAtomic int aof_bio_fsync_status; \/* Status of AOF fsync in bio job. *\/$/;"	m	struct:redisServer	typeref:typename:redisAtomic int
aof_buf	src/server.h	/^    sds aof_buf;      \/* AOF buffer, written before entering the event loop *\/$/;"	m	struct:redisServer	typeref:typename:sds
aof_buffer	src/server.h	/^    size_t aof_buffer;$/;"	m	struct:redisMemOverhead	typeref:typename:size_t
aof_child_diff	src/server.h	/^    sds aof_child_diff;             \/* AOF diff accumulator child side. *\/$/;"	m	struct:redisServer	typeref:typename:sds
aof_current_size	src/server.h	/^    off_t aof_current_size;         \/* AOF current size. *\/$/;"	m	struct:redisServer	typeref:typename:off_t
aof_delayed_fsync	src/server.h	/^    unsigned long aof_delayed_fsync;  \/* delayed AOF fsync() counter *\/$/;"	m	struct:redisServer	typeref:typename:unsigned long
aof_enabled	src/server.h	/^    int aof_enabled;                \/* AOF configuration *\/$/;"	m	struct:redisServer	typeref:typename:int
aof_fd	src/server.h	/^    int aof_fd;       \/* File descriptor of currently selected AOF file *\/$/;"	m	struct:redisServer	typeref:typename:int
aof_filename	src/server.h	/^    char *aof_filename;             \/* Name of the AOF file *\/$/;"	m	struct:redisServer	typeref:typename:char *
aof_flush_postponed_start	src/server.h	/^    time_t aof_flush_postponed_start; \/* UNIX time of postponed AOF flush *\/$/;"	m	struct:redisServer	typeref:typename:time_t
aof_flush_sleep	src/server.h	/^    int aof_flush_sleep;            \/* Micros to sleep before flush. (used by tests) *\/$/;"	m	struct:redisServer	typeref:typename:int
aof_fsync	src/server.h	/^    int aof_fsync;                  \/* Kind of fsync() policy *\/$/;"	m	struct:redisServer	typeref:typename:int
aof_fsync_enum	src/config.c	/^configEnum aof_fsync_enum[] = {$/;"	v	typeref:typename:configEnum[]
aof_fsync_offset	src/server.h	/^    off_t aof_fsync_offset;         \/* AOF offset which is already synced to disk. *\/$/;"	m	struct:redisServer	typeref:typename:off_t
aof_last_fsync	src/server.h	/^    time_t aof_last_fsync;            \/* UNIX time of last fsync() *\/$/;"	m	struct:redisServer	typeref:typename:time_t
aof_last_write_errno	src/server.h	/^    int aof_last_write_errno;       \/* Valid if aof write\/fsync status is ERR *\/$/;"	m	struct:redisServer	typeref:typename:int
aof_last_write_status	src/server.h	/^    int aof_last_write_status;      \/* C_OK or C_ERR *\/$/;"	m	struct:redisServer	typeref:typename:int
aof_lastbgrewrite_status	src/server.h	/^    int aof_lastbgrewrite_status;   \/* C_OK or C_ERR *\/$/;"	m	struct:redisServer	typeref:typename:int
aof_load_truncated	src/server.h	/^    int aof_load_truncated;         \/* Don't stop on unexpected AOF EOF. *\/$/;"	m	struct:redisServer	typeref:typename:int
aof_no_fsync_on_rewrite	src/server.h	/^    int aof_no_fsync_on_rewrite;    \/* Don't fsync if a rewrite is in prog. *\/$/;"	m	struct:redisServer	typeref:typename:int
aof_pipe_read_ack_from_child	src/server.h	/^    int aof_pipe_read_ack_from_child;$/;"	m	struct:redisServer	typeref:typename:int
aof_pipe_read_ack_from_parent	src/server.h	/^    int aof_pipe_read_ack_from_parent;$/;"	m	struct:redisServer	typeref:typename:int
aof_pipe_read_data_from_parent	src/server.h	/^    int aof_pipe_read_data_from_parent;$/;"	m	struct:redisServer	typeref:typename:int
aof_pipe_write_ack_to_child	src/server.h	/^    int aof_pipe_write_ack_to_child;$/;"	m	struct:redisServer	typeref:typename:int
aof_pipe_write_ack_to_parent	src/server.h	/^    int aof_pipe_write_ack_to_parent;$/;"	m	struct:redisServer	typeref:typename:int
aof_pipe_write_data_to_child	src/server.h	/^    int aof_pipe_write_data_to_child;$/;"	m	struct:redisServer	typeref:typename:int
aof_rewrite	src/module.c	/^        moduleTypeRewriteFunc aof_rewrite;$/;"	m	struct:RM_CreateDataType::typemethods	typeref:typename:moduleTypeRewriteFunc	file:
aof_rewrite	src/redismodule.h	/^    RedisModuleTypeRewriteFunc aof_rewrite;$/;"	m	struct:RedisModuleTypeMethods	typeref:typename:RedisModuleTypeRewriteFunc
aof_rewrite	src/server.h	/^    moduleTypeRewriteFunc aof_rewrite;$/;"	m	struct:RedisModuleType	typeref:typename:moduleTypeRewriteFunc
aof_rewrite_base_size	src/server.h	/^    off_t aof_rewrite_base_size;    \/* AOF size on latest startup or rewrite. *\/$/;"	m	struct:redisServer	typeref:typename:off_t
aof_rewrite_buf_blocks	src/server.h	/^    list *aof_rewrite_buf_blocks;   \/* Hold changes during an AOF rewrite. *\/$/;"	m	struct:redisServer	typeref:typename:list *
aof_rewrite_cpulist	src/server.h	/^    char *aof_rewrite_cpulist; \/* cpu affinity list of aof rewrite process. *\/$/;"	m	struct:redisServer	typeref:typename:char *
aof_rewrite_incremental_fsync	src/server.h	/^    int aof_rewrite_incremental_fsync;\/* fsync incrementally while aof rewriting? *\/$/;"	m	struct:redisServer	typeref:typename:int
aof_rewrite_min_size	src/server.h	/^    off_t aof_rewrite_min_size;     \/* the AOF file is at least N bytes. *\/$/;"	m	struct:redisServer	typeref:typename:off_t
aof_rewrite_perc	src/server.h	/^    int aof_rewrite_perc;           \/* Rewrite AOF if % growth is > M and... *\/$/;"	m	struct:redisServer	typeref:typename:int
aof_rewrite_scheduled	src/server.h	/^    int aof_rewrite_scheduled;      \/* Rewrite once BGSAVE terminates. *\/$/;"	m	struct:redisServer	typeref:typename:int
aof_rewrite_time_last	src/server.h	/^    time_t aof_rewrite_time_last;   \/* Time used by last AOF rewrite run. *\/$/;"	m	struct:redisServer	typeref:typename:time_t
aof_rewrite_time_start	src/server.h	/^    time_t aof_rewrite_time_start;  \/* Current AOF rewrite start time. *\/$/;"	m	struct:redisServer	typeref:typename:time_t
aof_selected_db	src/server.h	/^    int aof_selected_db; \/* Currently selected DB in AOF *\/$/;"	m	struct:redisServer	typeref:typename:int
aof_state	src/server.h	/^    int aof_state;                  \/* AOF_(ON|OFF|WAIT_REWRITE) *\/$/;"	m	struct:redisServer	typeref:typename:int
aof_stop_sending_diff	src/server.h	/^    int aof_stop_sending_diff;     \/* If true stop sending accumulated diffs$/;"	m	struct:redisServer	typeref:typename:int
aof_use_rdb_preamble	src/server.h	/^    int aof_use_rdb_preamble;       \/* Use RDB preamble on AOF rewrites. *\/$/;"	m	struct:redisServer	typeref:typename:int
aofrwblock	src/aof.c	/^typedef struct aofrwblock {$/;"	s	file:
aofrwblock	src/aof.c	/^} aofrwblock;$/;"	t	typeref:struct:aofrwblock	file:
api_check	deps/lua/src/llimits.h	/^#define api_check	/;"	d
api_check	deps/lua/src/llimits.h	/^#define api_check(/;"	d
api_checknelems	deps/lua/src/lapi.c	/^#define api_checknelems(/;"	d	file:
api_checkvalidindex	deps/lua/src/lapi.c	/^#define api_checkvalidindex(/;"	d	file:
api_incr_top	deps/lua/src/lapi.c	/^#define api_incr_top(/;"	d	file:
apidata	src/ae.h	/^    void *apidata; \/* This is used for polling API specific data *\/$/;"	m	struct:aeEventLoop	typeref:typename:void *
apiver	src/module.c	/^    int apiver;     \/* Module API version as requested during initialization.*\/$/;"	m	struct:RedisModule	typeref:typename:int	file:
appendCommand	src/t_string.c	/^void appendCommand(client *c) {$/;"	f	typeref:typename:void
appendServerSaveParams	src/config.c	/^void appendServerSaveParams(time_t seconds, int changes) {$/;"	f	typeref:typename:void
appendonly	src/redis-benchmark.c	/^    sds appendonly;$/;"	m	struct:redisConfig	typeref:typename:sds	file:
approx_trim	src/t_stream.c	/^    int approx_trim; \/* If 1 only delete whole radix tree nodes, so$/;"	m	struct:__anon8fe9202c0108	typeref:typename:int	file:
arch_bits	src/server.h	/^    int arch_bits;              \/* 32 or 64 depending on sizeof(long) *\/$/;"	m	struct:redisServer	typeref:typename:int
areClientsPaused	src/networking.c	/^int areClientsPaused(void) {$/;"	f	typeref:typename:int
area	src/geohash_helper.h	/^    GeoHashArea area;$/;"	m	struct:__anon1a1c3d100108	typeref:typename:GeoHashArea
arena	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	arena_t		*arena;$/;"	m	struct:tcache_s	typeref:typename:arena_t *
arena_aalloc	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_aalloc(tsdn_t *tsdn, const void *ptr) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE arena_t *
arena_alloc_junk_small	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_alloc_junk_small /;"	d
arena_alloc_junk_small	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_alloc_junk_small /;"	d
arena_alloc_junk_small	deps/jemalloc/src/arena.c	/^arena_alloc_junk_small(void *ptr, const bin_info_t *bin_info, bool zero) {$/;"	f	typeref:typename:void
arena_background_thread_inactivity_check	deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h	/^arena_background_thread_inactivity_check(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
arena_background_thread_info_get	deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h	/^arena_background_thread_info_get(arena_t *arena) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE background_thread_info_t *
arena_basic_stats_merge	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_basic_stats_merge /;"	d
arena_basic_stats_merge	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_basic_stats_merge /;"	d
arena_basic_stats_merge	deps/jemalloc/src/arena.c	/^arena_basic_stats_merge(UNUSED tsdn_t *tsdn, arena_t *arena, unsigned *nthreads,$/;"	f	typeref:typename:void
arena_bin_lower_slab	deps/jemalloc/src/arena.c	/^arena_bin_lower_slab(UNUSED tsdn_t *tsdn, arena_t *arena, extent_t *slab,$/;"	f	typeref:typename:void	file:
arena_bin_malloc_hard	deps/jemalloc/src/arena.c	/^arena_bin_malloc_hard(tsdn_t *tsdn, arena_t *arena, bin_t *bin,$/;"	f	typeref:typename:void *	file:
arena_bin_nonfull_slab_get	deps/jemalloc/src/arena.c	/^arena_bin_nonfull_slab_get(tsdn_t *tsdn, arena_t *arena, bin_t *bin,$/;"	f	typeref:typename:extent_t *	file:
arena_bin_slabs_full_insert	deps/jemalloc/src/arena.c	/^arena_bin_slabs_full_insert(arena_t *arena, bin_t *bin, extent_t *slab) {$/;"	f	typeref:typename:void	file:
arena_bin_slabs_full_remove	deps/jemalloc/src/arena.c	/^arena_bin_slabs_full_remove(arena_t *arena, bin_t *bin, extent_t *slab) {$/;"	f	typeref:typename:void	file:
arena_bin_slabs_nonfull_insert	deps/jemalloc/src/arena.c	/^arena_bin_slabs_nonfull_insert(bin_t *bin, extent_t *slab) {$/;"	f	typeref:typename:void	file:
arena_bin_slabs_nonfull_remove	deps/jemalloc/src/arena.c	/^arena_bin_slabs_nonfull_remove(bin_t *bin, extent_t *slab) {$/;"	f	typeref:typename:void	file:
arena_bin_slabs_nonfull_tryget	deps/jemalloc/src/arena.c	/^arena_bin_slabs_nonfull_tryget(bin_t *bin) {$/;"	f	typeref:typename:extent_t *	file:
arena_bind	deps/jemalloc/src/jemalloc.c	/^arena_bind(tsd_t *tsd, unsigned ind, bool internal) {$/;"	f	typeref:typename:void	file:
arena_binind_div_info	deps/jemalloc/src/arena.c	/^static div_info_t arena_binind_div_info[NBINS];$/;"	v	typeref:typename:div_info_t[]	file:
arena_boot	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_boot /;"	d
arena_boot	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_boot /;"	d
arena_boot	deps/jemalloc/src/arena.c	/^arena_boot(void) {$/;"	f	typeref:typename:void
arena_choose	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_b.h	/^arena_choose(tsd_t *tsd, arena_t *arena) {$/;"	f	typeref:typename:arena_t *
arena_choose_hard	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_choose_hard /;"	d
arena_choose_hard	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_choose_hard /;"	d
arena_choose_hard	deps/jemalloc/src/jemalloc.c	/^arena_choose_hard(tsd_t *tsd, bool internal) {$/;"	f	typeref:typename:arena_t *
arena_choose_impl	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_b.h	/^arena_choose_impl(tsd_t *tsd, arena_t *arena, bool internal) {$/;"	f	typeref:typename:arena_t *
arena_cleanup	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_cleanup /;"	d
arena_cleanup	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_cleanup /;"	d
arena_cleanup	deps/jemalloc/src/jemalloc.c	/^arena_cleanup(tsd_t *tsd) {$/;"	f	typeref:typename:void
arena_dalloc	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_dalloc(tsdn_t *tsdn, void *ptr, tcache_t *tcache,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
arena_dalloc_bin	deps/jemalloc/src/arena.c	/^arena_dalloc_bin(tsdn_t *tsdn, arena_t *arena, extent_t *extent, void *ptr) {$/;"	f	typeref:typename:void	file:
arena_dalloc_bin_junked_locked	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_dalloc_bin_junked_locked /;"	d
arena_dalloc_bin_junked_locked	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_dalloc_bin_junked_locked /;"	d
arena_dalloc_bin_junked_locked	deps/jemalloc/src/arena.c	/^arena_dalloc_bin_junked_locked(tsdn_t *tsdn, arena_t *arena, extent_t *extent,$/;"	f	typeref:typename:void
arena_dalloc_bin_locked_impl	deps/jemalloc/src/arena.c	/^arena_dalloc_bin_locked_impl(tsdn_t *tsdn, arena_t *arena, extent_t *slab,$/;"	f	typeref:typename:void	file:
arena_dalloc_bin_slab	deps/jemalloc/src/arena.c	/^arena_dalloc_bin_slab(tsdn_t *tsdn, arena_t *arena, extent_t *slab,$/;"	f	typeref:typename:void	file:
arena_dalloc_junk_small	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_dalloc_junk_small /;"	d
arena_dalloc_junk_small	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_dalloc_junk_small /;"	d
arena_dalloc_junk_small	deps/jemalloc/src/arena.c	/^arena_dalloc_junk_small_t *JET_MUTABLE arena_dalloc_junk_small =$/;"	v	typeref:typename:arena_dalloc_junk_small_t * JET_MUTABLE
arena_dalloc_junk_small_impl	deps/jemalloc/src/arena.c	/^arena_dalloc_junk_small_impl(void *ptr, const bin_info_t *bin_info) {$/;"	f	typeref:typename:void	file:
arena_dalloc_junk_small_intercept	deps/jemalloc/test/unit/junk.c	/^arena_dalloc_junk_small_intercept(void *ptr, const bin_info_t *bin_info) {$/;"	f	typeref:typename:void	file:
arena_dalloc_junk_small_orig	deps/jemalloc/test/unit/junk.c	/^static arena_dalloc_junk_small_t *arena_dalloc_junk_small_orig;$/;"	v	typeref:typename:arena_dalloc_junk_small_t *	file:
arena_dalloc_junk_small_t	deps/jemalloc/include/jemalloc/internal/arena_externs.h	/^typedef void (arena_dalloc_junk_small_t)(void *, const bin_info_t *);$/;"	t	typeref:typename:void ()(void *,const bin_info_t *)
arena_dalloc_no_tcache	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_dalloc_no_tcache(tsdn_t *tsdn, void *ptr) {$/;"	f	typeref:typename:void
arena_dalloc_promoted	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_dalloc_promoted /;"	d
arena_dalloc_promoted	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_dalloc_promoted /;"	d
arena_dalloc_promoted	deps/jemalloc/src/arena.c	/^arena_dalloc_promoted(tsdn_t *tsdn, void *ptr, tcache_t *tcache,$/;"	f	typeref:typename:void
arena_dalloc_small	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_dalloc_small /;"	d
arena_dalloc_small	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_dalloc_small /;"	d
arena_dalloc_small	deps/jemalloc/src/arena.c	/^arena_dalloc_small(tsdn_t *tsdn, void *ptr) {$/;"	f	typeref:typename:void
arena_decay	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_decay /;"	d
arena_decay	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_decay /;"	d
arena_decay	deps/jemalloc/src/arena.c	/^arena_decay(tsdn_t *tsdn, arena_t *arena, bool is_background_thread, bool all) {$/;"	f	typeref:typename:void
arena_decay_backlog_npages_limit	deps/jemalloc/src/arena.c	/^arena_decay_backlog_npages_limit(const arena_decay_t *decay) {$/;"	f	typeref:typename:size_t	file:
arena_decay_backlog_update	deps/jemalloc/src/arena.c	/^arena_decay_backlog_update(arena_decay_t *decay, uint64_t nadvance_u64,$/;"	f	typeref:typename:void	file:
arena_decay_backlog_update_last	deps/jemalloc/src/arena.c	/^arena_decay_backlog_update_last(arena_decay_t *decay, size_t current_npages) {$/;"	f	typeref:typename:void	file:
arena_decay_deadline_init	deps/jemalloc/src/arena.c	/^arena_decay_deadline_init(arena_decay_t *decay) {$/;"	f	typeref:typename:void	file:
arena_decay_deadline_reached	deps/jemalloc/src/arena.c	/^arena_decay_deadline_reached(const arena_decay_t *decay, const nstime_t *time) {$/;"	f	typeref:typename:bool	file:
arena_decay_dirty	deps/jemalloc/src/arena.c	/^arena_decay_dirty(tsdn_t *tsdn, arena_t *arena, bool is_background_thread,$/;"	f	typeref:typename:bool	file:
arena_decay_epoch_advance	deps/jemalloc/src/arena.c	/^arena_decay_epoch_advance(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,$/;"	f	typeref:typename:void	file:
arena_decay_epoch_advance_helper	deps/jemalloc/src/arena.c	/^arena_decay_epoch_advance_helper(arena_decay_t *decay, const nstime_t *time,$/;"	f	typeref:typename:void	file:
arena_decay_impl	deps/jemalloc/src/arena.c	/^arena_decay_impl(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,$/;"	f	typeref:typename:bool	file:
arena_decay_init	deps/jemalloc/src/arena.c	/^arena_decay_init(arena_decay_t *decay, ssize_t decay_ms,$/;"	f	typeref:typename:bool	file:
arena_decay_ms_get	deps/jemalloc/src/arena.c	/^arena_decay_ms_get(arena_decay_t *decay) {$/;"	f	typeref:typename:ssize_t	file:
arena_decay_ms_read	deps/jemalloc/src/arena.c	/^arena_decay_ms_read(arena_decay_t *decay) {$/;"	f	typeref:typename:ssize_t	file:
arena_decay_ms_set	deps/jemalloc/src/arena.c	/^arena_decay_ms_set(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,$/;"	f	typeref:typename:bool	file:
arena_decay_ms_valid	deps/jemalloc/src/arena.c	/^arena_decay_ms_valid(ssize_t decay_ms) {$/;"	f	typeref:typename:bool	file:
arena_decay_ms_write	deps/jemalloc/src/arena.c	/^arena_decay_ms_write(arena_decay_t *decay, ssize_t decay_ms) {$/;"	f	typeref:typename:void	file:
arena_decay_muzzy	deps/jemalloc/src/arena.c	/^arena_decay_muzzy(tsdn_t *tsdn, arena_t *arena, bool is_background_thread,$/;"	f	typeref:typename:bool	file:
arena_decay_reinit	deps/jemalloc/src/arena.c	/^arena_decay_reinit(arena_decay_t *decay, ssize_t decay_ms) {$/;"	f	typeref:typename:void	file:
arena_decay_s	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^struct arena_decay_s {$/;"	s
arena_decay_stashed	deps/jemalloc/src/arena.c	/^arena_decay_stashed(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:size_t	file:
arena_decay_t	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^typedef struct arena_decay_s arena_decay_t;$/;"	t	typeref:struct:arena_decay_s
arena_decay_tick	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_decay_tick(tsdn_t *tsdn, arena_t *arena) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
arena_decay_ticks	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_decay_ticks(tsdn_t *tsdn, arena_t *arena, unsigned nticks) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
arena_decay_to_limit	deps/jemalloc/src/arena.c	/^arena_decay_to_limit(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,$/;"	f	typeref:typename:void	file:
arena_decay_try_purge	deps/jemalloc/src/arena.c	/^arena_decay_try_purge(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,$/;"	f	typeref:typename:void	file:
arena_destroy	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_destroy /;"	d
arena_destroy	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_destroy /;"	d
arena_destroy	deps/jemalloc/src/arena.c	/^arena_destroy(tsd_t *tsd, arena_t *arena) {$/;"	f	typeref:typename:void
arena_destroy_retained	deps/jemalloc/src/arena.c	/^arena_destroy_retained(tsdn_t *tsdn, arena_t *arena) {$/;"	f	typeref:typename:void	file:
arena_dirty_decay_ms_default_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_dirty_decay_ms_default_get /;"	d
arena_dirty_decay_ms_default_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_dirty_decay_ms_default_get /;"	d
arena_dirty_decay_ms_default_get	deps/jemalloc/src/arena.c	/^arena_dirty_decay_ms_default_get(void) {$/;"	f	typeref:typename:ssize_t
arena_dirty_decay_ms_default_set	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_dirty_decay_ms_default_set /;"	d
arena_dirty_decay_ms_default_set	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_dirty_decay_ms_default_set /;"	d
arena_dirty_decay_ms_default_set	deps/jemalloc/src/arena.c	/^arena_dirty_decay_ms_default_set(ssize_t decay_ms) {$/;"	f	typeref:typename:bool
arena_dirty_decay_ms_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_dirty_decay_ms_get /;"	d
arena_dirty_decay_ms_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_dirty_decay_ms_get /;"	d
arena_dirty_decay_ms_get	deps/jemalloc/src/arena.c	/^arena_dirty_decay_ms_get(arena_t *arena) {$/;"	f	typeref:typename:ssize_t
arena_dirty_decay_ms_set	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_dirty_decay_ms_set /;"	d
arena_dirty_decay_ms_set	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_dirty_decay_ms_set /;"	d
arena_dirty_decay_ms_set	deps/jemalloc/src/arena.c	/^arena_dirty_decay_ms_set(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:bool
arena_dissociate_bin_slab	deps/jemalloc/src/arena.c	/^arena_dissociate_bin_slab(arena_t *arena, extent_t *slab, bin_t *bin) {$/;"	f	typeref:typename:void	file:
arena_dss_prec_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_dss_prec_get /;"	d
arena_dss_prec_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_dss_prec_get /;"	d
arena_dss_prec_get	deps/jemalloc/src/arena.c	/^arena_dss_prec_get(arena_t *arena) {$/;"	f	typeref:typename:dss_prec_t
arena_dss_prec_set	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_dss_prec_set /;"	d
arena_dss_prec_set	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_dss_prec_set /;"	d
arena_dss_prec_set	deps/jemalloc/src/arena.c	/^arena_dss_prec_set(arena_t *arena, dss_prec_t dss_prec) {$/;"	f	typeref:typename:bool
arena_extent_alloc_large	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_extent_alloc_large /;"	d
arena_extent_alloc_large	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_extent_alloc_large /;"	d
arena_extent_alloc_large	deps/jemalloc/src/arena.c	/^arena_extent_alloc_large(tsdn_t *tsdn, arena_t *arena, size_t usize,$/;"	f	typeref:typename:extent_t *
arena_extent_dalloc_large_prep	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_extent_dalloc_large_prep /;"	d
arena_extent_dalloc_large_prep	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_extent_dalloc_large_prep /;"	d
arena_extent_dalloc_large_prep	deps/jemalloc/src/arena.c	/^arena_extent_dalloc_large_prep(tsdn_t *tsdn, arena_t *arena, extent_t *extent) {$/;"	f	typeref:typename:void
arena_extent_ralloc_large_expand	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_extent_ralloc_large_expand /;"	d
arena_extent_ralloc_large_expand	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_extent_ralloc_large_expand /;"	d
arena_extent_ralloc_large_expand	deps/jemalloc/src/arena.c	/^arena_extent_ralloc_large_expand(tsdn_t *tsdn, arena_t *arena, extent_t *extent,$/;"	f	typeref:typename:void
arena_extent_ralloc_large_shrink	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_extent_ralloc_large_shrink /;"	d
arena_extent_ralloc_large_shrink	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_extent_ralloc_large_shrink /;"	d
arena_extent_ralloc_large_shrink	deps/jemalloc/src/arena.c	/^arena_extent_ralloc_large_shrink(tsdn_t *tsdn, arena_t *arena, extent_t *extent,$/;"	f	typeref:typename:void
arena_extent_sn_next	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_extent_sn_next /;"	d
arena_extent_sn_next	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_extent_sn_next /;"	d
arena_extent_sn_next	deps/jemalloc/src/arena.c	/^arena_extent_sn_next(arena_t *arena) {$/;"	f	typeref:typename:size_t
arena_extents_dirty_dalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_extents_dirty_dalloc /;"	d
arena_extents_dirty_dalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_extents_dirty_dalloc /;"	d
arena_extents_dirty_dalloc	deps/jemalloc/src/arena.c	/^arena_extents_dirty_dalloc(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:void
arena_get	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^arena_get(tsdn_t *tsdn, unsigned ind, bool init_if_missing) {$/;"	f	typeref:typename:arena_t *
arena_i_decay	deps/jemalloc/src/ctl.c	/^arena_i_decay(tsdn_t *tsdn, unsigned arena_ind, bool all) {$/;"	f	typeref:typename:void	file:
arena_i_decay_ctl	deps/jemalloc/src/ctl.c	/^arena_i_decay_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
arena_i_decay_ms_ctl_impl	deps/jemalloc/src/ctl.c	/^arena_i_decay_ms_ctl_impl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	typeref:typename:int	file:
arena_i_destroy_ctl	deps/jemalloc/src/ctl.c	/^arena_i_destroy_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
arena_i_dirty_decay_ms_ctl	deps/jemalloc/src/ctl.c	/^arena_i_dirty_decay_ms_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	typeref:typename:int	file:
arena_i_dss_ctl	deps/jemalloc/src/ctl.c	/^arena_i_dss_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
arena_i_extent_hooks_ctl	deps/jemalloc/src/ctl.c	/^arena_i_extent_hooks_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	typeref:typename:int	file:
arena_i_index	deps/jemalloc/src/ctl.c	/^arena_i_index(tsdn_t *tsdn, const size_t *mib, size_t miblen, size_t i) {$/;"	f	typeref:typename:const ctl_named_node_t *	file:
arena_i_initialized	deps/jemalloc/test/unit/arena_reset.c	/^arena_i_initialized(unsigned arena_ind, bool refresh) {$/;"	f	typeref:typename:TEST_END bool	file:
arena_i_initialized_ctl	deps/jemalloc/src/ctl.c	/^arena_i_initialized_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	typeref:typename:int	file:
arena_i_muzzy_decay_ms_ctl	deps/jemalloc/src/ctl.c	/^arena_i_muzzy_decay_ms_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	typeref:typename:int	file:
arena_i_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t arena_i_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
arena_i_purge_ctl	deps/jemalloc/src/ctl.c	/^arena_i_purge_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
arena_i_reset_ctl	deps/jemalloc/src/ctl.c	/^arena_i_reset_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
arena_i_reset_destroy_helper	deps/jemalloc/src/ctl.c	/^arena_i_reset_destroy_helper(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	typeref:typename:int	file:
arena_i_retain_grow_limit_ctl	deps/jemalloc/src/ctl.c	/^arena_i_retain_grow_limit_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	typeref:typename:int	file:
arena_ichoose	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_b.h	/^arena_ichoose(tsd_t *tsd, arena_t *arena) {$/;"	f	typeref:typename:arena_t *
arena_ind	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	unsigned arena_ind;$/;"	m	struct:ctl_arena_s	typeref:typename:unsigned
arena_ind	deps/jemalloc/src/jemalloc.c	/^	unsigned arena_ind;$/;"	m	struct:dynamic_opts_s	typeref:typename:unsigned	file:
arena_ind	deps/jemalloc/test/integration/xallocx.c	/^arena_ind(void) {$/;"	f	typeref:typename:unsigned	file:
arena_ind	deps/jemalloc/test/unit/retained.c	/^static unsigned		arena_ind;$/;"	v	typeref:typename:unsigned	file:
arena_ind_get	deps/jemalloc/include/jemalloc/internal/arena_inlines_a.h	/^arena_ind_get(const arena_t *arena) {$/;"	f	typeref:typename:unsigned
arena_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_init /;"	d
arena_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_init /;"	d
arena_init	deps/jemalloc/src/jemalloc.c	/^arena_init(tsdn_t *tsdn, unsigned ind, extent_hooks_t *extent_hooks) {$/;"	f	typeref:typename:arena_t *
arena_init_locked	deps/jemalloc/src/jemalloc.c	/^arena_init_locked(tsdn_t *tsdn, unsigned ind, extent_hooks_t *extent_hooks) {$/;"	f	typeref:typename:arena_t *	file:
arena_internal_add	deps/jemalloc/include/jemalloc/internal/arena_inlines_a.h	/^arena_internal_add(arena_t *arena, size_t size) {$/;"	f	typeref:typename:void
arena_internal_get	deps/jemalloc/include/jemalloc/internal/arena_inlines_a.h	/^arena_internal_get(arena_t *arena) {$/;"	f	typeref:typename:size_t
arena_internal_sub	deps/jemalloc/include/jemalloc/internal/arena_inlines_a.h	/^arena_internal_sub(arena_t *arena, size_t size) {$/;"	f	typeref:typename:void
arena_is_auto	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_b.h	/^arena_is_auto(arena_t *arena) {$/;"	f	typeref:typename:bool
arena_large_dalloc_stats_update	deps/jemalloc/src/arena.c	/^arena_large_dalloc_stats_update(tsdn_t *tsdn, arena_t *arena, size_t usize) {$/;"	f	typeref:typename:void	file:
arena_large_malloc_stats_update	deps/jemalloc/src/arena.c	/^arena_large_malloc_stats_update(tsdn_t *tsdn, arena_t *arena, size_t usize) {$/;"	f	typeref:typename:void	file:
arena_large_ralloc_stats_update	deps/jemalloc/src/arena.c	/^arena_large_ralloc_stats_update(tsdn_t *tsdn, arena_t *arena, size_t oldusize,$/;"	f	typeref:typename:void	file:
arena_malloc	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_malloc(tsdn_t *tsdn, arena_t *arena, size_t size, szind_t ind, bool zero,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
arena_malloc_hard	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_malloc_hard /;"	d
arena_malloc_hard	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_malloc_hard /;"	d
arena_malloc_hard	deps/jemalloc/src/arena.c	/^arena_malloc_hard(tsdn_t *tsdn, arena_t *arena, size_t size, szind_t ind,$/;"	f	typeref:typename:void *
arena_malloc_small	deps/jemalloc/src/arena.c	/^arena_malloc_small(tsdn_t *tsdn, arena_t *arena, szind_t binind, bool zero) {$/;"	f	typeref:typename:void *	file:
arena_maybe_decay	deps/jemalloc/src/arena.c	/^arena_maybe_decay(tsdn_t *tsdn, arena_t *arena, arena_decay_t *decay,$/;"	f	typeref:typename:bool	file:
arena_migrate	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_migrate /;"	d
arena_migrate	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_migrate /;"	d
arena_migrate	deps/jemalloc/src/jemalloc.c	/^arena_migrate(tsd_t *tsd, unsigned oldind, unsigned newind) {$/;"	f	typeref:typename:void
arena_mutex_names	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_mutex_names /;"	d
arena_mutex_names	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_mutex_names /;"	d
arena_mutex_names	deps/jemalloc/src/stats.c	/^const char *arena_mutex_names[mutex_prof_num_arena_mutexes] = {$/;"	v	typeref:typename:const char * []
arena_muzzy_decay_ms_default_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_muzzy_decay_ms_default_get /;"	d
arena_muzzy_decay_ms_default_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_muzzy_decay_ms_default_get /;"	d
arena_muzzy_decay_ms_default_get	deps/jemalloc/src/arena.c	/^arena_muzzy_decay_ms_default_get(void) {$/;"	f	typeref:typename:ssize_t
arena_muzzy_decay_ms_default_set	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_muzzy_decay_ms_default_set /;"	d
arena_muzzy_decay_ms_default_set	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_muzzy_decay_ms_default_set /;"	d
arena_muzzy_decay_ms_default_set	deps/jemalloc/src/arena.c	/^arena_muzzy_decay_ms_default_set(ssize_t decay_ms) {$/;"	f	typeref:typename:bool
arena_muzzy_decay_ms_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_muzzy_decay_ms_get /;"	d
arena_muzzy_decay_ms_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_muzzy_decay_ms_get /;"	d
arena_muzzy_decay_ms_get	deps/jemalloc/src/arena.c	/^arena_muzzy_decay_ms_get(arena_t *arena) {$/;"	f	typeref:typename:ssize_t
arena_muzzy_decay_ms_set	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_muzzy_decay_ms_set /;"	d
arena_muzzy_decay_ms_set	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_muzzy_decay_ms_set /;"	d
arena_muzzy_decay_ms_set	deps/jemalloc/src/arena.c	/^arena_muzzy_decay_ms_set(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:bool
arena_nactive_add	deps/jemalloc/src/arena.c	/^arena_nactive_add(arena_t *arena, size_t add_pages) {$/;"	f	typeref:typename:void	file:
arena_nactive_sub	deps/jemalloc/src/arena.c	/^arena_nactive_sub(arena_t *arena, size_t sub_pages) {$/;"	f	typeref:typename:void	file:
arena_new	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_new /;"	d
arena_new	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_new /;"	d
arena_new	deps/jemalloc/src/arena.c	/^arena_new(tsdn_t *tsdn, unsigned ind, extent_hooks_t *extent_hooks) {$/;"	f	typeref:typename:arena_t *
arena_new_create_background_thread	deps/jemalloc/src/jemalloc.c	/^arena_new_create_background_thread(tsdn_t *tsdn, unsigned ind) {$/;"	f	typeref:typename:void	file:
arena_new_hook_ran	deps/jemalloc/test/src/test.c	/^static bool arena_new_hook_ran = false;$/;"	v	typeref:typename:bool	file:
arena_new_reentrancy_hook	deps/jemalloc/test/src/test.c	/^arena_new_reentrancy_hook() {$/;"	f	typeref:typename:void	file:
arena_new_reentrant	deps/jemalloc/test/src/test.c	/^	arena_new_reentrant = 2$/;"	e	enum:__anon309c720d0103	file:
arena_node	deps/jemalloc/src/ctl.c	/^static const ctl_indexed_node_t arena_node[] = {$/;"	v	typeref:typename:const ctl_indexed_node_t[]	file:
arena_nthreads_dec	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_nthreads_dec /;"	d
arena_nthreads_dec	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_nthreads_dec /;"	d
arena_nthreads_dec	deps/jemalloc/src/arena.c	/^arena_nthreads_dec(arena_t *arena, bool internal) {$/;"	f	typeref:typename:void
arena_nthreads_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_nthreads_get /;"	d
arena_nthreads_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_nthreads_get /;"	d
arena_nthreads_get	deps/jemalloc/src/arena.c	/^arena_nthreads_get(arena_t *arena, bool internal) {$/;"	f	typeref:typename:unsigned
arena_nthreads_inc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_nthreads_inc /;"	d
arena_nthreads_inc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_nthreads_inc /;"	d
arena_nthreads_inc	deps/jemalloc/src/arena.c	/^arena_nthreads_inc(arena_t *arena, bool internal) {$/;"	f	typeref:typename:void
arena_palloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_palloc /;"	d
arena_palloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_palloc /;"	d
arena_palloc	deps/jemalloc/src/arena.c	/^arena_palloc(tsdn_t *tsdn, arena_t *arena, size_t usize, size_t alignment,$/;"	f	typeref:typename:void *
arena_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_postfork_child /;"	d
arena_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_postfork_child /;"	d
arena_postfork_child	deps/jemalloc/src/arena.c	/^arena_postfork_child(tsdn_t *tsdn, arena_t *arena) {$/;"	f	typeref:typename:void
arena_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_postfork_parent /;"	d
arena_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_postfork_parent /;"	d
arena_postfork_parent	deps/jemalloc/src/arena.c	/^arena_postfork_parent(tsdn_t *tsdn, arena_t *arena) {$/;"	f	typeref:typename:void
arena_prefork0	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_prefork0 /;"	d
arena_prefork0	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_prefork0 /;"	d
arena_prefork0	deps/jemalloc/src/arena.c	/^arena_prefork0(tsdn_t *tsdn, arena_t *arena) {$/;"	f	typeref:typename:void
arena_prefork1	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_prefork1 /;"	d
arena_prefork1	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_prefork1 /;"	d
arena_prefork1	deps/jemalloc/src/arena.c	/^arena_prefork1(tsdn_t *tsdn, arena_t *arena) {$/;"	f	typeref:typename:void
arena_prefork2	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_prefork2 /;"	d
arena_prefork2	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_prefork2 /;"	d
arena_prefork2	deps/jemalloc/src/arena.c	/^arena_prefork2(tsdn_t *tsdn, arena_t *arena) {$/;"	f	typeref:typename:void
arena_prefork3	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_prefork3 /;"	d
arena_prefork3	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_prefork3 /;"	d
arena_prefork3	deps/jemalloc/src/arena.c	/^arena_prefork3(tsdn_t *tsdn, arena_t *arena) {$/;"	f	typeref:typename:void
arena_prefork4	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_prefork4 /;"	d
arena_prefork4	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_prefork4 /;"	d
arena_prefork4	deps/jemalloc/src/arena.c	/^arena_prefork4(tsdn_t *tsdn, arena_t *arena) {$/;"	f	typeref:typename:void
arena_prefork5	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_prefork5 /;"	d
arena_prefork5	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_prefork5 /;"	d
arena_prefork5	deps/jemalloc/src/arena.c	/^arena_prefork5(tsdn_t *tsdn, arena_t *arena) {$/;"	f	typeref:typename:void
arena_prefork6	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_prefork6 /;"	d
arena_prefork6	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_prefork6 /;"	d
arena_prefork6	deps/jemalloc/src/arena.c	/^arena_prefork6(tsdn_t *tsdn, arena_t *arena) {$/;"	f	typeref:typename:void
arena_prefork7	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_prefork7 /;"	d
arena_prefork7	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_prefork7 /;"	d
arena_prefork7	deps/jemalloc/src/arena.c	/^arena_prefork7(tsdn_t *tsdn, arena_t *arena) {$/;"	f	typeref:typename:void
arena_prof_accum	deps/jemalloc/include/jemalloc/internal/arena_inlines_a.h	/^arena_prof_accum(tsdn_t *tsdn, arena_t *arena, uint64_t accumbytes) {$/;"	f	typeref:typename:bool
arena_prof_demote	deps/jemalloc/src/arena.c	/^arena_prof_demote(tsdn_t *tsdn, extent_t *extent, const void *ptr) {$/;"	f	typeref:typename:size_t	file:
arena_prof_promote	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_prof_promote /;"	d
arena_prof_promote	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_prof_promote /;"	d
arena_prof_promote	deps/jemalloc/src/arena.c	/^arena_prof_promote(tsdn_t *tsdn, const void *ptr, size_t usize) {$/;"	f	typeref:typename:void
arena_prof_tctx_get	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_prof_tctx_get(tsdn_t *tsdn, const void *ptr, alloc_ctx_t *alloc_ctx) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE prof_tctx_t *
arena_prof_tctx_reset	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_prof_tctx_reset(tsdn_t *tsdn, const void *ptr, UNUSED prof_tctx_t *tctx) {$/;"	f	typeref:typename:void
arena_prof_tctx_set	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_prof_tctx_set(tsdn_t *tsdn, const void *ptr, UNUSED size_t usize,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
arena_ralloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_ralloc /;"	d
arena_ralloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_ralloc /;"	d
arena_ralloc	deps/jemalloc/src/arena.c	/^arena_ralloc(tsdn_t *tsdn, arena_t *arena, void *ptr, size_t oldsize,$/;"	f	typeref:typename:void *
arena_ralloc_move_helper	deps/jemalloc/src/arena.c	/^arena_ralloc_move_helper(tsdn_t *tsdn, arena_t *arena, size_t usize,$/;"	f	typeref:typename:void *	file:
arena_ralloc_no_move	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_ralloc_no_move /;"	d
arena_ralloc_no_move	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_ralloc_no_move /;"	d
arena_ralloc_no_move	deps/jemalloc/src/arena.c	/^arena_ralloc_no_move(tsdn_t *tsdn, void *ptr, size_t oldsize, size_t size,$/;"	f	typeref:typename:bool
arena_reset	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_reset /;"	d
arena_reset	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_reset /;"	d
arena_reset	deps/jemalloc/src/arena.c	/^arena_reset(tsd_t *tsd, arena_t *arena) {$/;"	f	typeref:typename:void
arena_reset_finish_background_thread	deps/jemalloc/src/ctl.c	/^arena_reset_finish_background_thread(tsd_t *tsd, unsigned arena_ind) {$/;"	f	typeref:typename:void	file:
arena_reset_mallctl	deps/jemalloc/test/unit/pack.c	/^arena_reset_mallctl(unsigned arena_ind) {$/;"	f	typeref:typename:void	file:
arena_reset_prepare_background_thread	deps/jemalloc/src/ctl.c	/^arena_reset_prepare_background_thread(tsd_t *tsd, unsigned arena_ind) {$/;"	f	typeref:typename:void	file:
arena_retain_grow_limit_get_set	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_retain_grow_limit_get_set /;"	d
arena_retain_grow_limit_get_set	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_retain_grow_limit_get_set /;"	d
arena_retain_grow_limit_get_set	deps/jemalloc/src/arena.c	/^arena_retain_grow_limit_get_set(tsd_t *tsd, arena_t *arena, size_t *old_limit,$/;"	f	typeref:typename:bool
arena_s	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^struct arena_s {$/;"	s
arena_salloc	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_salloc(tsdn_t *tsdn, const void *ptr) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
arena_sdalloc	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_sdalloc(tsdn_t *tsdn, void *ptr, size_t size, tcache_t *tcache,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
arena_sdalloc_no_tcache	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_sdalloc_no_tcache(tsdn_t *tsdn, void *ptr, size_t size) {$/;"	f	typeref:typename:void
arena_set	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_set /;"	d
arena_set	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_set /;"	d
arena_set	deps/jemalloc/src/jemalloc.c	/^arena_set(unsigned ind, arena_t *arena) {$/;"	f	typeref:typename:void
arena_slab_alloc	deps/jemalloc/src/arena.c	/^arena_slab_alloc(tsdn_t *tsdn, arena_t *arena, szind_t binind,$/;"	f	typeref:typename:extent_t *	file:
arena_slab_alloc_hard	deps/jemalloc/src/arena.c	/^arena_slab_alloc_hard(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:extent_t *	file:
arena_slab_dalloc	deps/jemalloc/src/arena.c	/^arena_slab_dalloc(tsdn_t *tsdn, arena_t *arena, extent_t *slab) {$/;"	f	typeref:typename:void	file:
arena_slab_data_s	deps/jemalloc/include/jemalloc/internal/arena_structs_a.h	/^struct arena_slab_data_s {$/;"	s
arena_slab_data_t	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^typedef struct arena_slab_data_s arena_slab_data_t;$/;"	t	typeref:struct:arena_slab_data_s
arena_slab_reg_alloc	deps/jemalloc/src/arena.c	/^arena_slab_reg_alloc(extent_t *slab, const bin_info_t *bin_info) {$/;"	f	typeref:typename:void *	file:
arena_slab_reg_dalloc	deps/jemalloc/src/arena.c	/^arena_slab_reg_dalloc(extent_t *slab, arena_slab_data_t *slab_data, void *ptr) {$/;"	f	typeref:typename:void	file:
arena_slab_regind	deps/jemalloc/src/arena.c	/^arena_slab_regind(extent_t *slab, szind_t binind, const void *ptr) {$/;"	f	typeref:typename:size_t	file:
arena_stash_decayed	deps/jemalloc/src/arena.c	/^arena_stash_decayed(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:size_t	file:
arena_stats_accum_u64	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_accum_u64(arena_stats_u64_t *dst, uint64_t src) {$/;"	f	typeref:typename:void
arena_stats_accum_zu	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_accum_zu(atomic_zu_t *dst, size_t src) {$/;"	f	typeref:typename:void
arena_stats_add_u64	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_add_u64(tsdn_t *tsdn, arena_stats_t *arena_stats,$/;"	f	typeref:typename:void
arena_stats_add_zu	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_add_zu(tsdn_t *tsdn, arena_stats_t *arena_stats, atomic_zu_t *p,$/;"	f	typeref:typename:void
arena_stats_decay_s	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^struct arena_stats_decay_s {$/;"	s
arena_stats_decay_t	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^typedef struct arena_stats_decay_s arena_stats_decay_t;$/;"	t	typeref:struct:arena_stats_decay_s
arena_stats_init	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_init(UNUSED tsdn_t *tsdn, arena_stats_t *arena_stats) {$/;"	f	typeref:typename:bool
arena_stats_large_nrequests_add	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_large_nrequests_add(tsdn_t *tsdn, arena_stats_t *arena_stats,$/;"	f	typeref:typename:void
arena_stats_large_s	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^struct arena_stats_large_s {$/;"	s
arena_stats_large_t	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^typedef struct arena_stats_large_s arena_stats_large_t;$/;"	t	typeref:struct:arena_stats_large_s
arena_stats_lock	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_lock(tsdn_t *tsdn, arena_stats_t *arena_stats) {$/;"	f	typeref:typename:void
arena_stats_mapped_add	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_mapped_add(tsdn_t *tsdn, arena_stats_t *arena_stats, size_t size) {$/;"	f	typeref:typename:void
arena_stats_merge	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_stats_merge /;"	d
arena_stats_merge	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_stats_merge /;"	d
arena_stats_merge	deps/jemalloc/src/arena.c	/^arena_stats_merge(tsdn_t *tsdn, arena_t *arena, unsigned *nthreads,$/;"	f	typeref:typename:void
arena_stats_read_u64	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_read_u64(tsdn_t *tsdn, arena_stats_t *arena_stats,$/;"	f	typeref:typename:uint64_t
arena_stats_read_zu	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_read_zu(tsdn_t *tsdn, arena_stats_t *arena_stats, atomic_zu_t *p) {$/;"	f	typeref:typename:size_t
arena_stats_s	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^struct arena_stats_s {$/;"	s
arena_stats_sub_u64	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_sub_u64(tsdn_t *tsdn, arena_stats_t *arena_stats,$/;"	f	typeref:typename:UNUSED void
arena_stats_sub_zu	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_sub_zu(tsdn_t *tsdn, arena_stats_t *arena_stats, atomic_zu_t *p,$/;"	f	typeref:typename:void
arena_stats_t	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^typedef struct arena_stats_s arena_stats_t;$/;"	t	typeref:struct:arena_stats_s
arena_stats_u64_t	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^typedef atomic_u64_t arena_stats_u64_t;$/;"	t	typeref:typename:atomic_u64_t
arena_stats_u64_t	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^typedef uint64_t arena_stats_u64_t;$/;"	t	typeref:typename:uint64_t
arena_stats_unlock	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^arena_stats_unlock(tsdn_t *tsdn, arena_stats_t *arena_stats) {$/;"	f	typeref:typename:void
arena_t	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^typedef struct arena_s arena_t;$/;"	t	typeref:struct:arena_s
arena_tcache_fill_small	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_tcache_fill_small /;"	d
arena_tcache_fill_small	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_tcache_fill_small /;"	d
arena_tcache_fill_small	deps/jemalloc/src/arena.c	/^arena_tcache_fill_small(tsdn_t *tsdn, arena_t *arena, tcache_t *tcache,$/;"	f	typeref:typename:void
arena_tdata_get	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^arena_tdata_get(tsd_t *tsd, unsigned ind, bool refresh_if_missing) {$/;"	f	typeref:typename:arena_tdata_t *
arena_tdata_get_hard	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arena_tdata_get_hard /;"	d
arena_tdata_get_hard	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arena_tdata_get_hard /;"	d
arena_tdata_get_hard	deps/jemalloc/src/jemalloc.c	/^arena_tdata_get_hard(tsd_t *tsd, unsigned ind) {$/;"	f	typeref:typename:arena_tdata_t *
arena_tdata_s	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^struct arena_tdata_s {$/;"	s
arena_tdata_t	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^typedef struct arena_tdata_s arena_tdata_t;$/;"	t	typeref:struct:arena_tdata_s
arena_unbind	deps/jemalloc/src/jemalloc.c	/^arena_unbind(tsd_t *tsd, unsigned ind, bool internal) {$/;"	f	typeref:typename:void	file:
arena_vsalloc	deps/jemalloc/include/jemalloc/internal/arena_inlines_b.h	/^arena_vsalloc(tsdn_t *tsdn, const void *ptr) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
arenas	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	ctl_arena_t *arenas[2 + MALLOCX_ARENA_LIMIT];$/;"	m	struct:ctl_arenas_s	typeref:typename:ctl_arena_t * []
arenas	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arenas /;"	d
arenas	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arenas /;"	d
arenas_bin_i_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t arenas_bin_i_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
arenas_bin_node	deps/jemalloc/src/ctl.c	/^static const ctl_indexed_node_t arenas_bin_node[] = {$/;"	v	typeref:typename:const ctl_indexed_node_t[]	file:
arenas_create_ctl	deps/jemalloc/src/ctl.c	/^arenas_create_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
arenas_create_mallctl	deps/jemalloc/test/unit/pack.c	/^arenas_create_mallctl(void) {$/;"	f	typeref:typename:unsigned	file:
arenas_decay_ms_ctl_impl	deps/jemalloc/src/ctl.c	/^arenas_decay_ms_ctl_impl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	typeref:typename:int	file:
arenas_dirty_decay_ms_ctl	deps/jemalloc/src/ctl.c	/^arenas_dirty_decay_ms_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	typeref:typename:int	file:
arenas_i	deps/jemalloc/src/ctl.c	/^arenas_i(size_t i) {$/;"	f	typeref:typename:ctl_arena_t *	file:
arenas_i2a	deps/jemalloc/src/ctl.c	/^arenas_i2a(size_t i) {$/;"	f	typeref:typename:unsigned	file:
arenas_i2a_impl	deps/jemalloc/src/ctl.c	/^arenas_i2a_impl(size_t i, bool compat, bool validate) {$/;"	f	typeref:typename:unsigned	file:
arenas_i_impl	deps/jemalloc/src/ctl.c	/^arenas_i_impl(tsd_t *tsd, size_t i, bool compat, bool init) {$/;"	f	typeref:typename:ctl_arena_t *	file:
arenas_lextent_i_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t arenas_lextent_i_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
arenas_lextent_node	deps/jemalloc/src/ctl.c	/^static const ctl_indexed_node_t arenas_lextent_node[] = {$/;"	v	typeref:typename:const ctl_indexed_node_t[]	file:
arenas_lock	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arenas_lock /;"	d
arenas_lock	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arenas_lock /;"	d
arenas_lock	deps/jemalloc/src/jemalloc.c	/^malloc_mutex_t arenas_lock;$/;"	v	typeref:typename:malloc_mutex_t
arenas_lookup_ctl	deps/jemalloc/src/ctl.c	/^arenas_lookup_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
arenas_muzzy_decay_ms_ctl	deps/jemalloc/src/ctl.c	/^arenas_muzzy_decay_ms_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	typeref:typename:int	file:
arenas_narenas_ctl	deps/jemalloc/src/ctl.c	/^arenas_narenas_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
arenas_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t arenas_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
arenas_tdata_cleanup	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define arenas_tdata_cleanup /;"	d
arenas_tdata_cleanup	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define arenas_tdata_cleanup /;"	d
arenas_tdata_cleanup	deps/jemalloc/src/jemalloc.c	/^arenas_tdata_cleanup(tsd_t *tsd) {$/;"	f	typeref:typename:void
arg0	src/setproctitle.c	/^	const char *arg0;$/;"	m	struct:__anon6a58858f0108	typeref:typename:const char *	file:
argc	deps/lua/src/lua.c	/^  int argc;$/;"	m	struct:Smain	typeref:typename:int	file:
argc	deps/lua/src/luac.c	/^ int argc;$/;"	m	struct:Smain	typeref:typename:int	file:
argc	src/module.c	/^    int argc;$/;"	m	struct:RedisModuleCommandFilterCtx	typeref:typename:int	file:
argc	src/redis-cli.c	/^    int argc;$/;"	m	struct:__anon6af24fe90108	typeref:typename:int	file:
argc	src/redis-cli.c	/^    int argc;$/;"	m	struct:clusterManagerCommand	typeref:typename:int	file:
argc	src/server.h	/^    int argc, dbid, target;$/;"	m	struct:redisOp	typeref:typename:int
argc	src/server.h	/^    int argc;               \/* Num of arguments of current command. *\/$/;"	m	struct:client	typeref:typename:int
argc	src/server.h	/^    int argc;$/;"	m	struct:moduleLoadQueueEntry	typeref:typename:int
argc	src/server.h	/^    int argc;$/;"	m	struct:multiCmd	typeref:typename:int
argc	src/server.h	/^    int argc;$/;"	m	struct:sentinelLoadQueueEntry	typeref:typename:int
argc	src/slowlog.h	/^    int argc;$/;"	m	struct:slowlogEntry	typeref:typename:int
argc	tests/modules/blockedclient.c	/^    int argc;$/;"	m	struct:__anonb9428d530108	typeref:typename:int	file:
args	src/bio.h	/^typedef void lazy_free_fn(void *args[]);$/;"	t	typeref:typename:void lazy_free_fn (void * [])
args	src/redis-cli.c	/^    char *args;$/;"	m	struct:clusterManagerCommandDef	typeref:typename:char *	file:
argv	deps/lua/src/lua.c	/^  char **argv;$/;"	m	struct:Smain	typeref:typename:char **	file:
argv	deps/lua/src/luac.c	/^ char** argv;$/;"	m	struct:Smain	typeref:typename:char **	file:
argv	src/module.c	/^    RedisModuleString **argv;$/;"	m	struct:RedisModuleCommandFilterCtx	typeref:typename:RedisModuleString **	file:
argv	src/redis-cli.c	/^    char **argv;$/;"	m	struct:clusterManagerCommand	typeref:typename:char **	file:
argv	src/redis-cli.c	/^    sds *argv;$/;"	m	struct:__anon6af24fe90108	typeref:typename:sds *	file:
argv	src/redis-cli.c	/^typedef int clusterManagerCommandProc(int argc, char **argv);$/;"	t	typeref:typename:int clusterManagerCommandProc (int argc,char **)	file:
argv	src/sentinel.c	/^    char **argv;            \/* Arguments to call the script. *\/$/;"	m	struct:sentinelScriptJob	typeref:typename:char **	file:
argv	src/server.h	/^    robj **argv;            \/* Arguments of current command. *\/$/;"	m	struct:client	typeref:typename:robj **
argv	src/server.h	/^    robj **argv;$/;"	m	struct:moduleLoadQueueEntry	typeref:typename:robj **
argv	src/server.h	/^    robj **argv;$/;"	m	struct:multiCmd	typeref:typename:robj **
argv	src/server.h	/^    robj **argv;$/;"	m	struct:redisOp	typeref:typename:robj **
argv	src/server.h	/^    sds *argv;$/;"	m	struct:sentinelLoadQueueEntry	typeref:typename:sds *
argv	src/slowlog.h	/^    robj **argv;$/;"	m	struct:slowlogEntry	typeref:typename:robj **
argv	tests/modules/blockedclient.c	/^    RedisModuleString **argv;$/;"	m	struct:__anonb9428d530108	typeref:typename:RedisModuleString **	file:
argv_len_sum	src/server.h	/^    size_t argv_len_sum;    \/* Sum of lengths of objects in argv list. *\/$/;"	m	struct:client	typeref:typename:size_t
arith_op	deps/lua/src/lvm.c	/^#define arith_op(/;"	d	file:
arity	src/redis-cli.c	/^    int arity;$/;"	m	struct:clusterManagerCommandDef	typeref:typename:int	file:
arity	src/server.h	/^    int arity;$/;"	m	struct:redisCommand	typeref:typename:int
array	deps/lua/src/lobject.h	/^  TValue *array;  \/* array part *\/$/;"	m	struct:Table	typeref:typename:TValue *
array	src/geo.h	/^    struct geoPoint *array;$/;"	m	struct:geoArray	typeref:struct:geoPoint *
array	src/module.c	/^        struct RedisModuleCallReply *array; \/* Array of sub-reply elements. *\/$/;"	m	union:RedisModuleCallReply::__anon967b4733040a	typeref:struct:RedisModuleCallReply *	file:
arrayindex	deps/lua/src/ltable.c	/^static int arrayindex (const TValue *key) {$/;"	f	typeref:typename:int	file:
ascii_logo	src/asciilogo.h	/^const char *ascii_logo =$/;"	v	typeref:typename:const char *
askPassword	src/redis-cli.c	/^static sds askPassword(const char *msg) {$/;"	f	typeref:typename:sds	file:
askingCommand	src/cluster.c	/^void askingCommand(client *c) {$/;"	f	typeref:typename:void
askpass	src/redis-cli.c	/^    int askpass;$/;"	m	struct:config	typeref:typename:int	file:
assert	deps/hiredis/test.c	/^#define assert(/;"	d	file:
assert	deps/jemalloc/include/jemalloc/internal/assert.h	/^#define assert(/;"	d
assert	deps/jemalloc/src/malloc_io.c	/^#define assert(/;"	d	file:
assert	deps/jemalloc/test/include/test/jemalloc_test.h	/^#define assert(/;"	d
assert	deps/jemalloc/test/include/test/jemalloc_test.h.in	/^#define assert(/;"	d	file:
assert	src/redisassert.h	/^#define assert(/;"	d
assertReplyAndFree	deps/hiredis/examples/example-push.c	/^static void assertReplyAndFree(redisContext *context, redisReply *reply, int type) {$/;"	f	typeref:typename:void	file:
assert_b_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_b_eq(/;"	d
assert_b_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_b_ne(/;"	d
assert_c_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_c_eq(/;"	d
assert_c_ge	deps/jemalloc/test/include/test/test.h	/^#define assert_c_ge(/;"	d
assert_c_gt	deps/jemalloc/test/include/test/test.h	/^#define assert_c_gt(/;"	d
assert_c_le	deps/jemalloc/test/include/test/test.h	/^#define assert_c_le(/;"	d
assert_c_lt	deps/jemalloc/test/include/test/test.h	/^#define assert_c_lt(/;"	d
assert_c_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_c_ne(/;"	d
assert_cmp	deps/jemalloc/test/include/test/test.h	/^#define assert_cmp(/;"	d
assert_d32_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_d32_eq(/;"	d
assert_d32_ge	deps/jemalloc/test/include/test/test.h	/^#define assert_d32_ge(/;"	d
assert_d32_gt	deps/jemalloc/test/include/test/test.h	/^#define assert_d32_gt(/;"	d
assert_d32_le	deps/jemalloc/test/include/test/test.h	/^#define assert_d32_le(/;"	d
assert_d32_lt	deps/jemalloc/test/include/test/test.h	/^#define assert_d32_lt(/;"	d
assert_d32_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_d32_ne(/;"	d
assert_d64_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_d64_eq(/;"	d
assert_d64_ge	deps/jemalloc/test/include/test/test.h	/^#define assert_d64_ge(/;"	d
assert_d64_gt	deps/jemalloc/test/include/test/test.h	/^#define assert_d64_gt(/;"	d
assert_d64_le	deps/jemalloc/test/include/test/test.h	/^#define assert_d64_le(/;"	d
assert_d64_lt	deps/jemalloc/test/include/test/test.h	/^#define assert_d64_lt(/;"	d
assert_d64_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_d64_ne(/;"	d
assert_d_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_d_eq(/;"	d
assert_d_ge	deps/jemalloc/test/include/test/test.h	/^#define assert_d_ge(/;"	d
assert_d_gt	deps/jemalloc/test/include/test/test.h	/^#define assert_d_gt(/;"	d
assert_d_le	deps/jemalloc/test/include/test/test.h	/^#define assert_d_le(/;"	d
assert_d_lt	deps/jemalloc/test/include/test/test.h	/^#define assert_d_lt(/;"	d
assert_d_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_d_ne(/;"	d
assert_emit_output	deps/jemalloc/test/unit/emitter.c	/^assert_emit_output(void (*emit_fn)(emitter_t *),$/;"	f	typeref:typename:void	file:
assert_false	deps/jemalloc/test/include/test/test.h	/^#define assert_false(/;"	d
assert_jd_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_jd_eq(/;"	d
assert_jd_ge	deps/jemalloc/test/include/test/test.h	/^#define assert_jd_ge(/;"	d
assert_jd_gt	deps/jemalloc/test/include/test/test.h	/^#define assert_jd_gt(/;"	d
assert_jd_le	deps/jemalloc/test/include/test/test.h	/^#define assert_jd_le(/;"	d
assert_jd_lt	deps/jemalloc/test/include/test/test.h	/^#define assert_jd_lt(/;"	d
assert_jd_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_jd_ne(/;"	d
assert_ju_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_ju_eq(/;"	d
assert_ju_ge	deps/jemalloc/test/include/test/test.h	/^#define assert_ju_ge(/;"	d
assert_ju_gt	deps/jemalloc/test/include/test/test.h	/^#define assert_ju_gt(/;"	d
assert_ju_le	deps/jemalloc/test/include/test/test.h	/^#define assert_ju_le(/;"	d
assert_ju_lt	deps/jemalloc/test/include/test/test.h	/^#define assert_ju_lt(/;"	d
assert_ju_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_ju_ne(/;"	d
assert_ld_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_ld_eq(/;"	d
assert_ld_ge	deps/jemalloc/test/include/test/test.h	/^#define assert_ld_ge(/;"	d
assert_ld_gt	deps/jemalloc/test/include/test/test.h	/^#define assert_ld_gt(/;"	d
assert_ld_le	deps/jemalloc/test/include/test/test.h	/^#define assert_ld_le(/;"	d
assert_ld_lt	deps/jemalloc/test/include/test/test.h	/^#define assert_ld_lt(/;"	d
assert_ld_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_ld_ne(/;"	d
assert_lu_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_lu_eq(/;"	d
assert_lu_ge	deps/jemalloc/test/include/test/test.h	/^#define assert_lu_ge(/;"	d
assert_lu_gt	deps/jemalloc/test/include/test/test.h	/^#define assert_lu_gt(/;"	d
assert_lu_le	deps/jemalloc/test/include/test/test.h	/^#define assert_lu_le(/;"	d
assert_lu_lt	deps/jemalloc/test/include/test/test.h	/^#define assert_lu_lt(/;"	d
assert_lu_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_lu_ne(/;"	d
assert_nonempty_alloc	deps/jemalloc/src/jemalloc.c	/^	bool assert_nonempty_alloc;$/;"	m	struct:static_opts_s	typeref:typename:bool	file:
assert_not_implemented	deps/jemalloc/include/jemalloc/internal/assert.h	/^#define assert_not_implemented(/;"	d
assert_not_implemented	deps/jemalloc/src/malloc_io.c	/^#define assert_not_implemented(/;"	d	file:
assert_not_implemented	deps/jemalloc/test/include/test/jemalloc_test.h	/^#define assert_not_implemented(/;"	d
assert_not_implemented	deps/jemalloc/test/include/test/jemalloc_test.h.in	/^#define assert_not_implemented(/;"	d	file:
assert_not_reached	deps/jemalloc/test/include/test/test.h	/^#define assert_not_reached(/;"	d
assert_p_eq	deps/jemalloc/test/unit/atomic.c	/^#define assert_p_eq /;"	d	file:
assert_ptr_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_ptr_eq(/;"	d
assert_ptr_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_ptr_ne(/;"	d
assert_ptr_not_null	deps/jemalloc/test/include/test/test.h	/^#define assert_ptr_not_null(/;"	d
assert_ptr_null	deps/jemalloc/test/include/test/test.h	/^#define assert_ptr_null(/;"	d
assert_qd_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_qd_eq(/;"	d
assert_qd_ge	deps/jemalloc/test/include/test/test.h	/^#define assert_qd_ge(/;"	d
assert_qd_gt	deps/jemalloc/test/include/test/test.h	/^#define assert_qd_gt(/;"	d
assert_qd_le	deps/jemalloc/test/include/test/test.h	/^#define assert_qd_le(/;"	d
assert_qd_lt	deps/jemalloc/test/include/test/test.h	/^#define assert_qd_lt(/;"	d
assert_qd_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_qd_ne(/;"	d
assert_qu_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_qu_eq(/;"	d
assert_qu_ge	deps/jemalloc/test/include/test/test.h	/^#define assert_qu_ge(/;"	d
assert_qu_gt	deps/jemalloc/test/include/test/test.h	/^#define assert_qu_gt(/;"	d
assert_qu_le	deps/jemalloc/test/include/test/test.h	/^#define assert_qu_le(/;"	d
assert_qu_lt	deps/jemalloc/test/include/test/test.h	/^#define assert_qu_lt(/;"	d
assert_qu_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_qu_ne(/;"	d
assert_str_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_str_eq(/;"	d
assert_str_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_str_ne(/;"	d
assert_true	deps/jemalloc/test/include/test/test.h	/^#define assert_true(/;"	d
assert_tsd_data_cleanup_done	deps/jemalloc/src/tsd.c	/^assert_tsd_data_cleanup_done(tsd_t *tsd) {$/;"	f	typeref:typename:void	file:
assert_u32_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_u32_eq(/;"	d
assert_u32_ge	deps/jemalloc/test/include/test/test.h	/^#define assert_u32_ge(/;"	d
assert_u32_gt	deps/jemalloc/test/include/test/test.h	/^#define assert_u32_gt(/;"	d
assert_u32_le	deps/jemalloc/test/include/test/test.h	/^#define assert_u32_le(/;"	d
assert_u32_lt	deps/jemalloc/test/include/test/test.h	/^#define assert_u32_lt(/;"	d
assert_u32_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_u32_ne(/;"	d
assert_u64_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_u64_eq(/;"	d
assert_u64_ge	deps/jemalloc/test/include/test/test.h	/^#define assert_u64_ge(/;"	d
assert_u64_gt	deps/jemalloc/test/include/test/test.h	/^#define assert_u64_gt(/;"	d
assert_u64_le	deps/jemalloc/test/include/test/test.h	/^#define assert_u64_le(/;"	d
assert_u64_lt	deps/jemalloc/test/include/test/test.h	/^#define assert_u64_lt(/;"	d
assert_u64_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_u64_ne(/;"	d
assert_u_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_u_eq(/;"	d
assert_u_ge	deps/jemalloc/test/include/test/test.h	/^#define assert_u_ge(/;"	d
assert_u_gt	deps/jemalloc/test/include/test/test.h	/^#define assert_u_gt(/;"	d
assert_u_le	deps/jemalloc/test/include/test/test.h	/^#define assert_u_le(/;"	d
assert_u_lt	deps/jemalloc/test/include/test/test.h	/^#define assert_u_lt(/;"	d
assert_u_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_u_ne(/;"	d
assert_x_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_x_eq(/;"	d
assert_x_ge	deps/jemalloc/test/include/test/test.h	/^#define assert_x_ge(/;"	d
assert_x_gt	deps/jemalloc/test/include/test/test.h	/^#define assert_x_gt(/;"	d
assert_x_le	deps/jemalloc/test/include/test/test.h	/^#define assert_x_le(/;"	d
assert_x_lt	deps/jemalloc/test/include/test/test.h	/^#define assert_x_lt(/;"	d
assert_x_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_x_ne(/;"	d
assert_zd_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_zd_eq(/;"	d
assert_zd_ge	deps/jemalloc/test/include/test/test.h	/^#define assert_zd_ge(/;"	d
assert_zd_gt	deps/jemalloc/test/include/test/test.h	/^#define assert_zd_gt(/;"	d
assert_zd_le	deps/jemalloc/test/include/test/test.h	/^#define assert_zd_le(/;"	d
assert_zd_lt	deps/jemalloc/test/include/test/test.h	/^#define assert_zd_lt(/;"	d
assert_zd_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_zd_ne(/;"	d
assert_zu_eq	deps/jemalloc/test/include/test/test.h	/^#define assert_zu_eq(/;"	d
assert_zu_ge	deps/jemalloc/test/include/test/test.h	/^#define assert_zu_ge(/;"	d
assert_zu_gt	deps/jemalloc/test/include/test/test.h	/^#define assert_zu_gt(/;"	d
assert_zu_le	deps/jemalloc/test/include/test/test.h	/^#define assert_zu_le(/;"	d
assert_zu_lt	deps/jemalloc/test/include/test/test.h	/^#define assert_zu_lt(/;"	d
assert_zu_ne	deps/jemalloc/test/include/test/test.h	/^#define assert_zu_ne(/;"	d
assignment	deps/lua/src/lparser.c	/^static void assignment (LexState *ls, struct LHS_assign *lh, int nvars) {$/;"	f	typeref:typename:void	file:
astats	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	arena_stats_t astats;$/;"	m	struct:ctl_arena_stats_s	typeref:typename:arena_stats_t
astats	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	ctl_arena_stats_t *astats;$/;"	m	struct:ctl_arena_s	typeref:typename:ctl_arena_stats_t *
astats	deps/jemalloc/src/ctl.c	/^				ctl_arena_stats_t	astats;$/;"	m	struct:arenas_i_impl::container_s	typeref:typename:ctl_arena_stats_t	file:
async.o	deps/hiredis/Makefile	/^async.o: async.c fmacros.h alloc.h async.h hiredis.h read.h sds.h net.h dict.c dict.h win32.h as/;"	t
async_push_cb	deps/hiredis/hiredis.h	/^    redisAsyncPushFn *async_push_cb;$/;"	m	struct:__anon7daed6b50108	typeref:typename:redisAsyncPushFn *
async_read	deps/hiredis/hiredis.h	/^    void (*async_read)(struct redisAsyncContext *);$/;"	m	struct:redisContextFuncs	typeref:typename:void (*)(struct redisAsyncContext *)
async_write	deps/hiredis/hiredis.h	/^    void (*async_write)(struct redisAsyncContext *);$/;"	m	struct:redisContextFuncs	typeref:typename:void (*)(struct redisAsyncContext *)
atexit_registered	deps/linenoise/linenoise.c	/^static int atexit_registered = 0; \/* Register atexit just 1 time. *\/$/;"	v	typeref:typename:int	file:
atomic	deps/lua/src/lgc.c	/^static void atomic (lua_State *L) {$/;"	f	typeref:typename:void	file:
atomicDecr	src/atomicvar.h	/^#define atomicDecr(/;"	d
atomicGet	src/atomicvar.h	/^#define atomicGet(/;"	d
atomicGetIncr	src/atomicvar.h	/^#define atomicGetIncr(/;"	d
atomicGetWithSync	src/atomicvar.h	/^#define atomicGetWithSync(/;"	d
atomicIncr	src/atomicvar.h	/^#define atomicIncr(/;"	d
atomicSet	src/atomicvar.h	/^#define atomicSet(/;"	d
atomicSetWithSync	src/atomicvar.h	/^#define atomicSetWithSync(/;"	d
atomic_enum_to_builtin	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^atomic_enum_to_builtin(atomic_memory_order_t mo) {$/;"	f	typeref:typename:ATOMIC_INLINE int
atomic_fence	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	/^#define atomic_fence /;"	d
atomic_fence	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^atomic_fence(atomic_memory_order_t mo) {$/;"	f	typeref:typename:ATOMIC_INLINE void
atomic_fence	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^atomic_fence(atomic_memory_order_t mo) {$/;"	f	typeref:typename:ATOMIC_INLINE void
atomic_fence	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^atomic_fence(atomic_memory_order_t mo) {$/;"	f	typeref:typename:ATOMIC_INLINE void
atomic_memory_order_acq_rel	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	/^#define atomic_memory_order_acq_rel /;"	d
atomic_memory_order_acq_rel	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^	atomic_memory_order_acq_rel,$/;"	e	enum:__anonc84e73e60103
atomic_memory_order_acq_rel	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^	atomic_memory_order_acq_rel,$/;"	e	enum:__anon2e0c60e60103
atomic_memory_order_acq_rel	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^	atomic_memory_order_acq_rel,$/;"	e	enum:__anon51b74b560103
atomic_memory_order_acquire	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	/^#define atomic_memory_order_acquire /;"	d
atomic_memory_order_acquire	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^	atomic_memory_order_acquire,$/;"	e	enum:__anonc84e73e60103
atomic_memory_order_acquire	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^	atomic_memory_order_acquire,$/;"	e	enum:__anon2e0c60e60103
atomic_memory_order_acquire	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^	atomic_memory_order_acquire,$/;"	e	enum:__anon51b74b560103
atomic_memory_order_relaxed	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	/^#define atomic_memory_order_relaxed /;"	d
atomic_memory_order_relaxed	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^	atomic_memory_order_relaxed,$/;"	e	enum:__anonc84e73e60103
atomic_memory_order_relaxed	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^	atomic_memory_order_relaxed,$/;"	e	enum:__anon2e0c60e60103
atomic_memory_order_relaxed	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^	atomic_memory_order_relaxed,$/;"	e	enum:__anon51b74b560103
atomic_memory_order_release	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	/^#define atomic_memory_order_release /;"	d
atomic_memory_order_release	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^	atomic_memory_order_release,$/;"	e	enum:__anonc84e73e60103
atomic_memory_order_release	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^	atomic_memory_order_release,$/;"	e	enum:__anon2e0c60e60103
atomic_memory_order_release	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^	atomic_memory_order_release,$/;"	e	enum:__anon51b74b560103
atomic_memory_order_seq_cst	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	/^#define atomic_memory_order_seq_cst /;"	d
atomic_memory_order_seq_cst	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^	atomic_memory_order_seq_cst$/;"	e	enum:__anonc84e73e60103
atomic_memory_order_seq_cst	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^	atomic_memory_order_seq_cst$/;"	e	enum:__anon2e0c60e60103
atomic_memory_order_seq_cst	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^	atomic_memory_order_seq_cst$/;"	e	enum:__anon51b74b560103
atomic_memory_order_t	deps/jemalloc/include/jemalloc/internal/atomic_c11.h	/^#define atomic_memory_order_t /;"	d
atomic_memory_order_t	deps/jemalloc/include/jemalloc/internal/atomic_gcc_atomic.h	/^} atomic_memory_order_t;$/;"	t	typeref:enum:__anonc84e73e60103
atomic_memory_order_t	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^} atomic_memory_order_t;$/;"	t	typeref:enum:__anon2e0c60e60103
atomic_memory_order_t	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^} atomic_memory_order_t;$/;"	t	typeref:enum:__anon51b74b560103
atomic_post_sc_store_fence	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^atomic_post_sc_store_fence() {$/;"	f	typeref:typename:ATOMIC_INLINE void
atomic_pre_sc_load_fence	deps/jemalloc/include/jemalloc/internal/atomic_gcc_sync.h	/^atomic_pre_sc_load_fence() {$/;"	f	typeref:typename:ATOMIC_INLINE void
atomic_repr_0_t	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^typedef char atomic_repr_0_t;$/;"	t	typeref:typename:char
atomic_repr_1_t	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^typedef short atomic_repr_1_t;$/;"	t	typeref:typename:short
atomic_repr_2_t	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^typedef long atomic_repr_2_t;$/;"	t	typeref:typename:long
atomic_repr_3_t	deps/jemalloc/include/jemalloc/internal/atomic_msvc.h	/^typedef __int64 atomic_repr_3_t;$/;"	t	typeref:typename:__int64
attached	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	bool			attached;$/;"	m	struct:prof_tdata_s	typeref:typename:bool
attempted_compress	src/quicklist.h	/^    unsigned int attempted_compress : 1; \/* node can't compress; too small *\/$/;"	m	struct:quicklistNode	typeref:typename:unsigned int:1
auth	src/redis-benchmark.c	/^    char *auth;$/;"	m	struct:config	typeref:typename:char *	file:
auth	src/redis-cli.c	/^    char *auth;$/;"	m	struct:config	typeref:typename:char *	file:
authCommand	src/acl.c	/^void authCommand(client *c) {$/;"	f	typeref:typename:void
authRequired	src/networking.c	/^int authRequired(client *c) {$/;"	f	typeref:typename:int
auth_callback	src/server.h	/^    RedisModuleUserChangedFunc auth_callback; \/* Module callback to execute$/;"	m	struct:client	typeref:typename:RedisModuleUserChangedFunc
auth_callback_privdata	src/server.h	/^    void *auth_callback_privdata; \/* Private data that is passed when the auth$/;"	m	struct:client	typeref:typename:void *
auth_module	src/server.h	/^    void *auth_module;      \/* The module that owns the callback, which is used$/;"	m	struct:client	typeref:typename:void *
auth_pass	src/sentinel.c	/^    char *auth_pass;    \/* Password to use for AUTH against master & replica. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:char *	file:
auth_user	src/sentinel.c	/^    char *auth_user;    \/* Username for ACLs AUTH against master & replica. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:char *	file:
authenticateClientWithUser	src/module.c	/^static int authenticateClientWithUser(RedisModuleCtx *ctx, user *user, RedisModuleUserChangedFun/;"	f	typeref:typename:int	file:
authenticated	src/server.h	/^    int authenticated;      \/* Needed when the default user requires auth. *\/$/;"	m	struct:client	typeref:typename:int
autoMemoryAdd	src/module.c	/^void autoMemoryAdd(RedisModuleCtx *ctx, int type, void *ptr) {$/;"	f	typeref:typename:void
autoMemoryCollect	src/module.c	/^void autoMemoryCollect(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:void
autoMemoryFreed	src/module.c	/^int autoMemoryFreed(RedisModuleCtx *ctx, int type, void *ptr) {$/;"	f	typeref:typename:int
auto_thp_switched	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	bool		auto_thp_switched;$/;"	m	struct:base_s	typeref:typename:bool
autosync	src/rio.h	/^            off_t autosync; \/* fsync after 'autosync' bytes written. *\/$/;"	m	struct:_rio::__anonb6066a3c010a::__anonb6066a3c0308	typeref:typename:off_t
aux	deps/lua/src/lparser.h	/^    struct { int info, aux; } s;$/;"	m	struct:expdesc::__anon581f0db7020a::__anon581f0db70308	typeref:typename:int
aux_close	deps/lua/src/liolib.c	/^static int aux_close (lua_State *L) {$/;"	f	typeref:typename:int	file:
aux_getn	deps/lua/src/ltablib.c	/^#define aux_getn(/;"	d	file:
aux_lines	deps/lua/src/liolib.c	/^static void aux_lines (lua_State *L, int idx, int toclose) {$/;"	f	typeref:typename:void	file:
aux_load	src/module.c	/^            moduleTypeAuxLoadFunc aux_load;$/;"	m	struct:RM_CreateDataType::typemethods::__anon967b47330608	typeref:typename:moduleTypeAuxLoadFunc	file:
aux_load	src/redismodule.h	/^    RedisModuleTypeAuxLoadFunc aux_load;$/;"	m	struct:RedisModuleTypeMethods	typeref:typename:RedisModuleTypeAuxLoadFunc
aux_load	src/server.h	/^    moduleTypeAuxLoadFunc aux_load;$/;"	m	struct:RedisModuleType	typeref:typename:moduleTypeAuxLoadFunc
aux_save	src/module.c	/^            moduleTypeAuxSaveFunc aux_save;$/;"	m	struct:RM_CreateDataType::typemethods::__anon967b47330608	typeref:typename:moduleTypeAuxSaveFunc	file:
aux_save	src/redismodule.h	/^    RedisModuleTypeAuxSaveFunc aux_save;$/;"	m	struct:RedisModuleTypeMethods	typeref:typename:RedisModuleTypeAuxSaveFunc
aux_save	src/server.h	/^    moduleTypeAuxSaveFunc aux_save;$/;"	m	struct:RedisModuleType	typeref:typename:moduleTypeAuxSaveFunc
aux_save_triggers	src/module.c	/^            int aux_save_triggers;$/;"	m	struct:RM_CreateDataType::typemethods::__anon967b47330608	typeref:typename:int	file:
aux_save_triggers	src/redismodule.h	/^    int aux_save_triggers;$/;"	m	struct:RedisModuleTypeMethods	typeref:typename:int
aux_save_triggers	src/server.h	/^    int aux_save_triggers;$/;"	m	struct:RedisModuleType	typeref:typename:int
aux_upvalue	deps/lua/src/lapi.c	/^static const char *aux_upvalue (StkId fi, int n, TValue **val) {$/;"	f	typeref:typename:const char *	file:
auxgetinfo	deps/lua/src/ldebug.c	/^static int auxgetinfo (lua_State *L, const char *what, lua_Debug *ar,$/;"	f	typeref:typename:int	file:
auxopen	deps/lua/src/lbaselib.c	/^static void auxopen (lua_State *L, const char *name,$/;"	f	typeref:typename:void	file:
auxresume	deps/lua/src/lbaselib.c	/^static int auxresume (lua_State *L, lua_State *co, int narg) {$/;"	f	typeref:typename:int	file:
auxsort	deps/lua/src/ltablib.c	/^static void auxsort (lua_State *L, int l, int u) {$/;"	f	typeref:typename:void	file:
auxupvalue	deps/lua/src/ldblib.c	/^static int auxupvalue (lua_State *L, int get) {$/;"	f	typeref:typename:int	file:
avail	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	extent_heap_t	avail[NSIZES];$/;"	m	struct:base_s	typeref:typename:extent_heap_t[]
avail	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	void **avail;$/;"	m	struct:cache_bin_s	typeref:typename:void **
avg	src/latency.h	/^    uint32_t avg;           \/* Average of current samples. *\/$/;"	m	struct:latencyStats	typeref:typename:uint32_t
avg_ttl	src/server.h	/^    long long avg_ttl;          \/* Average TTL, just for stats *\/$/;"	m	struct:redisDb	typeref:typename:long long
b	deps/linenoise/linenoise.c	/^    char *b;$/;"	m	struct:abuf	typeref:typename:char *	file:
b	deps/lua/src/ldo.c	/^  luai_jmpbuf b;$/;"	m	struct:lua_longjmp	typeref:typename:luai_jmpbuf	file:
b	deps/lua/src/lobject.h	/^  int b;$/;"	m	union:__anona52fc941010a	typeref:typename:int
b	deps/lua/src/lua_bit.c	/^  UBits b = barg(L, 1);$/;"	v	typeref:typename:UBits
b	deps/lua/src/lua_bit.c	/^  UBits b;$/;"	m	union:__anonc7e4cb99010a	typeref:typename:UBits	file:
b	deps/lua/src/lua_bit.c	/^  uint64_t b;$/;"	m	union:__anonc7e4cb99010a	typeref:typename:uint64_t	file:
b	deps/lua/src/lua_cmsgpack.c	/^    unsigned char *b;$/;"	m	struct:mp_buf	typeref:typename:unsigned char *	file:
b	deps/lua/src/lundump.c	/^ Mbuffer* b;$/;"	m	struct:__anonbd9d9e9e0108	typeref:typename:Mbuffer *	file:
b0	deps/jemalloc/src/base.c	/^static base_t *b0;$/;"	v	typeref:typename:base_t *	file:
b0get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define b0get /;"	d
b0get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define b0get /;"	d
b0get	deps/jemalloc/src/base.c	/^b0get(void) {$/;"	f	typeref:typename:base_t *
b_pack	deps/lua/src/lua_struct.c	/^static int b_pack (lua_State *L) {$/;"	f	typeref:typename:int	file:
b_size	deps/lua/src/lua_struct.c	/^static int b_size (lua_State *L) {$/;"	f	typeref:typename:int	file:
b_unpack	deps/lua/src/lua_struct.c	/^static int b_unpack (lua_State *L) {$/;"	f	typeref:typename:int	file:
backgroundRewriteDoneHandler	src/aof.c	/^void backgroundRewriteDoneHandler(int exitcode, int bysignal) {$/;"	f	typeref:typename:void
backgroundSaveDoneHandler	src/rdb.c	/^void backgroundSaveDoneHandler(int exitcode, int bysignal) {$/;"	f	typeref:typename:void
backgroundSaveDoneHandlerDisk	src/rdb.c	/^static void backgroundSaveDoneHandlerDisk(int exitcode, int bysignal) {$/;"	f	typeref:typename:void	file:
backgroundSaveDoneHandlerSocket	src/rdb.c	/^static void backgroundSaveDoneHandlerSocket(int exitcode, int bysignal) {$/;"	f	typeref:typename:void	file:
background_duration	src/module.c	/^    uint64_t background_duration; \/* Current command background time duration.$/;"	m	struct:RedisModuleBlockedClient	typeref:typename:uint64_t	file:
background_thread	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	background_thread_stats_t background_thread;$/;"	m	struct:ctl_stats_s	typeref:typename:background_thread_stats_t
background_thread_boot0	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define background_thread_boot0 /;"	d
background_thread_boot0	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define background_thread_boot0 /;"	d
background_thread_boot1	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define background_thread_boot1 /;"	d
background_thread_boot1	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define background_thread_boot1 /;"	d
background_thread_boot1	deps/jemalloc/src/background_thread.c	/^background_thread_boot1(tsdn_t *tsdn) {$/;"	f	typeref:typename:bool
background_thread_create	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define background_thread_create /;"	d
background_thread_create	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define background_thread_create /;"	d
background_thread_create	deps/jemalloc/src/background_thread.c	/^bool background_thread_create(tsd_t *tsd, unsigned arena_ind) NOT_REACHED$/;"	f	typeref:typename:bool
background_thread_ctl	deps/jemalloc/src/ctl.c	/^background_thread_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	typeref:typename:int	file:
background_thread_ctl_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define background_thread_ctl_init /;"	d
background_thread_ctl_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define background_thread_ctl_init /;"	d
background_thread_enabled	deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h	/^background_thread_enabled(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
background_thread_enabled_set	deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h	/^background_thread_enabled_set(tsdn_t *tsdn, bool state) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
background_thread_enabled_state	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define background_thread_enabled_state /;"	d
background_thread_enabled_state	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define background_thread_enabled_state /;"	d
background_thread_enabled_state	deps/jemalloc/src/background_thread.c	/^atomic_b_t background_thread_enabled_state;$/;"	v	typeref:typename:atomic_b_t
background_thread_indefinite_sleep	deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h	/^background_thread_indefinite_sleep(background_thread_info_t *info) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
background_thread_info	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define background_thread_info /;"	d
background_thread_info	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define background_thread_info /;"	d
background_thread_info	deps/jemalloc/src/background_thread.c	/^background_thread_info_t *background_thread_info;$/;"	v	typeref:typename:background_thread_info_t *
background_thread_info_s	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^struct background_thread_info_s {$/;"	s
background_thread_info_t	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^typedef struct background_thread_info_s background_thread_info_t;$/;"	t	typeref:struct:background_thread_info_s
background_thread_interval_check	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define background_thread_interval_check /;"	d
background_thread_interval_check	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define background_thread_interval_check /;"	d
background_thread_lock	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define background_thread_lock /;"	d
background_thread_lock	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define background_thread_lock /;"	d
background_thread_lock	deps/jemalloc/src/background_thread.c	/^malloc_mutex_t background_thread_lock;$/;"	v	typeref:typename:malloc_mutex_t
background_thread_paused	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	background_thread_paused,$/;"	e	enum:__anon3dd9610f0103
background_thread_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define background_thread_postfork_child /;"	d
background_thread_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define background_thread_postfork_child /;"	d
background_thread_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define background_thread_postfork_parent /;"	d
background_thread_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define background_thread_postfork_parent /;"	d
background_thread_prefork0	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define background_thread_prefork0 /;"	d
background_thread_prefork0	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define background_thread_prefork0 /;"	d
background_thread_prefork1	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define background_thread_prefork1 /;"	d
background_thread_prefork1	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define background_thread_prefork1 /;"	d
background_thread_started	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	background_thread_started,$/;"	e	enum:__anon3dd9610f0103
background_thread_state_t	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^} background_thread_state_t;$/;"	t	typeref:enum:__anon3dd9610f0103
background_thread_stats_read	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define background_thread_stats_read /;"	d
background_thread_stats_read	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define background_thread_stats_read /;"	d
background_thread_stats_s	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^struct background_thread_stats_s {$/;"	s
background_thread_stats_t	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^typedef struct background_thread_stats_s background_thread_stats_t;$/;"	t	typeref:struct:background_thread_stats_s
background_thread_stopped	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	background_thread_stopped,$/;"	e	enum:__anon3dd9610f0103
background_thread_wakeup_time_get	deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h	/^background_thread_wakeup_time_get(background_thread_info_t *info) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE uint64_t
background_thread_wakeup_time_set	deps/jemalloc/include/jemalloc/internal/background_thread_inlines.h	/^background_thread_wakeup_time_set(tsdn_t *tsdn, background_thread_info_t *info,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
background_threads_disable	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define background_threads_disable /;"	d
background_threads_disable	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define background_threads_disable /;"	d
background_threads_enable	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define background_threads_enable /;"	d
background_threads_enable	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define background_threads_enable /;"	d
background_timer	src/module.c	/^    monotime background_timer; \/* Timer tracking the start of background work *\/$/;"	m	struct:RedisModuleBlockedClient	typeref:typename:monotime	file:
backlog	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	size_t			backlog[SMOOTHSTEP_NSTEPS];$/;"	m	struct:arena_decay_s	typeref:typename:size_t[]
backupDb	src/db.c	/^dbBackup *backupDb(void) {$/;"	f	typeref:typename:dbBackup *
backup_dir	src/redis-cli.c	/^    char *backup_dir;$/;"	m	struct:clusterManagerCommand	typeref:typename:char *	file:
backward	src/server.h	/^    struct zskiplistNode *backward;$/;"	m	struct:zskiplistNode	typeref:struct:zskiplistNode *
balance	src/redis-cli.c	/^    int balance;    \/* Used by rebalance *\/$/;"	m	struct:clusterManagerNode	typeref:typename:int	file:
barg	deps/lua/src/lua_bit.c	/^static UBits barg(lua_State *L, int idx)$/;"	f	typeref:typename:UBits	file:
base	deps/hiredis/adapters/libevent.h	/^    struct event_base *base;$/;"	m	struct:redisLibeventEvents	typeref:struct:event_base *
base	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	atomic_zu_t		base; \/* Derived. *\/$/;"	m	struct:arena_stats_s	typeref:typename:atomic_zu_t
base	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	base_t			*base;$/;"	m	struct:arena_s	typeref:typename:base_t *
base	deps/jemalloc/test/unit/malloc_io.c	/^		int base;$/;"	m	struct:TEST_BEGIN::test_s	typeref:typename:int	file:
base	deps/lua/src/lstate.h	/^  StkId base;  \/* base for this function *\/$/;"	m	struct:CallInfo	typeref:typename:StkId
base	deps/lua/src/lstate.h	/^  StkId base;  \/* base of current function *\/$/;"	m	struct:lua_State	typeref:typename:StkId
base	src/setproctitle.c	/^	char *base, *end;$/;"	m	struct:__anon6a58858f0108	typeref:typename:char *	file:
baseCcalls	deps/lua/src/lstate.h	/^  unsigned short baseCcalls;  \/* nested C calls when resuming coroutine *\/$/;"	m	struct:lua_State	typeref:typename:unsigned short
base_alloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define base_alloc /;"	d
base_alloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define base_alloc /;"	d
base_alloc	deps/jemalloc/src/base.c	/^base_alloc(tsdn_t *tsdn, base_t *base, size_t size, size_t alignment) {$/;"	f	typeref:typename:void *
base_alloc_extent	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define base_alloc_extent /;"	d
base_alloc_extent	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define base_alloc_extent /;"	d
base_alloc_extent	deps/jemalloc/src/base.c	/^base_alloc_extent(tsdn_t *tsdn, base_t *base) {$/;"	f	typeref:typename:extent_t *
base_alloc_impl	deps/jemalloc/src/base.c	/^base_alloc_impl(tsdn_t *tsdn, base_t *base, size_t size, size_t alignment,$/;"	f	typeref:typename:void *	file:
base_auto_thp_switch	deps/jemalloc/src/base.c	/^base_auto_thp_switch(tsdn_t *tsdn, base_t *base) {$/;"	f	typeref:typename:void	file:
base_block_alloc	deps/jemalloc/src/base.c	/^base_block_alloc(tsdn_t *tsdn, base_t *base, extent_hooks_t *extent_hooks,$/;"	f	typeref:typename:base_block_t *	file:
base_block_s	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^struct base_block_s {$/;"	s
base_block_t	deps/jemalloc/include/jemalloc/internal/base_types.h	/^typedef struct base_block_s base_block_t;$/;"	t	typeref:struct:base_block_s
base_boot	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define base_boot /;"	d
base_boot	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define base_boot /;"	d
base_boot	deps/jemalloc/src/base.c	/^base_boot(tsdn_t *tsdn) {$/;"	f	typeref:typename:bool
base_ci	deps/lua/src/lstate.h	/^  CallInfo *base_ci;  \/* array of CallInfo's *\/$/;"	m	struct:lua_State	typeref:typename:CallInfo *
base_delete	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define base_delete /;"	d
base_delete	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define base_delete /;"	d
base_delete	deps/jemalloc/src/base.c	/^base_delete(tsdn_t *tsdn, base_t *base) {$/;"	f	typeref:typename:void
base_extent_alloc	deps/jemalloc/src/base.c	/^base_extent_alloc(tsdn_t *tsdn, base_t *base, size_t size, size_t alignment) {$/;"	f	typeref:typename:extent_t *	file:
base_extent_bump_alloc	deps/jemalloc/src/base.c	/^base_extent_bump_alloc(base_t *base, extent_t *extent, size_t size,$/;"	f	typeref:typename:void *	file:
base_extent_bump_alloc_helper	deps/jemalloc/src/base.c	/^base_extent_bump_alloc_helper(extent_t *extent, size_t *gap_size, size_t size,$/;"	f	typeref:typename:void *	file:
base_extent_bump_alloc_post	deps/jemalloc/src/base.c	/^base_extent_bump_alloc_post(base_t *base, extent_t *extent, size_t gap_size,$/;"	f	typeref:typename:void	file:
base_extent_hooks_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define base_extent_hooks_get /;"	d
base_extent_hooks_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define base_extent_hooks_get /;"	d
base_extent_hooks_get	deps/jemalloc/src/base.c	/^base_extent_hooks_get(base_t *base) {$/;"	f	typeref:typename:extent_hooks_t *
base_extent_hooks_set	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define base_extent_hooks_set /;"	d
base_extent_hooks_set	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define base_extent_hooks_set /;"	d
base_extent_hooks_set	deps/jemalloc/src/base.c	/^base_extent_hooks_set(base_t *base, extent_hooks_t *extent_hooks) {$/;"	f	typeref:typename:extent_hooks_t *
base_extent_init	deps/jemalloc/src/base.c	/^base_extent_init(size_t *extent_sn_next, extent_t *extent, void *addr,$/;"	f	typeref:typename:void	file:
base_funcs	deps/lua/src/lbaselib.c	/^static const luaL_Reg base_funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
base_get_num_blocks	deps/jemalloc/src/base.c	/^base_get_num_blocks(base_t *base, bool with_new_block) {$/;"	f	typeref:typename:size_t	file:
base_ind_get	deps/jemalloc/include/jemalloc/internal/base_inlines.h	/^base_ind_get(const base_t *base) {$/;"	f	typeref:typename:unsigned
base_map	deps/jemalloc/src/base.c	/^base_map(tsdn_t *tsdn, extent_hooks_t *extent_hooks, unsigned ind, size_t size) {$/;"	f	typeref:typename:void *	file:
base_new	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define base_new /;"	d
base_new	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define base_new /;"	d
base_new	deps/jemalloc/src/base.c	/^base_new(tsdn_t *tsdn, unsigned ind, extent_hooks_t *extent_hooks) {$/;"	f	typeref:typename:base_t *
base_open	deps/lua/src/lbaselib.c	/^static void base_open (lua_State *L) {$/;"	f	typeref:typename:void	file:
base_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define base_postfork_child /;"	d
base_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define base_postfork_child /;"	d
base_postfork_child	deps/jemalloc/src/base.c	/^base_postfork_child(tsdn_t *tsdn, base_t *base) {$/;"	f	typeref:typename:void
base_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define base_postfork_parent /;"	d
base_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define base_postfork_parent /;"	d
base_postfork_parent	deps/jemalloc/src/base.c	/^base_postfork_parent(tsdn_t *tsdn, base_t *base) {$/;"	f	typeref:typename:void
base_prefork	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define base_prefork /;"	d
base_prefork	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define base_prefork /;"	d
base_prefork	deps/jemalloc/src/base.c	/^base_prefork(tsdn_t *tsdn, base_t *base) {$/;"	f	typeref:typename:void
base_s	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^struct base_s {$/;"	s
base_stats_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define base_stats_get /;"	d
base_stats_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define base_stats_get /;"	d
base_stats_get	deps/jemalloc/src/base.c	/^base_stats_get(tsdn_t *tsdn, base_t *base, size_t *allocated, size_t *resident,$/;"	f	typeref:typename:void
base_t	deps/jemalloc/include/jemalloc/internal/base_types.h	/^typedef struct base_s base_t;$/;"	t	typeref:struct:base_s
base_unmap	deps/jemalloc/src/base.c	/^base_unmap(tsdn_t *tsdn, extent_hooks_t *extent_hooks, unsigned ind, void *addr,$/;"	f	typeref:typename:void	file:
basehookcount	deps/lua/src/lstate.h	/^  int basehookcount;$/;"	m	struct:lua_State	typeref:typename:int
basic_iter_next	deps/hdr_histogram/hdr_histogram.c	/^static bool basic_iter_next(struct hdr_iter *iter)$/;"	f	typeref:typename:bool	file:
batch_free	deps/jemalloc/src/zone.c	/^	void (*batch_free)(struct _malloc_zone_t *, void **, unsigned);$/;"	m	struct:_malloc_zone_t	typeref:typename:void (*)(struct _malloc_zone_t *,void **,unsigned)	file:
batch_malloc	deps/jemalloc/src/zone.c	/^	unsigned (*batch_malloc)(struct _malloc_zone_t *, size_t, void **, unsigned);$/;"	m	struct:_malloc_zone_t	typeref:typename:unsigned (*)(struct _malloc_zone_t *,size_t,void **,unsigned)	file:
bc	tests/modules/blockedclient.c	/^    RedisModuleBlockedClient *bc;$/;"	m	struct:__anonb9428d530108	typeref:typename:RedisModuleBlockedClient *	file:
bcastState	src/tracking.c	/^typedef struct bcastState {$/;"	s	file:
bcastState	src/tracking.c	/^} bcastState;$/;"	t	typeref:struct:bcastState	file:
beforePropagateMulti	src/multi.c	/^void beforePropagateMulti() {$/;"	f	typeref:typename:void
beforeSleep	src/server.c	/^void beforeSleep(struct aeEventLoop *eventLoop) {$/;"	f	typeref:typename:void
before_str	tests/modules/testrdb.c	/^RedisModuleString *before_str = NULL;$/;"	v	typeref:typename:RedisModuleString *
beforesleep	src/ae.h	/^    aeBeforeSleepProc *beforesleep;$/;"	m	struct:aeEventLoop	typeref:typename:aeBeforeSleepProc *
beginResultEmission	src/t_zset.c	/^    zrangeResultBeginFunction            beginResultEmission;$/;"	m	struct:zrange_result_handler	typeref:typename:zrangeResultBeginFunction	file:
bench	src/Makefile	/^bench: $(REDIS_BENCHMARK_NAME)$/;"	t
benchmark	src/redis-benchmark.c	/^static void benchmark(char *title, char *cmd, int len) {$/;"	f	typeref:typename:void	file:
benchmarkThread	src/redis-benchmark.c	/^typedef struct benchmarkThread {$/;"	s	file:
benchmarkThread	src/redis-benchmark.c	/^} benchmarkThread;$/;"	t	typeref:struct:benchmarkThread	file:
benchmarkVersion	src/redis-benchmark.c	/^static sds benchmarkVersion(void) {$/;"	f	typeref:typename:sds	file:
bg_call_data	tests/modules/blockedclient.c	/^} bg_call_data;$/;"	t	typeref:struct:__anonb9428d530108	file:
bg_call_worker	tests/modules/blockedclient.c	/^void *bg_call_worker(void *arg) {$/;"	f	typeref:typename:void *
bg_unlink	src/replication.c	/^int bg_unlink(const char *filename) {$/;"	f	typeref:typename:int
bgrewriteaofCommand	src/aof.c	/^void bgrewriteaofCommand(client *c) {$/;"	f	typeref:typename:void
bgsaveCommand	src/rdb.c	/^void bgsaveCommand(client *c) {$/;"	f	typeref:typename:void
bgsave_cpulist	src/server.h	/^    char *bgsave_cpulist; \/* cpu affinity list of bgsave process. *\/$/;"	m	struct:redisServer	typeref:typename:char *
bgsaveerr	src/server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *********** [4]* [4]* [4]* [4]**********
biggest	src/redis-cli.c	/^    unsigned long long biggest;$/;"	m	struct:__anon6af24fe90208	typeref:typename:unsigned long long	file:
biggest_key	src/redis-cli.c	/^    sds biggest_key;$/;"	m	struct:__anon6af24fe90208	typeref:typename:sds	file:
bigkeys	src/redis-cli.c	/^    int bigkeys;$/;"	m	struct:config	typeref:typename:int	file:
bin_info_s	deps/jemalloc/include/jemalloc/internal/bin.h	/^struct bin_info_s {$/;"	s
bin_info_t	deps/jemalloc/include/jemalloc/internal/bin.h	/^typedef struct bin_info_s bin_info_t;$/;"	t	typeref:struct:bin_info_s
bin_infos	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define bin_infos /;"	d
bin_infos	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define bin_infos /;"	d
bin_infos	deps/jemalloc/src/bin.c	/^const bin_info_t bin_infos[NBINS] = {$/;"	v	typeref:typename:const bin_info_t[]
bin_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define bin_init /;"	d
bin_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define bin_init /;"	d
bin_init	deps/jemalloc/src/bin.c	/^bin_init(bin_t *bin) {$/;"	f	typeref:typename:bool
bin_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define bin_postfork_child /;"	d
bin_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define bin_postfork_child /;"	d
bin_postfork_child	deps/jemalloc/src/bin.c	/^bin_postfork_child(tsdn_t *tsdn, bin_t *bin) {$/;"	f	typeref:typename:void
bin_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define bin_postfork_parent /;"	d
bin_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define bin_postfork_parent /;"	d
bin_postfork_parent	deps/jemalloc/src/bin.c	/^bin_postfork_parent(tsdn_t *tsdn, bin_t *bin) {$/;"	f	typeref:typename:void
bin_prefork	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define bin_prefork /;"	d
bin_prefork	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define bin_prefork /;"	d
bin_prefork	deps/jemalloc/src/bin.c	/^bin_prefork(tsdn_t *tsdn, bin_t *bin) {$/;"	f	typeref:typename:void
bin_s	deps/jemalloc/include/jemalloc/internal/bin.h	/^struct bin_s {$/;"	s
bin_stats_merge	deps/jemalloc/include/jemalloc/internal/bin.h	/^bin_stats_merge(tsdn_t *tsdn, bin_stats_t *dst_bin_stats, bin_t *bin) {$/;"	f	typeref:typename:void
bin_stats_s	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^struct bin_stats_s {$/;"	s
bin_stats_t	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^typedef struct bin_stats_s bin_stats_t;$/;"	t	typeref:struct:bin_stats_s
bin_t	deps/jemalloc/include/jemalloc/internal/bin.h	/^typedef struct bin_s bin_t;$/;"	t	typeref:struct:bin_s
bind	deps/hiredis/sockcompat.h	/^#define bind(/;"	d
bindaddr	src/server.h	/^    char *bindaddr[CONFIG_BINDADDR_MAX]; \/* Addresses we should bind to *\/$/;"	m	struct:redisServer	typeref:typename:char * []
bindaddr_count	src/server.h	/^    int bindaddr_count;         \/* Number of addresses in server.bindaddr[] *\/$/;"	m	struct:redisServer	typeref:typename:int
binind_compute	deps/jemalloc/test/unit/pack.c	/^binind_compute(void) {$/;"	f	typeref:typename:unsigned	file:
bins	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	bin_t			bins[NBINS];$/;"	m	struct:arena_s	typeref:typename:bin_t[]
bins_large	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	cache_bin_t *bins_large;$/;"	m	struct:cache_bin_array_descriptor_s	typeref:typename:cache_bin_t *
bins_large	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	cache_bin_t	bins_large[NSIZES-NBINS];$/;"	m	struct:tcache_s	typeref:typename:cache_bin_t[]
bins_small	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	cache_bin_t *bins_small;$/;"	m	struct:cache_bin_array_descriptor_s	typeref:typename:cache_bin_t *
bins_small	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	cache_bin_t	bins_small[NBINS];$/;"	m	struct:tcache_s	typeref:typename:cache_bin_t[]
bioCreateCloseJob	src/bio.c	/^void bioCreateCloseJob(int fd) {$/;"	f	typeref:typename:void
bioCreateFsyncJob	src/bio.c	/^void bioCreateFsyncJob(int fd) {$/;"	f	typeref:typename:void
bioCreateLazyFreeJob	src/bio.c	/^void bioCreateLazyFreeJob(lazy_free_fn free_fn, int arg_count, ...) {$/;"	f	typeref:typename:void
bioInit	src/bio.c	/^void bioInit(void) {$/;"	f	typeref:typename:void
bioKillThreads	src/bio.c	/^void bioKillThreads(void) {$/;"	f	typeref:typename:void
bioPendingJobsOfType	src/bio.c	/^unsigned long long bioPendingJobsOfType(int type) {$/;"	f	typeref:typename:unsigned long long
bioProcessBackgroundJobs	src/bio.c	/^void *bioProcessBackgroundJobs(void *arg) {$/;"	f	typeref:typename:void *
bioSubmitJob	src/bio.c	/^void bioSubmitJob(int type, struct bio_job *job) {$/;"	f	typeref:typename:void
bioWaitStepOfType	src/bio.c	/^unsigned long long bioWaitStepOfType(int type) {$/;"	f	typeref:typename:unsigned long long
bio_cpulist	src/server.h	/^    char *bio_cpulist; \/* cpu affinity list of bio thread. *\/$/;"	m	struct:redisServer	typeref:typename:char *
bio_job	src/bio.c	/^struct bio_job {$/;"	s	file:
bio_jobs	src/bio.c	/^static list *bio_jobs[BIO_NUM_OPS];$/;"	v	typeref:typename:list * []	file:
bio_mutex	src/bio.c	/^static pthread_mutex_t bio_mutex[BIO_NUM_OPS];$/;"	v	typeref:typename:pthread_mutex_t[]	file:
bio_newjob_cond	src/bio.c	/^static pthread_cond_t bio_newjob_cond[BIO_NUM_OPS];$/;"	v	typeref:typename:pthread_cond_t[]	file:
bio_pending	src/bio.c	/^static unsigned long long bio_pending[BIO_NUM_OPS];$/;"	v	typeref:typename:unsigned long long[]	file:
bio_step_cond	src/bio.c	/^static pthread_cond_t bio_step_cond[BIO_NUM_OPS];$/;"	v	typeref:typename:pthread_cond_t[]	file:
bio_threads	src/bio.c	/^static pthread_t bio_threads[BIO_NUM_OPS];$/;"	v	typeref:typename:pthread_t[]	file:
bit2mask	deps/lua/src/lgc.h	/^#define bit2mask(/;"	d
bit_bnot	deps/lua/src/lua_bit.c	/^static int bit_bnot(lua_State *L) { BRET(~barg(L, 1)) }$/;"	f	typeref:typename:int	file:
bit_funcs	deps/lua/src/lua_bit.c	/^static const struct luaL_Reg bit_funcs[] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
bit_tobit	deps/lua/src/lua_bit.c	/^static int bit_tobit(lua_State *L) { BRET(barg(L, 1)) }$/;"	f	typeref:typename:int	file:
bit_tohex	deps/lua/src/lua_bit.c	/^static int bit_tohex(lua_State *L)$/;"	f	typeref:typename:int	file:
bitcountCommand	src/bitops.c	/^void bitcountCommand(client *c) {$/;"	f	typeref:typename:void
bitfieldCommand	src/bitops.c	/^void bitfieldCommand(client *c) {$/;"	f	typeref:typename:void
bitfieldGeneric	src/bitops.c	/^void bitfieldGeneric(client *c, int flags) {$/;"	f	typeref:typename:void
bitfieldOp	src/bitops.c	/^struct bitfieldOp {$/;"	s	file:
bitfieldroCommand	src/bitops.c	/^void bitfieldroCommand(client *c) {$/;"	f	typeref:typename:void
bitlen	src/sha256.h	/^	unsigned long long bitlen;$/;"	m	struct:__anonf953c6cb0108	typeref:typename:unsigned long long
bitmap	deps/jemalloc/include/jemalloc/internal/arena_structs_a.h	/^	bitmap_t	bitmap[BITMAP_GROUPS_MAX];$/;"	m	struct:arena_slab_data_s	typeref:typename:bitmap_t[]
bitmap	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	bitmap_t		bitmap[BITMAP_GROUPS(NPSIZES+1)];$/;"	m	struct:extents_s	typeref:typename:bitmap_t[]
bitmapClearBit	src/cluster.c	/^void bitmapClearBit(unsigned char *bitmap, int pos) {$/;"	f	typeref:typename:void
bitmapSetBit	src/cluster.c	/^void bitmapSetBit(unsigned char *bitmap, int pos) {$/;"	f	typeref:typename:void
bitmapTestBit	src/cluster.c	/^int bitmapTestBit(unsigned char *bitmap, int pos) {$/;"	f	typeref:typename:int
bitmap_ffu	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^bitmap_ffu(const bitmap_t *bitmap, const bitmap_info_t *binfo, size_t min_bit) {$/;"	f	typeref:typename:size_t
bitmap_full	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^bitmap_full(bitmap_t *bitmap, const bitmap_info_t *binfo) {$/;"	f	typeref:typename:bool
bitmap_get	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^bitmap_get(bitmap_t *bitmap, const bitmap_info_t *binfo, size_t bit) {$/;"	f	typeref:typename:bool
bitmap_info	deps/jemalloc/include/jemalloc/internal/bin.h	/^	bitmap_info_t		bitmap_info;$/;"	m	struct:bin_info_s	typeref:typename:bitmap_info_t
bitmap_info_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define bitmap_info_init /;"	d
bitmap_info_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define bitmap_info_init /;"	d
bitmap_info_init	deps/jemalloc/src/bitmap.c	/^bitmap_info_init(bitmap_info_t *binfo, size_t nbits) {$/;"	f	typeref:typename:void
bitmap_info_ngroups	deps/jemalloc/src/bitmap.c	/^bitmap_info_ngroups(const bitmap_info_t *binfo) {$/;"	f	typeref:typename:size_t	file:
bitmap_info_s	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^typedef struct bitmap_info_s {$/;"	s
bitmap_info_t	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^} bitmap_info_t;$/;"	t	typeref:struct:bitmap_info_s
bitmap_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define bitmap_init /;"	d
bitmap_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define bitmap_init /;"	d
bitmap_init	deps/jemalloc/src/bitmap.c	/^bitmap_init(bitmap_t *bitmap, const bitmap_info_t *binfo, bool fill) {$/;"	f	typeref:typename:void
bitmap_level_s	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^typedef struct bitmap_level_s {$/;"	s
bitmap_level_t	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^} bitmap_level_t;$/;"	t	typeref:struct:bitmap_level_s
bitmap_set	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^bitmap_set(bitmap_t *bitmap, const bitmap_info_t *binfo, size_t bit) {$/;"	f	typeref:typename:void
bitmap_sfu	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^bitmap_sfu(bitmap_t *bitmap, const bitmap_info_t *binfo) {$/;"	f	typeref:typename:size_t
bitmap_size	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define bitmap_size /;"	d
bitmap_size	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define bitmap_size /;"	d
bitmap_size	deps/jemalloc/src/bitmap.c	/^bitmap_size(const bitmap_info_t *binfo) {$/;"	f	typeref:typename:size_t
bitmap_t	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^typedef unsigned long bitmap_t;$/;"	t	typeref:typename:unsigned long
bitmap_unset	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^bitmap_unset(bitmap_t *bitmap, const bitmap_info_t *binfo, size_t bit) {$/;"	f	typeref:typename:void
bitmask	deps/lua/src/lgc.h	/^#define bitmask(/;"	d
bitopCommand	src/bitops.c	/^void bitopCommand(client *c) {$/;"	f	typeref:typename:void
bitposCommand	src/bitops.c	/^void bitposCommand(client *c) {$/;"	f	typeref:typename:void
bits	deps/jemalloc/include/jemalloc/internal/rtree.h	/^	unsigned		bits;$/;"	m	struct:rtree_level_s	typeref:typename:unsigned
bits	src/bitops.c	/^    int bits;           \/* Integer bitfield bits width. *\/$/;"	m	struct:bitfieldOp	typeref:typename:int	file:
bits	src/geohash.h	/^    uint64_t bits;$/;"	m	struct:__anona01652f10208	typeref:typename:uint64_t
bkinfo	src/blocked.c	/^typedef struct bkinfo {$/;"	s	file:
bkinfo	src/blocked.c	/^} bkinfo;$/;"	t	typeref:struct:bkinfo	file:
bl	deps/lua/src/lparser.h	/^  struct BlockCnt *bl;  \/* chain of current blocks *\/$/;"	m	struct:FuncState	typeref:struct:BlockCnt *
black2gray	deps/lua/src/lgc.c	/^#define black2gray(/;"	d	file:
blk	src/sha1.c	/^#define blk(/;"	d	file:
blk0	src/sha1.c	/^#define blk0(/;"	d	file:
blmove	src/server.h	/^    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,$/;"	m	struct:sharedObjectsStruct
blmoveCommand	src/t_list.c	/^void blmoveCommand(client *c) {$/;"	f	typeref:typename:void
blmoveGenericCommand	src/t_list.c	/^void blmoveGenericCommand(client *c, int wherefrom, int whereto, mstime_t timeout) {$/;"	f	typeref:typename:void
block	deps/lua/src/lparser.c	/^static void block (LexState *ls) {$/;"	f	typeref:typename:void	file:
blockClient	src/blocked.c	/^void blockClient(client *c, int btype) {$/;"	f	typeref:typename:void
blockForKeys	src/blocked.c	/^void blockForKeys(client *c, int btype, robj **keys, int numkeys, mstime_t timeout, robj *target/;"	f	typeref:typename:void
block_follow	deps/lua/src/lparser.c	/^static int block_follow (int token) {$/;"	f	typeref:typename:int	file:
blocked_client	src/module.c	/^    struct RedisModuleBlockedClient *blocked_client; \/* Blocked client for$/;"	m	struct:RedisModuleCtx	typeref:struct:RedisModuleBlockedClient *	file:
blocked_client	tests/modules/blockonbackground.c	/^RedisModuleBlockedClient *blocked_client = NULL;$/;"	v	typeref:typename:RedisModuleBlockedClient *
blocked_clients	src/module.c	/^    int blocked_clients;         \/* Count of RedisModuleBlockedClient in this module. *\/$/;"	m	struct:RedisModule	typeref:typename:int	file:
blocked_clients	src/server.h	/^    unsigned int blocked_clients;   \/* # of clients executing a blocking cmd.*\/$/;"	m	struct:redisServer	typeref:typename:unsigned int
blocked_clients_by_type	src/server.h	/^    unsigned int blocked_clients_by_type[BLOCKED_NUM];$/;"	m	struct:redisServer	typeref:typename:unsigned int[]
blocked_last_cron	src/server.h	/^    long long blocked_last_cron; \/* Indicate the mstime of the last time we did cron jobs from /;"	m	struct:redisServer	typeref:typename:long long
blocked_on_keys	src/module.c	/^    int blocked_on_keys;    \/* If blocked via RM_BlockClientOnKeys(). *\/$/;"	m	struct:RedisModuleBlockedClient	typeref:typename:int	file:
blocked_privdata	src/module.c	/^    void *blocked_privdata;         \/* Privdata set when unblocking a client. *\/$/;"	m	struct:RedisModuleCtx	typeref:typename:void *	file:
blocked_ready_key	src/module.c	/^    RedisModuleString *blocked_ready_key; \/* Key ready when the reply callback$/;"	m	struct:RedisModuleCtx	typeref:typename:RedisModuleString *	file:
blockingGenericZpopCommand	src/t_zset.c	/^void blockingGenericZpopCommand(client *c, int where) {$/;"	f	typeref:typename:void
blockingOperationEnds	src/server.c	/^void blockingOperationEnds() {$/;"	f	typeref:typename:void
blockingOperationStarts	src/server.c	/^void blockingOperationStarts() {$/;"	f	typeref:typename:void
blockingPopGenericCommand	src/t_list.c	/^void blockingPopGenericCommand(client *c, int where) {$/;"	f	typeref:typename:void
blockingState	src/server.h	/^typedef struct blockingState {$/;"	s
blockingState	src/server.h	/^} blockingState;$/;"	t	typeref:struct:blockingState
blocking_connect	src/connection.h	/^    int (*blocking_connect)(struct connection *conn, const char *addr, int port, long long timeo/;"	m	struct:ConnectionType	typeref:typename:int (*)(struct connection * conn,const char * addr,int port,long long timeout)
blocking_keys	src/server.h	/^    dict *blocking_keys;        \/* Keys with clients waiting for data (BLPOP)*\/$/;"	m	struct:redisDb	typeref:typename:dict *
blocking_op_nesting	src/server.h	/^    size_t blocking_op_nesting; \/* Nesting level of blocking operation, used to reset blocked_l/;"	m	struct:redisServer	typeref:typename:size_t
blockonkeys_blpopn	tests/modules/blockonkeys.c	/^int blockonkeys_blpopn(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
blockonkeys_blpopn_reply_callback	tests/modules/blockonkeys.c	/^int blockonkeys_blpopn_reply_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
blockonkeys_blpopn_timeout_callback	tests/modules/blockonkeys.c	/^int blockonkeys_blpopn_timeout_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)/;"	f	typeref:typename:int
blockonkeys_lpush	tests/modules/blockonkeys.c	/^int blockonkeys_lpush(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
blockonkeys_popall	tests/modules/blockonkeys.c	/^int blockonkeys_popall(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
blockonkeys_popall_reply_callback	tests/modules/blockonkeys.c	/^int blockonkeys_popall_reply_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
blockonkeys_popall_timeout_callback	tests/modules/blockonkeys.c	/^int blockonkeys_popall_timeout_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)/;"	f	typeref:typename:int
blocks	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	base_block_t	*blocks;$/;"	m	struct:base_s	typeref:typename:base_block_t *
blocks_in_use	deps/jemalloc/src/zone.c	/^	unsigned blocks_in_use;$/;"	m	struct:malloc_statistics_t	typeref:typename:unsigned	file:
blpopCommand	src/t_list.c	/^void blpopCommand(client *c) {$/;"	f	typeref:typename:void
body	deps/lua/src/lparser.c	/^static void body (LexState *ls, expdesc *e, int needself, int line) {$/;"	f	typeref:typename:void	file:
bookmark_count	src/quicklist.h	/^    unsigned int bookmark_count: QL_BM_BITS;$/;"	m	struct:quicklist	typeref:typename:unsigned int
bookmarks	src/quicklist.h	/^    quicklistBookmark bookmarks[];$/;"	m	struct:quicklist	typeref:typename:quicklistBookmark[]
bool	deps/jemalloc/include/msvc_compat/C99/stdbool.h	/^#define bool /;"	d
boolConfigData	src/config.c	/^typedef struct boolConfigData {$/;"	s	file:
boolConfigData	src/config.c	/^} boolConfigData;$/;"	t	typeref:struct:boolConfigData	file:
boolK	deps/lua/src/lcode.c	/^static int boolK (FuncState *fs, int b) {$/;"	f	typeref:typename:int	file:
bool_val	deps/jemalloc/include/jemalloc/internal/emitter.h	/^		bool bool_val;$/;"	m	union:emitter_col_s::__anona0eb805b010a	typeref:typename:bool
boolean	deps/lua/src/lua_cjson.c	/^        int boolean;$/;"	m	union:__anona3a73c770408::__anona3a73c77050a	typeref:typename:int	file:
bootstrap_calloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define bootstrap_calloc /;"	d
bootstrap_calloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define bootstrap_calloc /;"	d
bootstrap_calloc	deps/jemalloc/src/jemalloc.c	/^bootstrap_calloc(size_t num, size_t size) {$/;"	f	typeref:typename:void *
bootstrap_free	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define bootstrap_free /;"	d
bootstrap_free	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define bootstrap_free /;"	d
bootstrap_free	deps/jemalloc/src/jemalloc.c	/^bootstrap_free(void *ptr) {$/;"	f	typeref:typename:void
bootstrap_malloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define bootstrap_malloc /;"	d
bootstrap_malloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define bootstrap_malloc /;"	d
bootstrap_malloc	deps/jemalloc/src/jemalloc.c	/^bootstrap_malloc(size_t size) {$/;"	f	typeref:typename:void *
bounds	src/geohash.h	/^    double bounds[4]; \/* bounds[0]: min_lon, bounds[1]: min_lat$/;"	m	struct:__anona01652f10608	typeref:typename:double[4]
bp	src/scripting.c	/^    int bp[LDB_BREAKPOINTS_MAX]; \/* An array of breakpoints line numbers. *\/$/;"	m	struct:ldbState	typeref:typename:int[]	file:
bpcount	src/scripting.c	/^    int bpcount; \/* Number of valid entries inside bp. *\/$/;"	m	struct:ldbState	typeref:typename:int	file:
bpop	src/server.h	/^    blockingState bpop;     \/* blocking state *\/$/;"	m	struct:client	typeref:typename:blockingState
bpop_reply_callback	tests/modules/blockonkeys.c	/^int bpop_reply_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
bpop_timeout_callback	tests/modules/blockonkeys.c	/^int bpop_timeout_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
bpopgt_free_privdata	tests/modules/blockonkeys.c	/^void bpopgt_free_privdata(RedisModuleCtx *ctx, void *privdata) {$/;"	f	typeref:typename:void
bpopgt_reply_callback	tests/modules/blockonkeys.c	/^int bpopgt_reply_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
bpopgt_timeout_callback	tests/modules/blockonkeys.c	/^int bpopgt_timeout_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
bpoppush_free_privdata	tests/modules/blockonkeys.c	/^void bpoppush_free_privdata(RedisModuleCtx *ctx, void *privdata) {$/;"	f	typeref:typename:void
bpoppush_reply_callback	tests/modules/blockonkeys.c	/^int bpoppush_reply_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
bpoppush_timeout_callback	tests/modules/blockonkeys.c	/^int bpoppush_timeout_callback(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
breaklist	deps/lua/src/lparser.c	/^  int breaklist;  \/* list of jumps out of this loop *\/$/;"	m	struct:BlockCnt	typeref:typename:int	file:
breakstat	deps/lua/src/lparser.c	/^static void breakstat (LexState *ls) {$/;"	f	typeref:typename:void	file:
brol	deps/lua/src/lua_bit.c	/^#define brol(/;"	d	file:
bror	deps/lua/src/lua_bit.c	/^#define bror(/;"	d	file:
brpopCommand	src/t_list.c	/^void brpopCommand(client *c) {$/;"	f	typeref:typename:void
brpoplpushCommand	src/t_list.c	/^void brpoplpushCommand(client *c) {$/;"	f	typeref:typename:void
bsar	deps/lua/src/lua_bit.c	/^#define bsar(/;"	d	file:
bsd	deps/lua/src/Makefile	/^bsd:$/;"	t
bshl	deps/lua/src/lua_bit.c	/^#define bshl(/;"	d	file:
bshr	deps/lua/src/lua_bit.c	/^#define bshr(/;"	d	file:
bstats	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	bin_stats_t bstats[NBINS];$/;"	m	struct:ctl_arena_stats_s	typeref:typename:bin_stats_t[]
bt	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_bt_t		bt;$/;"	m	struct:prof_gctx_s	typeref:typename:prof_bt_t
bt	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_bt_t	*bt;$/;"	m	struct:__anonc2210a4f0108	typeref:typename:prof_bt_t *
bt2gctx	deps/jemalloc/src/prof.c	/^static ckh_t		bt2gctx;$/;"	v	typeref:typename:ckh_t	file:
bt2gctx_mtx	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define bt2gctx_mtx /;"	d
bt2gctx_mtx	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define bt2gctx_mtx /;"	d
bt2gctx_mtx	deps/jemalloc/src/prof.c	/^malloc_mutex_t		bt2gctx_mtx;$/;"	v	typeref:typename:malloc_mutex_t
bt2tctx	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	ckh_t			bt2tctx;$/;"	m	struct:prof_tdata_s	typeref:typename:ckh_t
bt_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define bt_init /;"	d
bt_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define bt_init /;"	d
bt_init	deps/jemalloc/src/prof.c	/^bt_init(prof_bt_t *bt, void **vec) {$/;"	f	typeref:typename:void
btalloc	deps/jemalloc/test/src/btalloc.c	/^btalloc(size_t size, unsigned bits) {$/;"	f	typeref:typename:void *
btalloc_n_gen	deps/jemalloc/test/include/test/btalloc.h	/^#define btalloc_n_gen(/;"	d
btalloc_n_proto	deps/jemalloc/test/include/test/btalloc.h	/^#define btalloc_n_proto(/;"	d
btype	src/server.h	/^    int btype;              \/* Type of blocking op if CLIENT_BLOCKED. *\/$/;"	m	struct:client	typeref:typename:int
bucket_count	deps/hdr_histogram/hdr_histogram.h	/^    int32_t bucket_count;$/;"	m	struct:hdr_histogram	typeref:typename:int32_t
bucket_count	deps/hdr_histogram/hdr_histogram.h	/^    int32_t bucket_count;$/;"	m	struct:hdr_histogram_bucket_config	typeref:typename:int32_t
buckets	src/geo.h	/^    size_t buckets;$/;"	m	struct:geoArray	typeref:typename:size_t
buckets_needed_to_cover_value	deps/hdr_histogram/hdr_histogram.c	/^static int32_t buckets_needed_to_cover_value(int64_t value, int32_t sub_bucket_count, int32_t un/;"	f	typeref:typename:int32_t	file:
buf	deps/hiredis/read.h	/^    char *buf; \/* Read buffer *\/$/;"	m	struct:redisReader	typeref:typename:char *
buf	deps/hiredis/sds.h	/^    char buf[];$/;"	m	struct:hisdshdr16	typeref:typename:char[]
buf	deps/hiredis/sds.h	/^    char buf[];$/;"	m	struct:hisdshdr32	typeref:typename:char[]
buf	deps/hiredis/sds.h	/^    char buf[];$/;"	m	struct:hisdshdr5	typeref:typename:char[]
buf	deps/hiredis/sds.h	/^    char buf[];$/;"	m	struct:hisdshdr64	typeref:typename:char[]
buf	deps/hiredis/sds.h	/^    char buf[];$/;"	m	struct:hisdshdr8	typeref:typename:char[]
buf	deps/jemalloc/test/unit/emitter.c	/^	char *buf;$/;"	m	struct:buf_descriptor_s	typeref:typename:char *	file:
buf	deps/jemalloc/test/unit/stats_print.c	/^	char	*buf; \/* '\\0'-terminated. *\/$/;"	m	struct:parser_s	typeref:typename:char *	file:
buf	deps/linenoise/linenoise.c	/^    char *buf;          \/* Edited line buffer. *\/$/;"	m	struct:linenoiseState	typeref:typename:char *	file:
buf	deps/lua/src/strbuf.h	/^    char *buf;$/;"	m	struct:__anon10f823b40108	typeref:typename:char *
buf	src/aof.c	/^    char buf[AOF_RW_BUF_BLOCK_SIZE];$/;"	m	struct:aofrwblock	typeref:typename:char[]	file:
buf	src/rio.h	/^            sds buf;      \/* buffered data *\/$/;"	m	struct:_rio::__anonb6066a3c010a::__anonb6066a3c0408	typeref:typename:sds
buf	src/rio.h	/^            sds buf;$/;"	m	struct:_rio::__anonb6066a3c010a::__anonb6066a3c0508	typeref:typename:sds
buf	src/sds.h	/^    char buf[];$/;"	m	struct:sdshdr16	typeref:typename:char[]
buf	src/sds.h	/^    char buf[];$/;"	m	struct:sdshdr32	typeref:typename:char[]
buf	src/sds.h	/^    char buf[];$/;"	m	struct:sdshdr5	typeref:typename:char[]
buf	src/sds.h	/^    char buf[];$/;"	m	struct:sdshdr64	typeref:typename:char[]
buf	src/sds.h	/^    char buf[];$/;"	m	struct:sdshdr8	typeref:typename:char[]
buf	src/server.h	/^    char buf[PROTO_REPLY_CHUNK_BYTES];$/;"	m	struct:client	typeref:typename:char[]
buf	src/server.h	/^    char buf[];$/;"	m	struct:clientReplyBlock	typeref:typename:char[]
buf_descriptor_s	deps/jemalloc/test/unit/emitter.c	/^struct buf_descriptor_s {$/;"	s	file:
buf_descriptor_t	deps/jemalloc/test/unit/emitter.c	/^typedef struct buf_descriptor_s buf_descriptor_t;$/;"	t	typeref:struct:buf_descriptor_s	file:
buferror	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define buferror /;"	d
buferror	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define buferror /;"	d
buferror	deps/jemalloc/src/malloc_io.c	/^buferror(int err, char *buf, size_t buflen) {$/;"	f	typeref:typename:int
buff	deps/lua/src/lauxlib.c	/^  char buff[LUAL_BUFFERSIZE];$/;"	m	struct:LoadF	typeref:typename:char[]	file:
buff	deps/lua/src/ldo.c	/^  Mbuffer buff;  \/* buffer to be used by the scanner *\/$/;"	m	struct:SParser	typeref:typename:Mbuffer	file:
buff	deps/lua/src/llex.h	/^  Mbuffer *buff;  \/* buffer for tokens *\/$/;"	m	struct:LexState	typeref:typename:Mbuffer *
buff	deps/lua/src/lstate.h	/^  Mbuffer buff;  \/* temporary buffer for string concatentation *\/$/;"	m	struct:global_State	typeref:typename:Mbuffer
buffer	deps/lua/src/lauxlib.h	/^  char buffer[LUAL_BUFFERSIZE];$/;"	m	struct:luaL_Buffer	typeref:typename:char[]
buffer	deps/lua/src/lzio.h	/^  char *buffer;$/;"	m	struct:Mbuffer	typeref:typename:char *
buffer	src/rio.h	/^        } buffer;$/;"	m	union:_rio::__anonb6066a3c010a	typeref:struct:_rio::__anonb6066a3c010a::__anonb6066a3c0208
buffer	src/sha1.h	/^    unsigned char buffer[64];$/;"	m	struct:__anon790f1a3f0108	typeref:typename:unsigned char[64]
buffered	src/rio.h	/^            off_t buffered; \/* Bytes written since last fsync. *\/$/;"	m	struct:_rio::__anonb6066a3c010a::__anonb6066a3c0308	typeref:typename:off_t
bufffree	deps/lua/src/lauxlib.c	/^#define bufffree(/;"	d	file:
bufflen	deps/lua/src/lauxlib.c	/^#define bufflen(/;"	d	file:
buffreplace	deps/lua/src/llex.c	/^static void buffreplace (LexState *ls, char from, char to) {$/;"	f	typeref:typename:void	file:
buffsize	deps/lua/src/lzio.h	/^  size_t buffsize;$/;"	m	struct:Mbuffer	typeref:typename:size_t
buflen	deps/linenoise/linenoise.c	/^    size_t buflen;      \/* Edited line buffer size. *\/$/;"	m	struct:linenoiseState	typeref:typename:size_t	file:
bufpos	src/server.h	/^    int bufpos;$/;"	m	struct:client	typeref:typename:int
bugReportEnd	src/debug.c	/^void bugReportEnd(int killViaSignal, int sig) {$/;"	f	typeref:typename:void
bugReportStart	src/debug.c	/^void bugReportStart(void) {$/;"	f	typeref:typename:void
bug_report_start	src/debug.c	/^static int bug_report_start = 0; \/* True if bug report header was already logged. *\/$/;"	v	typeref:typename:int	file:
bug_report_start_mutex	src/debug.c	/^static pthread_mutex_t bug_report_start_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	typeref:typename:pthread_mutex_t	file:
build_doc	deps/jemalloc/Makefile	/^build_doc: $(DOCS)$/;"	t
build_doc	deps/jemalloc/Makefile.in	/^build_doc: $(DOCS)$/;"	t
build_doc_html	deps/jemalloc/Makefile	/^build_doc_html: $(DOCS_HTML)$/;"	t
build_doc_html	deps/jemalloc/Makefile.in	/^build_doc_html: $(DOCS_HTML)$/;"	t
build_doc_man	deps/jemalloc/Makefile	/^build_doc_man: $(DOCS_MAN3)$/;"	t
build_doc_man	deps/jemalloc/Makefile.in	/^build_doc_man: $(DOCS_MAN3)$/;"	t
build_lib	deps/jemalloc/Makefile	/^build_lib: build_lib_shared build_lib_static$/;"	t
build_lib	deps/jemalloc/Makefile.in	/^build_lib: build_lib_shared build_lib_static$/;"	t
build_lib_shared	deps/jemalloc/Makefile	/^build_lib_shared: $(DSOS)$/;"	t
build_lib_shared	deps/jemalloc/Makefile.in	/^build_lib_shared: $(DSOS)$/;"	t
build_lib_static	deps/jemalloc/Makefile	/^build_lib_static: $(STATIC_LIBS)$/;"	t
build_lib_static	deps/jemalloc/Makefile.in	/^build_lib_static: $(STATIC_LIBS)$/;"	t
bulk_data	src/cluster.h	/^    unsigned char bulk_data[3]; \/* 3 bytes just as placeholder. *\/$/;"	m	struct:__anon2cc7db540508	typeref:typename:unsigned char[3]
bulk_data	src/cluster.h	/^    unsigned char bulk_data[8]; \/* 8 bytes just as placeholder. *\/$/;"	m	struct:__anon2cc7db540308	typeref:typename:unsigned char[8]
bulkhdr	src/server.h	/^    *bulkhdr[OBJ_SHARED_BULKHDR_LEN];  \/* "$<value>\\r\\n" *\/$/;"	m	struct:sharedObjectsStruct
bulklen	deps/hiredis/hiredis.c	/^static size_t bulklen(size_t len) {$/;"	f	typeref:typename:size_t	file:
bulklen	src/server.h	/^    long bulklen;           \/* Length of bulk argument in multi bulk request. *\/$/;"	m	struct:client	typeref:typename:long
bump_empty_alloc	deps/jemalloc/src/jemalloc.c	/^	bool bump_empty_alloc;$/;"	m	struct:static_opts_s	typeref:typename:bool	file:
busykeyerr	src/server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
bvalue	deps/lua/src/lobject.h	/^#define bvalue(/;"	d
bytes	src/server.h	/^    size_t bytes;       \/* Bytes read \/ written so far. *\/$/;"	m	struct:RedisModuleIO	typeref:typename:size_t
bytesToHuman	src/redis-cli.c	/^void bytesToHuman(char *s, long long n) {$/;"	f	typeref:typename:void
bytesToHuman	src/server.c	/^void bytesToHuman(char *s, unsigned long long n) {$/;"	f	typeref:typename:void
bytes_per_key	src/server.h	/^    size_t bytes_per_key;$/;"	m	struct:redisMemOverhead	typeref:typename:size_t
bytes_until_sample	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t		bytes_until_sample;$/;"	m	struct:prof_tdata_s	typeref:typename:uint64_t
bzpopmaxCommand	src/t_zset.c	/^void bzpopmaxCommand(client *c) {$/;"	f	typeref:typename:void
bzpopminCommand	src/t_zset.c	/^void bzpopminCommand(client *c) {$/;"	f	typeref:typename:void
c	deps/hiredis/async.h	/^    redisContext c;$/;"	m	struct:redisAsyncContext	typeref:typename:redisContext
c	deps/lua/src/lobject.h	/^  CClosure c;$/;"	m	union:Closure	typeref:typename:CClosure
c	deps/lua/src/lua_struct.c	/^  char c;$/;"	m	struct:cD	typeref:typename:char	file:
c	src/defrag.c	/^    streamConsumer *c;$/;"	m	struct:__anon4ad273d60208	typeref:typename:streamConsumer *	file:
c	src/rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	typeref:typename:uint32_t[3][3]	file:
c	src/server.h	/^typedef void redisCommandProc(client *c);$/;"	t	typeref:typename:void redisCommandProc (client *)
c	src/sha1.c	/^        unsigned char c[64];$/;"	m	union:SHA1Transform::__anon790f1a3a010a	typeref:typename:unsigned char[64]	file:
c	src/tls.c	/^    connection c;$/;"	m	struct:tls_connection	typeref:typename:connection	file:
c99_snprintf	deps/hiredis/win32.h	/^__inline int c99_snprintf(char* str, size_t size, const char* format, ...)$/;"	f	typeref:typename:int
c99_vsnprintf	deps/hiredis/win32.h	/^__inline int c99_vsnprintf(char* str, size_t size, const char* format, va_list ap)$/;"	f	typeref:typename:int
cD	deps/lua/src/lua_struct.c	/^struct cD {$/;"	s	file:
ca_cert	deps/hiredis/test.c	/^        const char *ca_cert;$/;"	m	struct:config::__anonab9ca1680308	typeref:typename:const char *	file:
ca_cert_dir	src/server.h	/^    char *ca_cert_dir;$/;"	m	struct:redisTLSContextConfig	typeref:typename:char *
ca_cert_file	src/server.h	/^    char *ca_cert_file;$/;"	m	struct:redisTLSContextConfig	typeref:typename:char *
cacert	src/cli_common.h	/^    char *cacert;$/;"	m	struct:cliSSLconfig	typeref:typename:char *
cacertdir	src/cli_common.h	/^    char *cacertdir;$/;"	m	struct:cliSSLconfig	typeref:typename:char *
cache	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^	rtree_ctx_cache_elm_t	cache[RTREE_CTX_NCACHE];$/;"	m	struct:rtree_ctx_s	typeref:typename:rtree_ctx_cache_elm_t[]
cache_bin_alloc_easy	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^cache_bin_alloc_easy(cache_bin_t *bin, bool *success) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
cache_bin_array_descriptor	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	cache_bin_array_descriptor_t cache_bin_array_descriptor;$/;"	m	struct:tcache_s	typeref:typename:cache_bin_array_descriptor_t
cache_bin_array_descriptor_init	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^cache_bin_array_descriptor_init(cache_bin_array_descriptor_t *descriptor,$/;"	f	typeref:typename:void
cache_bin_array_descriptor_s	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^struct cache_bin_array_descriptor_s {$/;"	s
cache_bin_array_descriptor_t	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^typedef struct cache_bin_array_descriptor_s cache_bin_array_descriptor_t;$/;"	t	typeref:struct:cache_bin_array_descriptor_s
cache_bin_info_s	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^struct cache_bin_info_s {$/;"	s
cache_bin_info_t	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^typedef struct cache_bin_info_s cache_bin_info_t;$/;"	t	typeref:struct:cache_bin_info_s
cache_bin_s	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^struct cache_bin_s {$/;"	s
cache_bin_stats_s	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^struct cache_bin_stats_s {$/;"	s
cache_bin_stats_t	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^typedef struct cache_bin_stats_s cache_bin_stats_t;$/;"	t	typeref:struct:cache_bin_stats_s
cache_bin_sz_t	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^typedef int32_t cache_bin_sz_t;$/;"	t	typeref:typename:int32_t
cache_bin_t	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^typedef struct cache_bin_s cache_bin_t;$/;"	t	typeref:struct:cache_bin_s
cached	src/evict.c	/^    sds cached;                 \/* Cached SDS object for key name. *\/$/;"	m	struct:evictionPoolEntry	typeref:typename:sds	file:
cached_master	src/server.h	/^    client *cached_master; \/* Cached master to be reused for PSYNC. *\/$/;"	m	struct:redisServer	typeref:typename:client *
calculate_new_size	deps/lua/src/strbuf.c	/^static int calculate_new_size(strbuf_t *s, int len)$/;"	f	typeref:typename:int	file:
call	src/server.c	/^void call(client *c, int flags) {$/;"	f	typeref:typename:void
callHandler	src/connhelpers.h	/^static inline int callHandler(connection *conn, ConnectionCallbackFunc handler) {$/;"	f	typeref:typename:int
callTM	deps/lua/src/lvm.c	/^static void callTM (lua_State *L, const TValue *f, const TValue *p1,$/;"	f	typeref:typename:void	file:
callTMres	deps/lua/src/lvm.c	/^static void callTMres (lua_State *L, StkId res, const TValue *f,$/;"	f	typeref:typename:void	file:
call_binTM	deps/lua/src/lvm.c	/^static int call_binTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	typeref:typename:int	file:
call_orderTM	deps/lua/src/lvm.c	/^static int call_orderTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	typeref:typename:int	file:
callallgcTM	deps/lua/src/lstate.c	/^static void callallgcTM (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
callback	src/module.c	/^    RedisModuleClusterMessageReceiver callback;$/;"	m	struct:moduleClusterReceiver	typeref:typename:RedisModuleClusterMessageReceiver	file:
callback	src/module.c	/^    RedisModuleCommandFilterFunc callback;$/;"	m	struct:RedisModuleCommandFilter	typeref:typename:RedisModuleCommandFilterFunc	file:
callback	src/module.c	/^    RedisModuleEventCallback callback;$/;"	m	struct:RedisModuleEventListener	typeref:typename:RedisModuleEventCallback	file:
callback	src/module.c	/^    RedisModuleTimerProc callback;      \/* The callback to invoke on expire. *\/$/;"	m	struct:RedisModuleTimer	typeref:typename:RedisModuleTimerProc	file:
callbackDict	deps/hiredis/async.c	/^static dictType callbackDict = {$/;"	v	typeref:typename:dictType	file:
callbackHash	deps/hiredis/async.c	/^static unsigned int callbackHash(const void *key) {$/;"	f	typeref:typename:unsigned int	file:
callbackKeyCompare	deps/hiredis/async.c	/^static int callbackKeyCompare(void *privdata, const void *key1, const void *key2) {$/;"	f	typeref:typename:int	file:
callbackKeyDestructor	deps/hiredis/async.c	/^static void callbackKeyDestructor(void *privdata, void *key) {$/;"	f	typeref:typename:void	file:
callbackValDestructor	deps/hiredis/async.c	/^static void callbackValDestructor(void *privdata, void *val) {$/;"	f	typeref:typename:void	file:
callbackValDup	deps/hiredis/async.c	/^static void *callbackValDup(void *privdata, const void *src) {$/;"	f	typeref:typename:void *	file:
called_alloc	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_alloc;$/;"	v	typeref:typename:bool
called_commit	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_commit;$/;"	v	typeref:typename:bool
called_dalloc	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_dalloc;$/;"	v	typeref:typename:bool
called_decommit	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_decommit;$/;"	v	typeref:typename:bool
called_destroy	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_destroy;$/;"	v	typeref:typename:bool
called_merge	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_merge;$/;"	v	typeref:typename:bool
called_purge_forced	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_purge_forced;$/;"	v	typeref:typename:bool
called_purge_lazy	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_purge_lazy;$/;"	v	typeref:typename:bool
called_split	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool called_split;$/;"	v	typeref:typename:bool
calloc	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define calloc /;"	d
calloc	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define calloc /;"	d
calloc	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define calloc /;"	d
calloc	deps/jemalloc/src/zone.c	/^	void *(*calloc)(struct _malloc_zone_t *, size_t, size_t);$/;"	m	struct:_malloc_zone_t	typeref:typename:void * (*)(struct _malloc_zone_t *,size_t,size_t)	file:
calloc	src/zmalloc.c	/^#define calloc(/;"	d	file:
callocFn	deps/hiredis/alloc.h	/^    void *(*callocFn)(size_t,size_t);$/;"	m	struct:hiredisAllocFuncs	typeref:typename:void * (*)(size_t,size_t)
callrethooks	deps/lua/src/ldo.c	/^static StkId callrethooks (lua_State *L, StkId firstResult) {$/;"	f	typeref:typename:StkId	file:
calls	src/server.h	/^    long long microseconds, calls, rejected_calls, failed_calls;$/;"	m	struct:redisCommand	typeref:typename:long long
canFeedReplicaReplBuffer	src/replication.c	/^int canFeedReplicaReplBuffer(client *replica) {$/;"	f	typeref:typename:int
can_enable_background_thread	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define can_enable_background_thread /;"	d
can_enable_background_thread	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define can_enable_background_thread /;"	d
can_enable_background_thread	deps/jemalloc/src/background_thread.c	/^bool can_enable_background_thread;$/;"	v	typeref:typename:bool
cancelReplicationHandshake	src/replication.c	/^int cancelReplicationHandshake(int reconnect) {$/;"	f	typeref:typename:int
cannot	deps/lua/src/luac.c	/^static void cannot(const char* what)$/;"	f	typeref:typename:void	file:
cant_failover_reason	src/cluster.h	/^    int cant_failover_reason;   \/* Why a slave is currently not able to$/;"	m	struct:clusterState	typeref:typename:int
capture	deps/lua/src/lstrlib.c	/^  } capture[LUA_MAXCAPTURES];$/;"	m	struct:MatchState	typeref:struct:MatchState::__anond2fa50950108[]	file:
capture_to_close	deps/lua/src/lstrlib.c	/^static int capture_to_close (MatchState *ms) {$/;"	f	typeref:typename:int	file:
card	src/hyperloglog.c	/^    uint8_t card[8];    \/* Cached cardinality, little endian. *\/$/;"	m	struct:hllhdr	typeref:typename:uint8_t[8]	file:
cassert	deps/jemalloc/include/jemalloc/internal/assert.h	/^#define cassert(/;"	d
cast	deps/lua/src/llimits.h	/^#define cast(/;"	d
cast_byte	deps/lua/src/llimits.h	/^#define cast_byte(/;"	d
cast_int	deps/lua/src/llimits.h	/^#define cast_int(/;"	d
cast_num	deps/lua/src/llimits.h	/^#define cast_num(/;"	d
catAppendOnlyExpireAtCommand	src/aof.c	/^sds catAppendOnlyExpireAtCommand(sds buf, struct redisCommand *cmd, robj *key, robj *seconds) {$/;"	f	typeref:typename:sds
catAppendOnlyGenericCommand	src/aof.c	/^sds catAppendOnlyGenericCommand(sds dst, int argc, robj **argv) {$/;"	f	typeref:typename:sds
catClientInfoString	src/networking.c	/^sds catClientInfoString(sds s, client *client) {$/;"	f	typeref:typename:sds
cbopaque	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	void *cbopaque;$/;"	m	struct:emitter_s	typeref:typename:void *
cbuf	src/scripting.c	/^    sds cbuf;   \/* Debugger client command buffer. *\/$/;"	m	struct:ldbState	typeref:typename:sds	file:
cc	src/sentinel.c	/^    redisAsyncContext *cc; \/* Hiredis context for commands. *\/$/;"	m	struct:instanceLink	typeref:typename:redisAsyncContext *	file:
cc_conn_time	src/sentinel.c	/^    mstime_t cc_conn_time; \/* cc connection time. *\/$/;"	m	struct:instanceLink	typeref:typename:mstime_t	file:
ceil_npages	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	uint64_t		ceil_npages;$/;"	m	struct:arena_decay_s	typeref:typename:uint64_t
ceillog2	deps/lua/src/lobject.h	/^#define ceillog2(/;"	d
cert	deps/hiredis/test.c	/^        const char *cert;$/;"	m	struct:config::__anonab9ca1680308	typeref:typename:const char *	file:
cert	src/cli_common.h	/^    char *cert;$/;"	m	struct:cliSSLconfig	typeref:typename:char *
cert_file	src/server.h	/^    char *cert_file;                \/* Server side and optionally client side cert file name *\/$/;"	m	struct:redisTLSContextConfig	typeref:typename:char *
cfd	src/server.h	/^    socketFds cfd;              \/* Cluster bus listening socket *\/$/;"	m	struct:redisServer	typeref:typename:socketFds
cfg	deps/lua/src/lua_cjson.c	/^    json_config_t *cfg;$/;"	m	struct:__anona3a73c770308	typeref:typename:json_config_t *	file:
cfghdrs_in	deps/jemalloc/Makefile	/^cfghdrs_in := $(addprefix $(srcroot),include\/jemalloc\/jemalloc_defs.h.in include\/jemalloc\/in/;"	m
cfghdrs_in	deps/jemalloc/Makefile.in	/^cfghdrs_in := $(addprefix $(srcroot),@cfghdrs_in@)$/;"	m
cfghdrs_out	deps/jemalloc/Makefile	/^cfghdrs_out := include\/jemalloc\/jemalloc_defs.h include\/jemalloc\/jemalloc.h include\/jemallo/;"	m
cfghdrs_out	deps/jemalloc/Makefile.in	/^cfghdrs_out := @cfghdrs_out@$/;"	m
cfgoutputs_in	deps/jemalloc/Makefile	/^cfgoutputs_in := $(addprefix $(srcroot),Makefile.in jemalloc.pc.in doc\/html.xsl.in doc\/manpage/;"	m
cfgoutputs_in	deps/jemalloc/Makefile.in	/^cfgoutputs_in := $(addprefix $(srcroot),@cfgoutputs_in@)$/;"	m
cfgoutputs_out	deps/jemalloc/Makefile	/^cfgoutputs_out := Makefile jemalloc.pc doc\/html.xsl doc\/manpages.xsl doc\/jemalloc.xml include/;"	m
cfgoutputs_out	deps/jemalloc/Makefile.in	/^cfgoutputs_out := @cfgoutputs_out@$/;"	m
cg	src/defrag.c	/^    streamCG *cg;$/;"	m	struct:__anon4ad273d60208	typeref:typename:streamCG *	file:
cgroups	src/stream.h	/^    rax *cgroups;           \/* Consumer groups dictionary: name -> streamCG *\/$/;"	m	struct:stream	typeref:typename:rax *
ch2token	deps/lua/src/lua_cjson.c	/^    json_token_type_t ch2token[256];$/;"	m	struct:__anona3a73c770208	typeref:typename:json_token_type_t[256]	file:
changeBindAddr	src/server.c	/^int changeBindAddr(sds *addrlist, int addrlist_len) {$/;"	f	typeref:typename:int
changeListenPort	src/server.c	/^int changeListenPort(int port, socketFds *sfd, aeFileProc *accept_handler) {$/;"	f	typeref:typename:int
changeReplicationId	src/replication.c	/^void changeReplicationId(void) {$/;"	f	typeref:typename:void
changes	src/server.h	/^    int changes;$/;"	m	struct:saveparam	typeref:typename:int
changewhite	deps/lua/src/lgc.h	/^#define changewhite(/;"	d
channel_len	src/cluster.h	/^    uint32_t channel_len;$/;"	m	struct:__anon2cc7db540308	typeref:typename:uint32_t
channels	deps/hiredis/async.h	/^        struct dict *channels;$/;"	m	struct:redisAsyncContext::__anon89b0a8ab0208	typeref:struct:dict *
channels	src/server.h	/^    list *channels;  \/* A list of allowed Pub\/Sub channel patterns. If this$/;"	m	struct:__anon3ef696e90408	typeref:typename:list *
char2escape	deps/lua/src/lua_cjson.c	/^static const char *char2escape[256] = {$/;"	v	typeref:typename:const char * [256]	file:
char2int	deps/lua/src/lzio.h	/^#define char2int(/;"	d
character	src/redis-cli.c	/^    int character;   \/* Associated character in visualization. *\/$/;"	m	struct:distsamples	typeref:typename:int	file:
charset	src/sparkline.c	/^static char charset[] = "_-`";$/;"	v	typeref:typename:char[]	file:
charset_fill	src/sparkline.c	/^static char charset_fill[] = "_o#";$/;"	v	typeref:typename:char[]	file:
charset_len	src/sparkline.c	/^static int charset_len = sizeof(charset)-1;$/;"	v	typeref:typename:int	file:
check	deps/hiredis/Makefile	/^check: hiredis-test$/;"	t
check	deps/jemalloc/Makefile	/^check: check_unit check_integration check_integration_decay check_integration_prof$/;"	t
check	deps/jemalloc/Makefile.in	/^check: check_unit check_integration check_integration_decay check_integration_prof$/;"	t
check	deps/jemalloc/src/zone.c	/^	boolean_t (*check)(malloc_zone_t *);$/;"	m	struct:malloc_introspection_t	typeref:typename:boolean_t (*)(malloc_zone_t *)	file:
check	deps/lua/src/ldebug.c	/^#define check(/;"	d	file:
check	deps/lua/src/lparser.c	/^static void check (LexState *ls, int c) {$/;"	f	typeref:typename:void	file:
check	src/Makefile	/^check: test$/;"	t
checkAlreadyExpired	src/expire.c	/^int checkAlreadyExpired(long long when) {$/;"	f	typeref:typename:int
checkArgMode	deps/lua/src/ldebug.c	/^static int checkArgMode (const Proto *pt, int r, enum OpArgMask mode) {$/;"	f	typeref:typename:int	file:
checkBlockedClientTimeout	src/timeout.c	/^int checkBlockedClientTimeout(client *c, mstime_t now) {$/;"	f	typeref:typename:int
checkChildrenDone	src/server.c	/^void checkChildrenDone(void) {$/;"	f	typeref:typename:void
checkClientOutputBufferLimits	src/networking.c	/^int checkClientOutputBufferLimits(client *c) {$/;"	f	typeref:typename:int
checkClientPauseTimeoutAndReturnIfPaused	src/networking.c	/^int checkClientPauseTimeoutAndReturnIfPaused(void) {$/;"	f	typeref:typename:int
checkConsistency	src/intset.c	/^static void checkConsistency(intset *is) {$/;"	f	typeref:typename:void	file:
checkForSentinelMode	src/server.c	/^int checkForSentinelMode(int argc, char **argv) {$/;"	f	typeref:typename:int
checkIgnoreWarning	src/server.c	/^int checkIgnoreWarning(const char *warning) {$/;"	f	typeref:typename:int
checkPrefixCollisionsOrReply	src/tracking.c	/^int checkPrefixCollisionsOrReply(client *c, robj **prefixes, size_t numprefix) {$/;"	f	typeref:typename:int
checkSignedBitfieldOverflow	src/bitops.c	/^int checkSignedBitfieldOverflow(int64_t value, int64_t incr, uint64_t bits, int owtype, int64_t /;"	f	typeref:typename:int
checkSizes	deps/lua/src/lgc.c	/^static void checkSizes (lua_State *L) {$/;"	f	typeref:typename:void	file:
checkStringLength	src/t_string.c	/^static int checkStringLength(client *c, long long size) {$/;"	f	typeref:typename:int	file:
checkTcpBacklogSettings	src/server.c	/^void checkTcpBacklogSettings(void) {$/;"	f	typeref:typename:void
checkType	src/object.c	/^int checkType(client *c, robj *o, int type) {$/;"	f	typeref:typename:int
checkUnsignedBitfieldOverflow	src/bitops.c	/^int checkUnsignedBitfieldOverflow(uint64_t value, int64_t incr, uint64_t bits, int owtype, uint6/;"	f	typeref:typename:int
check_background_thread_enabled	deps/jemalloc/test/integration/extent.c	/^check_background_thread_enabled(void) {$/;"	f	typeref:typename:bool	file:
check_background_thread_enabled	deps/jemalloc/test/unit/decay.c	/^check_background_thread_enabled(void) {$/;"	f	typeref:typename:bool	file:
check_capture	deps/lua/src/lstrlib.c	/^static int check_capture (MatchState *ms, int l) {$/;"	f	typeref:typename:int	file:
check_condition	deps/lua/src/lparser.c	/^#define check_condition(/;"	d	file:
check_conflict	deps/lua/src/lparser.c	/^static void check_conflict (LexState *ls, struct LHS_assign *lh, expdesc *v) {$/;"	f	typeref:typename:void	file:
check_dir	deps/jemalloc/Makefile	/^check_dir: check_unit_dir check_integration_dir$/;"	t
check_dir	deps/jemalloc/Makefile.in	/^check_dir: check_unit_dir check_integration_dir$/;"	t
check_entry_exit_locking	deps/jemalloc/src/jemalloc.c	/^check_entry_exit_locking(tsdn_t *tsdn) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
check_exp	deps/lua/src/llimits.h	/^#define check_exp(/;"	d
check_integration	deps/jemalloc/Makefile	/^check_integration: tests_integration check_integration_dir$/;"	t
check_integration	deps/jemalloc/Makefile.in	/^check_integration: tests_integration check_integration_dir$/;"	t
check_integration_decay	deps/jemalloc/Makefile	/^check_integration_decay: tests_integration check_integration_dir$/;"	t
check_integration_decay	deps/jemalloc/Makefile.in	/^check_integration_decay: tests_integration check_integration_dir$/;"	t
check_integration_dir	deps/jemalloc/Makefile	/^check_integration_dir:$/;"	t
check_integration_dir	deps/jemalloc/Makefile.in	/^check_integration_dir:$/;"	t
check_integration_prof	deps/jemalloc/Makefile	/^check_integration_prof: tests_integration check_integration_dir$/;"	t
check_integration_prof	deps/jemalloc/Makefile.in	/^check_integration_prof: tests_integration check_integration_dir$/;"	t
check_match	deps/lua/src/lparser.c	/^static void check_match (LexState *ls, int what, int who, int where) {$/;"	f	typeref:typename:void	file:
check_next	deps/lua/src/llex.c	/^static int check_next (LexState *ls, const char *set) {$/;"	f	typeref:typename:int	file:
check_unit	deps/jemalloc/Makefile	/^check_unit: tests_unit check_unit_dir$/;"	t
check_unit	deps/jemalloc/Makefile.in	/^check_unit: tests_unit check_unit_dir$/;"	t
check_unit_dir	deps/jemalloc/Makefile	/^check_unit_dir:$/;"	t
check_unit_dir	deps/jemalloc/Makefile.in	/^check_unit_dir:$/;"	t
checkconsistency	deps/lua/src/lobject.h	/^#define checkconsistency(/;"	d
checkint	deps/lua/src/lauxlib.c	/^static int checkint (lua_State *L, int topop) {$/;"	f	typeref:typename:int	file:
checkjump	deps/lua/src/ldebug.c	/^#define checkjump(/;"	d	file:
checkliveness	deps/lua/src/lobject.h	/^#define checkliveness(/;"	d
checkname	deps/lua/src/lparser.c	/^static void checkname(LexState *ls, expdesc *e) {$/;"	f	typeref:typename:void	file:
checknext	deps/lua/src/lparser.c	/^static void checknext (LexState *ls, int c) {$/;"	f	typeref:typename:void	file:
checkopenop	deps/lua/src/ldebug.c	/^#define checkopenop(/;"	d	file:
checkreg	deps/lua/src/ldebug.c	/^#define checkreg(/;"	d	file:
checkresults	deps/lua/src/lapi.c	/^#define checkresults(/;"	d	file:
checkstacksizes	deps/lua/src/lgc.c	/^static void checkstacksizes (lua_State *L, StkId max) {$/;"	f	typeref:typename:void	file:
child	deps/jemalloc/include/jemalloc/internal/rtree.h	/^	atomic_p_t	child; \/* (rtree_{node,leaf}_elm_t *) *\/$/;"	m	struct:rtree_node_elm_s	typeref:typename:atomic_p_t
childInfoType	src/server.h	/^typedef enum childInfoType {$/;"	g
childInfoType	src/server.h	/^} childInfoType;$/;"	t	typeref:enum:childInfoType
child_info_data	src/childinfo.c	/^} child_info_data;$/;"	t	typeref:struct:__anonbbe6eb5d0108	file:
child_info_nread	src/server.h	/^    int child_info_nread;           \/* Num of bytes of the last read from pipe *\/$/;"	m	struct:redisServer	typeref:typename:int
child_info_pipe	src/server.h	/^    int child_info_pipe[2];         \/* Pipe used to write the child_info_data. *\/$/;"	m	struct:redisServer	typeref:typename:int[2]
child_pid	src/server.h	/^    pid_t child_pid;            \/* PID of current child *\/$/;"	m	struct:redisServer	typeref:typename:pid_t
child_pid	tests/modules/fork.c	/^int child_pid = -1;$/;"	v	typeref:typename:int
child_type	src/server.h	/^    int child_type;             \/* Type of current child *\/$/;"	m	struct:redisServer	typeref:typename:int
children	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	const ctl_node_t *children;$/;"	m	struct:ctl_named_node_s	typeref:typename:const ctl_node_t *
children	src/scripting.c	/^    list *children; \/* All forked debugging sessions pids. *\/$/;"	m	struct:ldbState	typeref:typename:list *	file:
chrtos	deps/hiredis/read.c	/^static size_t chrtos(char *buf, size_t size, char byte) {$/;"	f	typeref:typename:size_t	file:
chunk	deps/lua/src/lparser.c	/^static void chunk (LexState *ls) {$/;"	f	typeref:typename:void	file:
ci	deps/lua/src/lstate.h	/^  CallInfo *ci;  \/* call info for current function *\/$/;"	m	struct:lua_State	typeref:typename:CallInfo *
ci_func	deps/lua/src/lstate.h	/^#define ci_func(/;"	d
cinfo	src/acl.c	/^    sds cinfo;          \/* Client info (last client if updated). *\/$/;"	m	struct:ACLLogEntry	typeref:typename:sds	file:
ciphers	src/cli_common.h	/^    char* ciphers;$/;"	m	struct:cliSSLconfig	typeref:typename:char *
ciphers	src/server.h	/^    char *ciphers;$/;"	m	struct:redisTLSContextConfig	typeref:typename:char *
ciphersuites	src/cli_common.h	/^    char* ciphersuites;$/;"	m	struct:cliSSLconfig	typeref:typename:char *
ciphersuites	src/server.h	/^    char *ciphersuites;$/;"	m	struct:redisTLSContextConfig	typeref:typename:char *
ckh_bucket_search	deps/jemalloc/src/ckh.c	/^ckh_bucket_search(ckh_t *ckh, size_t bucket, const void *key) {$/;"	f	typeref:typename:size_t	file:
ckh_count	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ckh_count /;"	d
ckh_count	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ckh_count /;"	d
ckh_count	deps/jemalloc/src/ckh.c	/^ckh_count(ckh_t *ckh) {$/;"	f	typeref:typename:size_t
ckh_delete	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ckh_delete /;"	d
ckh_delete	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ckh_delete /;"	d
ckh_delete	deps/jemalloc/src/ckh.c	/^ckh_delete(tsd_t *tsd, ckh_t *ckh) {$/;"	f	typeref:typename:void
ckh_evict_reloc_insert	deps/jemalloc/src/ckh.c	/^ckh_evict_reloc_insert(ckh_t *ckh, size_t argbucket, void const **argkey,$/;"	f	typeref:typename:bool	file:
ckh_grow	deps/jemalloc/src/ckh.c	/^ckh_grow(tsd_t *tsd, ckh_t *ckh) {$/;"	f	typeref:typename:bool	file:
ckh_insert	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ckh_insert /;"	d
ckh_insert	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ckh_insert /;"	d
ckh_insert	deps/jemalloc/src/ckh.c	/^ckh_insert(tsd_t *tsd, ckh_t *ckh, const void *key, const void *data) {$/;"	f	typeref:typename:bool
ckh_isearch	deps/jemalloc/src/ckh.c	/^ckh_isearch(ckh_t *ckh, const void *key) {$/;"	f	typeref:typename:size_t	file:
ckh_iter	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ckh_iter /;"	d
ckh_iter	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ckh_iter /;"	d
ckh_iter	deps/jemalloc/src/ckh.c	/^ckh_iter(ckh_t *ckh, size_t *tabind, void **key, void **data) {$/;"	f	typeref:typename:bool
ckh_new	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ckh_new /;"	d
ckh_new	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ckh_new /;"	d
ckh_new	deps/jemalloc/src/ckh.c	/^ckh_new(tsd_t *tsd, ckh_t *ckh, size_t minitems, ckh_hash_t *hash,$/;"	f	typeref:typename:bool
ckh_pointer_hash	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ckh_pointer_hash /;"	d
ckh_pointer_hash	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ckh_pointer_hash /;"	d
ckh_pointer_hash	deps/jemalloc/src/ckh.c	/^ckh_pointer_hash(const void *key, size_t r_hash[2]) {$/;"	f	typeref:typename:void
ckh_pointer_keycomp	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ckh_pointer_keycomp /;"	d
ckh_pointer_keycomp	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ckh_pointer_keycomp /;"	d
ckh_pointer_keycomp	deps/jemalloc/src/ckh.c	/^ckh_pointer_keycomp(const void *k1, const void *k2) {$/;"	f	typeref:typename:bool
ckh_rebuild	deps/jemalloc/src/ckh.c	/^ckh_rebuild(ckh_t *ckh, ckhc_t *aTab) {$/;"	f	typeref:typename:bool	file:
ckh_remove	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ckh_remove /;"	d
ckh_remove	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ckh_remove /;"	d
ckh_remove	deps/jemalloc/src/ckh.c	/^ckh_remove(tsd_t *tsd, ckh_t *ckh, const void *searchkey, void **key,$/;"	f	typeref:typename:bool
ckh_search	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ckh_search /;"	d
ckh_search	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ckh_search /;"	d
ckh_search	deps/jemalloc/src/ckh.c	/^ckh_search(ckh_t *ckh, const void *searchkey, void **key, void **data) {$/;"	f	typeref:typename:bool
ckh_shrink	deps/jemalloc/src/ckh.c	/^ckh_shrink(tsd_t *tsd, ckh_t *ckh) {$/;"	f	typeref:typename:void	file:
ckh_string_hash	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ckh_string_hash /;"	d
ckh_string_hash	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ckh_string_hash /;"	d
ckh_string_hash	deps/jemalloc/src/ckh.c	/^ckh_string_hash(const void *key, size_t r_hash[2]) {$/;"	f	typeref:typename:void
ckh_string_keycomp	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ckh_string_keycomp /;"	d
ckh_string_keycomp	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ckh_string_keycomp /;"	d
ckh_string_keycomp	deps/jemalloc/src/ckh.c	/^ckh_string_keycomp(const void *k1, const void *k2) {$/;"	f	typeref:typename:bool
ckh_t	deps/jemalloc/include/jemalloc/internal/ckh.h	/^} ckh_t;$/;"	t	typeref:struct:__anon25f7a4b70208
ckh_try_bucket_insert	deps/jemalloc/src/ckh.c	/^ckh_try_bucket_insert(ckh_t *ckh, size_t bucket, const void *key,$/;"	f	typeref:typename:bool	file:
ckh_try_insert	deps/jemalloc/src/ckh.c	/^ckh_try_insert(ckh_t *ckh, void const**argkey, void const**argdata) {$/;"	f	typeref:typename:bool	file:
ckhc_t	deps/jemalloc/include/jemalloc/internal/ckh.h	/^} ckhc_t;$/;"	t	typeref:struct:__anon25f7a4b70108
cksum	src/rio.h	/^    uint64_t cksum, flags;$/;"	m	struct:_rio	typeref:typename:uint64_t
cl	deps/lua/src/lstate.h	/^  union Closure cl;$/;"	m	union:GCObject	typeref:union:Closure
classend	deps/lua/src/lstrlib.c	/^static const char *classend (MatchState *ms, const char *p) {$/;"	f	typeref:typename:const char *	file:
clean	deps/hdr_histogram/Makefile	/^clean:$/;"	t
clean	deps/hiredis/Makefile	/^clean:$/;"	t
clean	deps/jemalloc/Makefile	/^clean:$/;"	t
clean	deps/jemalloc/Makefile.in	/^clean:$/;"	t
clean	deps/linenoise/Makefile	/^clean:$/;"	t
clean	deps/lua/Makefile	/^$(PLATS) clean:$/;"	t
clean	deps/lua/etc/Makefile	/^clean:$/;"	t
clean	deps/lua/src/Makefile	/^clean:$/;"	t
clean	src/Makefile	/^clean:$/;"	t
clean	src/modules/Makefile	/^clean:$/;"	t
clean	tests/modules/Makefile	/^clean:$/;"	t
cleanup	deps/hiredis/adapters/qt.h	/^        void cleanup() {$/;"	f	class:RedisQtAdapter	typeref:typename:void
cleanup	deps/hiredis/async.h	/^        void (*cleanup)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon89b0a8ab0108	typeref:typename:void (*)(void * privdata)
cleanups	deps/jemalloc/src/tsd.c	/^static malloc_tsd_cleanup_t cleanups[MALLOC_TSD_CLEANUPS_MAX];$/;"	v	typeref:typename:malloc_tsd_cleanup_t[]	file:
clearEvents	tests/modules/hooks.c	/^void clearEvents(RedisModuleCtx *ctx)$/;"	f	typeref:typename:void
clearFailoverState	src/replication.c	/^void clearFailoverState() {$/;"	f	typeref:typename:void
clearNodeFailureIfNeeded	src/cluster.c	/^void clearNodeFailureIfNeeded(clusterNode *node) {$/;"	f	typeref:typename:void
clearReplicationId2	src/replication.c	/^void clearReplicationId2(void) {$/;"	f	typeref:typename:void
cleartable	deps/lua/src/lgc.c	/^static void cleartable (GCObject *l) {$/;"	f	typeref:typename:void	file:
cliAuth	src/redis-cli.c	/^static int cliAuth(redisContext *ctx, char *user, char *auth) {$/;"	f	typeref:typename:int	file:
cliConnect	src/redis-cli.c	/^static int cliConnect(int flags) {$/;"	f	typeref:typename:int	file:
cliFormatInvalidateTTY	src/redis-cli.c	/^static sds cliFormatInvalidateTTY(redisReply *r) {$/;"	f	typeref:typename:sds	file:
cliFormatReply	src/redis-cli.c	/^static sds cliFormatReply(redisReply *reply, int mode, int verbatim) {$/;"	f	typeref:typename:sds	file:
cliFormatReplyCSV	src/redis-cli.c	/^static sds cliFormatReplyCSV(redisReply *r) {$/;"	f	typeref:typename:sds	file:
cliFormatReplyRaw	src/redis-cli.c	/^static sds cliFormatReplyRaw(redisReply *r) {$/;"	f	typeref:typename:sds	file:
cliFormatReplyTTY	src/redis-cli.c	/^static sds cliFormatReplyTTY(redisReply *r, char *prefix) {$/;"	f	typeref:typename:sds	file:
cliInitHelp	src/redis-cli.c	/^static void cliInitHelp(void) {$/;"	f	typeref:typename:void	file:
cliIntegrateHelp	src/redis-cli.c	/^static void cliIntegrateHelp(void) {$/;"	f	typeref:typename:void	file:
cliLoadPreferences	src/redis-cli.c	/^void cliLoadPreferences(void) {$/;"	f	typeref:typename:void
cliOutputCommandHelp	src/redis-cli.c	/^static void cliOutputCommandHelp(struct commandHelp *help, int group) {$/;"	f	typeref:typename:void	file:
cliOutputGenericHelp	src/redis-cli.c	/^static void cliOutputGenericHelp(void) {$/;"	f	typeref:typename:void	file:
cliOutputHelp	src/redis-cli.c	/^static void cliOutputHelp(int argc, char **argv) {$/;"	f	typeref:typename:void	file:
cliPrintContextError	src/redis-cli.c	/^static void cliPrintContextError(void) {$/;"	f	typeref:typename:void	file:
cliPushHandler	src/redis-cli.c	/^static void cliPushHandler(void *privdata, void *reply) {$/;"	f	typeref:typename:void	file:
cliReadReply	src/redis-cli.c	/^static int cliReadReply(int output_raw_strings) {$/;"	f	typeref:typename:int	file:
cliRefreshPrompt	src/redis-cli.c	/^static void cliRefreshPrompt(void) {$/;"	f	typeref:typename:void	file:
cliSSLconfig	src/cli_common.h	/^typedef struct cliSSLconfig {$/;"	s
cliSSLconfig	src/cli_common.h	/^} cliSSLconfig;$/;"	t	typeref:struct:cliSSLconfig
cliSecureConnection	src/cli_common.c	/^int cliSecureConnection(redisContext *c, cliSSLconfig config, const char **err) {$/;"	f	typeref:typename:int
cliSecureInit	src/cli_common.c	/^int cliSecureInit()$/;"	f	typeref:typename:int
cliSelect	src/redis-cli.c	/^static int cliSelect(void) {$/;"	f	typeref:typename:int	file:
cliSendAsking	src/redis-cli.c	/^static int cliSendAsking() {$/;"	f	typeref:typename:int	file:
cliSendCommand	src/redis-cli.c	/^static int cliSendCommand(int argc, char **argv, long repeat) {$/;"	f	typeref:typename:int	file:
cliSetPreferences	src/redis-cli.c	/^void cliSetPreferences(char **argv, int argc, int interactive) {$/;"	f	typeref:typename:void
cliSplitArgs	src/redis-cli.c	/^static sds *cliSplitArgs(char *line, int *argc) {$/;"	f	typeref:typename:sds *	file:
cliSwitchProto	src/redis-cli.c	/^static int cliSwitchProto(void) {$/;"	f	typeref:typename:int	file:
cliVersion	src/redis-cli.c	/^static sds cliVersion(void) {$/;"	f	typeref:typename:sds	file:
cliWriteConn	src/cli_common.c	/^ssize_t cliWriteConn(redisContext *c, const char *buf, size_t buf_len)$/;"	f	typeref:typename:ssize_t
client	src/module.c	/^    client *client;                 \/* Client calling a command. *\/$/;"	m	struct:RedisModuleCtx	typeref:typename:client *	file:
client	src/module.c	/^    client *client;  \/* Pointer to the blocked client. or NULL if the client$/;"	m	struct:RedisModuleBlockedClient	typeref:typename:client *	file:
client	src/redis-benchmark.c	/^} *client;$/;"	t	typeref:struct:_client *	file:
client	src/server.h	/^typedef struct client {$/;"	s
client	src/server.h	/^} client;$/;"	t	typeref:struct:client
client	src/t_zset.c	/^    client                              *client;$/;"	m	struct:zrange_result_handler	typeref:typename:client *	file:
clientAcceptHandler	src/networking.c	/^void clientAcceptHandler(connection *conn) {$/;"	f	typeref:typename:void
clientBufferLimitsConfig	src/server.h	/^typedef struct clientBufferLimitsConfig {$/;"	s
clientBufferLimitsConfig	src/server.h	/^} clientBufferLimitsConfig;$/;"	t	typeref:struct:clientBufferLimitsConfig
clientBufferLimitsDefaults	src/config.c	/^clientBufferLimitsConfig clientBufferLimitsDefaults[CLIENT_TYPE_OBUF_COUNT] = {$/;"	v	typeref:typename:clientBufferLimitsConfig[]
clientChangeCallback	src/modules/hellohook.c	/^void clientChangeCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f	typeref:typename:void
clientChangeCallback	tests/modules/hooks.c	/^void clientChangeCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f	typeref:typename:void
clientCommand	src/networking.c	/^void clientCommand(client *c) {$/;"	f	typeref:typename:void
clientData	src/ae.h	/^    void *clientData;$/;"	m	struct:aeFileEvent	typeref:typename:void *
clientData	src/ae.h	/^    void *clientData;$/;"	m	struct:aeTimeEvent	typeref:typename:void *
clientData	src/ae.h	/^typedef int aeTimeProc(struct aeEventLoop *eventLoop, long long id, void *clientData);$/;"	t	typeref:typename:int aeTimeProc (struct aeEventLoop * eventLoop,long long id,void *)
clientData	src/ae.h	/^typedef void aeEventFinalizerProc(struct aeEventLoop *eventLoop, void *clientData);$/;"	t	typeref:typename:void aeEventFinalizerProc (struct aeEventLoop * eventLoop,void *)
clientDone	src/redis-benchmark.c	/^static void clientDone(client c) {$/;"	f	typeref:typename:void	file:
clientHasPendingReplies	src/networking.c	/^int clientHasPendingReplies(client *c) {$/;"	f	typeref:typename:int
clientInstallWriteHandler	src/networking.c	/^void clientInstallWriteHandler(client *c) {$/;"	f	typeref:typename:void
clientReplyBlock	src/server.h	/^typedef struct clientReplyBlock {$/;"	s
clientReplyBlock	src/server.h	/^} clientReplyBlock;$/;"	t	typeref:struct:clientReplyBlock
clientSetDefaultAuth	src/networking.c	/^static void clientSetDefaultAuth(client *c) {$/;"	f	typeref:typename:void	file:
clientSetNameOrReply	src/networking.c	/^int clientSetNameOrReply(client *c, robj *name) {$/;"	f	typeref:typename:int
clientSubscriptionsCount	src/pubsub.c	/^int clientSubscriptionsCount(client *c) {$/;"	f	typeref:typename:int
client_cert_file	src/server.h	/^    char *client_cert_file;         \/* Certificate to use as a client; if none, use cert_file */;"	m	struct:redisTLSContextConfig	typeref:typename:char *
client_change_delta	tests/modules/auth.c	/^static long long client_change_delta = 0;$/;"	v	typeref:typename:long long	file:
client_cron_last_memory_type	src/server.h	/^    int      client_cron_last_memory_type;$/;"	m	struct:client	typeref:typename:int
client_cron_last_memory_usage	src/server.h	/^    uint64_t client_cron_last_memory_usage;$/;"	m	struct:client	typeref:typename:uint64_t
client_key_file	src/server.h	/^    char *client_key_file;          \/* Private key filename for client_cert_file *\/$/;"	m	struct:redisTLSContextConfig	typeref:typename:char *
client_key_file_pass	src/server.h	/^    char *client_key_file_pass;     \/* Optional password for client_key_file *\/$/;"	m	struct:redisTLSContextConfig	typeref:typename:char *
client_list_node	src/server.h	/^    listNode *client_list_node; \/* list node in client list *\/$/;"	m	struct:client	typeref:typename:listNode *
client_max_querybuf_len	src/server.h	/^    size_t client_max_querybuf_len; \/* Limit for client query buffer length *\/$/;"	m	struct:redisServer	typeref:typename:size_t
client_obuf_limits	src/server.h	/^    clientBufferLimitsConfig client_obuf_limits[CLIENT_TYPE_OBUF_COUNT];$/;"	m	struct:redisServer	typeref:typename:clientBufferLimitsConfig[]
client_pause_end_time	src/server.h	/^    mstime_t client_pause_end_time;    \/* Time when we undo clients_paused *\/$/;"	m	struct:redisServer	typeref:typename:mstime_t
client_pause_in_transaction	src/server.h	/^    int client_pause_in_transaction; \/* Was a client pause executed during this Exec? *\/$/;"	m	struct:redisServer	typeref:typename:int
client_pause_type	src/server.h	/^    pause_type client_pause_type;      \/* True if clients are currently paused *\/$/;"	m	struct:redisServer	typeref:typename:pause_type
client_reconfig_script	src/sentinel.c	/^    char *client_reconfig_script;$/;"	m	struct:sentinelRedisInstance	typeref:typename:char *	file:
client_tracking_prefixes	src/server.h	/^    rax *client_tracking_prefixes; \/* A dictionary of prefixes we are already$/;"	m	struct:client	typeref:typename:rax *
client_tracking_redirection	src/server.h	/^    uint64_t client_tracking_redirection;$/;"	m	struct:client	typeref:typename:uint64_t
clients	src/redis-benchmark.c	/^    list *clients;$/;"	m	struct:config	typeref:typename:list *	file:
clients	src/server.h	/^    list *clients;              \/* List of active clients *\/$/;"	m	struct:redisServer	typeref:typename:list *
clients	src/tracking.c	/^    rax *clients;   \/* Clients subscribed to the notification events for this$/;"	m	struct:bcastState	typeref:typename:rax *	file:
clientsCron	src/server.c	/^void clientsCron(void) {$/;"	f	typeref:typename:void
clientsCronHandleTimeout	src/timeout.c	/^int clientsCronHandleTimeout(client *c, mstime_t now_ms) {$/;"	f	typeref:typename:int
clientsCronResizeQueryBuffer	src/server.c	/^int clientsCronResizeQueryBuffer(client *c) {$/;"	f	typeref:typename:int
clientsCronTrackClientsMemUsage	src/server.c	/^int clientsCronTrackClientsMemUsage(client *c) {$/;"	f	typeref:typename:int
clientsCronTrackExpansiveClients	src/server.c	/^int clientsCronTrackExpansiveClients(client *c, int time_idx) {$/;"	f	typeref:typename:int
clients_index	src/server.h	/^    rax *clients_index;         \/* Active clients dictionary by client ID. *\/$/;"	m	struct:redisServer	typeref:typename:rax *
clients_normal	src/server.h	/^    size_t clients_normal;$/;"	m	struct:redisMemOverhead	typeref:typename:size_t
clients_pending_read	src/server.h	/^    list *clients_pending_read;  \/* Client has pending read socket buffers. *\/$/;"	m	struct:redisServer	typeref:typename:list *
clients_pending_write	src/server.h	/^    list *clients_pending_write; \/* There is to write or install handler. *\/$/;"	m	struct:redisServer	typeref:typename:list *
clients_slaves	src/server.h	/^    size_t clients_slaves;$/;"	m	struct:redisMemOverhead	typeref:typename:size_t
clients_timeout_table	src/server.h	/^    rax *clients_timeout_table; \/* Radix tree for blocked clients timeouts. *\/$/;"	m	struct:redisServer	typeref:typename:rax *
clients_to_close	src/server.h	/^    list *clients_to_close;     \/* Clients to close asynchronously *\/$/;"	m	struct:redisServer	typeref:typename:list *
clients_waiting_acks	src/server.h	/^    list *clients_waiting_acks;         \/* Clients waiting in WAIT command. *\/$/;"	m	struct:redisServer	typeref:typename:list *
close	deps/hiredis/sockcompat.h	/^#define close(/;"	d
close	deps/jemalloc/include/jemalloc/internal/hooks.h	/^#define close /;"	d
close	src/connection.h	/^    void (*close)(struct connection *conn);$/;"	m	struct:ConnectionType	typeref:typename:void (*)(struct connection * conn)
closeChildInfoPipe	src/childinfo.c	/^void closeChildInfoPipe(void) {$/;"	f	typeref:typename:void
closeChildUnusedResourceAfterFork	src/server.c	/^void closeChildUnusedResourceAfterFork() {$/;"	f	typeref:typename:void
closeClientOnOutputBufferLimitReached	src/networking.c	/^int closeClientOnOutputBufferLimitReached(client *c, int async) {$/;"	f	typeref:typename:int
closeDirectLogFiledes	src/debug.c	/^void closeDirectLogFiledes(int fd) {$/;"	f	typeref:typename:void
closeListeningSockets	src/server.c	/^void closeListeningSockets(int unlink_unix_socket) {$/;"	f	typeref:typename:void
closeSocketListeners	src/server.c	/^void closeSocketListeners(socketFds *sfd) {$/;"	f	typeref:typename:void
close_func	deps/lua/src/lparser.c	/^static void close_func (LexState *ls) {$/;"	f	typeref:typename:void	file:
close_state	deps/lua/src/lstate.c	/^static void close_state (lua_State *L) {$/;"	f	typeref:typename:void	file:
closelistfield	deps/lua/src/lparser.c	/^static void closelistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	typeref:typename:void	file:
cluster	src/server.h	/^    struct clusterState *cluster;  \/* State of the cluster *\/$/;"	m	struct:redisServer	typeref:struct:clusterState *
clusterAcceptHandler	src/cluster.c	/^void clusterAcceptHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	typeref:typename:void
clusterAddNode	src/cluster.c	/^void clusterAddNode(clusterNode *node) {$/;"	f	typeref:typename:void
clusterAddSlot	src/cluster.c	/^int clusterAddSlot(clusterNode *n, int slot) {$/;"	f	typeref:typename:int
clusterBeforeSleep	src/cluster.c	/^void clusterBeforeSleep(void) {$/;"	f	typeref:typename:void
clusterBlacklistAddNode	src/cluster.c	/^void clusterBlacklistAddNode(clusterNode *node) {$/;"	f	typeref:typename:void
clusterBlacklistCleanup	src/cluster.c	/^void clusterBlacklistCleanup(void) {$/;"	f	typeref:typename:void
clusterBlacklistExists	src/cluster.c	/^int clusterBlacklistExists(char *nodeid) {$/;"	f	typeref:typename:int
clusterBroadcastMessage	src/cluster.c	/^void clusterBroadcastMessage(void *buf, size_t len) {$/;"	f	typeref:typename:void
clusterBroadcastPong	src/cluster.c	/^void clusterBroadcastPong(int target) {$/;"	f	typeref:typename:void
clusterBuildMessageHdr	src/cluster.c	/^void clusterBuildMessageHdr(clusterMsg *hdr, int type) {$/;"	f	typeref:typename:void
clusterBumpConfigEpochWithoutConsensus	src/cluster.c	/^int clusterBumpConfigEpochWithoutConsensus(void) {$/;"	f	typeref:typename:int
clusterCloseAllSlots	src/cluster.c	/^void clusterCloseAllSlots(void) {$/;"	f	typeref:typename:void
clusterCommand	src/cluster.c	/^void clusterCommand(client *c) {$/;"	f	typeref:typename:void
clusterConnAcceptHandler	src/cluster.c	/^static void clusterConnAcceptHandler(connection *conn) {$/;"	f	typeref:typename:void	file:
clusterCountNonFailingSlaves	src/cluster.c	/^int clusterCountNonFailingSlaves(clusterNode *n) {$/;"	f	typeref:typename:int
clusterCron	src/cluster.c	/^void clusterCron(void) {$/;"	f	typeref:typename:void
clusterDelNode	src/cluster.c	/^void clusterDelNode(clusterNode *delnode) {$/;"	f	typeref:typename:void
clusterDelNodeSlots	src/cluster.c	/^int clusterDelNodeSlots(clusterNode *node) {$/;"	f	typeref:typename:int
clusterDelSlot	src/cluster.c	/^int clusterDelSlot(int slot) {$/;"	f	typeref:typename:int
clusterDoBeforeSleep	src/cluster.c	/^void clusterDoBeforeSleep(int flags) {$/;"	f	typeref:typename:void
clusterFailoverReplaceYourMaster	src/cluster.c	/^void clusterFailoverReplaceYourMaster(void) {$/;"	f	typeref:typename:void
clusterGenNodeDescription	src/cluster.c	/^sds clusterGenNodeDescription(clusterNode *node, int use_pport) {$/;"	f	typeref:typename:sds
clusterGenNodesDescription	src/cluster.c	/^sds clusterGenNodesDescription(int filter, int use_pport) {$/;"	f	typeref:typename:sds
clusterGenNodesSlotsInfo	src/cluster.c	/^void clusterGenNodesSlotsInfo(int filter) {$/;"	f	typeref:typename:void
clusterGetMaxEpoch	src/cluster.c	/^uint64_t clusterGetMaxEpoch(void) {$/;"	f	typeref:typename:uint64_t
clusterGetMessageTypeString	src/cluster.c	/^const char *clusterGetMessageTypeString(int type) {$/;"	f	typeref:typename:const char *
clusterGetSlaveRank	src/cluster.c	/^int clusterGetSlaveRank(void) {$/;"	f	typeref:typename:int
clusterHandleConfigEpochCollision	src/cluster.c	/^void clusterHandleConfigEpochCollision(clusterNode *sender) {$/;"	f	typeref:typename:void
clusterHandleManualFailover	src/cluster.c	/^void clusterHandleManualFailover(void) {$/;"	f	typeref:typename:void
clusterHandleSlaveFailover	src/cluster.c	/^void clusterHandleSlaveFailover(void) {$/;"	f	typeref:typename:void
clusterHandleSlaveMigration	src/cluster.c	/^void clusterHandleSlaveMigration(int max_slaves) {$/;"	f	typeref:typename:void
clusterHandshakeInProgress	src/cluster.c	/^int clusterHandshakeInProgress(char *ip, int port, int cport) {$/;"	f	typeref:typename:int
clusterInit	src/cluster.c	/^void clusterInit(void) {$/;"	f	typeref:typename:void
clusterLink	src/cluster.h	/^typedef struct clusterLink {$/;"	s
clusterLink	src/cluster.h	/^} clusterLink;$/;"	t	typeref:struct:clusterLink
clusterLinkConnectHandler	src/cluster.c	/^void clusterLinkConnectHandler(connection *conn) {$/;"	f	typeref:typename:void
clusterLoadConfig	src/cluster.c	/^int clusterLoadConfig(char *filename) {$/;"	f	typeref:typename:int
clusterLockConfig	src/cluster.c	/^int clusterLockConfig(char *filename) {$/;"	f	typeref:typename:int
clusterLogCantFailover	src/cluster.c	/^void clusterLogCantFailover(int reason) {$/;"	f	typeref:typename:void
clusterLookupNode	src/cluster.c	/^clusterNode *clusterLookupNode(const char *name) {$/;"	f	typeref:typename:clusterNode *
clusterManager	src/redis-cli.c	/^static struct clusterManager {$/;"	s	file:
clusterManagerAddSlot	src/redis-cli.c	/^static int clusterManagerAddSlot(clusterManagerNode *node, int slot) {$/;"	f	typeref:typename:int	file:
clusterManagerAddSlots	src/redis-cli.c	/^static int clusterManagerAddSlots(clusterManagerNode *node, char**err)$/;"	f	typeref:typename:int	file:
clusterManagerBumpEpoch	src/redis-cli.c	/^static int clusterManagerBumpEpoch(clusterManagerNode *node) {$/;"	f	typeref:typename:int	file:
clusterManagerCheckCluster	src/redis-cli.c	/^static int clusterManagerCheckCluster(int quiet) {$/;"	f	typeref:typename:int	file:
clusterManagerCheckRedisReply	src/redis-cli.c	/^static int clusterManagerCheckRedisReply(clusterManagerNode *n,$/;"	f	typeref:typename:int	file:
clusterManagerClearSlotStatus	src/redis-cli.c	/^static int clusterManagerClearSlotStatus(clusterManagerNode *node, int slot) {$/;"	f	typeref:typename:int	file:
clusterManagerCommand	src/redis-cli.c	/^typedef struct clusterManagerCommand {$/;"	s	file:
clusterManagerCommand	src/redis-cli.c	/^} clusterManagerCommand;$/;"	t	typeref:struct:clusterManagerCommand	file:
clusterManagerCommandAddNode	src/redis-cli.c	/^static int clusterManagerCommandAddNode(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
clusterManagerCommandBackup	src/redis-cli.c	/^static int clusterManagerCommandBackup(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
clusterManagerCommandCall	src/redis-cli.c	/^static int clusterManagerCommandCall(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
clusterManagerCommandCheck	src/redis-cli.c	/^static int clusterManagerCommandCheck(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
clusterManagerCommandCreate	src/redis-cli.c	/^static int clusterManagerCommandCreate(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
clusterManagerCommandDef	src/redis-cli.c	/^typedef struct clusterManagerCommandDef {$/;"	s	file:
clusterManagerCommandDef	src/redis-cli.c	/^} clusterManagerCommandDef;$/;"	t	typeref:struct:clusterManagerCommandDef	file:
clusterManagerCommandDeleteNode	src/redis-cli.c	/^static int clusterManagerCommandDeleteNode(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
clusterManagerCommandFix	src/redis-cli.c	/^static int clusterManagerCommandFix(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
clusterManagerCommandHelp	src/redis-cli.c	/^static int clusterManagerCommandHelp(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
clusterManagerCommandImport	src/redis-cli.c	/^static int clusterManagerCommandImport(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
clusterManagerCommandInfo	src/redis-cli.c	/^static int clusterManagerCommandInfo(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
clusterManagerCommandRebalance	src/redis-cli.c	/^static int clusterManagerCommandRebalance(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
clusterManagerCommandReshard	src/redis-cli.c	/^static int clusterManagerCommandReshard(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
clusterManagerCommandSetTimeout	src/redis-cli.c	/^static int clusterManagerCommandSetTimeout(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
clusterManagerCommands	src/redis-cli.c	/^clusterManagerCommandDef clusterManagerCommands[] = {$/;"	v	typeref:typename:clusterManagerCommandDef[]
clusterManagerCompareKeysValues	src/redis-cli.c	/^static int clusterManagerCompareKeysValues(clusterManagerNode *n1,$/;"	f	typeref:typename:int	file:
clusterManagerCompareNodeBalance	src/redis-cli.c	/^int clusterManagerCompareNodeBalance(const void *n1, const void *n2) {$/;"	f	typeref:typename:int
clusterManagerComputeReshardTable	src/redis-cli.c	/^static list *clusterManagerComputeReshardTable(list *sources, int numslots) {$/;"	f	typeref:typename:list *	file:
clusterManagerCountKeysInSlot	src/redis-cli.c	/^static signed int clusterManagerCountKeysInSlot(clusterManagerNode *node,$/;"	f	typeref:typename:signed int	file:
clusterManagerDelSlot	src/redis-cli.c	/^static int clusterManagerDelSlot(clusterManagerNode *node, int slot,$/;"	f	typeref:typename:int	file:
clusterManagerDictType	src/redis-cli.c	/^static dictType clusterManagerDictType = {$/;"	v	typeref:typename:dictType	file:
clusterManagerExecTransaction	src/redis-cli.c	/^static int clusterManagerExecTransaction(clusterManagerNode *node,$/;"	f	typeref:typename:int	file:
clusterManagerFixMultipleSlotOwners	src/redis-cli.c	/^static int clusterManagerFixMultipleSlotOwners(int slot, list *owners) {$/;"	f	typeref:typename:int	file:
clusterManagerFixOpenSlot	src/redis-cli.c	/^static int clusterManagerFixOpenSlot(int slot) {$/;"	f	typeref:typename:int	file:
clusterManagerFixSlotsCoverage	src/redis-cli.c	/^static int clusterManagerFixSlotsCoverage(char *all_slots) {$/;"	f	typeref:typename:int	file:
clusterManagerFlushNodeConfig	src/redis-cli.c	/^static int clusterManagerFlushNodeConfig(clusterManagerNode *node, char **err) {$/;"	f	typeref:typename:int	file:
clusterManagerGetAntiAffinityScore	src/redis-cli.c	/^static int clusterManagerGetAntiAffinityScore(clusterManagerNodeArray *ipnodes,$/;"	f	typeref:typename:int	file:
clusterManagerGetConfigSignature	src/redis-cli.c	/^static sds clusterManagerGetConfigSignature(clusterManagerNode *node) {$/;"	f	typeref:typename:sds	file:
clusterManagerGetCoveredSlots	src/redis-cli.c	/^static int clusterManagerGetCoveredSlots(char *all_slots) {$/;"	f	typeref:typename:int	file:
clusterManagerGetDisconnectedLinks	src/redis-cli.c	/^static list *clusterManagerGetDisconnectedLinks(clusterManagerNode *node) {$/;"	f	typeref:typename:list *	file:
clusterManagerGetLinkStatus	src/redis-cli.c	/^static dict *clusterManagerGetLinkStatus(void) {$/;"	f	typeref:typename:dict *	file:
clusterManagerGetNodeRDBFilename	src/redis-cli.c	/^static sds clusterManagerGetNodeRDBFilename(clusterManagerNode *node) {$/;"	f	typeref:typename:sds	file:
clusterManagerGetNodeRedisInfo	src/redis-cli.c	/^static redisReply *clusterManagerGetNodeRedisInfo(clusterManagerNode *node,$/;"	f	typeref:typename:redisReply *	file:
clusterManagerGetNodeWithMostKeysInSlot	src/redis-cli.c	/^static clusterManagerNode * clusterManagerGetNodeWithMostKeysInSlot(list *nodes,$/;"	f	typeref:typename:clusterManagerNode *	file:
clusterManagerGetSlotOwner	src/redis-cli.c	/^static clusterManagerNode *clusterManagerGetSlotOwner(clusterManagerNode *n,$/;"	f	typeref:typename:clusterManagerNode *	file:
clusterManagerIsConfigConsistent	src/redis-cli.c	/^static int clusterManagerIsConfigConsistent(void) {$/;"	f	typeref:typename:int	file:
clusterManagerKeyHashSlot	src/redis-cli.c	/^static unsigned int clusterManagerKeyHashSlot(char *key, int keylen) {$/;"	f	typeref:typename:unsigned int	file:
clusterManagerLink	src/redis-cli.c	/^typedef struct clusterManagerLink {$/;"	s	file:
clusterManagerLink	src/redis-cli.c	/^} clusterManagerLink;$/;"	t	typeref:struct:clusterManagerLink	file:
clusterManagerLinkDictType	src/redis-cli.c	/^static dictType clusterManagerLinkDictType = {$/;"	v	typeref:typename:dictType	file:
clusterManagerLoadInfoFromNode	src/redis-cli.c	/^static int clusterManagerLoadInfoFromNode(clusterManagerNode *node, int opts) {$/;"	f	typeref:typename:int	file:
clusterManagerLog	src/redis-cli.c	/^static void clusterManagerLog(int level, const char* fmt, ...) {$/;"	f	typeref:typename:void	file:
clusterManagerLogErr	src/redis-cli.c	/^#define clusterManagerLogErr(/;"	d	file:
clusterManagerLogInfo	src/redis-cli.c	/^#define clusterManagerLogInfo(/;"	d	file:
clusterManagerLogOk	src/redis-cli.c	/^#define clusterManagerLogOk(/;"	d	file:
clusterManagerLogWarn	src/redis-cli.c	/^#define clusterManagerLogWarn(/;"	d	file:
clusterManagerMigrateKeysInReply	src/redis-cli.c	/^static redisReply *clusterManagerMigrateKeysInReply(clusterManagerNode *source,$/;"	f	typeref:typename:redisReply *	file:
clusterManagerMigrateKeysInSlot	src/redis-cli.c	/^static int clusterManagerMigrateKeysInSlot(clusterManagerNode *source,$/;"	f	typeref:typename:int	file:
clusterManagerMode	src/redis-cli.c	/^static void clusterManagerMode(clusterManagerCommandProc *proc) {$/;"	f	typeref:typename:void	file:
clusterManagerMoveSlot	src/redis-cli.c	/^static int clusterManagerMoveSlot(clusterManagerNode *source,$/;"	f	typeref:typename:int	file:
clusterManagerNewNode	src/redis-cli.c	/^static clusterManagerNode *clusterManagerNewNode(char *ip, int port) {$/;"	f	typeref:typename:clusterManagerNode *	file:
clusterManagerNode	src/redis-cli.c	/^typedef struct clusterManagerNode {$/;"	s	file:
clusterManagerNode	src/redis-cli.c	/^} clusterManagerNode;$/;"	t	typeref:struct:clusterManagerNode	file:
clusterManagerNodeArray	src/redis-cli.c	/^typedef struct clusterManagerNodeArray {$/;"	s	file:
clusterManagerNodeArray	src/redis-cli.c	/^} clusterManagerNodeArray;$/;"	t	typeref:struct:clusterManagerNodeArray	file:
clusterManagerNodeArrayAdd	src/redis-cli.c	/^static void clusterManagerNodeArrayAdd(clusterManagerNodeArray *array,$/;"	f	typeref:typename:void	file:
clusterManagerNodeArrayInit	src/redis-cli.c	/^static void clusterManagerNodeArrayInit(clusterManagerNodeArray *array,$/;"	f	typeref:typename:void	file:
clusterManagerNodeArrayReset	src/redis-cli.c	/^static void clusterManagerNodeArrayReset(clusterManagerNodeArray *array) {$/;"	f	typeref:typename:void	file:
clusterManagerNodeArrayShift	src/redis-cli.c	/^static void clusterManagerNodeArrayShift(clusterManagerNodeArray *array,$/;"	f	typeref:typename:void	file:
clusterManagerNodeByAbbreviatedName	src/redis-cli.c	/^static clusterManagerNode *clusterManagerNodeByAbbreviatedName(const char*name)$/;"	f	typeref:typename:clusterManagerNode *	file:
clusterManagerNodeByName	src/redis-cli.c	/^static clusterManagerNode *clusterManagerNodeByName(const char *name) {$/;"	f	typeref:typename:clusterManagerNode *	file:
clusterManagerNodeConnect	src/redis-cli.c	/^static int clusterManagerNodeConnect(clusterManagerNode *node) {$/;"	f	typeref:typename:int	file:
clusterManagerNodeFlagString	src/redis-cli.c	/^static sds clusterManagerNodeFlagString(clusterManagerNode *node) {$/;"	f	typeref:typename:sds	file:
clusterManagerNodeGetJSON	src/redis-cli.c	/^static sds clusterManagerNodeGetJSON(clusterManagerNode *node,$/;"	f	typeref:typename:sds	file:
clusterManagerNodeInfo	src/redis-cli.c	/^static sds clusterManagerNodeInfo(clusterManagerNode *node, int indent) {$/;"	f	typeref:typename:sds	file:
clusterManagerNodeIsCluster	src/redis-cli.c	/^static int clusterManagerNodeIsCluster(clusterManagerNode *node, char **err) {$/;"	f	typeref:typename:int	file:
clusterManagerNodeIsEmpty	src/redis-cli.c	/^static int clusterManagerNodeIsEmpty(clusterManagerNode *node, char **err) {$/;"	f	typeref:typename:int	file:
clusterManagerNodeLoadInfo	src/redis-cli.c	/^static int clusterManagerNodeLoadInfo(clusterManagerNode *node, int opts,$/;"	f	typeref:typename:int	file:
clusterManagerNodeMasterRandom	src/redis-cli.c	/^static clusterManagerNode *clusterManagerNodeMasterRandom() {$/;"	f	typeref:typename:clusterManagerNode *	file:
clusterManagerNodeResetSlots	src/redis-cli.c	/^static void clusterManagerNodeResetSlots(clusterManagerNode *node) {$/;"	f	typeref:typename:void	file:
clusterManagerNodeSlotsString	src/redis-cli.c	/^static sds clusterManagerNodeSlotsString(clusterManagerNode *node) {$/;"	f	typeref:typename:sds	file:
clusterManagerNodeWithLeastReplicas	src/redis-cli.c	/^static clusterManagerNode *clusterManagerNodeWithLeastReplicas() {$/;"	f	typeref:typename:clusterManagerNode *	file:
clusterManagerOnError	src/redis-cli.c	/^static void clusterManagerOnError(sds err) {$/;"	f	typeref:typename:void	file:
clusterManagerOnReplyError	src/redis-cli.c	/^typedef int (*clusterManagerOnReplyError)(redisReply *reply,$/;"	t	typeref:typename:int (*)(redisReply * reply,clusterManagerNode * n,int bulk_idx)	file:
clusterManagerOnSetOwnerErr	src/redis-cli.c	/^static int clusterManagerOnSetOwnerErr(redisReply *reply,$/;"	f	typeref:typename:int	file:
clusterManagerOptimizeAntiAffinity	src/redis-cli.c	/^static void clusterManagerOptimizeAntiAffinity(clusterManagerNodeArray *ipnodes,$/;"	f	typeref:typename:void	file:
clusterManagerOptionDef	src/redis-cli.c	/^typedef struct clusterManagerOptionDef {$/;"	s	file:
clusterManagerOptionDef	src/redis-cli.c	/^} clusterManagerOptionDef;$/;"	t	typeref:struct:clusterManagerOptionDef	file:
clusterManagerOptions	src/redis-cli.c	/^clusterManagerOptionDef clusterManagerOptions[] = {$/;"	v	typeref:typename:clusterManagerOptionDef[]
clusterManagerPrintNotClusterNodeError	src/redis-cli.c	/^static void clusterManagerPrintNotClusterNodeError(clusterManagerNode *node,$/;"	f	typeref:typename:void	file:
clusterManagerPrintNotEmptyNodeError	src/redis-cli.c	/^static void clusterManagerPrintNotEmptyNodeError(clusterManagerNode *node,$/;"	f	typeref:typename:void	file:
clusterManagerPrintSlotsList	src/redis-cli.c	/^static void clusterManagerPrintSlotsList(list *slots) {$/;"	f	typeref:typename:void	file:
clusterManagerReleaseReshardTable	src/redis-cli.c	/^static void clusterManagerReleaseReshardTable(list *table) {$/;"	f	typeref:typename:void	file:
clusterManagerRemoveNodeFromList	src/redis-cli.c	/^static void clusterManagerRemoveNodeFromList(list *nodelist,$/;"	f	typeref:typename:void	file:
clusterManagerReshardTableItem	src/redis-cli.c	/^typedef struct clusterManagerReshardTableItem {$/;"	s	file:
clusterManagerReshardTableItem	src/redis-cli.c	/^} clusterManagerReshardTableItem;$/;"	t	typeref:struct:clusterManagerReshardTableItem	file:
clusterManagerSetSlot	src/redis-cli.c	/^static int clusterManagerSetSlot(clusterManagerNode *node1,$/;"	f	typeref:typename:int	file:
clusterManagerSetSlotOwner	src/redis-cli.c	/^static int clusterManagerSetSlotOwner(clusterManagerNode *owner,$/;"	f	typeref:typename:int	file:
clusterManagerShowClusterInfo	src/redis-cli.c	/^static void clusterManagerShowClusterInfo(void) {$/;"	f	typeref:typename:void	file:
clusterManagerShowNodes	src/redis-cli.c	/^static void clusterManagerShowNodes(void) {$/;"	f	typeref:typename:void	file:
clusterManagerShowReshardTable	src/redis-cli.c	/^static void clusterManagerShowReshardTable(list *table) {$/;"	f	typeref:typename:void	file:
clusterManagerSlotCompare	src/redis-cli.c	/^int clusterManagerSlotCompare(const void *slot1, const void *slot2) {$/;"	f	typeref:typename:int
clusterManagerSlotCountCompareDesc	src/redis-cli.c	/^int clusterManagerSlotCountCompareDesc(const void *n1, const void *n2) {$/;"	f	typeref:typename:int
clusterManagerStartTransaction	src/redis-cli.c	/^static int clusterManagerStartTransaction(clusterManagerNode *node) {$/;"	f	typeref:typename:int	file:
clusterManagerUncoveredSlots	src/redis-cli.c	/^dict *clusterManagerUncoveredSlots = NULL;$/;"	v	typeref:typename:dict *
clusterManagerWaitForClusterJoin	src/redis-cli.c	/^static void clusterManagerWaitForClusterJoin(void) {$/;"	f	typeref:typename:void	file:
clusterMastersHaveSlaves	src/cluster.c	/^int clusterMastersHaveSlaves(void) {$/;"	f	typeref:typename:int
clusterMsg	src/cluster.h	/^} clusterMsg;$/;"	t	typeref:struct:__anon2cc7db540b08
clusterMsgData	src/cluster.h	/^union clusterMsgData {$/;"	u
clusterMsgDataFail	src/cluster.h	/^} clusterMsgDataFail;$/;"	t	typeref:struct:__anon2cc7db540208
clusterMsgDataGossip	src/cluster.h	/^} clusterMsgDataGossip;$/;"	t	typeref:struct:__anon2cc7db540108
clusterMsgDataPublish	src/cluster.h	/^} clusterMsgDataPublish;$/;"	t	typeref:struct:__anon2cc7db540308
clusterMsgDataUpdate	src/cluster.h	/^} clusterMsgDataUpdate;$/;"	t	typeref:struct:__anon2cc7db540408
clusterMsgModule	src/cluster.h	/^} clusterMsgModule;$/;"	t	typeref:struct:__anon2cc7db540508
clusterNode	src/cluster.h	/^typedef struct clusterNode {$/;"	s
clusterNode	src/cluster.h	/^} clusterNode;$/;"	t	typeref:struct:clusterNode
clusterNode	src/redis-benchmark.c	/^typedef struct clusterNode {$/;"	s	file:
clusterNode	src/redis-benchmark.c	/^} clusterNode;$/;"	t	typeref:struct:clusterNode	file:
clusterNodeAddFailureReport	src/cluster.c	/^int clusterNodeAddFailureReport(clusterNode *failing, clusterNode *sender) {$/;"	f	typeref:typename:int
clusterNodeAddSlave	src/cluster.c	/^int clusterNodeAddSlave(clusterNode *master, clusterNode *slave) {$/;"	f	typeref:typename:int
clusterNodeCleanupFailureReports	src/cluster.c	/^void clusterNodeCleanupFailureReports(clusterNode *node) {$/;"	f	typeref:typename:void
clusterNodeClearSlotBit	src/cluster.c	/^int clusterNodeClearSlotBit(clusterNode *n, int slot) {$/;"	f	typeref:typename:int
clusterNodeDelFailureReport	src/cluster.c	/^int clusterNodeDelFailureReport(clusterNode *node, clusterNode *sender) {$/;"	f	typeref:typename:int
clusterNodeFailReport	src/cluster.h	/^typedef struct clusterNodeFailReport {$/;"	s
clusterNodeFailReport	src/cluster.h	/^} clusterNodeFailReport;$/;"	t	typeref:struct:clusterNodeFailReport
clusterNodeFailureReportsCount	src/cluster.c	/^int clusterNodeFailureReportsCount(clusterNode *node) {$/;"	f	typeref:typename:int
clusterNodeForResharding	src/redis-cli.c	/^static clusterManagerNode *clusterNodeForResharding(char *id,$/;"	f	typeref:typename:clusterManagerNode *	file:
clusterNodeGetSlotBit	src/cluster.c	/^int clusterNodeGetSlotBit(clusterNode *n, int slot) {$/;"	f	typeref:typename:int
clusterNodeIsInGossipSection	src/cluster.c	/^int clusterNodeIsInGossipSection(clusterMsg *hdr, int count, clusterNode *n) {$/;"	f	typeref:typename:int
clusterNodeRemoveSlave	src/cluster.c	/^int clusterNodeRemoveSlave(clusterNode *master, clusterNode *slave) {$/;"	f	typeref:typename:int
clusterNodeSetSlotBit	src/cluster.c	/^int clusterNodeSetSlotBit(clusterNode *n, int slot) {$/;"	f	typeref:typename:int
clusterNodesBlackListDictType	src/server.c	/^dictType clusterNodesBlackListDictType = {$/;"	v	typeref:typename:dictType
clusterNodesDictType	src/server.c	/^dictType clusterNodesDictType = {$/;"	v	typeref:typename:dictType
clusterProcessGossipSection	src/cluster.c	/^void clusterProcessGossipSection(clusterMsg *hdr, clusterLink *link) {$/;"	f	typeref:typename:void
clusterProcessPacket	src/cluster.c	/^int clusterProcessPacket(clusterLink *link) {$/;"	f	typeref:typename:int
clusterPropagatePublish	src/cluster.c	/^void clusterPropagatePublish(robj *channel, robj *message) {$/;"	f	typeref:typename:void
clusterReadHandler	src/cluster.c	/^void clusterReadHandler(connection *conn) {$/;"	f	typeref:typename:void
clusterReceivers	src/module.c	/^static moduleClusterReceiver *clusterReceivers[UINT8_MAX];$/;"	v	typeref:typename:moduleClusterReceiver * []	file:
clusterRedirectBlockedClientIfNeeded	src/cluster.c	/^int clusterRedirectBlockedClientIfNeeded(client *c) {$/;"	f	typeref:typename:int
clusterRedirectClient	src/cluster.c	/^void clusterRedirectClient(client *c, clusterNode *n, int hashslot, int error_code) {$/;"	f	typeref:typename:void
clusterRenameNode	src/cluster.c	/^void clusterRenameNode(clusterNode *node, char *newname) {$/;"	f	typeref:typename:void
clusterReplyMultiBulkSlots	src/cluster.c	/^void clusterReplyMultiBulkSlots(client * c) {$/;"	f	typeref:typename:void
clusterRequestFailoverAuth	src/cluster.c	/^void clusterRequestFailoverAuth(void) {$/;"	f	typeref:typename:void
clusterReset	src/cluster.c	/^void clusterReset(int hard) {$/;"	f	typeref:typename:void
clusterSaveConfig	src/cluster.c	/^int clusterSaveConfig(int do_fsync) {$/;"	f	typeref:typename:int
clusterSaveConfigOrDie	src/cluster.c	/^void clusterSaveConfigOrDie(int do_fsync) {$/;"	f	typeref:typename:void
clusterSendFail	src/cluster.c	/^void clusterSendFail(char *nodename) {$/;"	f	typeref:typename:void
clusterSendFailoverAuth	src/cluster.c	/^void clusterSendFailoverAuth(clusterNode *node) {$/;"	f	typeref:typename:void
clusterSendFailoverAuthIfNeeded	src/cluster.c	/^void clusterSendFailoverAuthIfNeeded(clusterNode *node, clusterMsg *request) {$/;"	f	typeref:typename:void
clusterSendMFStart	src/cluster.c	/^void clusterSendMFStart(clusterNode *node) {$/;"	f	typeref:typename:void
clusterSendMessage	src/cluster.c	/^void clusterSendMessage(clusterLink *link, unsigned char *msg, size_t msglen) {$/;"	f	typeref:typename:void
clusterSendModule	src/cluster.c	/^void clusterSendModule(clusterLink *link, uint64_t module_id, uint8_t type,$/;"	f	typeref:typename:void
clusterSendModuleMessageToTarget	src/cluster.c	/^int clusterSendModuleMessageToTarget(const char *target, uint64_t module_id, uint8_t type, unsig/;"	f	typeref:typename:int
clusterSendPing	src/cluster.c	/^void clusterSendPing(clusterLink *link, int type) {$/;"	f	typeref:typename:void
clusterSendPublish	src/cluster.c	/^void clusterSendPublish(clusterLink *link, robj *channel, robj *message) {$/;"	f	typeref:typename:void
clusterSendUpdate	src/cluster.c	/^void clusterSendUpdate(clusterLink *link, clusterNode *node) {$/;"	f	typeref:typename:void
clusterSetGossipEntry	src/cluster.c	/^void clusterSetGossipEntry(clusterMsg *hdr, int i, clusterNode *n) {$/;"	f	typeref:typename:void
clusterSetMaster	src/cluster.c	/^void clusterSetMaster(clusterNode *n) {$/;"	f	typeref:typename:void
clusterSetNodeAsMaster	src/cluster.c	/^void clusterSetNodeAsMaster(clusterNode *n) {$/;"	f	typeref:typename:void
clusterStartHandshake	src/cluster.c	/^int clusterStartHandshake(char *ip, int port, int cport) {$/;"	f	typeref:typename:int
clusterState	src/cluster.h	/^typedef struct clusterState {$/;"	s
clusterState	src/cluster.h	/^} clusterState;$/;"	t	typeref:struct:clusterState
clusterUpdateMyselfFlags	src/cluster.c	/^void clusterUpdateMyselfFlags(void) {$/;"	f	typeref:typename:void
clusterUpdateSlotsConfigWith	src/cluster.c	/^void clusterUpdateSlotsConfigWith(clusterNode *sender, uint64_t senderConfigEpoch, unsigned char/;"	f	typeref:typename:void
clusterUpdateState	src/cluster.c	/^void clusterUpdateState(void) {$/;"	f	typeref:typename:void
clusterWriteHandler	src/cluster.c	/^void clusterWriteHandler(connection *conn) {$/;"	f	typeref:typename:void
cluster_allow_reads_when_down	src/server.h	/^    int cluster_allow_reads_when_down; \/* Are reads allowed when the cluster$/;"	m	struct:redisServer	typeref:typename:int
cluster_allow_replica_migration	src/server.h	/^    int cluster_allow_replica_migration; \/* Automatic replica migrations to orphaned masters an/;"	m	struct:redisServer	typeref:typename:int
cluster_announce_bus_port	src/server.h	/^    int cluster_announce_bus_port; \/* bus port to announce on cluster bus. *\/$/;"	m	struct:redisServer	typeref:typename:int
cluster_announce_ip	src/server.h	/^    char *cluster_announce_ip;  \/* IP address to announce on cluster bus. *\/$/;"	m	struct:redisServer	typeref:typename:char *
cluster_announce_port	src/server.h	/^    int cluster_announce_port;     \/* base port to announce on cluster bus. *\/$/;"	m	struct:redisServer	typeref:typename:int
cluster_announce_tls_port	src/server.h	/^    int cluster_announce_tls_port; \/* TLS port to announce on cluster bus. *\/$/;"	m	struct:redisServer	typeref:typename:int
cluster_config_file_lock_fd	src/server.h	/^    int cluster_config_file_lock_fd;   \/* cluster config fd, will be flock *\/$/;"	m	struct:redisServer	typeref:typename:int
cluster_configfile	src/server.h	/^    char *cluster_configfile; \/* Cluster auto-generated config file name. *\/$/;"	m	struct:redisServer	typeref:typename:char *
cluster_enabled	src/server.h	/^    int cluster_enabled;      \/* Is cluster enabled? *\/$/;"	m	struct:redisServer	typeref:typename:int
cluster_manager	src/redis-cli.c	/^} cluster_manager;$/;"	v	typeref:struct:clusterManager
cluster_manager_command	src/redis-cli.c	/^    clusterManagerCommand cluster_manager_command;$/;"	m	struct:config	typeref:typename:clusterManagerCommand	file:
cluster_migration_barrier	src/server.h	/^    int cluster_migration_barrier; \/* Cluster replicas migration barrier. *\/$/;"	m	struct:redisServer	typeref:typename:int
cluster_mode	src/redis-benchmark.c	/^    int cluster_mode;$/;"	m	struct:config	typeref:typename:int	file:
cluster_mode	src/redis-cli.c	/^    int cluster_mode;$/;"	m	struct:config	typeref:typename:int	file:
cluster_module_flags	src/server.h	/^    int cluster_module_flags;      \/* Set of flags that Redis modules are able$/;"	m	struct:redisServer	typeref:typename:int
cluster_node	src/redis-benchmark.c	/^    struct clusterNode *cluster_node;$/;"	m	struct:_client	typeref:struct:clusterNode *	file:
cluster_node_count	src/redis-benchmark.c	/^    int cluster_node_count;$/;"	m	struct:config	typeref:typename:int	file:
cluster_node_timeout	src/server.h	/^    mstime_t cluster_node_timeout; \/* Cluster node timeout. *\/$/;"	m	struct:redisServer	typeref:typename:mstime_t
cluster_nodes	src/redis-benchmark.c	/^    struct clusterNode **cluster_nodes;$/;"	m	struct:config	typeref:struct:clusterNode **	file:
cluster_reissue_command	src/redis-cli.c	/^    int cluster_reissue_command;$/;"	m	struct:config	typeref:typename:int	file:
cluster_require_full_coverage	src/server.h	/^    int cluster_require_full_coverage; \/* If true, put the cluster down if$/;"	m	struct:redisServer	typeref:typename:int
cluster_send_asking	src/redis-cli.c	/^    int cluster_send_asking;$/;"	m	struct:config	typeref:typename:int	file:
cluster_slave_no_failover	src/server.h	/^    int cluster_slave_no_failover;  \/* Prevent slave from starting a failover$/;"	m	struct:redisServer	typeref:typename:int
cluster_slave_validity_factor	src/server.h	/^    int cluster_slave_validity_factor; \/* Slave max data age for failover. *\/$/;"	m	struct:redisServer	typeref:typename:int
clvalue	deps/lua/src/lobject.h	/^#define clvalue(/;"	d
cmd	src/server.h	/^    struct redisCommand *cmd, *lastcmd;  \/* Last command executed. *\/$/;"	m	struct:client	typeref:struct:redisCommand *
cmd	src/server.h	/^    struct redisCommand *cmd;$/;"	m	struct:multiCmd	typeref:struct:redisCommand *
cmd	src/server.h	/^    struct redisCommand *cmd;$/;"	m	struct:redisOp	typeref:struct:redisCommand *
cmdDelKeyCopy	tests/modules/keyspace_events.c	/^static int cmdDelKeyCopy(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int	file:
cmdEventCount	tests/modules/hooks.c	/^int cmdEventCount(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
cmdEventLast	tests/modules/hooks.c	/^int cmdEventLast(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
cmdEventsClear	tests/modules/hooks.c	/^int cmdEventsClear(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
cmdHasMovableKeys	src/server.c	/^static int cmdHasMovableKeys(struct redisCommand *cmd) {$/;"	f	typeref:typename:int	file:
cmdIncrCase1	tests/modules/keyspace_events.c	/^static int cmdIncrCase1(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int	file:
cmdIncrCase2	tests/modules/keyspace_events.c	/^static int cmdIncrCase2(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int	file:
cmdIncrCase3	tests/modules/keyspace_events.c	/^static int cmdIncrCase3(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int	file:
cmdIsKeyLoaded	tests/modules/keyspace_events.c	/^static int cmdIsKeyLoaded(RedisModuleCtx *ctx, RedisModuleString **argv, int argc){$/;"	f	typeref:typename:int	file:
cmdIsModuleKeyNotified	tests/modules/keyspace_events.c	/^static int cmdIsModuleKeyNotified(RedisModuleCtx *ctx, RedisModuleString **argv, int argc){$/;"	f	typeref:typename:int	file:
cmdNotify	tests/modules/keyspace_events.c	/^static int cmdNotify(RedisModuleCtx *ctx, RedisModuleString **argv, int argc){$/;"	f	typeref:typename:int	file:
cmd_GET	src/modules/hellodict.c	/^int cmd_GET(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
cmd_KEYRANGE	src/modules/hellodict.c	/^int cmd_KEYRANGE(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
cmd_SET	src/modules/hellodict.c	/^int cmd_SET(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
cmd_delim	src/redis-cli.c	/^    sds cmd_delim;$/;"	m	struct:config	typeref:typename:sds	file:
cmd_flags	src/server.h	/^    int cmd_flags;          \/* The accumulated command flags OR-ed together.$/;"	m	struct:multiState	typeref:typename:int
cmd_inv_flags	src/server.h	/^    int cmd_inv_flags;      \/* Same as cmd_flags, OR-ing the ~flags. so that it$/;"	m	struct:multiState	typeref:typename:int
cmds	deps/lua/src/lua_cmsgpack.c	/^const struct luaL_Reg cmds[] = {$/;"	v	typeref:typename:const struct luaL_Reg[]
cmpobj	src/server.h	/^        robj *cmpobj;$/;"	m	union:_redisSortObject::__anon3ef696e9080a	typeref:typename:robj *
cname	src/slowlog.h	/^    sds cname;          \/* Client name. *\/$/;"	m	struct:slowlogEntry	typeref:typename:sds
cnt_all	deps/jemalloc/src/prof.c	/^	prof_cnt_t	cnt_all;$/;"	m	struct:prof_tdata_merge_iter_arg_s	typeref:typename:prof_cnt_t	file:
cnt_all_copy	deps/jemalloc/test/unit/prof_reset.c	/^prof_cnt_t cnt_all_copy = {0, 0, 0, 0};$/;"	v	typeref:typename:prof_cnt_t
cnt_summed	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_cnt_t		cnt_summed;$/;"	m	struct:prof_gctx_s	typeref:typename:prof_cnt_t
cnt_summed	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_cnt_t		cnt_summed;$/;"	m	struct:prof_tdata_s	typeref:typename:prof_cnt_t
cntfrq_hz	src/monotonic.c	/^static inline uint32_t cntfrq_hz() {$/;"	f	typeref:typename:uint32_t	file:
cnts	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_cnt_t		cnts;$/;"	m	struct:prof_tctx_s	typeref:typename:prof_cnt_t
co_funcs	deps/lua/src/lbaselib.c	/^static const luaL_Reg co_funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
code	deps/lua/src/lobject.h	/^  Instruction *code;$/;"	m	struct:Proto	typeref:typename:Instruction *
code_label	deps/lua/src/lcode.c	/^static int code_label (FuncState *fs, int A, int b, int jump) {$/;"	f	typeref:typename:int	file:
codearith	deps/lua/src/lcode.c	/^static void codearith (FuncState *fs, OpCode op, expdesc *e1, expdesc *e2) {$/;"	f	typeref:typename:void	file:
codecomp	deps/lua/src/lcode.c	/^static void codecomp (FuncState *fs, OpCode op, int cond, expdesc *e1,$/;"	f	typeref:typename:void	file:
codenot	deps/lua/src/lcode.c	/^static void codenot (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void	file:
codepoint_to_utf8	deps/lua/src/lua_cjson.c	/^static int codepoint_to_utf8(char *utf8, int codepoint)$/;"	f	typeref:typename:int	file:
codestring	deps/lua/src/lparser.c	/^static void codestring (LexState *ls, expdesc *e, TString *s) {$/;"	f	typeref:typename:void	file:
col	deps/jemalloc/test/unit/stats_print.c	/^	size_t		col;$/;"	m	struct:__anonb5a306e00208	typeref:typename:size_t	file:
col	deps/jemalloc/test/unit/stats_print.c	/^	size_t	col;$/;"	m	struct:parser_s	typeref:typename:size_t	file:
collateStringObjects	src/object.c	/^int collateStringObjects(robj *a, robj *b) {$/;"	f	typeref:typename:int
collectargs	deps/lua/src/lua.c	/^static int collectargs (char **argv, int *pi, int *pv, int *pe) {$/;"	f	typeref:typename:int	file:
collectvalidlines	deps/lua/src/ldebug.c	/^static void collectvalidlines (lua_State *L, Closure *f) {$/;"	f	typeref:typename:void	file:
colon	src/server.h	/^    *colon, *queued, *null[4], *nullarray[4], *emptymap[4], *emptyset[4],$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *********
color	src/lolwut6.c	/^    int color;      \/* Color of the skyscraper. *\/$/;"	m	struct:skyscraper	typeref:typename:int	file:
cols	deps/linenoise/linenoise.c	/^    size_t cols;        \/* Number of columns in terminal. *\/$/;"	m	struct:linenoiseState	typeref:typename:size_t	file:
combine	deps/lua/src/luac.c	/^static const Proto* combine(lua_State* L, int n)$/;"	f	typeref:typename:const Proto *	file:
commandCommand	src/server.c	/^void commandCommand(client *c) {$/;"	f	typeref:typename:void
commandFlagsFromString	src/module.c	/^int64_t commandFlagsFromString(char *s) {$/;"	f	typeref:typename:int64_t
commandGroups	src/help.h	/^static char *commandGroups[] = {$/;"	v	typeref:typename:char * []
commandHelp	src/help.h	/^struct commandHelp {$/;"	s
commandHelp	src/help.h	/^} commandHelp[] = {$/;"	v	typeref:struct:commandHelp[]
commandId	src/acl.c	/^static rax *commandId = NULL; \/* Command name to id mapping *\/$/;"	v	typeref:typename:rax *	file:
commandProcessed	src/networking.c	/^void commandProcessed(client *c) {$/;"	f	typeref:typename:void
commandTableDictType	src/server.c	/^dictType commandTableDictType = {$/;"	v	typeref:typename:dictType
command_cb	deps/hiredis/examples/example-glib.c	/^command_cb(redisAsyncContext *ac,$/;"	f	typeref:typename:void	file:
command_timeout	deps/hiredis/hiredis.h	/^    const struct timeval *command_timeout;$/;"	m	struct:__anon7daed6b50108	typeref:typename:const struct timeval *
command_timeout	deps/hiredis/hiredis.h	/^    struct timeval *command_timeout;$/;"	m	struct:redisContext	typeref:struct:timeval *
commands	src/server.h	/^    dict *commands;             \/* Command table *\/$/;"	m	struct:redisServer	typeref:typename:dict *
commands	src/server.h	/^    multiCmd *commands;     \/* Array of MULTI commands *\/$/;"	m	struct:multiState	typeref:typename:multiCmd *
commit	deps/jemalloc/include/jemalloc/jemalloc.h	/^	extent_commit_t		*commit;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_commit_t *
commit	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_commit_t		*commit;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_commit_t *
commit	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^	extent_commit_t		*commit;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_commit_t *	file:
comp	deps/jemalloc/include/jemalloc/internal/witness.h	/^	witness_comp_t		*comp;$/;"	m	struct:witness_s	typeref:typename:witness_comp_t *
compareCallback	src/dict.c	/^int compareCallback(void *privdata, const void *key1, const void *key2) {$/;"	f	typeref:typename:int
compareHelper	src/ziplist.c	/^static int compareHelper(unsigned char *zl, char ch, size_t len, int index) {$/;"	f	typeref:typename:int	file:
compareSlavesForPromotion	src/sentinel.c	/^int compareSlavesForPromotion(const void *a, const void *b) {$/;"	f	typeref:typename:int
compareStringObjects	src/object.c	/^int compareStringObjects(robj *a, robj *b) {$/;"	f	typeref:typename:int
compareStringObjectsWithFlags	src/object.c	/^int compareStringObjectsWithFlags(robj *a, robj *b, int flags) {$/;"	f	typeref:typename:int
compare_funcs	deps/jemalloc/test/stress/microbench.c	/^compare_funcs(uint64_t nwarmup, uint64_t niter, const char *name_a,$/;"	f	typeref:typename:void
completeLine	deps/linenoise/linenoise.c	/^static int completeLine(struct linenoiseState *ls) {$/;"	f	typeref:typename:int	file:
completion	deps/linenoise/example.c	/^void completion(const char *buf, linenoiseCompletions *lc) {$/;"	f	typeref:typename:void
completionCallback	deps/linenoise/linenoise.c	/^static linenoiseCompletionCallback *completionCallback = NULL;$/;"	v	typeref:typename:linenoiseCompletionCallback *	file:
completionCallback	src/redis-cli.c	/^static void completionCallback(const char *buf, linenoiseCompletions *lc) {$/;"	f	typeref:typename:void	file:
compress	src/quicklist.h	/^    unsigned int compress : QL_COMP_BITS; \/* depth of end nodes not to compress;0=off *\/$/;"	m	struct:quicklist	typeref:typename:unsigned int
compressed	src/quicklist.h	/^    char compressed[];$/;"	m	struct:quicklistLZF	typeref:typename:char[]
computeDatasetDigest	src/debug.c	/^void computeDatasetDigest(unsigned char *final) {$/;"	f	typeref:typename:void
computeDefragCycles	src/defrag.c	/^void computeDefragCycles() {$/;"	f	typeref:typename:void
compute_size_with_overflow	deps/jemalloc/src/jemalloc.c	/^compute_size_with_overflow(bool may_overflow, dynamic_opts_t *dopts,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
compute_something_fast	src/redis-cli.c	/^unsigned long compute_something_fast(void) {$/;"	f	typeref:typename:unsigned long
computesizes	deps/lua/src/ltable.c	/^static int computesizes (int nums[], int *narray) {$/;"	f	typeref:typename:int	file:
cond	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	pthread_cond_t		cond;$/;"	m	struct:background_thread_info_s	typeref:typename:pthread_cond_t
cond	deps/lua/src/lparser.c	/^static int cond (LexState *ls) {$/;"	f	typeref:typename:int	file:
condhardstacktests	deps/lua/src/llimits.h	/^#define condhardstacktests(/;"	d
condjump	deps/lua/src/lcode.c	/^static int condjump (FuncState *fs, OpCode op, int A, int B, int C) {$/;"	f	typeref:typename:int	file:
cone	src/server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj ******
conf_aux_count	tests/modules/testrdb.c	/^long long conf_aux_count = 0;$/;"	v	typeref:typename:long long
config	deps/hiredis/test.c	/^struct config {$/;"	s	file:
config	src/config.c	/^    char **config; \/* Pointer to the server config this value is stored in. *\/$/;"	m	struct:stringConfigData	typeref:typename:char **	file:
config	src/config.c	/^    int *config; \/* The pointer to the server config this value is stored in *\/$/;"	m	struct:boolConfigData	typeref:typename:int *	file:
config	src/config.c	/^    int *config; \/* The pointer to the server config this value is stored in *\/$/;"	m	struct:enumConfigData	typeref:typename:int *	file:
config	src/config.c	/^    sds *config; \/* Pointer to the server config this value is stored in. *\/$/;"	m	struct:sdsConfigData	typeref:typename:sds *	file:
config	src/config.c	/^    } config; \/* The pointer to the numeric config this value is stored in *\/$/;"	m	struct:numericConfigData	typeref:union:numericConfigData::__anon722b8083020a	file:
config	src/redis-benchmark.c	/^static struct config {$/;"	s	file:
config	src/redis-benchmark.c	/^} config;$/;"	v	typeref:struct:config
config	src/redis-cli.c	/^static struct config {$/;"	s	file:
config	src/redis-cli.c	/^} config;$/;"	v	typeref:struct:config
configEnum	src/config.c	/^typedef struct configEnum {$/;"	s	file:
configEnum	src/config.c	/^} configEnum;$/;"	t	typeref:struct:configEnum	file:
configEnumGetName	src/config.c	/^const char *configEnumGetName(configEnum *ce, int val) {$/;"	f	typeref:typename:const char *
configEnumGetNameOrUnknown	src/config.c	/^const char *configEnumGetNameOrUnknown(configEnum *ce, int val) {$/;"	f	typeref:typename:const char *
configEnumGetValue	src/config.c	/^int configEnumGetValue(configEnum *ce, char *name) {$/;"	f	typeref:typename:int
configEpoch	src/cluster.h	/^    uint64_t configEpoch;   \/* The config epoch if it's a master, or the last$/;"	m	struct:__anon2cc7db540b08	typeref:typename:uint64_t
configEpoch	src/cluster.h	/^    uint64_t configEpoch; \/* Config epoch of the specified instance. *\/$/;"	m	struct:__anon2cc7db540408	typeref:typename:uint64_t
configEpoch	src/cluster.h	/^    uint64_t configEpoch; \/* Last configEpoch observed for this node *\/$/;"	m	struct:clusterNode	typeref:typename:uint64_t
configOOMScoreAdjValuesDefaults	src/config.c	/^int configOOMScoreAdjValuesDefaults[CONFIG_OOM_COUNT] = { 0, 200, 800 };$/;"	v	typeref:typename:int[]
configSetCommand	src/config.c	/^void configSetCommand(client *c) {$/;"	f	typeref:typename:void
config_cache_oblivious	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_cache_oblivious =$/;"	v	typeref:typename:const bool
config_cache_oblivious	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool config_cache_oblivious =$/;"	v	typeref:typename:const bool	file:
config_debug	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_debug =$/;"	v	typeref:typename:const bool
config_debug	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool config_debug =$/;"	v	typeref:typename:const bool	file:
config_epoch	src/sentinel.c	/^    uint64_t config_epoch;  \/* Configuration epoch. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:uint64_t	file:
config_fill	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_fill =$/;"	v	typeref:typename:const bool
config_fill	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool config_fill =$/;"	v	typeref:typename:const bool	file:
config_get_bool_field	src/config.c	/^#define config_get_bool_field(/;"	d	file:
config_get_numerical_field	src/config.c	/^#define config_get_numerical_field(/;"	d	file:
config_get_string_field	src/config.c	/^#define config_get_string_field(/;"	d	file:
config_hz	src/server.h	/^    int config_hz;              \/* Configured HZ value. May be different than$/;"	m	struct:redisServer	typeref:typename:int
config_lazy_lock	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_lazy_lock =$/;"	v	typeref:typename:const bool
config_lazy_lock	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool config_lazy_lock =$/;"	v	typeref:typename:const bool	file:
config_log	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_log =$/;"	v	typeref:typename:const bool
config_log	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool config_log =$/;"	v	typeref:typename:const bool	file:
config_malloc_conf	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const char * const config_malloc_conf = JEMALLOC_CONFIG_MALLOC_CONF;$/;"	v	typeref:typename:const char * const
config_malloc_conf	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const char * const config_malloc_conf = JEMALLOC_CONFIG_MALLOC_CONF;$/;"	v	typeref:typename:const char * const	file:
config_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t	config_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
config_prof	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_prof =$/;"	v	typeref:typename:const bool
config_prof	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool config_prof =$/;"	v	typeref:typename:const bool	file:
config_prof_libgcc	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_prof_libgcc =$/;"	v	typeref:typename:const bool
config_prof_libgcc	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool config_prof_libgcc =$/;"	v	typeref:typename:const bool	file:
config_prof_libunwind	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_prof_libunwind =$/;"	v	typeref:typename:const bool
config_prof_libunwind	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool config_prof_libunwind =$/;"	v	typeref:typename:const bool	file:
config_set_bool_field	src/config.c	/^#define config_set_bool_field(/;"	d	file:
config_set_else	src/config.c	/^#define config_set_else /;"	d	file:
config_set_memory_field	src/config.c	/^#define config_set_memory_field(/;"	d	file:
config_set_numerical_field	src/config.c	/^#define config_set_numerical_field(/;"	d	file:
config_set_special_field	src/config.c	/^#define config_set_special_field(/;"	d	file:
config_set_special_field_with_alias	src/config.c	/^#define config_set_special_field_with_alias(/;"	d	file:
config_stats	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_stats =$/;"	v	typeref:typename:const bool
config_stats	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool config_stats =$/;"	v	typeref:typename:const bool	file:
config_stats	deps/jemalloc/test/integration/allocated.c	/^static const bool config_stats =$/;"	v	typeref:typename:const bool	file:
config_tls	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_tls =$/;"	v	typeref:typename:const bool
config_tls	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool config_tls =$/;"	v	typeref:typename:const bool	file:
config_utrace	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_utrace =$/;"	v	typeref:typename:const bool
config_utrace	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool config_utrace =$/;"	v	typeref:typename:const bool	file:
config_xmalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool config_xmalloc =$/;"	v	typeref:typename:const bool
config_xmalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool config_xmalloc =$/;"	v	typeref:typename:const bool	file:
configfile	src/server.h	/^    char *configfile;           \/* Absolute config file path, or NULL *\/$/;"	m	struct:redisServer	typeref:typename:char *
configs	src/config.c	/^standardConfig configs[];$/;"	v	typeref:typename:standardConfig[]
confirmWithYes	src/redis-cli.c	/^static int confirmWithYes(char *msg, int ignore_force) {$/;"	f	typeref:typename:int	file:
conn	src/cluster.c	/^    connection *conn;$/;"	m	struct:migrateCachedSocket	typeref:typename:connection *	file:
conn	src/cluster.h	/^    connection *conn;           \/* Connection to remote node *\/$/;"	m	struct:clusterLink	typeref:typename:connection *
conn	src/rio.h	/^            connection *conn;   \/* Connection *\/$/;"	m	struct:_rio::__anonb6066a3c010a::__anonb6066a3c0408	typeref:typename:connection *
conn	src/rio.h	/^        } conn;$/;"	m	union:_rio::__anonb6066a3c010a	typeref:struct:_rio::__anonb6066a3c010a::__anonb6066a3c0408
conn	src/scripting.c	/^    connection *conn; \/* Connection of the debugging client. *\/$/;"	m	struct:ldbState	typeref:typename:connection *	file:
conn	src/server.h	/^    connection *conn;$/;"	m	struct:client	typeref:typename:connection *
connAccept	src/connection.h	/^static inline int connAccept(connection *conn, ConnectionCallbackFunc accept_handler) {$/;"	f	typeref:typename:int
connBlock	src/connection.c	/^int connBlock(connection *conn) {$/;"	f	typeref:typename:int
connBlockingConnect	src/connection.h	/^static inline int connBlockingConnect(connection *conn, const char *addr, int port, long long ti/;"	f	typeref:typename:int
connClose	src/connection.h	/^static inline void connClose(connection *conn) {$/;"	f	typeref:typename:void
connConnect	src/connection.h	/^static inline int connConnect(connection *conn, const char *addr, int port, const char *src_addr/;"	f	typeref:typename:int
connCreateAcceptedSocket	src/connection.c	/^connection *connCreateAcceptedSocket(int fd) {$/;"	f	typeref:typename:connection *
connCreateAcceptedTLS	src/tls.c	/^connection *connCreateAcceptedTLS(int fd, int require_auth) {$/;"	f	typeref:typename:connection *
connCreateSocket	src/connection.c	/^connection *connCreateSocket() {$/;"	f	typeref:typename:connection *
connCreateTLS	src/tls.c	/^connection *connCreateTLS(void) { $/;"	f	typeref:typename:connection *
connCreateTLS	src/tls.c	/^connection *connCreateTLS(void) {$/;"	f	typeref:typename:connection *
connDecrRefs	src/connhelpers.h	/^static inline void connDecrRefs(connection *conn) {$/;"	f	typeref:typename:void
connDisableTcpNoDelay	src/connection.c	/^int connDisableTcpNoDelay(connection *conn) {$/;"	f	typeref:typename:int
connEnableTcpNoDelay	src/connection.c	/^int connEnableTcpNoDelay(connection *conn) {$/;"	f	typeref:typename:int
connFormatFdAddr	src/connection.c	/^int connFormatFdAddr(connection *conn, char *buf, size_t buf_len, int fd_to_str_type) {$/;"	f	typeref:typename:int
connGetInfo	src/connection.c	/^const char *connGetInfo(connection *conn, char *buf, size_t buf_len) {$/;"	f	typeref:typename:const char *
connGetLastError	src/connection.h	/^static inline const char *connGetLastError(connection *conn) {$/;"	f	typeref:typename:const char *
connGetPrivateData	src/connection.c	/^void *connGetPrivateData(connection *conn) {$/;"	f	typeref:typename:void *
connGetSocketError	src/connection.c	/^int connGetSocketError(connection *conn) {$/;"	f	typeref:typename:int
connGetState	src/connection.c	/^int connGetState(connection *conn) {$/;"	f	typeref:typename:int
connGetType	src/connection.h	/^static inline int connGetType(connection *conn) {$/;"	f	typeref:typename:int
connHasReadHandler	src/connection.c	/^int connHasReadHandler(connection *conn) {$/;"	f	typeref:typename:int
connHasRefs	src/connhelpers.h	/^static inline int connHasRefs(connection *conn) {$/;"	f	typeref:typename:int
connHasWriteHandler	src/connection.c	/^int connHasWriteHandler(connection *conn) {$/;"	f	typeref:typename:int
connIncrRefs	src/connhelpers.h	/^static inline void connIncrRefs(connection *conn) {$/;"	f	typeref:typename:void
connKeepAlive	src/connection.c	/^int connKeepAlive(connection *conn, int interval) {$/;"	f	typeref:typename:int
connNonBlock	src/connection.c	/^int connNonBlock(connection *conn) {$/;"	f	typeref:typename:int
connPeerToString	src/connection.c	/^int connPeerToString(connection *conn, char *ip, size_t ip_len, int *port) {$/;"	f	typeref:typename:int
connRead	src/connection.h	/^static inline int connRead(connection *conn, void *buf, size_t buf_len) {$/;"	f	typeref:typename:int
connRecvTimeout	src/connection.c	/^int connRecvTimeout(connection *conn, long long ms) {$/;"	f	typeref:typename:int
connSendTimeout	src/connection.c	/^int connSendTimeout(connection *conn, long long ms) {$/;"	f	typeref:typename:int
connSetPrivateData	src/connection.c	/^void connSetPrivateData(connection *conn, void *data) {$/;"	f	typeref:typename:void
connSetReadHandler	src/connection.h	/^static inline int connSetReadHandler(connection *conn, ConnectionCallbackFunc func) {$/;"	f	typeref:typename:int
connSetWriteHandler	src/connection.h	/^static inline int connSetWriteHandler(connection *conn, ConnectionCallbackFunc func) {$/;"	f	typeref:typename:int
connSetWriteHandlerWithBarrier	src/connection.h	/^static inline int connSetWriteHandlerWithBarrier(connection *conn, ConnectionCallbackFunc func, /;"	f	typeref:typename:int
connSockName	src/connection.c	/^int connSockName(connection *conn, char *ip, size_t ip_len, int *port) {$/;"	f	typeref:typename:int
connSocketAccept	src/connection.c	/^static int connSocketAccept(connection *conn, ConnectionCallbackFunc accept_handler) {$/;"	f	typeref:typename:int	file:
connSocketBlockingConnect	src/connection.c	/^static int connSocketBlockingConnect(connection *conn, const char *addr, int port, long long tim/;"	f	typeref:typename:int	file:
connSocketClose	src/connection.c	/^static void connSocketClose(connection *conn) {$/;"	f	typeref:typename:void	file:
connSocketConnect	src/connection.c	/^static int connSocketConnect(connection *conn, const char *addr, int port, const char *src_addr,$/;"	f	typeref:typename:int	file:
connSocketEventHandler	src/connection.c	/^static void connSocketEventHandler(struct aeEventLoop *el, int fd, void *clientData, int mask)$/;"	f	typeref:typename:void	file:
connSocketGetLastError	src/connection.c	/^static const char *connSocketGetLastError(connection *conn) {$/;"	f	typeref:typename:const char *	file:
connSocketGetType	src/connection.c	/^static int connSocketGetType(connection *conn) {$/;"	f	typeref:typename:int	file:
connSocketRead	src/connection.c	/^static int connSocketRead(connection *conn, void *buf, size_t buf_len) {$/;"	f	typeref:typename:int	file:
connSocketSetReadHandler	src/connection.c	/^static int connSocketSetReadHandler(connection *conn, ConnectionCallbackFunc func) {$/;"	f	typeref:typename:int	file:
connSocketSetWriteHandler	src/connection.c	/^static int connSocketSetWriteHandler(connection *conn, ConnectionCallbackFunc func, int barrier)/;"	f	typeref:typename:int	file:
connSocketSyncRead	src/connection.c	/^static ssize_t connSocketSyncRead(connection *conn, char *ptr, ssize_t size, long long timeout) /;"	f	typeref:typename:ssize_t	file:
connSocketSyncReadLine	src/connection.c	/^static ssize_t connSocketSyncReadLine(connection *conn, char *ptr, ssize_t size, long long timeo/;"	f	typeref:typename:ssize_t	file:
connSocketSyncWrite	src/connection.c	/^static ssize_t connSocketSyncWrite(connection *conn, char *ptr, ssize_t size, long long timeout)/;"	f	typeref:typename:ssize_t	file:
connSocketWrite	src/connection.c	/^static int connSocketWrite(connection *conn, const void *data, size_t data_len) {$/;"	f	typeref:typename:int	file:
connSyncRead	src/connection.h	/^static inline ssize_t connSyncRead(connection *conn, char *ptr, ssize_t size, long long timeout)/;"	f	typeref:typename:ssize_t
connSyncReadLine	src/connection.h	/^static inline ssize_t connSyncReadLine(connection *conn, char *ptr, ssize_t size, long long time/;"	f	typeref:typename:ssize_t
connSyncWrite	src/connection.h	/^static inline ssize_t connSyncWrite(connection *conn, char *ptr, ssize_t size, long long timeout/;"	f	typeref:typename:ssize_t
connTLSAccept	src/tls.c	/^static int connTLSAccept(connection *_conn, ConnectionCallbackFunc accept_handler) {$/;"	f	typeref:typename:int	file:
connTLSBlockingConnect	src/tls.c	/^static int connTLSBlockingConnect(connection *conn_, const char *addr, int port, long long timeo/;"	f	typeref:typename:int	file:
connTLSClose	src/tls.c	/^static void connTLSClose(connection *conn_) {$/;"	f	typeref:typename:void	file:
connTLSConnect	src/tls.c	/^static int connTLSConnect(connection *conn_, const char *addr, int port, const char *src_addr, C/;"	f	typeref:typename:int	file:
connTLSGetLastError	src/tls.c	/^static const char *connTLSGetLastError(connection *conn_) {$/;"	f	typeref:typename:const char *	file:
connTLSGetPeerCert	src/tls.c	/^sds connTLSGetPeerCert(connection *conn_) {$/;"	f	typeref:typename:sds
connTLSGetType	src/tls.c	/^static int connTLSGetType(connection *conn_) {$/;"	f	typeref:typename:int	file:
connTLSRead	src/tls.c	/^static int connTLSRead(connection *conn_, void *buf, size_t buf_len) {$/;"	f	typeref:typename:int	file:
connTLSSetReadHandler	src/tls.c	/^int connTLSSetReadHandler(connection *conn, ConnectionCallbackFunc func) {$/;"	f	typeref:typename:int
connTLSSetWriteHandler	src/tls.c	/^int connTLSSetWriteHandler(connection *conn, ConnectionCallbackFunc func, int barrier) {$/;"	f	typeref:typename:int
connTLSSyncRead	src/tls.c	/^static ssize_t connTLSSyncRead(connection *conn_, char *ptr, ssize_t size, long long timeout) {$/;"	f	typeref:typename:ssize_t	file:
connTLSSyncReadLine	src/tls.c	/^static ssize_t connTLSSyncReadLine(connection *conn_, char *ptr, ssize_t size, long long timeout/;"	f	typeref:typename:ssize_t	file:
connTLSSyncWrite	src/tls.c	/^static ssize_t connTLSSyncWrite(connection *conn_, char *ptr, ssize_t size, long long timeout) {$/;"	f	typeref:typename:ssize_t	file:
connTLSWrite	src/tls.c	/^static int connTLSWrite(connection *conn_, const void *data, size_t data_len) {$/;"	f	typeref:typename:int	file:
connWrite	src/connection.h	/^static inline int connWrite(connection *conn, const void *data, size_t data_len) {$/;"	f	typeref:typename:int
conn_handler	src/connection.h	/^    ConnectionCallbackFunc conn_handler;$/;"	m	struct:connection	typeref:typename:ConnectionCallbackFunc
connect	deps/hiredis/sockcompat.h	/^#define connect(/;"	d
connect	src/connection.h	/^    int (*connect)(struct connection *conn, const char *addr, int port, const char *source_addr,/;"	m	struct:ConnectionType	typeref:typename:int (*)(struct connection * conn,const char * addr,int port,const char * source_addr,ConnectionCallbackFunc connect_handler)
connectCallback	deps/hiredis/examples/example-ae.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f	typeref:typename:void
connectCallback	deps/hiredis/examples/example-ivykis.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f	typeref:typename:void
connectCallback	deps/hiredis/examples/example-libev.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f	typeref:typename:void
connectCallback	deps/hiredis/examples/example-libevent-ssl.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f	typeref:typename:void
connectCallback	deps/hiredis/examples/example-libevent.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f	typeref:typename:void
connectCallback	deps/hiredis/examples/example-libuv.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f	typeref:typename:void
connectCallback	deps/hiredis/examples/example-macosx.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f	typeref:typename:void
connectWithMaster	src/replication.c	/^int connectWithMaster(void) {$/;"	f	typeref:typename:int
connect_cb	deps/hiredis/examples/example-glib.c	/^connect_cb (const redisAsyncContext *ac G_GNUC_UNUSED,$/;"	f	typeref:typename:void	file:
connect_timeout	deps/hiredis/hiredis.h	/^    const struct timeval *connect_timeout;$/;"	m	struct:__anon7daed6b50108	typeref:typename:const struct timeval *
connect_timeout	deps/hiredis/hiredis.h	/^    struct timeval *connect_timeout;$/;"	m	struct:redisContext	typeref:struct:timeval *
connected	src/redis-cli.c	/^    int connected;$/;"	m	struct:clusterManagerLink	typeref:typename:int	file:
connection	src/connection.h	/^struct connection {$/;"	s
connection	src/connection.h	/^typedef struct connection connection;$/;"	t	typeref:struct:connection
connection_type	deps/hiredis/hiredis.h	/^    enum redisConnectionType connection_type;$/;"	m	struct:redisContext	typeref:enum:redisConnectionType
connection_type	deps/hiredis/test.c	/^enum connection_type {$/;"	g	file:
constfolding	deps/lua/src/lcode.c	/^static int constfolding (OpCode op, expdesc *e1, expdesc *e2) {$/;"	f	typeref:typename:int	file:
constructor	deps/lua/src/lparser.c	/^static void constructor (LexState *ls, expdesc *t) {$/;"	f	typeref:typename:void	file:
consumeNewline	src/redis-check-aof.c	/^int consumeNewline(char *buf) {$/;"	f	typeref:typename:int
consumer	src/stream.h	/^    streamConsumer *consumer;   \/* The consumer this message was delivered to$/;"	m	struct:streamNACK	typeref:typename:streamConsumer *
consumers	src/stream.h	/^    rax *consumers;         \/* A radix tree representing the consumers by name$/;"	m	struct:streamCG	typeref:typename:rax *
container	src/quicklist.h	/^    unsigned int container : 2;  \/* NONE==1 or ZIPLIST==2 *\/$/;"	m	struct:quicklistNode	typeref:typename:unsigned int:2
container_s	deps/jemalloc/src/ctl.c	/^			struct container_s {$/;"	s	function:arenas_i_impl	file:
contents	src/intset.h	/^    int8_t contents[];$/;"	m	struct:intset	typeref:typename:int8_t[]
context	deps/hiredis/adapters/ae.h	/^    redisAsyncContext *context;$/;"	m	struct:redisAeEvents	typeref:typename:redisAsyncContext *
context	deps/hiredis/adapters/ivykis.h	/^    redisAsyncContext *context;$/;"	m	struct:redisIvykisEvents	typeref:typename:redisAsyncContext *
context	deps/hiredis/adapters/libev.h	/^    redisAsyncContext *context;$/;"	m	struct:redisLibevEvents	typeref:typename:redisAsyncContext *
context	deps/hiredis/adapters/libevent.h	/^    redisAsyncContext *context;$/;"	m	struct:redisLibeventEvents	typeref:typename:redisAsyncContext *
context	deps/hiredis/adapters/libuv.h	/^  redisAsyncContext* context;$/;"	m	struct:redisLibuvEvents	typeref:typename:redisAsyncContext *
context	deps/hiredis/adapters/macosx.h	/^    redisAsyncContext *context;$/;"	m	struct:__anona6f175db0108	typeref:typename:redisAsyncContext *
context	src/acl.c	/^    int context;        \/* Toplevel, Lua or MULTI\/EXEC? ACL_LOG_CTX_*. *\/$/;"	m	struct:ACLLogEntry	typeref:typename:int	file:
context	src/redis-benchmark.c	/^    redisContext *context;$/;"	m	struct:_client	typeref:typename:redisContext *	file:
context	src/redis-cli.c	/^    redisContext *context;$/;"	m	struct:clusterManagerNode	typeref:typename:redisContext *	file:
context	src/redis-cli.c	/^static redisContext *context;$/;"	v	typeref:typename:redisContext *	file:
context	src/sentinel.c	/^    redisAsyncContext *context;$/;"	m	struct:redisAeEvents	typeref:typename:redisAsyncContext *	file:
controloptions	deps/lua/src/lua_struct.c	/^static void controloptions (lua_State *L, int opt, const char **fmt,$/;"	f	typeref:typename:void	file:
conversion	src/geohash.h	/^    double conversion; \/* km: 1000 *\/$/;"	m	struct:__anona01652f10608	typeref:typename:double
conversion_ratio	deps/hdr_histogram/hdr_histogram.h	/^    double conversion_ratio;$/;"	m	struct:hdr_histogram	typeref:typename:double
convert_empty_to_null	src/config.c	/^    int convert_empty_to_null; \/* Boolean indicating if empty SDS strings should$/;"	m	struct:sdsConfigData	typeref:typename:int	file:
convert_empty_to_null	src/config.c	/^    int convert_empty_to_null; \/* Boolean indicating if empty strings should$/;"	m	struct:stringConfigData	typeref:typename:int	file:
copy	src/module.c	/^            moduleTypeCopyFunc copy;$/;"	m	struct:RM_CreateDataType::typemethods::__anon967b47330708	typeref:typename:moduleTypeCopyFunc	file:
copy	src/redismodule.h	/^    RedisModuleTypeCopyFunc copy;$/;"	m	struct:RedisModuleTypeMethods	typeref:typename:RedisModuleTypeCopyFunc
copy	src/server.h	/^    moduleTypeCopyFunc copy;$/;"	m	struct:RedisModuleType	typeref:typename:moduleTypeCopyFunc
copyClientOutputBuffer	src/networking.c	/^void copyClientOutputBuffer(client *dst, client *src) {$/;"	f	typeref:typename:void
copyCommand	src/db.c	/^void copyCommand(client *c) {$/;"	f	typeref:typename:void
correctbytes	deps/lua/src/lua_struct.c	/^static void correctbytes (char *b, int size, int endian) {$/;"	f	typeref:typename:void	file:
correctstack	deps/lua/src/ldo.c	/^static void correctstack (lua_State *L, TValue *oldstack) {$/;"	f	typeref:typename:void	file:
costatus	deps/lua/src/lbaselib.c	/^static int costatus (lua_State *L, lua_State *co) {$/;"	f	typeref:typename:int	file:
count	deps/hdr_histogram/hdr_histogram.h	/^    int64_t count;$/;"	m	struct:hdr_iter	typeref:typename:int64_t
count	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	size_t count;$/;"	m	struct:__anon25f7a4b70208	typeref:typename:size_t
count	src/acl.c	/^    uint64_t count;     \/* Number of times this happened recently. *\/$/;"	m	struct:ACLLogEntry	typeref:typename:uint64_t	file:
count	src/cluster.h	/^    uint16_t count;     \/* Only used for some kind of messages. *\/$/;"	m	struct:__anon2cc7db540b08	typeref:typename:uint16_t
count	src/quicklist.h	/^    unsigned int count : 16;     \/* count of items in ziplist *\/$/;"	m	struct:quicklistNode	typeref:typename:unsigned int:16
count	src/quicklist.h	/^    unsigned long count;        \/* total count of all entries in all ziplists *\/$/;"	m	struct:quicklist	typeref:typename:unsigned long
count	src/redis-cli.c	/^    int count;                  \/* Non-NULL nodes count *\/$/;"	m	struct:clusterManagerNodeArray	typeref:typename:int	file:
count	src/redis-cli.c	/^    long long count; \/* Number of samples in this interval. *\/$/;"	m	struct:distsamples	typeref:typename:long long	file:
count	src/redis-cli.c	/^    unsigned long long count;$/;"	m	struct:__anon6af24fe90208	typeref:typename:unsigned long long	file:
count	src/server.h	/^    int count;              \/* Total number of MULTI commands *\/$/;"	m	struct:multiState	typeref:typename:int
count	src/server.h	/^    int count;$/;"	m	struct:socketFds	typeref:typename:int
count	src/server.h	/^    long long count;$/;"	m	struct:redisError	typeref:typename:long long
count	src/sha1.h	/^    uint32_t count[2];$/;"	m	struct:__anon790f1a3f0108	typeref:typename:uint32_t[2]
count	src/t_hash.c	/^        long count;$/;"	m	struct:_hashZiplistEntryValidation::__anon4492e9240108	typeref:typename:long	file:
count	src/t_hash.c	/^        long count;$/;"	m	struct:hashZiplistValidateIntegrity::__anon4492e9240208	typeref:typename:long	file:
count	src/t_zset.c	/^        long count;$/;"	m	struct:_zsetZiplistValidateIntegrity::__anon6fce03460108	typeref:typename:long	file:
count	src/t_zset.c	/^        long count;$/;"	m	struct:zsetZiplistValidateIntegrity::__anon6fce03460208	typeref:typename:long	file:
count	tests/modules/hooks.c	/^    long count;$/;"	m	struct:EventElement	typeref:typename:long	file:
countDigits	deps/hiredis/hiredis.c	/^static uint32_t countDigits(uint64_t v) {$/;"	f	typeref:typename:uint32_t	file:
countKeysInSlot	src/db.c	/^unsigned int countKeysInSlot(unsigned int hashslot) {$/;"	f	typeref:typename:unsigned int
count_added_in_this_iteration_step	deps/hdr_histogram/hdr_histogram.h	/^    int64_t count_added_in_this_iteration_step;$/;"	m	struct:hdr_iter_linear	typeref:typename:int64_t
count_added_in_this_iteration_step	deps/hdr_histogram/hdr_histogram.h	/^    int64_t count_added_in_this_iteration_step;$/;"	m	struct:hdr_iter_log	typeref:typename:int64_t
count_added_in_this_iteration_step	deps/hdr_histogram/hdr_histogram.h	/^    int64_t count_added_in_this_iteration_step;$/;"	m	struct:hdr_iter_recorded	typeref:typename:int64_t
count_leading_zeros_64	deps/hdr_histogram/hdr_histogram.c	/^static int32_t count_leading_zeros_64(int64_t value)$/;"	f	typeref:typename:int32_t	file:
counter	utils/lru/lfu-simulation.c	/^    uint8_t counter;    \/* Logarithmic counter. *\/$/;"	m	struct:entry	typeref:typename:uint8_t	file:
countint	deps/lua/src/ltable.c	/^static int countint (const TValue *key, int *nums) {$/;"	f	typeref:typename:int	file:
counts	deps/hdr_histogram/hdr_histogram.h	/^    int64_t* counts;$/;"	m	struct:hdr_histogram	typeref:typename:int64_t *
counts_get_direct	deps/hdr_histogram/hdr_histogram.c	/^static int64_t counts_get_direct(const struct hdr_histogram* h, int32_t index)$/;"	f	typeref:typename:int64_t	file:
counts_get_normalised	deps/hdr_histogram/hdr_histogram.c	/^static int64_t counts_get_normalised(const struct hdr_histogram* h, int32_t index)$/;"	f	typeref:typename:int64_t	file:
counts_inc_normalised	deps/hdr_histogram/hdr_histogram.c	/^static void counts_inc_normalised($/;"	f	typeref:typename:void	file:
counts_inc_normalised_atomic	deps/hdr_histogram/hdr_histogram.c	/^static void counts_inc_normalised_atomic($/;"	f	typeref:typename:void	file:
counts_index	deps/hdr_histogram/hdr_histogram.c	/^static int32_t counts_index(const struct hdr_histogram* h, int32_t bucket_index, int32_t sub_buc/;"	f	typeref:typename:int32_t	file:
counts_index	deps/hdr_histogram/hdr_histogram.h	/^    int32_t counts_index;$/;"	m	struct:hdr_iter	typeref:typename:int32_t
counts_index_for	deps/hdr_histogram/hdr_histogram.c	/^int32_t counts_index_for(const struct hdr_histogram* h, int64_t value)$/;"	f	typeref:typename:int32_t
counts_len	deps/hdr_histogram/hdr_histogram.h	/^    int32_t counts_len;$/;"	m	struct:hdr_histogram	typeref:typename:int32_t
counts_len	deps/hdr_histogram/hdr_histogram.h	/^    int32_t counts_len;$/;"	m	struct:hdr_histogram_bucket_config	typeref:typename:int32_t
coverage	deps/hiredis/Makefile	/^coverage: gcov$/;"	t
cow	src/childinfo.c	/^    size_t cow;$/;"	m	struct:__anonbbe6eb5d0108	typeref:typename:size_t	file:
cow_updated	src/childinfo.c	/^    monotime cow_updated;$/;"	m	struct:__anonbbe6eb5d0108	typeref:typename:monotime	file:
cport	src/cluster.h	/^    int cport;                  \/* Latest known cluster port of this node. *\/$/;"	m	struct:clusterNode	typeref:typename:int
cport	src/cluster.h	/^    uint16_t cport;             \/* cluster port last time it was seen *\/$/;"	m	struct:__anon2cc7db540108	typeref:typename:uint16_t
cport	src/cluster.h	/^    uint16_t cport;      \/* Sender TCP cluster bus port *\/$/;"	m	struct:__anon2cc7db540b08	typeref:typename:uint16_t
crashlog_enabled	src/server.h	/^    int crashlog_enabled;           \/* Enable signal handler for crashlog.$/;"	m	struct:redisServer	typeref:typename:int
crc16	src/crc16.c	/^uint16_t crc16(const char *buf, int len) {$/;"	f	typeref:typename:uint16_t
crc16_slot_table	src/crc16_slottable.h	/^const char *crc16_slot_table[] = {$/;"	v	typeref:typename:const char * []
crc16tab	src/crc16.c	/^static const uint16_t crc16tab[256]= {$/;"	v	typeref:typename:const uint16_t[256]	file:
crc64	src/crc64.c	/^uint64_t crc64(uint64_t crc, const unsigned char *s, uint64_t l) {$/;"	f	typeref:typename:uint64_t
crc64Hash	utils/tracking_collisions.c	/^uint64_t crc64Hash(char *key, size_t len) {$/;"	f	typeref:typename:uint64_t
crc64Test	src/crc64.c	/^int crc64Test(int argc, char *argv[], int accurate) {$/;"	f	typeref:typename:int
crc64_init	src/crc64.c	/^void crc64_init(void) {$/;"	f	typeref:typename:void
crc64_table	src/crc64.c	/^static uint64_t crc64_table[8][256] = {{0}};$/;"	v	typeref:typename:uint64_t[8][256]	file:
crc_reflect	src/crc64.c	/^static inline uint_fast64_t crc_reflect(uint_fast64_t data, size_t data_len) {$/;"	f	typeref:typename:uint_fast64_t	file:
crcfn16	src/crcspeed.h	/^typedef uint16_t (*crcfn16)(uint16_t, const void *, const uint64_t);$/;"	t	typeref:typename:uint16_t (*)(uint16_t,const void *,const uint64_t)
crcfn64	src/crcspeed.h	/^typedef uint64_t (*crcfn64)(uint64_t, const void *, const uint64_t);$/;"	t	typeref:typename:uint64_t (*)(uint64_t,const void *,const uint64_t)
crcspeed16big	src/crcspeed.c	/^uint16_t crcspeed16big(uint16_t big_table[8][256], uint16_t crc_in, void *buf,$/;"	f	typeref:typename:uint16_t
crcspeed16big_init	src/crcspeed.c	/^void crcspeed16big_init(crcfn16 fn, uint16_t big_table[8][256]) {$/;"	f	typeref:typename:void
crcspeed16little	src/crcspeed.c	/^uint16_t crcspeed16little(uint16_t little_table[8][256], uint16_t crc,$/;"	f	typeref:typename:uint16_t
crcspeed16little_init	src/crcspeed.c	/^void crcspeed16little_init(crcfn16 crcfn, uint16_t table[8][256]) {$/;"	f	typeref:typename:void
crcspeed16native	src/crcspeed.c	/^uint16_t crcspeed16native(uint16_t table[8][256], uint16_t crc, void *buf,$/;"	f	typeref:typename:uint16_t
crcspeed16native_init	src/crcspeed.c	/^void crcspeed16native_init(crcfn16 fn, uint16_t table[8][256]) {$/;"	f	typeref:typename:void
crcspeed64big	src/crcspeed.c	/^uint64_t crcspeed64big(uint64_t big_table[8][256], uint64_t crc, void *buf,$/;"	f	typeref:typename:uint64_t
crcspeed64big_init	src/crcspeed.c	/^void crcspeed64big_init(crcfn64 fn, uint64_t big_table[8][256]) {$/;"	f	typeref:typename:void
crcspeed64little	src/crcspeed.c	/^uint64_t crcspeed64little(uint64_t little_table[8][256], uint64_t crc,$/;"	f	typeref:typename:uint64_t
crcspeed64little_init	src/crcspeed.c	/^void crcspeed64little_init(crcfn64 crcfn, uint64_t table[8][256]) {$/;"	f	typeref:typename:void
crcspeed64native	src/crcspeed.c	/^uint64_t crcspeed64native(uint64_t table[8][256], uint64_t crc, void *buf,$/;"	f	typeref:typename:uint64_t
crcspeed64native_init	src/crcspeed.c	/^void crcspeed64native_init(crcfn64 fn, uint64_t table[8][256]) {$/;"	f	typeref:typename:void
creat	deps/jemalloc/include/jemalloc/internal/hooks.h	/^#define creat /;"	d
createAOFClient	src/aof.c	/^struct client *createAOFClient(void) {$/;"	f	typeref:struct:client *
createArray	deps/hiredis/read.h	/^    void *(*createArray)(const redisReadTask*, size_t);$/;"	m	struct:redisReplyObjectFunctions	typeref:typename:void * (*)(const redisReadTask *,size_t)
createArrayObject	deps/hiredis/hiredis.c	/^static void *createArrayObject(const redisReadTask *task, size_t elements) {$/;"	f	typeref:typename:void *	file:
createBenchmarkThread	src/redis-benchmark.c	/^static benchmarkThread *createBenchmarkThread(int index) {$/;"	f	typeref:typename:benchmarkThread *	file:
createBool	deps/hiredis/read.h	/^    void *(*createBool)(const redisReadTask*, int);$/;"	m	struct:redisReplyObjectFunctions	typeref:typename:void * (*)(const redisReadTask *,int)
createBoolConfig	src/config.c	/^#define createBoolConfig(/;"	d	file:
createBoolObject	deps/hiredis/hiredis.c	/^static void *createBoolObject(const redisReadTask *task, int bval) {$/;"	f	typeref:typename:void *	file:
createClient	src/networking.c	/^client *createClient(connection *conn) {$/;"	f	typeref:typename:client *
createClient	src/redis-benchmark.c	/^static client createClient(char *cmd, size_t len, client from, int thread_id) {$/;"	f	typeref:typename:client	file:
createClusterLink	src/cluster.c	/^clusterLink *createClusterLink(clusterNode *node) {$/;"	f	typeref:typename:clusterLink *
createClusterManagerCommand	src/redis-cli.c	/^static void createClusterManagerCommand(char *cmdname, int argc, char **argv) {$/;"	f	typeref:typename:void	file:
createClusterNode	src/cluster.c	/^clusterNode *createClusterNode(char *nodename, int flags) {$/;"	f	typeref:typename:clusterNode *
createClusterNode	src/redis-benchmark.c	/^static clusterNode *createClusterNode(char *ip, int port) {$/;"	f	typeref:typename:clusterNode *	file:
createDouble	deps/hiredis/read.h	/^    void *(*createDouble)(const redisReadTask*, double, char*, size_t);$/;"	m	struct:redisReplyObjectFunctions	typeref:typename:void * (*)(const redisReadTask *,double,char *,size_t)
createDoubleObject	deps/hiredis/hiredis.c	/^static void *createDoubleObject(const redisReadTask *task, double value, char *str, size_t len) /;"	f	typeref:typename:void *	file:
createDumpPayload	src/cluster.c	/^void createDumpPayload(rio *payload, robj *o, robj *key) {$/;"	f	typeref:typename:void
createEmbeddedStringObject	src/object.c	/^robj *createEmbeddedStringObject(const char *ptr, size_t len) {$/;"	f	typeref:typename:robj *
createEnumConfig	src/config.c	/^#define createEnumConfig(/;"	d	file:
createFragObject	tests/modules/defragtest.c	/^struct FragObject *createFragObject(unsigned long len, unsigned long size, int maxstep) {$/;"	f	typeref:struct:FragObject *
createGlobalStrings	tests/modules/defragtest.c	/^static void createGlobalStrings(RedisModuleCtx *ctx, int count)$/;"	f	typeref:typename:void	file:
createHLLObject	src/hyperloglog.c	/^robj *createHLLObject(void) {$/;"	f	typeref:typename:robj *
createHashObject	src/object.c	/^robj *createHashObject(void) {$/;"	f	typeref:typename:robj *
createHelloTypeObject	src/modules/hellotype.c	/^struct HelloTypeObject *createHelloTypeObject(void) {$/;"	f	typeref:struct:HelloTypeObject *
createInstanceLink	src/sentinel.c	/^instanceLink *createInstanceLink(void) {$/;"	f	typeref:typename:instanceLink *
createIntConfig	src/config.c	/^#define createIntConfig(/;"	d	file:
createIntList	src/ziplist.c	/^static unsigned char *createIntList() {$/;"	f	typeref:typename:unsigned char *	file:
createInteger	deps/hiredis/read.h	/^    void *(*createInteger)(const redisReadTask*, long long);$/;"	m	struct:redisReplyObjectFunctions	typeref:typename:void * (*)(const redisReadTask *,long long)
createIntegerObject	deps/hiredis/hiredis.c	/^static void *createIntegerObject(const redisReadTask *task, long long value) {$/;"	f	typeref:typename:void *	file:
createIntsetObject	src/object.c	/^robj *createIntsetObject(void) {$/;"	f	typeref:typename:robj *
createLatencyReport	src/latency.c	/^sds createLatencyReport(void) {$/;"	f	typeref:typename:sds
createLazyFreeLinkObject	tests/modules/test_lazyfree.c	/^struct LazyFreeLinkObject *createLazyFreeLinkObject(void) {$/;"	f	typeref:struct:LazyFreeLinkObject *
createList	src/ziplist.c	/^static unsigned char *createList() {$/;"	f	typeref:typename:unsigned char *	file:
createLongConfig	src/config.c	/^#define createLongConfig(/;"	d	file:
createLongLongConfig	src/config.c	/^#define createLongLongConfig(/;"	d	file:
createMissingClients	src/redis-benchmark.c	/^static void createMissingClients(client c) {$/;"	f	typeref:typename:void	file:
createModuleObject	src/object.c	/^robj *createModuleObject(moduleType *mt, void *value) {$/;"	f	typeref:typename:robj *
createNil	deps/hiredis/read.h	/^    void *(*createNil)(const redisReadTask*);$/;"	m	struct:redisReplyObjectFunctions	typeref:typename:void * (*)(const redisReadTask *)
createNilObject	deps/hiredis/hiredis.c	/^static void *createNilObject(const redisReadTask *task) {$/;"	f	typeref:typename:void *	file:
createObject	src/object.c	/^robj *createObject(int type, void *ptr) {$/;"	f	typeref:typename:robj *
createObjectFromStreamID	src/t_stream.c	/^robj *createObjectFromStreamID(streamID *id) {$/;"	f	typeref:typename:robj *
createOffTConfig	src/config.c	/^#define createOffTConfig(/;"	d	file:
createPidFile	src/server.c	/^void createPidFile(void) {$/;"	f	typeref:typename:void
createQuicklistObject	src/object.c	/^robj *createQuicklistObject(void) {$/;"	f	typeref:typename:robj *
createRawStringObject	src/object.c	/^robj *createRawStringObject(const char *ptr, size_t len) {$/;"	f	typeref:typename:robj *
createReplicationBacklog	src/replication.c	/^void createReplicationBacklog(void) {$/;"	f	typeref:typename:void
createReplyObject	deps/hiredis/hiredis.c	/^static redisReply *createReplyObject(int type) {$/;"	f	typeref:typename:redisReply *	file:
createSDSConfig	src/config.c	/^#define createSDSConfig(/;"	d	file:
createSSLContext	src/tls.c	/^static SSL_CTX *createSSLContext(redisTLSContextConfig *ctx_config, int protocols, int client) {$/;"	f	typeref:typename:SSL_CTX *	file:
createSSizeTConfig	src/config.c	/^#define createSSizeTConfig(/;"	d	file:
createSentinelAddr	src/sentinel.c	/^sentinelAddr *createSentinelAddr(char *hostname, int port) {$/;"	f	typeref:typename:sentinelAddr *
createSentinelRedisInstance	src/sentinel.c	/^sentinelRedisInstance *createSentinelRedisInstance(char *name, int flags, char *hostname, int po/;"	f	typeref:typename:sentinelRedisInstance *
createSet	src/intset.c	/^static intset *createSet(int bits, int size) {$/;"	f	typeref:typename:intset *	file:
createSetObject	src/object.c	/^robj *createSetObject(void) {$/;"	f	typeref:typename:robj *
createSharedObjects	src/server.c	/^void createSharedObjects(void) {$/;"	f	typeref:typename:void
createSizeTConfig	src/config.c	/^#define createSizeTConfig(/;"	d	file:
createSocketAcceptHandler	src/server.c	/^int createSocketAcceptHandler(socketFds *sfd, aeFileProc *accept_handler) {$/;"	f	typeref:typename:int
createSortOperation	src/sort.c	/^redisSortOperation *createSortOperation(int type, robj *pattern) {$/;"	f	typeref:typename:redisSortOperation *
createSparklineSequence	src/sparkline.c	/^struct sequence *createSparklineSequence(void) {$/;"	f	typeref:struct:sequence *
createStreamObject	src/object.c	/^robj *createStreamObject(void) {$/;"	f	typeref:typename:robj *
createString	deps/hiredis/read.h	/^    void *(*createString)(const redisReadTask*, char*, size_t);$/;"	m	struct:redisReplyObjectFunctions	typeref:typename:void * (*)(const redisReadTask *,char *,size_t)
createStringConfig	src/config.c	/^#define createStringConfig(/;"	d	file:
createStringObject	deps/hiredis/hiredis.c	/^static void *createStringObject(const redisReadTask *task, char *str, size_t len) {$/;"	f	typeref:typename:void *	file:
createStringObject	src/object.c	/^robj *createStringObject(const char *ptr, size_t len) {$/;"	f	typeref:typename:robj *
createStringObjectFromLongDouble	src/object.c	/^robj *createStringObjectFromLongDouble(long double value, int humanfriendly) {$/;"	f	typeref:typename:robj *
createStringObjectFromLongLong	src/object.c	/^robj *createStringObjectFromLongLong(long long value) {$/;"	f	typeref:typename:robj *
createStringObjectFromLongLongForValue	src/object.c	/^robj *createStringObjectFromLongLongForValue(long long value) {$/;"	f	typeref:typename:robj *
createStringObjectFromLongLongWithOptions	src/object.c	/^robj *createStringObjectFromLongLongWithOptions(long long value, int valueobj) {$/;"	f	typeref:typename:robj *
createTLSConnection	src/tls.c	/^static connection *createTLSConnection(int client_side) {$/;"	f	typeref:typename:connection *	file:
createTimeTConfig	src/config.c	/^#define createTimeTConfig(/;"	d	file:
createUIntConfig	src/config.c	/^#define createUIntConfig(/;"	d	file:
createULongConfig	src/config.c	/^#define createULongConfig(/;"	d	file:
createULongLongConfig	src/config.c	/^#define createULongLongConfig(/;"	d	file:
createZiplistObject	src/object.c	/^robj *createZiplistObject(void) {$/;"	f	typeref:typename:robj *
createZsetObject	src/object.c	/^robj *createZsetObject(void) {$/;"	f	typeref:typename:robj *
createZsetZiplistObject	src/object.c	/^robj *createZsetZiplistObject(void) {$/;"	f	typeref:typename:robj *
create_time	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	nstime_t		create_time;$/;"	m	struct:arena_s	typeref:typename:nstime_t
createconsumer	src/server.h	/^    *lastid, *ping, *setid, *keepttl, *load, *createconsumer,$/;"	m	struct:sharedObjectsStruct
createmeta	deps/lua/src/liolib.c	/^static void createmeta (lua_State *L) {$/;"	f	typeref:typename:void	file:
createmetatable	deps/lua/src/lstrlib.c	/^static void createmetatable (lua_State *L) {$/;"	f	typeref:typename:void	file:
createstdfile	deps/lua/src/liolib.c	/^static void createstdfile (lua_State *L, FILE *f, int k, const char *fname) {$/;"	f	typeref:typename:void	file:
crlf	src/server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *
cronLoopCallback	tests/modules/hooks.c	/^void cronLoopCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f	typeref:typename:void
cronUpdateMemoryStats	src/server.c	/^void cronUpdateMemoryStats() {$/;"	f	typeref:typename:void
cron_malloc_stats	src/server.h	/^    struct malloc_stats cron_malloc_stats; \/* sampled in serverCron(). *\/$/;"	m	struct:redisServer	typeref:struct:malloc_stats
cronloops	src/server.h	/^    int cronloops;              \/* Number of times the cron function run *\/$/;"	m	struct:redisServer	typeref:typename:int
csv	src/redis-benchmark.c	/^    int csv;$/;"	m	struct:config	typeref:typename:int	file:
ctime	src/acl.c	/^    mstime_t ctime;     \/* Milliseconds time of last update to this entry. *\/$/;"	m	struct:ACLLogEntry	typeref:typename:mstime_t	file:
ctime	src/cluster.h	/^    mstime_t ctime;             \/* Link creation time *\/$/;"	m	struct:clusterLink	typeref:typename:mstime_t
ctime	src/cluster.h	/^    mstime_t ctime; \/* Node object creation time. *\/$/;"	m	struct:clusterNode	typeref:typename:mstime_t
ctime	src/server.h	/^    time_t ctime;           \/* Client creation time. *\/$/;"	m	struct:client	typeref:typename:time_t
ctime	utils/lru/lfu-simulation.c	/^    time_t ctime;       \/* Key creation time. *\/$/;"	m	struct:entry	typeref:typename:time_t	file:
ctl	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	int (*ctl)(tsd_t *, const size_t *, size_t, void *, size_t *, void *,$/;"	m	struct:ctl_named_node_s	typeref:typename:int (*)(tsd_t *,const size_t *,size_t,void *,size_t *,void *,size_t)
ctl_accum_arena_stats_u64	deps/jemalloc/src/ctl.c	/^ctl_accum_arena_stats_u64(arena_stats_u64_t *dst, arena_stats_u64_t *src) {$/;"	f	typeref:typename:void	file:
ctl_arena	deps/jemalloc/src/ctl.c	/^				ctl_arena_t		ctl_arena;$/;"	m	struct:arenas_i_impl::container_s	typeref:typename:ctl_arena_t	file:
ctl_arena_clear	deps/jemalloc/src/ctl.c	/^ctl_arena_clear(ctl_arena_t *ctl_arena) {$/;"	f	typeref:typename:void	file:
ctl_arena_init	deps/jemalloc/src/ctl.c	/^ctl_arena_init(tsd_t *tsd, extent_hooks_t *extent_hooks) {$/;"	f	typeref:typename:unsigned	file:
ctl_arena_refresh	deps/jemalloc/src/ctl.c	/^ctl_arena_refresh(tsdn_t *tsdn, arena_t *arena, ctl_arena_t *ctl_sdarena,$/;"	f	typeref:typename:void	file:
ctl_arena_s	deps/jemalloc/include/jemalloc/internal/ctl.h	/^struct ctl_arena_s {$/;"	s
ctl_arena_stats_amerge	deps/jemalloc/src/ctl.c	/^ctl_arena_stats_amerge(tsdn_t *tsdn, ctl_arena_t *ctl_arena, arena_t *arena) {$/;"	f	typeref:typename:void	file:
ctl_arena_stats_read_u64	deps/jemalloc/src/ctl.c	/^ctl_arena_stats_read_u64(arena_stats_u64_t *p) {$/;"	f	typeref:typename:uint64_t	file:
ctl_arena_stats_s	deps/jemalloc/include/jemalloc/internal/ctl.h	/^typedef struct ctl_arena_stats_s {$/;"	s
ctl_arena_stats_sdmerge	deps/jemalloc/src/ctl.c	/^ctl_arena_stats_sdmerge(ctl_arena_t *ctl_sdarena, ctl_arena_t *ctl_arena,$/;"	f	typeref:typename:void	file:
ctl_arena_stats_t	deps/jemalloc/include/jemalloc/internal/ctl.h	/^} ctl_arena_stats_t;$/;"	t	typeref:struct:ctl_arena_stats_s
ctl_arena_t	deps/jemalloc/include/jemalloc/internal/ctl.h	/^typedef struct ctl_arena_s ctl_arena_t;$/;"	t	typeref:struct:ctl_arena_s
ctl_arenas	deps/jemalloc/src/ctl.c	/^static ctl_arenas_t	*ctl_arenas;$/;"	v	typeref:typename:ctl_arenas_t *	file:
ctl_arenas_s	deps/jemalloc/include/jemalloc/internal/ctl.h	/^typedef struct ctl_arenas_s {$/;"	s
ctl_arenas_t	deps/jemalloc/include/jemalloc/internal/ctl.h	/^} ctl_arenas_t;$/;"	t	typeref:struct:ctl_arenas_s
ctl_background_thread_stats_read	deps/jemalloc/src/ctl.c	/^ctl_background_thread_stats_read(tsdn_t *tsdn) {$/;"	f	typeref:typename:void	file:
ctl_boot	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ctl_boot /;"	d
ctl_boot	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ctl_boot /;"	d
ctl_boot	deps/jemalloc/src/ctl.c	/^ctl_boot(void) {$/;"	f	typeref:typename:bool
ctl_bymib	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ctl_bymib /;"	d
ctl_bymib	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ctl_bymib /;"	d
ctl_bymib	deps/jemalloc/src/ctl.c	/^ctl_bymib(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int
ctl_byname	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ctl_byname /;"	d
ctl_byname	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ctl_byname /;"	d
ctl_byname	deps/jemalloc/src/ctl.c	/^ctl_byname(tsd_t *tsd, const char *name, void *oldp, size_t *oldlenp,$/;"	f	typeref:typename:int
ctl_indexed_node	deps/jemalloc/src/ctl.c	/^ctl_indexed_node(const ctl_node_t *node) {$/;"	f	typeref:typename:const ctl_indexed_node_t *	file:
ctl_indexed_node_s	deps/jemalloc/include/jemalloc/internal/ctl.h	/^typedef struct ctl_indexed_node_s {$/;"	s
ctl_indexed_node_t	deps/jemalloc/include/jemalloc/internal/ctl.h	/^} ctl_indexed_node_t;$/;"	t	typeref:struct:ctl_indexed_node_s
ctl_init	deps/jemalloc/src/ctl.c	/^ctl_init(tsd_t *tsd) {$/;"	f	typeref:typename:bool	file:
ctl_initialized	deps/jemalloc/src/ctl.c	/^static bool		ctl_initialized;$/;"	v	typeref:typename:bool	file:
ctl_lookup	deps/jemalloc/src/ctl.c	/^ctl_lookup(tsdn_t *tsdn, const char *name, ctl_node_t const **nodesp,$/;"	f	typeref:typename:int	file:
ctl_mtx	deps/jemalloc/src/ctl.c	/^static malloc_mutex_t	ctl_mtx;$/;"	v	typeref:typename:malloc_mutex_t	file:
ctl_named_children	deps/jemalloc/src/ctl.c	/^ctl_named_children(const ctl_named_node_t *node, size_t index) {$/;"	f	typeref:typename:const ctl_named_node_t *	file:
ctl_named_node	deps/jemalloc/src/ctl.c	/^ctl_named_node(const ctl_node_t *node) {$/;"	f	typeref:typename:const ctl_named_node_t *	file:
ctl_named_node_s	deps/jemalloc/include/jemalloc/internal/ctl.h	/^typedef struct ctl_named_node_s {$/;"	s
ctl_named_node_t	deps/jemalloc/include/jemalloc/internal/ctl.h	/^} ctl_named_node_t;$/;"	t	typeref:struct:ctl_named_node_s
ctl_nametomib	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ctl_nametomib /;"	d
ctl_nametomib	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ctl_nametomib /;"	d
ctl_nametomib	deps/jemalloc/src/ctl.c	/^ctl_nametomib(tsd_t *tsd, const char *name, size_t *mibp, size_t *miblenp) {$/;"	f	typeref:typename:int
ctl_node_s	deps/jemalloc/include/jemalloc/internal/ctl.h	/^typedef struct ctl_node_s {$/;"	s
ctl_node_t	deps/jemalloc/include/jemalloc/internal/ctl.h	/^} ctl_node_t;$/;"	t	typeref:struct:ctl_node_s
ctl_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ctl_postfork_child /;"	d
ctl_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ctl_postfork_child /;"	d
ctl_postfork_child	deps/jemalloc/src/ctl.c	/^ctl_postfork_child(tsdn_t *tsdn) {$/;"	f	typeref:typename:void
ctl_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ctl_postfork_parent /;"	d
ctl_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ctl_postfork_parent /;"	d
ctl_postfork_parent	deps/jemalloc/src/ctl.c	/^ctl_postfork_parent(tsdn_t *tsdn) {$/;"	f	typeref:typename:void
ctl_prefork	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ctl_prefork /;"	d
ctl_prefork	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ctl_prefork /;"	d
ctl_prefork	deps/jemalloc/src/ctl.c	/^ctl_prefork(tsdn_t *tsdn) {$/;"	f	typeref:typename:void
ctl_refresh	deps/jemalloc/src/ctl.c	/^ctl_refresh(tsdn_t *tsdn) {$/;"	f	typeref:typename:void	file:
ctl_stats	deps/jemalloc/src/ctl.c	/^static ctl_stats_t	*ctl_stats;$/;"	v	typeref:typename:ctl_stats_t *	file:
ctl_stats_s	deps/jemalloc/include/jemalloc/internal/ctl.h	/^typedef struct ctl_stats_s {$/;"	s
ctl_stats_t	deps/jemalloc/include/jemalloc/internal/ctl.h	/^} ctl_stats_t;$/;"	t	typeref:struct:ctl_stats_s
ctx	src/module.c	/^    RedisModuleCtx *ctx;$/;"	m	struct:RedisModuleCallReply	typeref:typename:RedisModuleCtx *	file:
ctx	src/module.c	/^    RedisModuleCtx *ctx;$/;"	m	struct:RedisModuleKey	typeref:typename:RedisModuleCtx *	file:
ctx	src/module.c	/^    RedisModuleCtx *ctx;$/;"	m	struct:__anon967b47330a08	typeref:typename:RedisModuleCtx *	file:
ctx	src/server.h	/^    struct RedisModuleCtx *ctx; \/* Optional context, see RM_GetContextFromIO()*\/$/;"	m	struct:RedisModuleIO	typeref:struct:RedisModuleCtx *
ctx	tests/modules/scan.c	/^    RedisModuleCtx *ctx;$/;"	m	struct:__anon99e813050208	typeref:typename:RedisModuleCtx *	file:
cum_gctxs	deps/jemalloc/src/prof.c	/^static atomic_u_t	cum_gctxs; \/* Atomic counter. *\/$/;"	v	typeref:typename:atomic_u_t	file:
cumbits	deps/jemalloc/include/jemalloc/internal/rtree.h	/^	unsigned		cumbits;$/;"	m	struct:rtree_level_s	typeref:typename:unsigned
cumulative_count	deps/hdr_histogram/hdr_histogram.h	/^    int64_t cumulative_count;$/;"	m	struct:hdr_iter	typeref:typename:int64_t
curbytes	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t	curbytes;$/;"	m	struct:prof_cnt_s	typeref:typename:uint64_t
curlextents	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	size_t		curlextents; \/* Derived. *\/$/;"	m	struct:arena_stats_large_s	typeref:typename:size_t
curobjs	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t	curobjs;$/;"	m	struct:prof_cnt_s	typeref:typename:uint64_t
curpages	deps/jemalloc/src/extent.c	/^static atomic_zu_t curpages;$/;"	v	typeref:typename:atomic_zu_t	file:
currIsNewline	deps/lua/src/llex.c	/^#define currIsNewline(/;"	d	file:
curr_func	deps/lua/src/lstate.h	/^#define curr_func(/;"	d
curregs	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	size_t		curregs;$/;"	m	struct:bin_stats_s	typeref:typename:size_t
current	deps/lua/src/llex.h	/^  int current;  \/* current character (charint) *\/$/;"	m	struct:LexState	typeref:typename:int
current	src/module.c	/^            void *current;         \/* Zset iterator current node. *\/$/;"	m	struct:RedisModuleKey::__anon967b4733010a::__anon967b47330208	typeref:typename:void *	file:
current	src/quicklist.h	/^    quicklistNode *current;$/;"	m	struct:quicklistIter	typeref:typename:quicklistNode *
currentEpoch	src/cluster.h	/^    uint64_t currentEpoch;  \/* The epoch accordingly to the sending node. *\/$/;"	m	struct:__anon2cc7db540b08	typeref:typename:uint64_t
currentEpoch	src/cluster.h	/^    uint64_t currentEpoch;$/;"	m	struct:clusterState	typeref:typename:uint64_t
current_client	src/server.h	/^    client *current_client;     \/* Current client executing the command. *\/$/;"	m	struct:redisServer	typeref:typename:client *
current_depth	deps/lua/src/lua_cjson.c	/^    int current_depth;$/;"	m	struct:__anona3a73c770308	typeref:typename:int	file:
current_epoch	src/redis-cli.c	/^    uint64_t current_epoch;$/;"	m	struct:clusterManagerNode	typeref:typename:uint64_t	file:
current_epoch	src/sentinel.c	/^    uint64_t current_epoch;         \/* Current epoch. *\/$/;"	m	struct:sentinelState	typeref:typename:uint64_t	file:
current_sec_latency_histogram	src/redis-benchmark.c	/^    struct hdr_histogram* current_sec_latency_histogram;$/;"	m	struct:config	typeref:struct:hdr_histogram *	file:
current_slot_index	src/redis-benchmark.c	/^    int current_slot_index;$/;"	m	struct:clusterNode	typeref:typename:int	file:
currentid	src/module.c	/^            streamID currentid;    \/* Current entry while iterating. *\/$/;"	m	struct:RedisModuleKey::__anon967b4733010a::__anon967b47330308	typeref:typename:streamID	file:
currentline	deps/lua/src/ldebug.c	/^static int currentline (lua_State *L, CallInfo *ci) {$/;"	f	typeref:typename:int	file:
currentline	deps/lua/src/lua.h	/^  int currentline;	\/* (l) *\/$/;"	m	struct:lua_Debug	typeref:typename:int
currentline	src/scripting.c	/^    int currentline;    \/* Current line number. *\/$/;"	m	struct:ldbState	typeref:typename:int	file:
currentpc	deps/lua/src/ldebug.c	/^static int currentpc (lua_State *L, CallInfo *ci) {$/;"	f	typeref:typename:int	file:
currentwhite	deps/lua/src/lstate.h	/^  lu_byte currentwhite;$/;"	m	struct:global_State	typeref:typename:lu_byte
curslabs	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	size_t		curslabs;$/;"	m	struct:bin_stats_s	typeref:typename:size_t
cursor	src/module.c	/^    int cursor;$/;"	m	struct:RedisModuleScanCursor	typeref:typename:int	file:
cursor	src/module.c	/^    unsigned long *cursor;$/;"	m	struct:RedisModuleDefragCtx	typeref:typename:unsigned long *	file:
cvec	deps/linenoise/linenoise.h	/^  char **cvec;$/;"	m	struct:linenoiseCompletions	typeref:typename:char **
czero	src/server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *****
d	deps/jemalloc/include/jemalloc/internal/div.h	/^	size_t d;$/;"	m	struct:div_info_s	typeref:typename:size_t
d	deps/lua/src/lua_struct.c	/^  double d;$/;"	m	struct:cD	typeref:typename:double	file:
d	src/dict.h	/^        double d;$/;"	m	union:dictEntry::__anon56260716010a	typeref:typename:double
d	src/dict.h	/^    dict *d;$/;"	m	struct:dictIterator	typeref:typename:dict *
d2s	deps/jemalloc/src/malloc_io.c	/^d2s(intmax_t x, char sign, char *s, size_t *slen_p) {$/;"	f	typeref:typename:char *	file:
d2string	src/util.c	/^int d2string(char *buf, size_t len, double value) {$/;"	f	typeref:typename:int
daemonize	src/server.c	/^void daemonize(void) {$/;"	f	typeref:typename:void
daemonize	src/server.h	/^    int daemonize;                  \/* True if running as a daemon *\/$/;"	m	struct:redisServer	typeref:typename:int
dalloc	deps/jemalloc/include/jemalloc/jemalloc.h	/^	extent_dalloc_t		*dalloc;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_dalloc_t *
dalloc	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_dalloc_t		*dalloc;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_dalloc_t *
dalloc	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^	extent_dalloc_t		*dalloc;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_dalloc_t *	file:
dallocx	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define dallocx /;"	d
dallocx	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define dallocx /;"	d
dallocx	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define dallocx /;"	d
dallocx	src/zmalloc.c	/^#define dallocx(/;"	d	file:
data	deps/hiredis/async.h	/^        void *data;$/;"	m	struct:redisAsyncContext::__anon89b0a8ab0108	typeref:typename:void *
data	deps/hiredis/async.h	/^    void *data;$/;"	m	struct:redisAsyncContext	typeref:typename:void *
data	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	const void *data;$/;"	m	struct:__anon25f7a4b70108	typeref:typename:const void *
data	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^	void *data;$/;"	m	struct:tsd_init_block_s	typeref:typename:void *
data	deps/lua/src/ldump.c	/^ void* data;$/;"	m	struct:__anon1dacebdb0108	typeref:typename:void *	file:
data	deps/lua/src/lua_cjson.c	/^    const char *data;$/;"	m	struct:__anona3a73c770308	typeref:typename:const char *	file:
data	deps/lua/src/lzio.h	/^  void* data;			\/* additional data *\/$/;"	m	struct:Zio	typeref:typename:void *
data	src/cluster.h	/^    union clusterMsgData data;$/;"	m	struct:__anon2cc7db540b08	typeref:union:clusterMsgData
data	src/config.c	/^    typeData data; \/* The type specific data exposed used by the interface *\/$/;"	m	struct:standardConfig	typeref:typename:typeData	file:
data	src/module.c	/^    void *data;                         \/* Private data for the callback. *\/$/;"	m	struct:RedisModuleTimer	typeref:typename:void *	file:
data	src/rax.h	/^    unsigned char data[];$/;"	m	struct:raxNode	typeref:typename:unsigned char[]
data	src/rax.h	/^    void *data;             \/* Data associated to this key. *\/$/;"	m	struct:raxIterator	typeref:typename:void *
data	src/sha256.h	/^	BYTE data[64];$/;"	m	struct:__anonf953c6cb0108	typeref:typename:BYTE[64]
dataCleanup	deps/hiredis/async.h	/^    void (*dataCleanup)(void *privdata);$/;"	m	struct:redisAsyncContext	typeref:typename:void (*)(void * privdata)
data_cleanup	deps/jemalloc/test/unit/tsd.c	/^data_cleanup(int *data) {$/;"	f	typeref:typename:void
data_cleanup_count	deps/jemalloc/test/unit/tsd.c	/^static int data_cleanup_count;$/;"	v	typeref:typename:int	file:
data_received	src/cluster.h	/^    mstime_t data_received;  \/* Unix time we received any data *\/$/;"	m	struct:clusterNode	typeref:typename:mstime_t
databasesCron	src/server.c	/^void databasesCron(void) {$/;"	f	typeref:typename:void
datalen	src/sha256.h	/^	WORD datalen;$/;"	m	struct:__anonf953c6cb0108	typeref:typename:WORD
dataset	src/server.h	/^    size_t dataset;$/;"	m	struct:redisMemOverhead	typeref:typename:size_t
dataset_perc	src/server.h	/^    float dataset_perc;$/;"	m	struct:redisMemOverhead	typeref:typename:float
datasize	src/redis-benchmark.c	/^    int datasize;$/;"	m	struct:config	typeref:typename:int	file:
datatype	tests/modules/datatype.c	/^static RedisModuleType *datatype = NULL;$/;"	v	typeref:typename:RedisModuleType *	file:
datatype_attempts	tests/modules/defragtest.c	/^unsigned long int datatype_attempts = 0;$/;"	v	typeref:typename:unsigned long int
datatype_copy	tests/modules/datatype.c	/^static void *datatype_copy(RedisModuleString *fromkey, RedisModuleString *tokey, const void *val/;"	f	typeref:typename:void *	file:
datatype_defragged	tests/modules/defragtest.c	/^unsigned long int datatype_defragged = 0;$/;"	v	typeref:typename:unsigned long int
datatype_dump	tests/modules/datatype.c	/^static int datatype_dump(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int	file:
datatype_free	tests/modules/datatype.c	/^static void datatype_free(void *value) {$/;"	f	typeref:typename:void	file:
datatype_get	tests/modules/datatype.c	/^static int datatype_get(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int	file:
datatype_load	tests/modules/datatype.c	/^static void *datatype_load(RedisModuleIO *io, int encver) {$/;"	f	typeref:typename:void *	file:
datatype_restore	tests/modules/datatype.c	/^static int datatype_restore(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int	file:
datatype_resumes	tests/modules/defragtest.c	/^unsigned long int datatype_resumes = 0;$/;"	v	typeref:typename:unsigned long int
datatype_save	tests/modules/datatype.c	/^static void datatype_save(RedisModuleIO *io, void *value) {$/;"	f	typeref:typename:void	file:
datatype_set	tests/modules/datatype.c	/^static int datatype_set(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int	file:
datatype_swap	tests/modules/datatype.c	/^static int datatype_swap(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int	file:
datatype_wrong_cursor	tests/modules/defragtest.c	/^unsigned long int datatype_wrong_cursor = 0;$/;"	v	typeref:typename:unsigned long int
dataver	src/redismodule.h	/^    uint64_t dataver;   \/* Version of the structure we pass as 'data'. *\/$/;"	m	struct:RedisModuleEvent	typeref:typename:uint64_t
daylight_active	src/server.h	/^    int daylight_active;        \/* Currently in daylight saving time. *\/$/;"	m	struct:redisServer	typeref:typename:int
db	src/module.c	/^    redisDb *db;$/;"	m	struct:RedisModuleKey	typeref:typename:redisDb *	file:
db	src/multi.c	/^    redisDb *db;$/;"	m	struct:watchedKey	typeref:typename:redisDb *	file:
db	src/redismodule.h	/^    uint16_t db;            \/* Selected DB. *\/$/;"	m	struct:RedisModuleClientInfo	typeref:typename:uint16_t
db	src/server.h	/^    redisDb *db;            \/* Pointer to currently SELECTed DB. *\/$/;"	m	struct:client	typeref:typename:redisDb *
db	src/server.h	/^    redisDb *db;$/;"	m	struct:readyList	typeref:typename:redisDb *
db	src/server.h	/^    redisDb *db;$/;"	m	struct:redisServer	typeref:typename:redisDb *
db	src/server.h	/^    } *db;$/;"	m	struct:redisMemOverhead	typeref:struct:redisMemOverhead::__anon3ef696e90508 *
dbAdd	src/db.c	/^void dbAdd(redisDb *db, robj *key, robj *val) {$/;"	f	typeref:typename:void
dbAddRDBLoad	src/db.c	/^int dbAddRDBLoad(redisDb *db, sds key, robj *val) {$/;"	f	typeref:typename:int
dbAsyncDelete	src/lazyfree.c	/^int dbAsyncDelete(redisDb *db, robj *key) {$/;"	f	typeref:typename:int
dbBackup	src/db.c	/^struct dbBackup {$/;"	s	file:
dbBackup	src/server.h	/^typedef struct dbBackup dbBackup;$/;"	t	typeref:struct:dbBackup
dbDelete	src/db.c	/^int dbDelete(redisDb *db, robj *key) {$/;"	f	typeref:typename:int
dbDictType	src/server.c	/^dictType dbDictType = {$/;"	v	typeref:typename:dictType
dbExpiresDictType	src/server.c	/^dictType dbExpiresDictType = {$/;"	v	typeref:typename:dictType
dbOverwrite	src/db.c	/^void dbOverwrite(redisDb *db, robj *key, robj *val) {$/;"	f	typeref:typename:void
dbRandomKey	src/db.c	/^robj *dbRandomKey(redisDb *db) {$/;"	f	typeref:typename:robj *
dbSwapDatabases	src/db.c	/^int dbSwapDatabases(int id1, int id2) {$/;"	f	typeref:typename:int
dbSyncDelete	src/db.c	/^int dbSyncDelete(redisDb *db, robj *key) {$/;"	f	typeref:typename:int
dbTotalServerKeyCount	src/db.c	/^long long dbTotalServerKeyCount() {$/;"	f	typeref:typename:long long
dbUnshareStringValue	src/db.c	/^robj *dbUnshareStringValue(redisDb *db, robj *key, robj *o) {$/;"	f	typeref:typename:robj *
db_debug	deps/lua/src/ldblib.c	/^static int db_debug (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_errorfb	deps/lua/src/ldblib.c	/^static int db_errorfb (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getfenv	deps/lua/src/ldblib.c	/^static int db_getfenv (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_gethook	deps/lua/src/ldblib.c	/^static int db_gethook (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getinfo	deps/lua/src/ldblib.c	/^static int db_getinfo (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getlocal	deps/lua/src/ldblib.c	/^static int db_getlocal (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getmetatable	deps/lua/src/ldblib.c	/^static int db_getmetatable (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getregistry	deps/lua/src/ldblib.c	/^static int db_getregistry (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getupvalue	deps/lua/src/ldblib.c	/^static int db_getupvalue (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_setfenv	deps/lua/src/ldblib.c	/^static int db_setfenv (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_sethook	deps/lua/src/ldblib.c	/^static int db_sethook (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_setlocal	deps/lua/src/ldblib.c	/^static int db_setlocal (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_setmetatable	deps/lua/src/ldblib.c	/^static int db_setmetatable (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_setupvalue	deps/lua/src/ldblib.c	/^static int db_setupvalue (lua_State *L) {$/;"	f	typeref:typename:int	file:
dbarray	src/db.c	/^    redisDb *dbarray;$/;"	m	struct:dbBackup	typeref:typename:redisDb *	file:
dbid	src/evict.c	/^    int dbid;                   \/* Key DB number. *\/$/;"	m	struct:evictionPoolEntry	typeref:typename:int	file:
dbid	src/module.c	/^    int dbid;                           \/* Database number selected by the original client. *\/$/;"	m	struct:RedisModuleTimer	typeref:typename:int	file:
dbid	src/module.c	/^    int dbid;           \/* Database number selected by the original client. *\/$/;"	m	struct:RedisModuleBlockedClient	typeref:typename:int	file:
dbid	src/server.h	/^        size_t dbid;$/;"	m	struct:redisMemOverhead::__anon3ef696e90508	typeref:typename:size_t
dbid	src/server.h	/^    int argc, dbid, target;$/;"	m	struct:redisOp	typeref:typename:int
dblib	deps/lua/src/ldblib.c	/^static const luaL_Reg dblib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
dbnum	src/redis-benchmark.c	/^    int dbnum;$/;"	m	struct:config	typeref:typename:int	file:
dbnum	src/redis-cli.c	/^    int dbnum; \/* db num currently selected *\/$/;"	m	struct:config	typeref:typename:int	file:
dbnum	src/redismodule.h	/^    int32_t dbnum;          \/* Flushed database number, -1 for ALL. *\/$/;"	m	struct:RedisModuleFlushInfo	typeref:typename:int32_t
dbnum	src/server.h	/^    int dbnum;                      \/* Total number of configured DBs *\/$/;"	m	struct:redisServer	typeref:typename:int
dbnum_first	src/redismodule.h	/^    int32_t dbnum_first;    \/* Swap Db first dbnum *\/$/;"	m	struct:RedisModuleSwapDbInfo	typeref:typename:int32_t
dbnum_second	src/redismodule.h	/^    int32_t dbnum_second;   \/* Swap Db second dbnum *\/$/;"	m	struct:RedisModuleSwapDbInfo	typeref:typename:int32_t
dbnumstr	src/redis-benchmark.c	/^    sds dbnumstr;$/;"	m	struct:config	typeref:typename:sds	file:
dbsizeCommand	src/db.c	/^void dbsizeCommand(client *c) {$/;"	f	typeref:typename:void
de	src/server.h	/^    dictEntry *de;$/;"	m	struct:__anon3ef696e90c08	typeref:typename:dictEntry *
de	src/t_zset.c	/^                dictEntry *de;$/;"	m	struct:__anon6fce03460408::__anon6fce0346050a::_iterset::__anon6fce03460708	typeref:typename:dictEntry *	file:
deadline	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	nstime_t		deadline;$/;"	m	struct:arena_decay_s	typeref:typename:nstime_t
debug	deps/lua/src/strbuf.h	/^    int debug;$/;"	m	struct:__anon10f823b40108	typeref:typename:int
debug	src/ziplist.c	/^#define debug(/;"	d	file:
debugCommand	src/debug.c	/^void debugCommand(client *c) {$/;"	f	typeref:typename:void
debugDelay	src/debug.c	/^void debugDelay(int usec) {$/;"	f	typeref:typename:void
debug_stats	deps/lua/src/strbuf.c	/^static inline void debug_stats(strbuf_t *s)$/;"	f	typeref:typename:void	file:
debugf	src/rax.c	/^#define debugf(/;"	d	file:
debugnode	src/rax.c	/^#define debugnode(/;"	d	file:
decay_dirty	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_decay_t	decay_dirty;$/;"	m	struct:arena_stats_s	typeref:typename:arena_stats_decay_t
decay_dirty	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	arena_decay_t		decay_dirty; \/* dirty --> muzzy *\/$/;"	m	struct:arena_s	typeref:typename:arena_decay_t
decay_muzzy	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_decay_t	decay_muzzy;$/;"	m	struct:arena_stats_s	typeref:typename:arena_stats_decay_t
decay_muzzy	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	arena_decay_t		decay_muzzy; \/* muzzy --> retained *\/$/;"	m	struct:arena_s	typeref:typename:arena_decay_t
decay_ticker	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	ticker_t		decay_ticker;$/;"	m	struct:arena_tdata_s	typeref:typename:ticker_t
decay_ticker_get	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^decay_ticker_get(tsd_t *tsd, unsigned ind) {$/;"	f	typeref:typename:ticker_t *
decay_ticker_helper	deps/jemalloc/test/unit/decay.c	/^decay_ticker_helper(unsigned arena_ind, int flags, bool dirty, ssize_t dt,$/;"	f	typeref:typename:TEST_END void	file:
decodeGeohash	src/geo.c	/^int decodeGeohash(double bits, double *xy) {$/;"	f	typeref:typename:int
decodeHex	src/redis-cli.c	/^#define decodeHex(/;"	d	file:
decodeHexChar	src/redis-cli.c	/^#define decodeHexChar(/;"	d	file:
decodeTimeoutKey	src/timeout.c	/^void decodeTimeoutKey(unsigned char *buf, uint64_t *toptr, client **cptr) {$/;"	f	typeref:typename:void
decode_hex4	deps/lua/src/lua_cjson.c	/^static int decode_hex4(const char *hex)$/;"	f	typeref:typename:int	file:
decode_invalid_numbers	deps/lua/src/lua_cjson.c	/^    int decode_invalid_numbers;$/;"	m	struct:__anona3a73c770208	typeref:typename:int	file:
decode_max_depth	deps/lua/src/lua_cjson.c	/^    int decode_max_depth;$/;"	m	struct:__anona3a73c770208	typeref:typename:int	file:
decommit	deps/jemalloc/include/jemalloc/jemalloc.h	/^	extent_decommit_t	*decommit;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_decommit_t *
decommit	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_decommit_t	*decommit;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_decommit_t *
decommit	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^	extent_decommit_t	*decommit;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_decommit_t *	file:
decpoint	deps/lua/src/llex.h	/^  char decpoint;  \/* locale decimal point *\/$/;"	m	struct:LexState	typeref:typename:char
decrCommand	src/t_string.c	/^void decrCommand(client *c) {$/;"	f	typeref:typename:void
decrRefCount	src/object.c	/^void decrRefCount(robj *o) {$/;"	f	typeref:typename:void
decrRefCountVoid	src/object.c	/^void decrRefCountVoid(void *o) {$/;"	f	typeref:typename:void
decr_every	utils/lru/lfu-simulation.c	/^int decr_every = 1;$/;"	v	typeref:typename:int
decrbyCommand	src/t_string.c	/^void decrbyCommand(client *c) {$/;"	f	typeref:typename:void
decrtime	utils/lru/lfu-simulation.c	/^    uint16_t decrtime;  \/* (Reduced precision) time of last decrement. *\/$/;"	m	struct:entry	typeref:typename:uint16_t	file:
default	Makefile	/^default: all$/;"	t
default	deps/Makefile	/^default:$/;"	t
default	deps/lua/etc/Makefile	/^default:$/;"	t
default	deps/lua/src/Makefile	/^default: $(PLAT)$/;"	t
defaultFunctions	deps/hiredis/hiredis.c	/^static redisReplyObjectFunctions defaultFunctions = {$/;"	v	typeref:typename:redisReplyObjectFunctions	file:
default_hooks	deps/jemalloc/test/include/test/extent_hooks.h	/^static extent_hooks_t *default_hooks;$/;"	v	typeref:typename:extent_hooks_t *
default_username	src/server.h	/^    *getack, *special_asterick, *special_equals, *default_username, *redacted,$/;"	m	struct:sharedObjectsStruct
default_value	src/config.c	/^    const char *default_value; \/* Default value of the config on rewrite. *\/$/;"	m	struct:sdsConfigData	typeref:typename:const char *	file:
default_value	src/config.c	/^    const char *default_value; \/* Default value of the config on rewrite. *\/$/;"	m	struct:stringConfigData	typeref:typename:const char *	file:
default_value	src/config.c	/^    const int default_value; \/* The default value of the config on rewrite *\/$/;"	m	struct:boolConfigData	typeref:typename:const int	file:
default_value	src/config.c	/^    const int default_value; \/* The default value of the config on rewrite *\/$/;"	m	struct:enumConfigData	typeref:typename:const int	file:
default_value	src/config.c	/^    const long long default_value; \/* The default value of the config on rewrite *\/$/;"	m	struct:numericConfigData	typeref:typename:const long long	file:
default_zone	deps/jemalloc/src/zone.c	/^static malloc_zone_t *default_zone, *purgeable_zone;$/;"	v	typeref:typename:malloc_zone_t *	file:
defaultoptions	deps/lua/src/lua_struct.c	/^#define defaultoptions(/;"	d	file:
defrag	src/module.c	/^            moduleTypeDefragFunc defrag;$/;"	m	struct:RM_CreateDataType::typemethods::__anon967b47330708	typeref:typename:moduleTypeDefragFunc	file:
defrag	src/redismodule.h	/^    RedisModuleTypeDefragFunc defrag;$/;"	m	struct:RedisModuleTypeMethods	typeref:typename:RedisModuleTypeDefragFunc
defrag	src/server.h	/^    moduleTypeDefragFunc defrag;$/;"	m	struct:RedisModuleType	typeref:typename:moduleTypeDefragFunc
defragDictBucketCallback	src/defrag.c	/^void defragDictBucketCallback(void *privdata, dictEntry **bucketref) {$/;"	f	typeref:typename:void
defragGlobalStrings	tests/modules/defragtest.c	/^static int defragGlobalStrings(RedisModuleDefragCtx *ctx)$/;"	f	typeref:typename:int	file:
defragHash	src/defrag.c	/^long defragHash(redisDb *db, dictEntry *kde) {$/;"	f	typeref:typename:long
defragKey	src/defrag.c	/^long defragKey(redisDb *db, dictEntry *de) {$/;"	f	typeref:typename:long
defragLater	src/defrag.c	/^void defragLater(redisDb *db, dictEntry *kde) {$/;"	f	typeref:typename:void
defragLaterItem	src/defrag.c	/^int defragLaterItem(dictEntry *de, unsigned long *cursor, long long endtime) {$/;"	f	typeref:typename:int
defragLaterStep	src/defrag.c	/^int defragLaterStep(redisDb *db, long long endtime) {$/;"	f	typeref:typename:int
defragModule	src/defrag.c	/^long defragModule(redisDb *db, dictEntry *kde) {$/;"	f	typeref:typename:long
defragOtherGlobals	src/defrag.c	/^long defragOtherGlobals() {$/;"	f	typeref:typename:long
defragQuicklist	src/defrag.c	/^long defragQuicklist(redisDb *db, dictEntry *kde) {$/;"	f	typeref:typename:long
defragRadixTree	src/defrag.c	/^long defragRadixTree(rax **raxref, int defrag_data, raxDefragFunction *element_cb, void *element/;"	f	typeref:typename:long
defragRaxNode	src/defrag.c	/^int defragRaxNode(raxNode **noderef) {$/;"	f	typeref:typename:int
defragScanCallback	src/defrag.c	/^void defragScanCallback(void *privdata, const dictEntry *de) {$/;"	f	typeref:typename:void
defragSet	src/defrag.c	/^long defragSet(redisDb *db, dictEntry *kde) {$/;"	f	typeref:typename:long
defragStream	src/defrag.c	/^long defragStream(redisDb *db, dictEntry *kde) {$/;"	f	typeref:typename:long
defragStreamConsumer	src/defrag.c	/^void* defragStreamConsumer(raxIterator *ri, void *privdata, long *defragged) {$/;"	f	typeref:typename:void *
defragStreamConsumerGroup	src/defrag.c	/^void* defragStreamConsumerGroup(raxIterator *ri, void *privdata, long *defragged) {$/;"	f	typeref:typename:void *
defragStreamConsumerPendingEntry	src/defrag.c	/^void* defragStreamConsumerPendingEntry(raxIterator *ri, void *privdata, long *defragged) {$/;"	f	typeref:typename:void *
defragZsetSkiplist	src/defrag.c	/^long defragZsetSkiplist(redisDb *db, dictEntry *kde) {$/;"	f	typeref:typename:long
defrag_cb	src/module.c	/^    RedisModuleDefragFunc defrag_cb;    \/* Callback for global data defrag. *\/$/;"	m	struct:RedisModule	typeref:typename:RedisModuleDefragFunc	file:
defrag_later	src/server.h	/^    list *defrag_later;         \/* List of key names to attempt to defrag one by one, gradually/;"	m	struct:redisDb	typeref:typename:list *
defrag_later_current_key	src/defrag.c	/^static sds defrag_later_current_key = NULL;$/;"	v	typeref:typename:sds	file:
defrag_later_cursor	src/defrag.c	/^static unsigned long defrag_later_cursor = 0;$/;"	v	typeref:typename:unsigned long	file:
defragged	src/defrag.c	/^    long defragged;$/;"	m	struct:__anon4ad273d60108	typeref:typename:long	file:
defragged	src/module.c	/^    long defragged;$/;"	m	struct:RedisModuleDefragCtx	typeref:typename:long	file:
deg_rad	src/geohash_helper.c	/^static inline double deg_rad(double ang) { return ang * D_R; }$/;"	f	typeref:typename:double	file:
deinterleave64	src/geohash.c	/^static inline uint64_t deinterleave64(uint64_t interleaved) {$/;"	f	typeref:typename:uint64_t	file:
del	src/server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *unlink,$/;"	m	struct:sharedObjectsStruct
delCommand	src/db.c	/^void delCommand(client *c) {$/;"	f	typeref:typename:void
delCommand	src/server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand,$/;"	m	struct:redisServer	typeref:struct:redisCommand *
delGenericCommand	src/db.c	/^void delGenericCommand(client *c, int lazy) {$/;"	f	typeref:typename:void
delKeysInSlot	src/db.c	/^unsigned int delKeysInSlot(unsigned int hashslot) {$/;"	f	typeref:typename:unsigned int
delRead	deps/hiredis/adapters/qt.h	/^        void delRead() {$/;"	f	class:RedisQtAdapter	typeref:typename:void
delRead	deps/hiredis/async.h	/^        void (*delRead)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon89b0a8ab0108	typeref:typename:void (*)(void * privdata)
delWrite	deps/hiredis/adapters/qt.h	/^        void delWrite() {$/;"	f	class:RedisQtAdapter	typeref:typename:void
delWrite	deps/hiredis/async.h	/^        void (*delWrite)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon89b0a8ab0108	typeref:typename:void (*)(void * privdata)
delay_coalesce	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	bool			delay_coalesce;$/;"	m	struct:extents_s	typeref:typename:bool
deleteExpiredKeyAndPropagate	src/db.c	/^void deleteExpiredKeyAndPropagate(redisDb *db, robj *keyobj) {$/;"	f	typeref:typename:void
delivery_count	src/stream.h	/^    uint64_t delivery_count;    \/* Number of times this message was delivered.*\/$/;"	m	struct:streamNACK	typeref:typename:uint64_t
delivery_time	src/stream.h	/^    mstime_t delivery_time;     \/* Last time this message was delivered. *\/$/;"	m	struct:streamNACK	typeref:typename:mstime_t
deny_scripts_reconfig	src/sentinel.c	/^    int deny_scripts_reconfig; \/* Allow SENTINEL SET ... to change script$/;"	m	struct:sentinelState	typeref:typename:int	file:
dep	deps/hiredis/Makefile	/^dep:$/;"	t
depend	deps/lua/src/Makefile	/^depend:$/;"	t
deriveAnnouncedPorts	src/cluster.c	/^void deriveAnnouncedPorts(int *announced_port, int *announced_pport,$/;"	f	typeref:typename:void
desc	src/redis-cli.c	/^    char *desc;$/;"	m	struct:clusterManagerOptionDef	typeref:typename:char *	file:
destroy	deps/jemalloc/include/jemalloc/jemalloc.h	/^	extent_destroy_t	*destroy;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_destroy_t *
destroy	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_destroy_t	*destroy;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_destroy_t *
destroy	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^	extent_destroy_t	*destroy;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_destroy_t *	file:
destroy	deps/jemalloc/src/zone.c	/^	void (*destroy)(struct _malloc_zone_t *);$/;"	m	struct:_malloc_zone_t	typeref:typename:void (*)(struct _malloc_zone_t *)	file:
destroy_cb	deps/jemalloc/test/unit/rb.c	/^destroy_cb(node_t *node, void *data) {$/;"	f	typeref:typename:void	file:
detect_debug_sleep	deps/hiredis/test.c	/^static int detect_debug_sleep(redisContext *c) {$/;"	f	typeref:typename:int	file:
dh_params_file	src/server.h	/^    char *dh_params_file;$/;"	m	struct:redisTLSContextConfig	typeref:typename:char *
di	src/server.h	/^    dictIterator *di;$/;"	m	struct:__anon3ef696e90b08	typeref:typename:dictIterator *
di	src/server.h	/^    dictIterator *di;$/;"	m	struct:__anon3ef696e90c08	typeref:typename:dictIterator *
di	src/t_zset.c	/^                dictIterator *di;$/;"	m	struct:__anon6fce03460408::__anon6fce0346050a::_iterset::__anon6fce03460708	typeref:typename:dictIterator *	file:
dict	deps/hiredis/dict.h	/^typedef struct dict {$/;"	s
dict	deps/hiredis/dict.h	/^} dict;$/;"	t	typeref:struct:dict
dict	src/dict.h	/^typedef struct dict {$/;"	s
dict	src/dict.h	/^} dict;$/;"	t	typeref:struct:dict
dict	src/module.c	/^    RedisModuleDict *dict;$/;"	m	struct:RedisModuleDictIter	typeref:typename:RedisModuleDict *	file:
dict	src/server.h	/^    dict *dict;                 \/* The keyspace for this DB *\/$/;"	m	struct:redisDb	typeref:typename:dict *
dict	src/server.h	/^    dict *dict;$/;"	m	struct:zset	typeref:typename:dict *
dict	src/t_zset.c	/^                dict *dict;$/;"	m	struct:__anon6fce03460408::__anon6fce0346050a::_iterset::__anon6fce03460708	typeref:typename:dict *	file:
dict.o	deps/hiredis/Makefile	/^dict.o: dict.c fmacros.h alloc.h dict.h$/;"	t
dictAdd	deps/hiredis/dict.c	/^static int dictAdd(dict *ht, void *key, void *val) {$/;"	f	typeref:typename:int	file:
dictAdd	src/dict.c	/^int dictAdd(dict *d, void *key, void *val)$/;"	f	typeref:typename:int
dictAddOrFind	src/dict.c	/^dictEntry *dictAddOrFind(dict *d, void *key) {$/;"	f	typeref:typename:dictEntry *
dictAddRaw	src/dict.c	/^dictEntry *dictAddRaw(dict *d, void *key, dictEntry **existing)$/;"	f	typeref:typename:dictEntry *
dictCStringKeyCompare	src/module.c	/^int dictCStringKeyCompare(void *privdata, const void *key1, const void *key2) {$/;"	f	typeref:typename:int
dictCStringKeyHash	src/module.c	/^uint64_t dictCStringKeyHash(const void *key) {$/;"	f	typeref:typename:uint64_t
dictCompareHashKeys	deps/hiredis/dict.h	/^#define dictCompareHashKeys(/;"	d
dictCompareKeys	src/dict.h	/^#define dictCompareKeys(/;"	d
dictCreate	deps/hiredis/dict.c	/^static dict *dictCreate(dictType *type, void *privDataPtr) {$/;"	f	typeref:typename:dict *	file:
dictCreate	src/dict.c	/^dict *dictCreate(dictType *type,$/;"	f	typeref:typename:dict *
dictDefragTables	src/defrag.c	/^long dictDefragTables(dict* d) {$/;"	f	typeref:typename:long
dictDelete	deps/hiredis/dict.c	/^static int dictDelete(dict *ht, const void *key) {$/;"	f	typeref:typename:int	file:
dictDelete	src/dict.c	/^int dictDelete(dict *ht, const void *key) {$/;"	f	typeref:typename:int
dictDisableResize	src/dict.c	/^void dictDisableResize(void) {$/;"	f	typeref:typename:void
dictEmpty	src/dict.c	/^void dictEmpty(dict *d, void(callback)(void*)) {$/;"	f	typeref:typename:void
dictEnableResize	src/dict.c	/^void dictEnableResize(void) {$/;"	f	typeref:typename:void
dictEncObjHash	src/server.c	/^uint64_t dictEncObjHash(const void *key) {$/;"	f	typeref:typename:uint64_t
dictEncObjKeyCompare	src/server.c	/^int dictEncObjKeyCompare(void *privdata, const void *key1,$/;"	f	typeref:typename:int
dictEntry	deps/hiredis/dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	deps/hiredis/dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictEntry	src/dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	src/dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictExpand	deps/hiredis/dict.c	/^static int dictExpand(dict *ht, unsigned long size) {$/;"	f	typeref:typename:int	file:
dictExpand	src/dict.c	/^int dictExpand(dict *d, unsigned long size) {$/;"	f	typeref:typename:int
dictExpandAllowed	src/server.c	/^int dictExpandAllowed(size_t moreMem, double usedRatio) {$/;"	f	typeref:typename:int
dictFetchValue	src/dict.c	/^void *dictFetchValue(dict *d, const void *key) {$/;"	f	typeref:typename:void *
dictFind	deps/hiredis/dict.c	/^static dictEntry *dictFind(dict *ht, const void *key) {$/;"	f	typeref:typename:dictEntry *	file:
dictFind	src/dict.c	/^dictEntry *dictFind(dict *d, const void *key)$/;"	f	typeref:typename:dictEntry *
dictFindEntryRefByPtrAndHash	src/dict.c	/^dictEntry **dictFindEntryRefByPtrAndHash(dict *d, const void *oldptr, uint64_t hash) {$/;"	f	typeref:typename:dictEntry **
dictFingerprint	src/dict.c	/^long long dictFingerprint(dict *d) {$/;"	f	typeref:typename:long long
dictFreeEntryKey	deps/hiredis/dict.h	/^#define dictFreeEntryKey(/;"	d
dictFreeEntryVal	deps/hiredis/dict.h	/^#define dictFreeEntryVal(/;"	d
dictFreeKey	src/dict.h	/^#define dictFreeKey(/;"	d
dictFreeUnlinkedEntry	src/dict.c	/^void dictFreeUnlinkedEntry(dict *d, dictEntry *he) {$/;"	f	typeref:typename:void
dictFreeVal	src/dict.h	/^#define dictFreeVal(/;"	d
dictGenCaseHashFunction	src/dict.c	/^uint64_t dictGenCaseHashFunction(const unsigned char *buf, int len) {$/;"	f	typeref:typename:uint64_t
dictGenHashFunction	deps/hiredis/dict.c	/^static unsigned int dictGenHashFunction(const unsigned char *buf, int len) {$/;"	f	typeref:typename:unsigned int	file:
dictGenHashFunction	src/dict.c	/^uint64_t dictGenHashFunction(const void *key, int len) {$/;"	f	typeref:typename:uint64_t
dictGenericDelete	src/dict.c	/^static dictEntry *dictGenericDelete(dict *d, const void *key, int nofree) {$/;"	f	typeref:typename:dictEntry *	file:
dictGetDoubleVal	src/dict.h	/^#define dictGetDoubleVal(/;"	d
dictGetEntryKey	deps/hiredis/dict.h	/^#define dictGetEntryKey(/;"	d
dictGetEntryVal	deps/hiredis/dict.h	/^#define dictGetEntryVal(/;"	d
dictGetFairRandomKey	src/dict.c	/^dictEntry *dictGetFairRandomKey(dict *d) {$/;"	f	typeref:typename:dictEntry *
dictGetHash	src/dict.c	/^uint64_t dictGetHash(dict *d, const void *key) {$/;"	f	typeref:typename:uint64_t
dictGetHashFunctionSeed	src/dict.c	/^uint8_t *dictGetHashFunctionSeed(void) {$/;"	f	typeref:typename:uint8_t *
dictGetIterator	deps/hiredis/dict.c	/^static dictIterator *dictGetIterator(dict *ht) {$/;"	f	typeref:typename:dictIterator *	file:
dictGetIterator	src/dict.c	/^dictIterator *dictGetIterator(dict *d)$/;"	f	typeref:typename:dictIterator *
dictGetKey	src/dict.h	/^#define dictGetKey(/;"	d
dictGetRandomKey	src/dict.c	/^dictEntry *dictGetRandomKey(dict *d)$/;"	f	typeref:typename:dictEntry *
dictGetSafeIterator	src/dict.c	/^dictIterator *dictGetSafeIterator(dict *d) {$/;"	f	typeref:typename:dictIterator *
dictGetSignedIntegerVal	src/dict.h	/^#define dictGetSignedIntegerVal(/;"	d
dictGetSomeKeys	src/dict.c	/^unsigned int dictGetSomeKeys(dict *d, dictEntry **des, unsigned int count) {$/;"	f	typeref:typename:unsigned int
dictGetStats	src/dict.c	/^void dictGetStats(char *buf, size_t bufsize, dict *d) {$/;"	f	typeref:typename:void
dictGetUnsignedIntegerVal	src/dict.h	/^#define dictGetUnsignedIntegerVal(/;"	d
dictGetVal	src/dict.h	/^#define dictGetVal(/;"	d
dictHashKey	deps/hiredis/dict.h	/^#define dictHashKey(/;"	d
dictHashKey	src/dict.h	/^#define dictHashKey(/;"	d
dictInstancesValDestructor	src/sentinel.c	/^void dictInstancesValDestructor (void *privdata, void *obj) {$/;"	f	typeref:typename:void
dictIsRehashing	src/dict.h	/^#define dictIsRehashing(/;"	d
dictIterDefragEntry	src/defrag.c	/^long dictIterDefragEntry(dictIterator *iter) {$/;"	f	typeref:typename:long
dictIterator	deps/hiredis/dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	deps/hiredis/dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictIterator	src/dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	src/dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictKeyCompare	utils/hashtable/rehashing.c	/^int dictKeyCompare(void *privdata, const void *key1, const void *key2) {$/;"	f	typeref:typename:int
dictKeyHash	utils/hashtable/rehashing.c	/^unsigned int dictKeyHash(const void *keyp) {$/;"	f	typeref:typename:unsigned int
dictListDestructor	src/redis-cli.c	/^void dictListDestructor(void *privdata, void *val)$/;"	f	typeref:typename:void
dictListDestructor	src/server.c	/^void dictListDestructor(void *privdata, void *val)$/;"	f	typeref:typename:void
dictNext	deps/hiredis/dict.c	/^static dictEntry *dictNext(dictIterator *iter) {$/;"	f	typeref:typename:dictEntry *	file:
dictNext	src/dict.c	/^dictEntry *dictNext(dictIterator *iter)$/;"	f	typeref:typename:dictEntry *
dictObjHash	src/server.c	/^uint64_t dictObjHash(const void *key) {$/;"	f	typeref:typename:uint64_t
dictObjKeyCompare	src/server.c	/^int dictObjKeyCompare(void *privdata, const void *key1,$/;"	f	typeref:typename:int
dictObjectDestructor	src/server.c	/^void dictObjectDestructor(void *privdata, void *val)$/;"	f	typeref:typename:void
dictPauseRehashing	src/dict.h	/^#define dictPauseRehashing(/;"	d
dictRehash	src/dict.c	/^int dictRehash(dict *d, int n) {$/;"	f	typeref:typename:int
dictRehashMilliseconds	src/dict.c	/^int dictRehashMilliseconds(dict *d, int ms) {$/;"	f	typeref:typename:int
dictRelease	deps/hiredis/dict.c	/^static void dictRelease(dict *ht) {$/;"	f	typeref:typename:void	file:
dictRelease	src/dict.c	/^void dictRelease(dict *d)$/;"	f	typeref:typename:void
dictReleaseIterator	deps/hiredis/dict.c	/^static void dictReleaseIterator(dictIterator *iter) {$/;"	f	typeref:typename:void	file:
dictReleaseIterator	src/dict.c	/^void dictReleaseIterator(dictIterator *iter)$/;"	f	typeref:typename:void
dictReplace	deps/hiredis/dict.c	/^static int dictReplace(dict *ht, void *key, void *val) {$/;"	f	typeref:typename:int	file:
dictReplace	src/dict.c	/^int dictReplace(dict *d, void *key, void *val)$/;"	f	typeref:typename:int
dictResize	src/dict.c	/^int dictResize(dict *d)$/;"	f	typeref:typename:int
dictResumeRehashing	src/dict.h	/^#define dictResumeRehashing(/;"	d
dictScan	src/dict.c	/^unsigned long dictScan(dict *d,$/;"	f	typeref:typename:unsigned long
dictScanBucketFunction	src/dict.h	/^typedef void (dictScanBucketFunction)(void *privdata, dictEntry **bucketref);$/;"	t	typeref:typename:void ()(void * privdata,dictEntry ** bucketref)
dictScanFunction	src/dict.h	/^typedef void (dictScanFunction)(void *privdata, const dictEntry *de);$/;"	t	typeref:typename:void ()(void * privdata,const dictEntry * de)
dictSdsCaseHash	src/server.c	/^uint64_t dictSdsCaseHash(const void *key) {$/;"	f	typeref:typename:uint64_t
dictSdsDestructor	src/redis-cli.c	/^static void dictSdsDestructor(void *privdata, void *val)$/;"	f	typeref:typename:void	file:
dictSdsDestructor	src/server.c	/^void dictSdsDestructor(void *privdata, void *val)$/;"	f	typeref:typename:void
dictSdsHash	src/redis-benchmark.c	/^static uint64_t dictSdsHash(const void *key) {$/;"	f	typeref:typename:uint64_t	file:
dictSdsHash	src/redis-cli.c	/^static uint64_t dictSdsHash(const void *key) {$/;"	f	typeref:typename:uint64_t	file:
dictSdsHash	src/server.c	/^uint64_t dictSdsHash(const void *key) {$/;"	f	typeref:typename:uint64_t
dictSdsKeyCaseCompare	src/server.c	/^int dictSdsKeyCaseCompare(void *privdata, const void *key1,$/;"	f	typeref:typename:int
dictSdsKeyCompare	src/redis-benchmark.c	/^static int dictSdsKeyCompare(void *privdata, const void *key1,$/;"	f	typeref:typename:int	file:
dictSdsKeyCompare	src/redis-cli.c	/^static int dictSdsKeyCompare(void *privdata, const void *key1,$/;"	f	typeref:typename:int	file:
dictSdsKeyCompare	src/server.c	/^int dictSdsKeyCompare(void *privdata, const void *key1,$/;"	f	typeref:typename:int
dictSetDoubleVal	src/dict.h	/^#define dictSetDoubleVal(/;"	d
dictSetHashFunctionSeed	src/dict.c	/^void dictSetHashFunctionSeed(uint8_t *seed) {$/;"	f	typeref:typename:void
dictSetHashKey	deps/hiredis/dict.h	/^#define dictSetHashKey(/;"	d
dictSetHashVal	deps/hiredis/dict.h	/^#define dictSetHashVal(/;"	d
dictSetKey	src/dict.h	/^#define dictSetKey(/;"	d
dictSetSignedIntegerVal	src/dict.h	/^#define dictSetSignedIntegerVal(/;"	d
dictSetUnsignedIntegerVal	src/dict.h	/^#define dictSetUnsignedIntegerVal(/;"	d
dictSetVal	src/dict.h	/^#define dictSetVal(/;"	d
dictSize	deps/hiredis/dict.h	/^#define dictSize(/;"	d
dictSize	src/dict.h	/^#define dictSize(/;"	d
dictSlots	deps/hiredis/dict.h	/^#define dictSlots(/;"	d
dictSlots	src/dict.h	/^#define dictSlots(/;"	d
dictStringHash	src/latency.c	/^uint64_t dictStringHash(const void *key) {$/;"	f	typeref:typename:uint64_t
dictStringKeyCompare	src/latency.c	/^int dictStringKeyCompare(void *privdata, const void *key1, const void *key2) {$/;"	f	typeref:typename:int
dictTest	src/dict.c	/^int dictTest(int argc, char **argv, int accurate) {$/;"	f	typeref:typename:int
dictTryExpand	src/dict.c	/^int dictTryExpand(dict *d, unsigned long size) {$/;"	f	typeref:typename:int
dictType	deps/hiredis/dict.h	/^typedef struct dictType {$/;"	s
dictType	deps/hiredis/dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
dictType	src/dict.h	/^typedef struct dictType {$/;"	s
dictType	src/dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
dictTypeExpandAllowed	src/dict.c	/^static int dictTypeExpandAllowed(dict *d) {$/;"	f	typeref:typename:int	file:
dictTypeTest	utils/hashtable/rehashing.c	/^dictType dictTypeTest = {$/;"	v	typeref:typename:dictType
dictUnlink	src/dict.c	/^dictEntry *dictUnlink(dict *ht, const void *key) {$/;"	f	typeref:typename:dictEntry *
dictVanillaFree	src/server.c	/^void dictVanillaFree(void *privdata, void *val)$/;"	f	typeref:typename:void
dict_can_resize	src/dict.c	/^static int dict_can_resize = 1;$/;"	v	typeref:typename:int	file:
dict_force_resize_ratio	src/dict.c	/^static unsigned int dict_force_resize_ratio = 5;$/;"	v	typeref:typename:unsigned int	file:
dict_hash_function_seed	src/dict.c	/^static uint8_t dict_hash_function_seed[16];$/;"	v	typeref:typename:uint8_t[16]	file:
dict_json	deps/jemalloc/test/unit/emitter.c	/^static const char *dict_json =$/;"	v	typeref:typename:const char *	file:
dict_table	deps/jemalloc/test/unit/emitter.c	/^static const char *dict_table =$/;"	v	typeref:typename:const char *	file:
dictht	src/dict.h	/^typedef struct dictht {$/;"	s
dictht	src/dict.h	/^} dictht;$/;"	t	typeref:struct:dictht
did_alloc	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_alloc;$/;"	v	typeref:typename:bool
did_commit	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_commit;$/;"	v	typeref:typename:bool
did_dalloc	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_dalloc;$/;"	v	typeref:typename:bool
did_decommit	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_decommit;$/;"	v	typeref:typename:bool
did_destroy	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_destroy;$/;"	v	typeref:typename:bool
did_merge	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_merge;$/;"	v	typeref:typename:bool
did_prof_dump_open	deps/jemalloc/test/unit/prof_gdump.c	/^static bool did_prof_dump_open;$/;"	v	typeref:typename:bool	file:
did_prof_dump_open	deps/jemalloc/test/unit/prof_idump.c	/^static bool did_prof_dump_open;$/;"	v	typeref:typename:bool	file:
did_purge_forced	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_purge_forced;$/;"	v	typeref:typename:bool
did_purge_lazy	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_purge_lazy;$/;"	v	typeref:typename:bool
did_split	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool did_split;$/;"	v	typeref:typename:bool
die	deps/lua/src/strbuf.c	/^static void die(const char *fmt, ...)$/;"	f	typeref:typename:void	file:
digest	src/module.c	/^        moduleTypeDigestFunc digest;$/;"	m	struct:RM_CreateDataType::typemethods	typeref:typename:moduleTypeDigestFunc	file:
digest	src/redismodule.h	/^    RedisModuleTypeDigestFunc digest;$/;"	m	struct:RedisModuleTypeMethods	typeref:typename:RedisModuleTypeDigestFunc
digest	src/server.h	/^    moduleTypeDigestFunc digest;$/;"	m	struct:RedisModuleType	typeref:typename:moduleTypeDigestFunc
digits10	src/util.c	/^uint32_t digits10(uint64_t v) {$/;"	f	typeref:typename:uint32_t
direction	src/adlist.h	/^    int direction;$/;"	m	struct:listIter	typeref:typename:int
direction	src/quicklist.h	/^    int direction;$/;"	m	struct:quicklistIter	typeref:typename:int
direction	src/server.h	/^    unsigned char direction; \/* Iteration direction *\/$/;"	m	struct:__anon3ef696e90908	typeref:typename:unsigned char
dirty	src/redis-cli.c	/^    int dirty;      \/* Node has changes that can be flushed *\/$/;"	m	struct:clusterManagerNode	typeref:typename:int	file:
dirty	src/server.h	/^    long long dirty;                \/* Changes to DB from the last save *\/$/;"	m	struct:redisServer	typeref:typename:long long
dirty_before_bgsave	src/server.h	/^    long long dirty_before_bgsave;  \/* Used to restore dirty on failed BGSAVE *\/$/;"	m	struct:redisServer	typeref:typename:long long
dirty_decay_ms	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	ssize_t dirty_decay_ms;$/;"	m	struct:ctl_arena_s	typeref:typename:ssize_t
dirty_decay_ms_default	deps/jemalloc/src/arena.c	/^static atomic_zd_t dirty_decay_ms_default;$/;"	v	typeref:typename:atomic_zd_t	file:
disableRawMode	deps/linenoise/linenoise.c	/^static void disableRawMode(int fd) {$/;"	f	typeref:typename:void	file:
disableTracking	src/tracking.c	/^void disableTracking(client *c) {$/;"	f	typeref:typename:void
disableWatchdog	src/debug.c	/^void disableWatchdog(void) {$/;"	f	typeref:typename:void
disable_discharge_checking	deps/jemalloc/src/zone.c	/^	boolean_t (*disable_discharge_checking)(malloc_zone_t *);$/;"	m	struct:malloc_introspection_t	typeref:typename:boolean_t (*)(malloc_zone_t *)	file:
disable_thp	src/server.h	/^    int disable_thp;                              \/* If true, disable THP by syscall *\/$/;"	m	struct:redisServer	typeref:typename:int
discardCommand	src/multi.c	/^void discardCommand(client *c) {$/;"	f	typeref:typename:void
discardDbBackup	src/db.c	/^void discardDbBackup(dbBackup *buckup, int flags, void(callback)(void*)) {$/;"	f	typeref:typename:void
discardTransaction	src/multi.c	/^void discardTransaction(client *c) {$/;"	f	typeref:typename:void
discharge	deps/jemalloc/src/zone.c	/^	void (*discharge)(malloc_zone_t *, void *);$/;"	m	struct:malloc_introspection_t	typeref:typename:void (*)(malloc_zone_t *,void *)	file:
discharge2anyreg	deps/lua/src/lcode.c	/^static void discharge2anyreg (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void	file:
discharge2reg	deps/lua/src/lcode.c	/^static void discharge2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	typeref:typename:void	file:
dischargejpc	deps/lua/src/lcode.c	/^static void dischargejpc (FuncState *fs) {$/;"	f	typeref:typename:void	file:
disconnect	deps/hiredis/test.c	/^static int disconnect(redisContext *c, int keep_fd) {$/;"	f	typeref:typename:int	file:
disconnectAllBlockedClients	src/blocked.c	/^void disconnectAllBlockedClients(void) {$/;"	f	typeref:typename:void
disconnectCallback	deps/hiredis/examples/example-ae.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f	typeref:typename:void
disconnectCallback	deps/hiredis/examples/example-ivykis.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f	typeref:typename:void
disconnectCallback	deps/hiredis/examples/example-libev.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f	typeref:typename:void
disconnectCallback	deps/hiredis/examples/example-libevent-ssl.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f	typeref:typename:void
disconnectCallback	deps/hiredis/examples/example-libevent.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f	typeref:typename:void
disconnectCallback	deps/hiredis/examples/example-libuv.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f	typeref:typename:void
disconnectCallback	deps/hiredis/examples/example-macosx.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f	typeref:typename:void
disconnectSlaves	src/networking.c	/^void disconnectSlaves(void) {$/;"	f	typeref:typename:void
disconnect_callback	src/module.c	/^    RedisModuleDisconnectFunc disconnect_callback; \/* Called on disconnection.*\/$/;"	m	struct:RedisModuleBlockedClient	typeref:typename:RedisModuleDisconnectFunc	file:
disconnect_cb	deps/hiredis/examples/example-glib.c	/^disconnect_cb (const redisAsyncContext *ac G_GNUC_UNUSED,$/;"	f	typeref:typename:void	file:
disconnected	src/sentinel.c	/^    int disconnected;      \/* Non-zero if we need to reconnect cc or pc. *\/$/;"	m	struct:instanceLink	typeref:typename:int	file:
disklessLoadDiscardBackup	src/replication.c	/^void disklessLoadDiscardBackup(dbBackup *buckup, int flag) {$/;"	f	typeref:typename:void
disklessLoadMakeBackup	src/replication.c	/^dbBackup *disklessLoadMakeBackup(void) {$/;"	f	typeref:typename:dbBackup *
disklessLoadRestoreBackup	src/replication.c	/^void disklessLoadRestoreBackup(dbBackup *buckup) {$/;"	f	typeref:typename:void
dist	deps/jemalloc/Makefile	/^dist: build_doc$/;"	t
dist	deps/jemalloc/Makefile.in	/^dist: build_doc$/;"	t
dist	src/geo.h	/^    double dist;$/;"	m	struct:geoPoint	typeref:typename:double
distclean	deps/Makefile	/^distclean:$/;"	t
distclean	deps/jemalloc/Makefile	/^distclean: clean$/;"	t
distclean	deps/jemalloc/Makefile.in	/^distclean: clean$/;"	t
distclean	src/Makefile	/^distclean: clean$/;"	t
distsamples	src/redis-cli.c	/^struct distsamples {$/;"	s	file:
div_compute	deps/jemalloc/include/jemalloc/internal/div.h	/^div_compute(div_info_t *div_info, size_t n) {$/;"	f	typeref:typename:size_t
div_info_s	deps/jemalloc/include/jemalloc/internal/div.h	/^struct div_info_s {$/;"	s
div_info_t	deps/jemalloc/include/jemalloc/internal/div.h	/^typedef struct div_info_s div_info_t;$/;"	t	typeref:struct:div_info_s
div_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define div_init /;"	d
div_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define div_init /;"	d
div_init	deps/jemalloc/src/div.c	/^div_init(div_info_t *div_info, size_t d) {$/;"	f	typeref:typename:void
doFastMemoryTest	src/debug.c	/^void doFastMemoryTest(void) {$/;"	f	typeref:typename:void
do_arena_create	deps/jemalloc/test/unit/arena_reset.c	/^do_arena_create(extent_hooks_t *h) {$/;"	f	typeref:typename:unsigned	file:
do_arena_create	deps/jemalloc/test/unit/decay.c	/^do_arena_create(ssize_t dirty_decay_ms, ssize_t muzzy_decay_ms) {$/;"	f	typeref:typename:unsigned	file:
do_arena_create	deps/jemalloc/test/unit/retained.c	/^do_arena_create(extent_hooks_t *h) {$/;"	f	typeref:typename:unsigned	file:
do_arena_destroy	deps/jemalloc/test/unit/arena_reset.c	/^do_arena_destroy(unsigned arena_ind) {$/;"	f	typeref:typename:void	file:
do_arena_destroy	deps/jemalloc/test/unit/decay.c	/^do_arena_destroy(unsigned arena_ind) {$/;"	f	typeref:typename:void	file:
do_arena_destroy	deps/jemalloc/test/unit/retained.c	/^do_arena_destroy(unsigned arena_ind) {$/;"	f	typeref:typename:void	file:
do_arena_reset	deps/jemalloc/test/unit/arena_reset.c	/^do_arena_reset(unsigned arena_ind) {$/;"	f	typeref:typename:void	file:
do_arena_reset_destroy	deps/jemalloc/test/unit/arena_reset.c	/^do_arena_reset_destroy(const char *name, unsigned arena_ind) {$/;"	f	typeref:typename:void	file:
do_arena_reset_post	deps/jemalloc/test/unit/arena_reset.c	/^do_arena_reset_post(void **ptrs, unsigned nptrs, unsigned arena_ind) {$/;"	f	typeref:typename:void	file:
do_arena_reset_pre	deps/jemalloc/test/unit/arena_reset.c	/^do_arena_reset_pre(unsigned arena_ind, void ***ptrs, unsigned *nptrs) {$/;"	f	typeref:typename:void	file:
do_bg_rm_call	tests/modules/blockedclient.c	/^int do_bg_rm_call(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
do_connect	deps/hiredis/test.c	/^static redisContext *do_connect(struct config config) {$/;"	f	typeref:typename:redisContext *	file:
do_decay	deps/jemalloc/test/unit/decay.c	/^do_decay(unsigned arena_ind) {$/;"	f	typeref:typename:void
do_epoch	deps/jemalloc/test/unit/decay.c	/^do_epoch(void) {$/;"	f	typeref:typename:void
do_fork_thd	deps/jemalloc/test/unit/fork.c	/^do_fork_thd(void *arg) {$/;"	f	typeref:typename:TEST_END void *	file:
do_get_active	deps/jemalloc/test/unit/retained.c	/^do_get_active(unsigned arena_ind) {$/;"	f	typeref:typename:size_t	file:
do_get_mapped	deps/jemalloc/test/unit/retained.c	/^do_get_mapped(unsigned arena_ind) {$/;"	f	typeref:typename:size_t	file:
do_get_size_impl	deps/jemalloc/test/unit/retained.c	/^do_get_size_impl(const char *cmd, unsigned arena_ind) {$/;"	f	typeref:typename:size_t	file:
do_hook	deps/jemalloc/test/src/test.c	/^do_hook(bool *hook_ran, void (**hook)()) {$/;"	f	typeref:typename:void	file:
do_mallocx	deps/jemalloc/test/unit/decay.c	/^do_mallocx(size_t size, int flags) {$/;"	f	typeref:typename:void *	file:
do_prof_reset	deps/jemalloc/test/unit/prof_reset.c	/^do_prof_reset(size_t lg_prof_sample) {$/;"	f	typeref:typename:void	file:
do_purge	deps/jemalloc/test/unit/decay.c	/^do_purge(unsigned arena_ind) {$/;"	f	typeref:typename:void
do_reconnect	deps/hiredis/test.c	/^static void do_reconnect(redisContext *c, struct config config) {$/;"	f	typeref:typename:void	file:
do_recursion	deps/jemalloc/test/src/SFMT.c	/^static inline void do_recursion(w128_t *r, w128_t *a, w128_t *b, w128_t *c,$/;"	f	typeref:typename:void	file:
do_refresh	deps/jemalloc/test/unit/retained.c	/^do_refresh(void) {$/;"	f	typeref:typename:void	file:
do_rm_call	tests/modules/blockedclient.c	/^int do_rm_call(RedisModuleCtx *ctx, RedisModuleString **argv, int argc){$/;"	f	typeref:typename:int
do_ssl_handshake	deps/hiredis/test.c	/^static void do_ssl_handshake(redisContext *c) {$/;"	f	typeref:typename:void	file:
do_test_fork_multithreaded	deps/jemalloc/test/unit/fork.c	/^do_test_fork_multithreaded() {$/;"	f	typeref:typename:void	file:
doargs	deps/lua/src/luac.c	/^static int doargs(int argc, char* argv[])$/;"	f	typeref:typename:int	file:
docall	deps/lua/src/lua.c	/^static int docall (lua_State *L, int narg, int clear) {$/;"	f	typeref:typename:int	file:
dofile	deps/lua/src/lua.c	/^static int dofile (lua_State *L, const char *name) {$/;"	f	typeref:typename:int	file:
doing	src/redis-check-rdb.c	/^    int doing;                      \/* The state while reading the RDB. *\/$/;"	m	struct:__anon818955940108	typeref:typename:int	file:
dojump	deps/lua/src/lvm.c	/^#define dojump(/;"	d	file:
dolibrary	deps/lua/src/lua.c	/^static int dolibrary (lua_State *L, const char *name) {$/;"	f	typeref:typename:int	file:
done	src/module.c	/^    int done;$/;"	m	struct:RedisModuleScanCursor	typeref:typename:int	file:
done_handler	src/module.c	/^    RedisModuleForkDoneHandler done_handler;$/;"	m	struct:RedisModuleForkInfo	typeref:typename:RedisModuleForkDoneHandler	file:
done_handler	tests/modules/fork.c	/^void done_handler(int exitcode, int bysignal, void *user_data) {$/;"	f	typeref:typename:void
done_handler_user_data	src/module.c	/^    void* done_handler_user_data;$/;"	m	struct:RedisModuleForkInfo	typeref:typename:void *	file:
dooptions	deps/lua/src/loadlib.c	/^static void dooptions (lua_State *L, int n) {$/;"	f	typeref:typename:void	file:
dopts	deps/jemalloc/src/jemalloc.c	/^	dynamic_opts_t dopts;$/;"	v	typeref:typename:dynamic_opts_t
dostring	deps/lua/src/lua.c	/^static int dostring (lua_State *L, const char *s, const char *name) {$/;"	f	typeref:typename:int	file:
dotty	deps/lua/src/lua.c	/^static void dotty (lua_State *L) {$/;"	f	typeref:typename:void	file:
double_eq_rel	deps/jemalloc/test/unit/math.c	/^double_eq_rel(double a, double b, double max_rel_err, double max_abs_err) {$/;"	f	typeref:typename:bool	file:
down_after_period	src/sentinel.c	/^    mstime_t down_after_period; \/* Consider it down after that period. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:mstime_t	file:
dss	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	const char *dss;$/;"	m	struct:ctl_arena_s	typeref:typename:const char *
dss_base	deps/jemalloc/src/extent_dss.c	/^static void		*dss_base;$/;"	v	typeref:typename:void *	file:
dss_exhausted	deps/jemalloc/src/extent_dss.c	/^static atomic_b_t	dss_exhausted;$/;"	v	typeref:typename:atomic_b_t	file:
dss_extending	deps/jemalloc/src/extent_dss.c	/^static atomic_b_t	dss_extending;$/;"	v	typeref:typename:atomic_b_t	file:
dss_max	deps/jemalloc/src/extent_dss.c	/^static atomic_p_t	dss_max;$/;"	v	typeref:typename:atomic_p_t	file:
dss_prec	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	atomic_u_t		dss_prec;$/;"	m	struct:arena_s	typeref:typename:atomic_u_t
dss_prec_default	deps/jemalloc/src/extent_dss.c	/^static atomic_u_t	dss_prec_default = ATOMIC_INIT($/;"	v	typeref:typename:atomic_u_t	file:
dss_prec_disabled	deps/jemalloc/include/jemalloc/internal/extent_dss.h	/^	dss_prec_disabled  = 0,$/;"	e	enum:__anona8387ea20103
dss_prec_limit	deps/jemalloc/include/jemalloc/internal/extent_dss.h	/^	dss_prec_limit     = 3$/;"	e	enum:__anona8387ea20103
dss_prec_names	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define dss_prec_names /;"	d
dss_prec_names	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define dss_prec_names /;"	d
dss_prec_names	deps/jemalloc/src/extent_dss.c	/^const char	*dss_prec_names[] = {$/;"	v	typeref:typename:const char * []
dss_prec_primary	deps/jemalloc/include/jemalloc/internal/extent_dss.h	/^	dss_prec_primary   = 1,$/;"	e	enum:__anona8387ea20103
dss_prec_secondary	deps/jemalloc/include/jemalloc/internal/extent_dss.h	/^	dss_prec_secondary = 2,$/;"	e	enum:__anona8387ea20103
dss_prec_t	deps/jemalloc/include/jemalloc/internal/extent_dss.h	/^} dss_prec_t;$/;"	t	typeref:enum:__anona8387ea20103
dstkey	src/t_zset.c	/^    robj                                *dstkey;$/;"	m	struct:zrange_result_handler	typeref:typename:robj *	file:
dstobj	src/t_zset.c	/^    robj                                *dstobj;$/;"	m	struct:zrange_result_handler	typeref:typename:robj *	file:
dtor_counter	deps/hiredis/test.c	/^    int dtor_counter;$/;"	m	struct:privdata	typeref:typename:int	file:
dummy	deps/lua/Makefile	/^dummy:$/;"	t
dummy	deps/lua/src/lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for `local' udata *\/$/;"	m	union:Udata	typeref:typename:L_Umaxalign
dummy	deps/lua/src/lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for strings *\/$/;"	m	union:TString	typeref:typename:L_Umaxalign
dummy	deps/lua/src/lua_struct.c	/^  int dummy;$/;"	m	union:__anondc84fe7f010a	typeref:typename:int	file:
dummynode	deps/lua/src/ltable.c	/^#define dummynode	/;"	d	file:
dummynode_	deps/lua/src/ltable.c	/^static const Node dummynode_ = {$/;"	v	typeref:typename:const Node	file:
dumpCodeAroundEIP	src/debug.c	/^void dumpCodeAroundEIP(void *eip) {$/;"	f	typeref:typename:void
dumpCommand	src/cluster.c	/^void dumpCommand(client *c) {$/;"	f	typeref:typename:void
dumpX86Calls	src/debug.c	/^void dumpX86Calls(void *addr, size_t len) {$/;"	f	typeref:typename:void
dump_cnts	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_cnt_t		dump_cnts;$/;"	m	struct:prof_tctx_s	typeref:typename:prof_cnt_t
dumping	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	bool			dumping;$/;"	m	struct:prof_tdata_s	typeref:typename:bool
dumping	deps/lua/src/luac.c	/^static int dumping=1;			\/* dump bytecodes? *\/$/;"	v	typeref:typename:int	file:
dup	src/adlist.h	/^    void *(*dup)(void *ptr);$/;"	m	struct:list	typeref:typename:void * (*)(void * ptr)
dupClientReplyValue	src/networking.c	/^void *dupClientReplyValue(void *o) {$/;"	f	typeref:typename:void *
dupSentinelAddr	src/sentinel.c	/^sentinelAddr *dupSentinelAddr(sentinelAddr *src) {$/;"	f	typeref:typename:sentinelAddr *
dupStringObject	src/object.c	/^robj *dupStringObject(const robj *o) {$/;"	f	typeref:typename:robj *
duration	src/server.h	/^    long duration;          \/* Current command duration. Used for measuring latency of blocking/;"	m	struct:client	typeref:typename:long
duration	src/slowlog.h	/^    long long duration; \/* Time spent by the query, in microseconds. *\/$/;"	m	struct:slowlogEntry	typeref:typename:long long
dval	deps/hiredis/hiredis.h	/^    double dval; \/* The double when type is REDIS_REPLY_DOUBLE *\/$/;"	m	struct:redisReply	typeref:typename:double
dynamic	deps/hiredis/Makefile	/^dynamic: $(DYLIBNAME)$/;"	t
dynamic	deps/hiredis/Makefile	/^dynamic: $(SSL_DYLIBNAME)$/;"	t
dynamic	deps/lua/src/strbuf.h	/^    int dynamic;$/;"	m	struct:__anon10f823b40108	typeref:typename:int
dynamic_hz	src/server.h	/^    int dynamic_hz;             \/* Change hz value depending on # of clients. *\/$/;"	m	struct:redisServer	typeref:typename:int
dynamic_opts_init	deps/jemalloc/src/jemalloc.c	/^dynamic_opts_init(dynamic_opts_t *dynamic_opts) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
dynamic_opts_s	deps/jemalloc/src/jemalloc.c	/^struct dynamic_opts_s {$/;"	s	file:
dynamic_opts_t	deps/jemalloc/src/jemalloc.c	/^typedef struct dynamic_opts_s dynamic_opts_t;$/;"	t	typeref:struct:dynamic_opts_s	file:
e_addr	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	void			*e_addr;$/;"	m	struct:extent_s	typeref:typename:void *
e_bits	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	uint64_t		e_bits;$/;"	m	struct:extent_s	typeref:typename:uint64_t
e_bsize	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^		size_t			e_bsize;$/;"	m	union:extent_s::__anon0fd28c70020a	typeref:typename:size_t
e_prof_tctx	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^		atomic_p_t		e_prof_tctx;$/;"	m	union:extent_s::__anon0fd28c70030a	typeref:typename:atomic_p_t
e_size_esn	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^		size_t			e_size_esn;$/;"	m	union:extent_s::__anon0fd28c70020a	typeref:typename:size_t
e_slab_data	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^		arena_slab_data_t	e_slab_data;$/;"	m	union:extent_s::__anon0fd28c70030a	typeref:typename:arena_slab_data_t
east	src/geohash.h	/^    GeoHashBits east;$/;"	m	struct:__anona01652f10508	typeref:typename:GeoHashBits
echo	deps/lua/Makefile	/^echo:$/;"	t
echo	deps/lua/src/Makefile	/^echo:$/;"	t
echoCommand	src/server.c	/^void echoCommand(client *c) {$/;"	f	typeref:typename:void
el	src/redis-benchmark.c	/^    aeEventLoop *el;$/;"	m	struct:benchmarkThread	typeref:typename:aeEventLoop *	file:
el	src/redis-benchmark.c	/^    aeEventLoop *el;$/;"	m	struct:config	typeref:typename:aeEventLoop *	file:
el	src/server.h	/^    aeEventLoop *el;$/;"	m	struct:redisServer	typeref:typename:aeEventLoop *
elapsedMs	src/monotonic.h	/^static inline uint64_t elapsedMs(monotime start_time) {$/;"	f	typeref:typename:uint64_t
elapsedStart	src/monotonic.h	/^static inline void elapsedStart(monotime *start_time) {$/;"	f	typeref:typename:void
elapsedUs	src/monotonic.h	/^static inline uint64_t elapsedUs(monotime start_time) {$/;"	f	typeref:typename:uint64_t
ele	src/server.h	/^    sds ele;$/;"	m	struct:zskiplistNode	typeref:typename:sds
ele	src/t_zset.c	/^    sds ele;$/;"	m	struct:__anon6fce03460a08	typeref:typename:sds	file:
element	deps/hiredis/hiredis.h	/^    struct redisReply **element; \/* elements vector for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply	typeref:struct:redisReply **
elements	deps/hiredis/hiredis.h	/^    size_t elements; \/* number of elements, for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply	typeref:typename:size_t
elements	deps/hiredis/read.h	/^    long long elements; \/* number of elements in multibulk container *\/$/;"	m	struct:redisReadTask	typeref:typename:long long
elen	src/t_zset.c	/^    unsigned int elen;$/;"	m	struct:__anon6fce03460a08	typeref:typename:unsigned int	file:
ell	src/t_zset.c	/^    long long ell;$/;"	m	struct:__anon6fce03460a08	typeref:typename:long long	file:
embedCommonConfig	src/config.c	/^#define embedCommonConfig(/;"	d	file:
embedCommonNumericalConfig	src/config.c	/^#define embedCommonNumericalConfig(/;"	d	file:
embedConfigInterface	src/config.c	/^#define embedConfigInterface(/;"	d	file:
emitResultFromCBuffer	src/t_zset.c	/^    zrangeResultEmitCBufferFunction      emitResultFromCBuffer;$/;"	m	struct:zrange_result_handler	typeref:typename:zrangeResultEmitCBufferFunction	file:
emitResultFromLongLong	src/t_zset.c	/^    zrangeResultEmitLongLongFunction     emitResultFromLongLong;$/;"	m	struct:zrange_result_handler	typeref:typename:zrangeResultEmitLongLongFunction	file:
emit_dict	deps/jemalloc/test/unit/emitter.c	/^emit_dict(emitter_t *emitter) {$/;"	f	typeref:typename:void	file:
emit_json_arr	deps/jemalloc/test/unit/emitter.c	/^emit_json_arr(emitter_t *emitter) {$/;"	f	typeref:typename:TEST_END void	file:
emit_modal	deps/jemalloc/test/unit/emitter.c	/^emit_modal(emitter_t *emitter) {$/;"	f	typeref:typename:TEST_END void	file:
emit_nested_dict	deps/jemalloc/test/unit/emitter.c	/^static void emit_nested_dict(emitter_t *emitter) {$/;"	f	typeref:typename:TEST_END void	file:
emit_table_printf	deps/jemalloc/test/unit/emitter.c	/^emit_table_printf(emitter_t *emitter) {$/;"	f	typeref:typename:TEST_END void	file:
emit_table_row	deps/jemalloc/test/unit/emitter.c	/^emit_table_row(emitter_t *emitter) {$/;"	f	typeref:typename:TEST_END void	file:
emit_types	deps/jemalloc/test/unit/emitter.c	/^emit_types(emitter_t *emitter) {$/;"	f	typeref:typename:TEST_END void	file:
emitter_begin	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_begin(emitter_t *emitter) {$/;"	f	typeref:typename:void
emitter_col_init	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_col_init(emitter_col_t *col, emitter_row_t *row) {$/;"	f	typeref:typename:void
emitter_col_s	deps/jemalloc/include/jemalloc/internal/emitter.h	/^struct emitter_col_s {$/;"	s
emitter_col_t	deps/jemalloc/include/jemalloc/internal/emitter.h	/^typedef struct emitter_col_s emitter_col_t;$/;"	t	typeref:struct:emitter_col_s
emitter_dict_begin	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_dict_begin(emitter_t *emitter, const char *json_key,$/;"	f	typeref:typename:void
emitter_dict_end	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_dict_end(emitter_t *emitter) {$/;"	f	typeref:typename:void
emitter_end	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_end(emitter_t *emitter) {$/;"	f	typeref:typename:void
emitter_gen_fmt	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_gen_fmt(char *out_fmt, size_t out_size, const char *fmt_specifier,$/;"	f	typeref:typename:void
emitter_indent	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_indent(emitter_t *emitter) {$/;"	f	typeref:typename:void
emitter_init	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_init(emitter_t *emitter, emitter_output_t emitter_output,$/;"	f	typeref:typename:void
emitter_json_arr_begin	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_arr_begin(emitter_t *emitter, const char *json_key) {$/;"	f	typeref:typename:void
emitter_json_arr_end	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_arr_end(emitter_t *emitter) {$/;"	f	typeref:typename:void
emitter_json_arr_obj_begin	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_arr_obj_begin(emitter_t *emitter) {$/;"	f	typeref:typename:void
emitter_json_arr_obj_end	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_arr_obj_end(emitter_t *emitter) {$/;"	f	typeref:typename:void
emitter_json_arr_value	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_arr_value(emitter_t *emitter, emitter_type_t value_type,$/;"	f	typeref:typename:void
emitter_json_dict_begin	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_dict_begin(emitter_t *emitter, const char *json_key) {$/;"	f	typeref:typename:void
emitter_json_dict_end	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_dict_end(emitter_t *emitter) {$/;"	f	typeref:typename:void
emitter_json_key_prefix	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_key_prefix(emitter_t *emitter) {$/;"	f	typeref:typename:void
emitter_json_kv	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_json_kv(emitter_t *emitter, const char *json_key,$/;"	f	typeref:typename:void
emitter_justify_e	deps/jemalloc/include/jemalloc/internal/emitter.h	/^enum emitter_justify_e {$/;"	g
emitter_justify_left	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_justify_left,$/;"	e	enum:emitter_justify_e
emitter_justify_none	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_justify_none$/;"	e	enum:emitter_justify_e
emitter_justify_right	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_justify_right,$/;"	e	enum:emitter_justify_e
emitter_justify_t	deps/jemalloc/include/jemalloc/internal/emitter.h	/^typedef enum emitter_justify_e emitter_justify_t;$/;"	t	typeref:enum:emitter_justify_e
emitter_kv	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_kv(emitter_t *emitter, const char *json_key, const char *table_key,$/;"	f	typeref:typename:void
emitter_kv_note	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_kv_note(emitter_t *emitter, const char *json_key, const char *table_key,$/;"	f	typeref:typename:void
emitter_nest_dec	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_nest_dec(emitter_t *emitter) {$/;"	f	typeref:typename:void
emitter_nest_inc	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_nest_inc(emitter_t *emitter) {$/;"	f	typeref:typename:void
emitter_output_e	deps/jemalloc/include/jemalloc/internal/emitter.h	/^enum emitter_output_e {$/;"	g
emitter_output_json	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_output_json,$/;"	e	enum:emitter_output_e
emitter_output_t	deps/jemalloc/include/jemalloc/internal/emitter.h	/^typedef enum emitter_output_e emitter_output_t;$/;"	t	typeref:enum:emitter_output_e
emitter_output_table	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_output_table$/;"	e	enum:emitter_output_e
emitter_print_value	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_print_value(emitter_t *emitter, emitter_justify_t justify, int width,$/;"	f	typeref:typename:void
emitter_printf	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_printf(emitter_t *emitter, const char *format, ...) {$/;"	f	typeref:typename:JEMALLOC_FORMAT_PRINTF (2,3)void
emitter_row_init	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_row_init(emitter_row_t *row) {$/;"	f	typeref:typename:void
emitter_row_s	deps/jemalloc/include/jemalloc/internal/emitter.h	/^struct emitter_row_s {$/;"	s
emitter_row_t	deps/jemalloc/include/jemalloc/internal/emitter.h	/^typedef struct emitter_row_s emitter_row_t;$/;"	t	typeref:struct:emitter_row_s
emitter_s	deps/jemalloc/include/jemalloc/internal/emitter.h	/^struct emitter_s {$/;"	s
emitter_t	deps/jemalloc/include/jemalloc/internal/emitter.h	/^typedef struct emitter_s emitter_t;$/;"	t	typeref:struct:emitter_s
emitter_table_dict_begin	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_table_dict_begin(emitter_t *emitter, const char *table_key) {$/;"	f	typeref:typename:void
emitter_table_dict_end	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_table_dict_end(emitter_t *emitter) {$/;"	f	typeref:typename:void
emitter_table_kv	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_table_kv(emitter_t *emitter, const char *table_key,$/;"	f	typeref:typename:void
emitter_table_printf	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_table_printf(emitter_t *emitter, const char *format, ...) {$/;"	f	typeref:typename:JEMALLOC_FORMAT_PRINTF (2,3)void
emitter_table_row	deps/jemalloc/include/jemalloc/internal/emitter.h	/^emitter_table_row(emitter_t *emitter, emitter_row_t *row) {$/;"	f	typeref:typename:void
emitter_type_bool	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_bool,$/;"	e	enum:emitter_type_e
emitter_type_e	deps/jemalloc/include/jemalloc/internal/emitter.h	/^enum emitter_type_e {$/;"	g
emitter_type_int	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_int,$/;"	e	enum:emitter_type_e
emitter_type_size	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_size,$/;"	e	enum:emitter_type_e
emitter_type_ssize	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_ssize,$/;"	e	enum:emitter_type_e
emitter_type_string	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_string,$/;"	e	enum:emitter_type_e
emitter_type_t	deps/jemalloc/include/jemalloc/internal/emitter.h	/^typedef enum emitter_type_e emitter_type_t;$/;"	t	typeref:enum:emitter_type_e
emitter_type_title	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_title,$/;"	e	enum:emitter_type_e
emitter_type_uint32	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_uint32,$/;"	e	enum:emitter_type_e
emitter_type_uint64	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_uint64,$/;"	e	enum:emitter_type_e
emitter_type_unsigned	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_unsigned,$/;"	e	enum:emitter_type_e
emptyDb	src/db.c	/^long long emptyDb(int dbnum, int flags, void(callback)(void*)) {$/;"	f	typeref:typename:long long
emptyDbAsync	src/lazyfree.c	/^void emptyDbAsync(redisDb *db) {$/;"	f	typeref:typename:void
emptyDbStructure	src/db.c	/^long long emptyDbStructure(redisDb *dbarray, int dbnum, int async,$/;"	f	typeref:typename:long long
emptyarray	src/server.h	/^    *emptyarray, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *********** [4]* [4]* [4]* [4]*
emptybuffer	deps/lua/src/lauxlib.c	/^static int emptybuffer (luaL_Buffer *B) {$/;"	f	typeref:typename:int	file:
emptybulk	src/server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj ****
emptymap	src/server.h	/^    *colon, *queued, *null[4], *nullarray[4], *emptymap[4], *emptyset[4],$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *********** [4]* [4]* [4]
emptyscan	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
emptyset	src/server.h	/^    *colon, *queued, *null[4], *nullarray[4], *emptymap[4], *emptyset[4],$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *********** [4]* [4]* [4]* [4]
enableBcastTrackingForPrefix	src/tracking.c	/^void enableBcastTrackingForPrefix(client *c, char *prefix, size_t plen) {$/;"	f	typeref:typename:void
enableClientTracking	deps/hiredis/examples/example-push.c	/^static void enableClientTracking(redisContext *c) {$/;"	f	typeref:typename:void	file:
enableRawMode	deps/linenoise/linenoise.c	/^static int enableRawMode(int fd) {$/;"	f	typeref:typename:int	file:
enableTracking	src/tracking.c	/^void enableTracking(client *c, uint64_t redirect_to, uint64_t options, robj **prefix, size_t num/;"	f	typeref:typename:void
enableWatchdog	src/debug.c	/^void enableWatchdog(int period) {$/;"	f	typeref:typename:void
enable_autogen	deps/jemalloc/Makefile	/^enable_autogen := 0$/;"	m
enable_autogen	deps/jemalloc/Makefile.in	/^enable_autogen := @enable_autogen@$/;"	m
enable_discharge_checking	deps/jemalloc/src/zone.c	/^	boolean_t (*enable_discharge_checking)(malloc_zone_t *);$/;"	m	struct:malloc_introspection_t	typeref:typename:boolean_t (*)(malloc_zone_t *)	file:
enable_ldb_on_eval	src/redis-cli.c	/^    int enable_ldb_on_eval; \/* Handle manual SCRIPT DEBUG + EVAL commands. *\/$/;"	m	struct:config	typeref:typename:int	file:
enable_prof	deps/jemalloc/Makefile	/^enable_prof := 0$/;"	m
enable_prof	deps/jemalloc/Makefile.in	/^enable_prof := @enable_prof@$/;"	m
enable_tracking	src/redis-benchmark.c	/^    int enable_tracking;$/;"	m	struct:config	typeref:typename:int	file:
enable_zone_allocator	deps/jemalloc/Makefile	/^enable_zone_allocator := $/;"	m
enable_zone_allocator	deps/jemalloc/Makefile.in	/^enable_zone_allocator := @enable_zone_allocator@$/;"	m
encodeTimeoutKey	src/timeout.c	/^void encodeTimeoutKey(unsigned char *buf, uint64_t timeout, client *c) {$/;"	f	typeref:typename:void
encode_buf	deps/lua/src/lua_cjson.c	/^    strbuf_t encode_buf;$/;"	m	struct:__anona3a73c770208	typeref:typename:strbuf_t	file:
encode_invalid_numbers	deps/lua/src/lua_cjson.c	/^    int encode_invalid_numbers;     \/* 2 => Encode as "null" *\/$/;"	m	struct:__anona3a73c770208	typeref:typename:int	file:
encode_keep_buffer	deps/lua/src/lua_cjson.c	/^    int encode_keep_buffer;$/;"	m	struct:__anona3a73c770208	typeref:typename:int	file:
encode_max_depth	deps/lua/src/lua_cjson.c	/^    int encode_max_depth;$/;"	m	struct:__anona3a73c770208	typeref:typename:int	file:
encode_number_precision	deps/lua/src/lua_cjson.c	/^    int encode_number_precision;$/;"	m	struct:__anona3a73c770208	typeref:typename:int	file:
encode_sparse_convert	deps/lua/src/lua_cjson.c	/^    int encode_sparse_convert;$/;"	m	struct:__anona3a73c770208	typeref:typename:int	file:
encode_sparse_ratio	deps/lua/src/lua_cjson.c	/^    int encode_sparse_ratio;$/;"	m	struct:__anona3a73c770208	typeref:typename:int	file:
encode_sparse_safe	deps/lua/src/lua_cjson.c	/^    int encode_sparse_safe;$/;"	m	struct:__anona3a73c770208	typeref:typename:int	file:
encoding	src/hyperloglog.c	/^    uint8_t encoding;   \/* HLL_DENSE or HLL_SPARSE. *\/$/;"	m	struct:hllhdr	typeref:typename:uint8_t	file:
encoding	src/intset.h	/^    uint32_t encoding;$/;"	m	struct:intset	typeref:typename:uint32_t
encoding	src/quicklist.h	/^    unsigned int encoding : 2;   \/* RAW==1 or LZF==2 *\/$/;"	m	struct:quicklistNode	typeref:typename:unsigned int:2
encoding	src/server.h	/^    int encoding;$/;"	m	struct:__anon3ef696e90b08	typeref:typename:int
encoding	src/server.h	/^    int encoding;$/;"	m	struct:__anon3ef696e90c08	typeref:typename:int
encoding	src/server.h	/^    unsigned char encoding;$/;"	m	struct:__anon3ef696e90908	typeref:typename:unsigned char
encoding	src/server.h	/^    unsigned encoding:4;$/;"	m	struct:redisObject	typeref:typename:unsigned:4
encoding	src/t_zset.c	/^    int encoding;$/;"	m	struct:__anon6fce03460408	typeref:typename:int	file:
encoding	src/ziplist.c	/^    unsigned char encoding;      \/* Set to ZIP_STR_* or ZIP_INT_* depending on$/;"	m	struct:zlentry	typeref:typename:unsigned char	file:
end	src/module.c	/^            uint32_t end;          \/* End pos for positional ranges. *\/$/;"	m	struct:RedisModuleKey::__anon967b4733010a::__anon967b47330208	typeref:typename:uint32_t	file:
end	src/setproctitle.c	/^	char *base, *end;$/;"	m	struct:__anon6a58858f0108	typeref:typename:char **	file:
end_benchmark	src/dict.c	/^#define end_benchmark(/;"	d	file:
end_capture	deps/lua/src/lstrlib.c	/^static const char *end_capture (MatchState *ms, const char *s,$/;"	f	typeref:typename:const char *	file:
end_ci	deps/lua/src/lstate.h	/^  CallInfo *end_ci;  \/* points after end of ci array*\/$/;"	m	struct:lua_State	typeref:typename:CallInfo *
end_key	src/stream.h	/^    uint64_t end_key[2];    \/* End key as 128 bit big endian. *\/$/;"	m	struct:streamIterator	typeref:typename:uint64_t[2]
endian	deps/lua/src/lua_struct.c	/^  char endian;$/;"	m	union:__anondc84fe7f010a	typeref:typename:char	file:
endian	deps/lua/src/lua_struct.c	/^  int endian;$/;"	m	struct:Header	typeref:typename:int	file:
endianconvTest	src/endianconv.c	/^int endianconvTest(int argc, char *argv[], int accurate) {$/;"	f	typeref:typename:int
endpc	deps/lua/src/lobject.h	/^  int endpc;    \/* first point where variable is dead *\/$/;"	m	struct:LocVar	typeref:typename:int
endpoint	deps/hiredis/hiredis.h	/^    } endpoint;$/;"	m	struct:__anon7daed6b50108	typeref:union:__anon7daed6b50108::__anon7daed6b5020a
endtime	src/module.c	/^    long long int endtime;$/;"	m	struct:RedisModuleDefragCtx	typeref:typename:long long int	file:
enq	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	bool			enq;$/;"	m	struct:prof_tdata_s	typeref:typename:bool
enq_gdump	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	bool			enq_gdump;$/;"	m	struct:prof_tdata_s	typeref:typename:bool
enq_idump	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	bool			enq_idump;$/;"	m	struct:prof_tdata_s	typeref:typename:bool
enterblock	deps/lua/src/lparser.c	/^static void enterblock (FuncState *fs, BlockCnt *bl, lu_byte isbreakable) {$/;"	f	typeref:typename:void	file:
enterlevel	deps/lua/src/lparser.c	/^static void enterlevel (LexState *ls) {$/;"	f	typeref:typename:void	file:
entry	deps/hiredis/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator	typeref:typename:dictEntry *
entry	src/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator	typeref:typename:dictEntry *
entry	src/server.h	/^    quicklistEntry entry; \/* Entry in quicklist *\/$/;"	m	struct:__anon3ef696e90a08	typeref:typename:quicklistEntry
entry	utils/lru/lfu-simulation.c	/^struct entry {$/;"	s	file:
entry_flags	src/stream.h	/^    int entry_flags;                    \/* Flags of entry we are emitting. *\/$/;"	m	struct:streamIterator	typeref:typename:int
enumConfigData	src/config.c	/^typedef struct enumConfigData {$/;"	s	file:
enumConfigData	src/config.c	/^} enumConfigData;$/;"	t	typeref:struct:enumConfigData	file:
enum_value	src/config.c	/^    configEnum *enum_value; \/* The underlying enum type this data represents *\/$/;"	m	struct:enumConfigData	typeref:typename:configEnum *	file:
enumd	src/config.c	/^    enumConfigData enumd;$/;"	m	union:typeData	typeref:typename:enumConfigData	file:
enumerate_discharged_pointers	deps/jemalloc/src/zone.c	/^	void (*enumerate_discharged_pointers)(malloc_zone_t *, void (^)(void *, void *));$/;"	m	struct:malloc_introspection_t	typeref:typename:void (*)	file:
enumerate_unavailable_without_blocks	deps/jemalloc/src/zone.c	/^	void *enumerate_unavailable_without_blocks;$/;"	m	struct:malloc_introspection_t	typeref:typename:void *	file:
enumerator	deps/jemalloc/src/zone.c	/^	kern_return_t (*enumerator)(task_t, void *, unsigned, vm_address_t, memory_reader_t, vm_range_r/;"	m	struct:malloc_introspection_t	typeref:typename:kern_return_t (*)(task_t,void *,unsigned,vm_address_t,memory_reader_t,vm_range_recorder_t)	file:
env	deps/lua/src/lobject.h	/^    struct Table *env;$/;"	m	struct:Udata::__anona52fc9410308	typeref:struct:Table *
env	deps/lua/src/lstate.h	/^  TValue env;  \/* temporary place for environments *\/$/;"	m	struct:lua_State	typeref:typename:TValue
epfd	src/ae_epoll.c	/^    int epfd;$/;"	m	struct:aeApiState	typeref:typename:int	file:
epoch	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	nstime_t		epoch;$/;"	m	struct:arena_decay_s	typeref:typename:nstime_t
epoch	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	uint64_t epoch;$/;"	m	struct:ctl_arenas_s	typeref:typename:uint64_t
epoch	deps/jemalloc/test/unit/retained.c	/^static atomic_u_t	epoch;$/;"	v	typeref:typename:atomic_u_t	file:
epos	src/redis-check-aof.c	/^static off_t epos;$/;"	v	typeref:typename:off_t	file:
eptr	src/t_zset.c	/^                unsigned char *eptr, *sptr;$/;"	m	struct:__anon6fce03460408::__anon6fce0346050a::_iterzset::__anon6fce03460808	typeref:typename:unsigned char *	file:
equalStringObjects	src/object.c	/^int equalStringObjects(robj *a, robj *b) {$/;"	f	typeref:typename:int
equalobj	deps/lua/src/lvm.h	/^#define equalobj(/;"	d
er	src/module.c	/^            int er;                \/* Zset iterator end reached flag$/;"	m	struct:RedisModuleKey::__anon967b4733010a::__anon967b47330208	typeref:typename:int	file:
err	deps/hiredis/async.h	/^    int err;$/;"	m	struct:redisAsyncContext	typeref:typename:int
err	deps/hiredis/hiredis.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisContext	typeref:typename:int
err	deps/hiredis/read.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisReader	typeref:typename:int
err	deps/lua/src/lua_cmsgpack.c	/^    int err;$/;"	m	struct:mp_cur	typeref:typename:int	file:
err	src/server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj ***
errfile	deps/lua/src/lauxlib.c	/^static int errfile (lua_State *L, const char *what, int fnameindex) {$/;"	f	typeref:typename:int	file:
errfunc	deps/lua/src/lstate.h	/^  ptrdiff_t errfunc;  \/* current error handling function (stack index) *\/$/;"	m	struct:lua_State	typeref:typename:ptrdiff_t
error	deps/lua/src/lundump.c	/^#define error(/;"	d	file:
error	deps/lua/src/lundump.c	/^static void error(LoadState* S, const char* why)$/;"	f	typeref:typename:void	file:
error	src/redis-check-aof.c	/^static char error[1044];$/;"	v	typeref:typename:char[1044]	file:
error	src/redis-check-rdb.c	/^    char error[1024];$/;"	m	struct:__anon818955940108	typeref:typename:char[1024]	file:
error	src/server.h	/^    int error;          \/* True if error condition happened. *\/$/;"	m	struct:RedisModuleIO	typeref:typename:int
error	src/setproctitle.c	/^	int error;$/;"	m	struct:__anon6a58858f0108	typeref:typename:int	file:
errorJmp	deps/lua/src/lstate.h	/^  struct lua_longjmp *errorJmp;  \/* current error recover point *\/$/;"	m	struct:lua_State	typeref:struct:lua_longjmp *
error_expected	deps/lua/src/lparser.c	/^static void error_expected (LexState *ls, int token) {$/;"	f	typeref:typename:void	file:
error_set	src/redis-check-rdb.c	/^    int error_set;                  \/* True if error is populated. *\/$/;"	m	struct:__anon818955940108	typeref:typename:int	file:
errorfromcode	deps/lua/src/loadlib.c	/^static const char *errorfromcode (NSObjectFileImageReturnCode ret) {$/;"	f	typeref:typename:const char *	file:
errorlimit	deps/lua/src/lparser.c	/^static void errorlimit (FuncState *fs, int limit, const char *what) {$/;"	f	typeref:typename:void	file:
errors	src/redis-cli.c	/^    list *errors;$/;"	m	struct:clusterManager	typeref:typename:list *	file:
errors	src/server.h	/^    rax *errors;                \/* Errors table *\/$/;"	m	struct:redisServer	typeref:typename:rax *
errstr	deps/hiredis/async.h	/^    char *errstr;$/;"	m	struct:redisAsyncContext	typeref:typename:char *
errstr	deps/hiredis/hiredis.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisContext	typeref:typename:char[128]
errstr	deps/hiredis/read.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisReader	typeref:typename:char[128]
escape2char	deps/lua/src/lua_cjson.c	/^    char escape2char[256];  \/* Decoding *\/$/;"	m	struct:__anona3a73c770208	typeref:typename:char[256]	file:
estimate	deps/lua/src/lstate.h	/^  lu_mem estimate;  \/* an estimate of number of bytes actually in use *\/$/;"	m	struct:global_State	typeref:typename:lu_mem
estimateObjectIdleTime	src/evict.c	/^unsigned long long estimateObjectIdleTime(robj *o) {$/;"	f	typeref:typename:unsigned long long
estr	src/t_zset.c	/^    unsigned char *estr;$/;"	m	struct:__anon6fce03460a08	typeref:typename:unsigned char *	file:
esz	deps/jemalloc/test/unit/retained.c	/^static size_t		esz;$/;"	v	typeref:typename:size_t	file:
ev	deps/hiredis/adapters/libevent.h	/^    struct event *ev;$/;"	m	struct:redisLibeventEvents	typeref:struct:event *
ev	deps/hiredis/async.h	/^    } ev;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::__anon89b0a8ab0108
eval	src/redis-cli.c	/^    char *eval;$/;"	m	struct:config	typeref:typename:char *	file:
eval	src/server.h	/^    *script, *replconf, *eval, *persist, *set, *pexpireat, *pexpire, $/;"	m	struct:sharedObjectsStruct
evalCommand	src/scripting.c	/^void evalCommand(client *c) {$/;"	f	typeref:typename:void
evalGenericCommand	src/scripting.c	/^void evalGenericCommand(client *c, int evalsha) {$/;"	f	typeref:typename:void
evalGenericCommandWithDebugging	src/scripting.c	/^void evalGenericCommandWithDebugging(client *c, int evalsha) {$/;"	f	typeref:typename:void
evalGetKeys	src/db.c	/^int evalGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f	typeref:typename:int
evalMode	src/redis-cli.c	/^static int evalMode(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
evalShaCommand	src/scripting.c	/^void evalShaCommand(client *c) {$/;"	f	typeref:typename:void
eval_ldb	src/redis-cli.c	/^    int eval_ldb;$/;"	m	struct:config	typeref:typename:int	file:
eval_ldb_end	src/redis-cli.c	/^    int eval_ldb_end;   \/* Lua debugging session ended. *\/$/;"	m	struct:config	typeref:typename:int	file:
eval_ldb_sync	src/redis-cli.c	/^    int eval_ldb_sync;  \/* Ask for synchronous mode of the Lua debugger. *\/$/;"	m	struct:config	typeref:typename:int	file:
event	deps/lua/src/lua.h	/^  int event;$/;"	m	struct:lua_Debug	typeref:typename:int
event	src/module.c	/^    RedisModuleEvent event;$/;"	m	struct:RedisModuleEventListener	typeref:typename:RedisModuleEvent	file:
eventLoop	src/ae.h	/^typedef void aeBeforeSleepProc(struct aeEventLoop *eventLoop);$/;"	t	typeref:typename:void aeBeforeSleepProc (struct aeEventLoop *)
event_log	tests/modules/hooks.c	/^RedisModuleDict *event_log = NULL;$/;"	v	typeref:typename:RedisModuleDict *
event_mask	src/module.c	/^    int event_mask;$/;"	m	struct:RedisModuleKeyspaceSubscriber	typeref:typename:int	file:
events	deps/hiredis/adapters/libuv.h	/^  int                events;$/;"	m	struct:redisLibuvEvents	typeref:typename:int
events	src/ae.h	/^    aeFileEvent *events; \/* Registered events *\/$/;"	m	struct:aeEventLoop	typeref:typename:aeFileEvent *
events	src/ae_epoll.c	/^    struct epoll_event *events;$/;"	m	struct:aeApiState	typeref:struct:epoll_event *	file:
events	src/ae_kqueue.c	/^    struct kevent *events;$/;"	m	struct:aeApiState	typeref:struct:kevent *	file:
eventsMask	src/ae_kqueue.c	/^    char *eventsMask; $/;"	m	struct:aeApiState	typeref:typename:char *	file:
events_processed_while_blocked	src/server.h	/^    long long events_processed_while_blocked; \/* processEventsWhileBlocked() *\/$/;"	m	struct:redisServer	typeref:typename:long long
evictPolicyToString	src/config.c	/^const char *evictPolicyToString(void) {$/;"	f	typeref:typename:const char *
evictionPoolAlloc	src/evict.c	/^void evictionPoolAlloc(void) {$/;"	f	typeref:typename:void
evictionPoolEntry	src/evict.c	/^struct evictionPoolEntry {$/;"	s	file:
evictionPoolPopulate	src/evict.c	/^void evictionPoolPopulate(int dbid, dict *sampledict, dict *keydict, struct evictionPoolEntry *p/;"	f	typeref:typename:void
evictionTimeLimitUs	src/evict.c	/^static unsigned long evictionTimeLimitUs() {$/;"	f	typeref:typename:unsigned long	file:
evictionTimeProc	src/evict.c	/^static int evictionTimeProc($/;"	f	typeref:typename:int	file:
evport_debug	src/ae_evport.c	/^static int evport_debug = 0;$/;"	v	typeref:typename:int	file:
examples	deps/hiredis/Makefile	/^examples: $(EXAMPLES)$/;"	t
exec	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
execBenchmarkThread	src/redis-benchmark.c	/^static void *execBenchmarkThread(void *ptr) {$/;"	f	typeref:typename:void *	file:
execCommand	src/multi.c	/^void execCommand(client *c) {$/;"	f	typeref:typename:void
execCommand	src/server.h	/^                        *zpopmaxCommand, *sremCommand, *execCommand,$/;"	m	struct:redisServer	typeref:struct:redisCommand *********
execCommandAbort	src/multi.c	/^void execCommandAbort(client *c, sds error) {$/;"	f	typeref:typename:void
execCommandPropagateExec	src/multi.c	/^void execCommandPropagateExec(int dbid) {$/;"	f	typeref:typename:void
execCommandPropagateMulti	src/multi.c	/^void execCommandPropagateMulti(int dbid) {$/;"	f	typeref:typename:void
exec_argv	src/server.h	/^    char **exec_argv;           \/* Executable argv vector (copy). *\/$/;"	m	struct:redisServer	typeref:typename:char **
execaborterr	src/server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
executable	src/server.h	/^    char *executable;           \/* Absolute executable file path. *\/$/;"	m	struct:redisServer	typeref:typename:char *
existsCommand	src/db.c	/^void existsCommand(client *c) {$/;"	f	typeref:typename:void
exitFromChild	src/server.c	/^void exitFromChild(int retcode) {$/;"	f	typeref:typename:void
exitted_with_code	tests/modules/fork.c	/^int exitted_with_code = -1;$/;"	v	typeref:typename:int
exp1	deps/lua/src/lparser.c	/^static int exp1 (LexState *ls) {$/;"	f	typeref:typename:int	file:
exp2reg	deps/lua/src/lcode.c	/^static void exp2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	typeref:typename:void	file:
expandAllowed	src/dict.h	/^    int (*expandAllowed)(size_t moreMem, double usedRatio);$/;"	m	struct:dictType	typeref:typename:int (*)(size_t moreMem,double usedRatio)
expandProcTitleTemplate	src/server.c	/^static sds expandProcTitleTemplate(const char *template, const char *title) {$/;"	f	typeref:typename:sds	file:
expdesc	deps/lua/src/lparser.h	/^typedef struct expdesc {$/;"	s
expdesc	deps/lua/src/lparser.h	/^} expdesc;$/;"	t	typeref:struct:expdesc
expect	src/lzf_c.c	/^# define expect(/;"	d	file:
expect_false	src/lzf_c.c	/^#define expect_false(/;"	d	file:
expect_no_logging	deps/jemalloc/test/unit/log.c	/^expect_no_logging(const char *names) {$/;"	f	typeref:typename:void	file:
expect_true	src/lzf_c.c	/^#define expect_true(/;"	d	file:
expected_errno	deps/jemalloc/test/unit/malloc_io.c	/^		int expected_errno;$/;"	m	struct:TEST_BEGIN::test_s	typeref:typename:int	file:
expected_errno_name	deps/jemalloc/test/unit/malloc_io.c	/^		const char *expected_errno_name;$/;"	m	struct:TEST_BEGIN::test_s	typeref:typename:const char *	file:
expected_remainder	deps/jemalloc/test/unit/malloc_io.c	/^		const char *expected_remainder;$/;"	m	struct:TEST_BEGIN::test_s	typeref:typename:const char *	file:
expected_x	deps/jemalloc/test/unit/malloc_io.c	/^		uintmax_t expected_x;$/;"	m	struct:TEST_BEGIN::test_s	typeref:typename:uintmax_t	file:
expireCommand	src/expire.c	/^void expireCommand(client *c) {$/;"	f	typeref:typename:void
expireCommand	src/server.h	/^                        *expireCommand, *pexpireCommand, *xclaimCommand,$/;"	m	struct:redisServer	typeref:struct:redisCommand **********
expireGenericCommand	src/expire.c	/^void expireGenericCommand(client *c, long long basetime, int unit) {$/;"	f	typeref:typename:void
expireIfNeeded	src/db.c	/^int expireIfNeeded(redisDb *db, robj *key) {$/;"	f	typeref:typename:int
expireSlaveKeys	src/expire.c	/^void expireSlaveKeys(void) {$/;"	f	typeref:typename:void
expireatCommand	src/expire.c	/^void expireatCommand(client *c) {$/;"	f	typeref:typename:void
expired	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	bool			expired;$/;"	m	struct:prof_tdata_s	typeref:typename:bool
expires	src/redis-check-rdb.c	/^    unsigned long expires;          \/* Number of keys with an expire. *\/$/;"	m	struct:__anon818955940108	typeref:typename:unsigned long	file:
expires	src/server.h	/^    dict *expires;              \/* Timeout of keys with a timeout set *\/$/;"	m	struct:redisDb	typeref:typename:dict *
expires_cursor	src/server.h	/^    unsigned long expires_cursor; \/* Cursor of the active expire cycle. *\/$/;"	m	struct:redisDb	typeref:typename:unsigned long
expkind	deps/lua/src/lparser.h	/^} expkind;$/;"	t	typeref:enum:__anon581f0db70103
explist1	deps/lua/src/lparser.c	/^static int explist1 (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:int	file:
expr	deps/lua/src/lparser.c	/^static void expr (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
exprstat	deps/lua/src/lparser.c	/^static void exprstat (LexState *ls) {$/;"	f	typeref:typename:void	file:
extent	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	extent_t	extent;$/;"	m	struct:base_block_s	typeref:typename:extent_t
extent_activate_locked	deps/jemalloc/src/extent.c	/^extent_activate_locked(tsdn_t *tsdn, arena_t *arena, extents_t *extents,$/;"	f	typeref:typename:void	file:
extent_ad_comp	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_ad_comp(const extent_t *a, const extent_t *b) {$/;"	f	typeref:typename:int
extent_addr_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_addr_get(const extent_t *extent) {$/;"	f	typeref:typename:void *
extent_addr_randomize	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_addr_randomize(UNUSED tsdn_t *tsdn, extent_t *extent, size_t alignment) {$/;"	f	typeref:typename:void
extent_addr_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_addr_set(extent_t *extent, void *addr) {$/;"	f	typeref:typename:void
extent_alloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_alloc /;"	d
extent_alloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_alloc /;"	d
extent_alloc	deps/jemalloc/src/extent.c	/^extent_alloc(tsdn_t *tsdn, arena_t *arena) {$/;"	f	typeref:typename:extent_t *
extent_alloc_core	deps/jemalloc/src/extent.c	/^extent_alloc_core(tsdn_t *tsdn, arena_t *arena, void *new_addr, size_t size,$/;"	f	typeref:typename:void *	file:
extent_alloc_default	deps/jemalloc/src/extent.c	/^extent_alloc_default(extent_hooks_t *extent_hooks, void *new_addr, size_t size,$/;"	f	typeref:typename:void *	file:
extent_alloc_default_impl	deps/jemalloc/src/extent.c	/^extent_alloc_default_impl(tsdn_t *tsdn, arena_t *arena, void *new_addr,$/;"	f	typeref:typename:void *	file:
extent_alloc_dss	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_alloc_dss /;"	d
extent_alloc_dss	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_alloc_dss /;"	d
extent_alloc_dss	deps/jemalloc/src/extent_dss.c	/^extent_alloc_dss(tsdn_t *tsdn, arena_t *arena, void *new_addr, size_t size,$/;"	f	typeref:typename:void *
extent_alloc_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_alloc_hook(extent_hooks_t *extent_hooks, void *new_addr, size_t size,$/;"	f	typeref:typename:void *
extent_alloc_mmap	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_alloc_mmap /;"	d
extent_alloc_mmap	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_alloc_mmap /;"	d
extent_alloc_mmap	deps/jemalloc/src/extent_mmap.c	/^extent_alloc_mmap(void *new_addr, size_t size, size_t alignment, bool *zero,$/;"	f	typeref:typename:void *
extent_alloc_retained	deps/jemalloc/src/extent.c	/^extent_alloc_retained(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:extent_t *	file:
extent_alloc_t	deps/jemalloc/include/jemalloc/jemalloc.h	/^typedef void *(extent_alloc_t)(extent_hooks_t *, void *, size_t, size_t, bool *,$/;"	t	typeref:typename:void * ()(extent_hooks_t *,void *,size_t,size_t,bool *,bool *,unsigned)
extent_alloc_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef void *(extent_alloc_t)(extent_hooks_t *, void *, size_t, size_t, bool *,$/;"	t	typeref:typename:void * ()(extent_hooks_t *,void *,size_t,size_t,bool *,bool *,unsigned)
extent_alloc_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^typedef void *(extent_alloc_t)(extent_hooks_t *, void *, size_t, size_t, bool *,$/;"	t	typeref:typename:void * ()(extent_hooks_t *,void *,size_t,size_t,bool *,bool *,unsigned)	file:
extent_alloc_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_alloc_wrapper /;"	d
extent_alloc_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_alloc_wrapper /;"	d
extent_alloc_wrapper	deps/jemalloc/src/extent.c	/^extent_alloc_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:extent_t *
extent_alloc_wrapper_hard	deps/jemalloc/src/extent.c	/^extent_alloc_wrapper_hard(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:extent_t *	file:
extent_arena_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_arena_get(const extent_t *extent) {$/;"	f	typeref:typename:arena_t *
extent_arena_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_arena_set(extent_t *extent, arena_t *arena) {$/;"	f	typeref:typename:void
extent_avail	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	extent_tree_t		extent_avail;$/;"	m	struct:arena_s	typeref:typename:extent_tree_t
extent_avail_any	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_avail_any /;"	d
extent_avail_any	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_avail_any /;"	d
extent_avail_empty	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_avail_empty /;"	d
extent_avail_empty	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_avail_empty /;"	d
extent_avail_first	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_avail_first /;"	d
extent_avail_first	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_avail_first /;"	d
extent_avail_insert	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_avail_insert /;"	d
extent_avail_insert	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_avail_insert /;"	d
extent_avail_mtx	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	malloc_mutex_t		extent_avail_mtx;$/;"	m	struct:arena_s	typeref:typename:malloc_mutex_t
extent_avail_new	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_avail_new /;"	d
extent_avail_new	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_avail_new /;"	d
extent_avail_remove	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_avail_remove /;"	d
extent_avail_remove	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_avail_remove /;"	d
extent_avail_remove_any	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_avail_remove_any /;"	d
extent_avail_remove_any	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_avail_remove_any /;"	d
extent_avail_remove_first	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_avail_remove_first /;"	d
extent_avail_remove_first	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_avail_remove_first /;"	d
extent_base_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_base_get(const extent_t *extent) {$/;"	f	typeref:typename:void *
extent_before_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_before_get(const extent_t *extent) {$/;"	f	typeref:typename:void *
extent_binit	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_binit(extent_t *extent, void *addr, size_t bsize, size_t sn) {$/;"	f	typeref:typename:void
extent_boot	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_boot /;"	d
extent_boot	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_boot /;"	d
extent_boot	deps/jemalloc/src/extent.c	/^extent_boot(void) {$/;"	f	typeref:typename:bool
extent_bsize_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_bsize_get(const extent_t *extent) {$/;"	f	typeref:typename:size_t
extent_bsize_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_bsize_set(extent_t *extent, size_t bsize) {$/;"	f	typeref:typename:void
extent_can_coalesce	deps/jemalloc/src/extent.c	/^extent_can_coalesce(arena_t *arena, extents_t *extents, const extent_t *inner,$/;"	f	typeref:typename:bool	file:
extent_coalesce	deps/jemalloc/src/extent.c	/^extent_coalesce(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,$/;"	f	typeref:typename:bool	file:
extent_commit_default	deps/jemalloc/src/extent.c	/^extent_commit_default(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	typeref:typename:bool	file:
extent_commit_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_commit_hook(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	typeref:typename:bool
extent_commit_impl	deps/jemalloc/src/extent.c	/^extent_commit_impl(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:bool	file:
extent_commit_t	deps/jemalloc/include/jemalloc/jemalloc.h	/^typedef bool (extent_commit_t)(extent_hooks_t *, void *, size_t, size_t, size_t,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,size_t,size_t,unsigned)
extent_commit_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef bool (extent_commit_t)(extent_hooks_t *, void *, size_t, size_t, size_t,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,size_t,size_t,unsigned)
extent_commit_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^typedef bool (extent_commit_t)(extent_hooks_t *, void *, size_t, size_t, size_t,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,size_t,size_t,unsigned)	file:
extent_commit_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_commit_wrapper /;"	d
extent_commit_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_commit_wrapper /;"	d
extent_commit_wrapper	deps/jemalloc/src/extent.c	/^extent_commit_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:bool
extent_committed_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_committed_get(const extent_t *extent) {$/;"	f	typeref:typename:bool
extent_committed_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_committed_set(extent_t *extent, bool committed) {$/;"	f	typeref:typename:void
extent_dalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_dalloc /;"	d
extent_dalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_dalloc /;"	d
extent_dalloc	deps/jemalloc/src/extent.c	/^extent_dalloc(tsdn_t *tsdn, arena_t *arena, extent_t *extent) {$/;"	f	typeref:typename:void
extent_dalloc_default	deps/jemalloc/src/extent.c	/^extent_dalloc_default(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	typeref:typename:bool	file:
extent_dalloc_default_impl	deps/jemalloc/src/extent.c	/^extent_dalloc_default_impl(void *addr, size_t size) {$/;"	f	typeref:typename:bool	file:
extent_dalloc_gap	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_dalloc_gap /;"	d
extent_dalloc_gap	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_dalloc_gap /;"	d
extent_dalloc_gap	deps/jemalloc/src/extent.c	/^extent_dalloc_gap(tsdn_t *tsdn, arena_t *arena, extent_t *extent) {$/;"	f	typeref:typename:void
extent_dalloc_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_dalloc_hook(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	typeref:typename:bool
extent_dalloc_mmap	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_dalloc_mmap /;"	d
extent_dalloc_mmap	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_dalloc_mmap /;"	d
extent_dalloc_mmap	deps/jemalloc/src/extent_mmap.c	/^extent_dalloc_mmap(void *addr, size_t size) {$/;"	f	typeref:typename:bool
extent_dalloc_t	deps/jemalloc/include/jemalloc/jemalloc.h	/^typedef bool (extent_dalloc_t)(extent_hooks_t *, void *, size_t, bool,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,bool,unsigned)
extent_dalloc_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef bool (extent_dalloc_t)(extent_hooks_t *, void *, size_t, bool,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,bool,unsigned)
extent_dalloc_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^typedef bool (extent_dalloc_t)(extent_hooks_t *, void *, size_t, bool,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,bool,unsigned)	file:
extent_dalloc_unmap	deps/jemalloc/test/unit/arena_reset.c	/^extent_dalloc_unmap(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	typeref:typename:TEST_END bool	file:
extent_dalloc_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_dalloc_wrapper /;"	d
extent_dalloc_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_dalloc_wrapper /;"	d
extent_dalloc_wrapper	deps/jemalloc/src/extent.c	/^extent_dalloc_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:void
extent_dalloc_wrapper_try	deps/jemalloc/src/extent.c	/^extent_dalloc_wrapper_try(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:bool	file:
extent_deactivate	deps/jemalloc/src/extent.c	/^extent_deactivate(tsdn_t *tsdn, arena_t *arena, extents_t *extents,$/;"	f	typeref:typename:void	file:
extent_deactivate_locked	deps/jemalloc/src/extent.c	/^extent_deactivate_locked(tsdn_t *tsdn, arena_t *arena, extents_t *extents,$/;"	f	typeref:typename:void	file:
extent_decommit_default	deps/jemalloc/src/extent.c	/^extent_decommit_default(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	typeref:typename:bool	file:
extent_decommit_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_decommit_hook(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	typeref:typename:bool
extent_decommit_t	deps/jemalloc/include/jemalloc/jemalloc.h	/^typedef bool (extent_decommit_t)(extent_hooks_t *, void *, size_t, size_t,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,size_t,size_t,unsigned)
extent_decommit_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef bool (extent_decommit_t)(extent_hooks_t *, void *, size_t, size_t,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,size_t,size_t,unsigned)
extent_decommit_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^typedef bool (extent_decommit_t)(extent_hooks_t *, void *, size_t, size_t,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,size_t,size_t,unsigned)	file:
extent_decommit_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_decommit_wrapper /;"	d
extent_decommit_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_decommit_wrapper /;"	d
extent_decommit_wrapper	deps/jemalloc/src/extent.c	/^extent_decommit_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:bool
extent_deregister	deps/jemalloc/src/extent.c	/^extent_deregister(tsdn_t *tsdn, extent_t *extent) {$/;"	f	typeref:typename:void	file:
extent_deregister_impl	deps/jemalloc/src/extent.c	/^extent_deregister_impl(tsdn_t *tsdn, extent_t *extent, bool gdump) {$/;"	f	typeref:typename:void	file:
extent_deregister_no_gdump_sub	deps/jemalloc/src/extent.c	/^extent_deregister_no_gdump_sub(tsdn_t *tsdn, extent_t *extent) {$/;"	f	typeref:typename:void	file:
extent_destroy_default	deps/jemalloc/src/extent.c	/^extent_destroy_default(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	typeref:typename:void	file:
extent_destroy_default_impl	deps/jemalloc/src/extent.c	/^extent_destroy_default_impl(void *addr, size_t size) {$/;"	f	typeref:typename:void	file:
extent_destroy_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_destroy_hook(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	typeref:typename:void
extent_destroy_t	deps/jemalloc/include/jemalloc/jemalloc.h	/^typedef void (extent_destroy_t)(extent_hooks_t *, void *, size_t, bool,$/;"	t	typeref:typename:void ()(extent_hooks_t *,void *,size_t,bool,unsigned)
extent_destroy_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef void (extent_destroy_t)(extent_hooks_t *, void *, size_t, bool,$/;"	t	typeref:typename:void ()(extent_hooks_t *,void *,size_t,bool,unsigned)
extent_destroy_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^typedef void (extent_destroy_t)(extent_hooks_t *, void *, size_t, bool,$/;"	t	typeref:typename:void ()(extent_hooks_t *,void *,size_t,bool,unsigned)	file:
extent_destroy_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_destroy_wrapper /;"	d
extent_destroy_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_destroy_wrapper /;"	d
extent_destroy_wrapper	deps/jemalloc/src/extent.c	/^extent_destroy_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:void
extent_dss_boot	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_dss_boot /;"	d
extent_dss_boot	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_dss_boot /;"	d
extent_dss_boot	deps/jemalloc/src/extent_dss.c	/^extent_dss_boot(void) {$/;"	f	typeref:typename:void
extent_dss_extending_finish	deps/jemalloc/src/extent_dss.c	/^extent_dss_extending_finish(void) {$/;"	f	typeref:typename:void	file:
extent_dss_extending_start	deps/jemalloc/src/extent_dss.c	/^extent_dss_extending_start(void) {$/;"	f	typeref:typename:void	file:
extent_dss_max_update	deps/jemalloc/src/extent_dss.c	/^extent_dss_max_update(void *new_addr) {$/;"	f	typeref:typename:void *	file:
extent_dss_mergeable	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_dss_mergeable /;"	d
extent_dss_mergeable	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_dss_mergeable /;"	d
extent_dss_mergeable	deps/jemalloc/src/extent_dss.c	/^extent_dss_mergeable(void *addr_a, void *addr_b) {$/;"	f	typeref:typename:bool
extent_dss_prec_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_dss_prec_get /;"	d
extent_dss_prec_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_dss_prec_get /;"	d
extent_dss_prec_get	deps/jemalloc/src/extent_dss.c	/^extent_dss_prec_get(void) {$/;"	f	typeref:typename:dss_prec_t
extent_dss_prec_set	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_dss_prec_set /;"	d
extent_dss_prec_set	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_dss_prec_set /;"	d
extent_dss_prec_set	deps/jemalloc/src/extent_dss.c	/^extent_dss_prec_set(dss_prec_t dss_prec) {$/;"	f	typeref:typename:bool
extent_dss_sbrk	deps/jemalloc/src/extent_dss.c	/^extent_dss_sbrk(intptr_t increment) {$/;"	f	typeref:typename:void *	file:
extent_dumpable_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_dumpable_get(const extent_t *extent) {$/;"	f	typeref:typename:bool
extent_dumpable_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_dumpable_set(extent_t *extent, bool dumpable) {$/;"	f	typeref:typename:void
extent_ead_comp	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_ead_comp(const extent_t *a, const extent_t *b) {$/;"	f	typeref:typename:int
extent_esn_comp	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_esn_comp(const extent_t *a, const extent_t *b) {$/;"	f	typeref:typename:int
extent_esn_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_esn_get(const extent_t *extent) {$/;"	f	typeref:typename:size_t
extent_esn_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_esn_set(extent_t *extent, size_t esn) {$/;"	f	typeref:typename:void
extent_esnead_comp	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_esnead_comp(const extent_t *a, const extent_t *b) {$/;"	f	typeref:typename:int
extent_gdump_add	deps/jemalloc/src/extent.c	/^extent_gdump_add(tsdn_t *tsdn, const extent_t *extent) {$/;"	f	typeref:typename:void	file:
extent_gdump_sub	deps/jemalloc/src/extent.c	/^extent_gdump_sub(tsdn_t *tsdn, const extent_t *extent) {$/;"	f	typeref:typename:void	file:
extent_grow_mtx	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	malloc_mutex_t		extent_grow_mtx;$/;"	m	struct:arena_s	typeref:typename:malloc_mutex_t
extent_grow_next	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	pszind_t		extent_grow_next;$/;"	m	struct:arena_s	typeref:typename:pszind_t
extent_grow_retained	deps/jemalloc/src/extent.c	/^extent_grow_retained(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:extent_t *	file:
extent_heap_any	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_heap_any /;"	d
extent_heap_any	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_heap_any /;"	d
extent_heap_empty	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_heap_empty /;"	d
extent_heap_empty	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_heap_empty /;"	d
extent_heap_first	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_heap_first /;"	d
extent_heap_first	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_heap_first /;"	d
extent_heap_insert	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_heap_insert /;"	d
extent_heap_insert	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_heap_insert /;"	d
extent_heap_new	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_heap_new /;"	d
extent_heap_new	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_heap_new /;"	d
extent_heap_remove	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_heap_remove /;"	d
extent_heap_remove	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_heap_remove /;"	d
extent_heap_remove_any	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_heap_remove_any /;"	d
extent_heap_remove_any	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_heap_remove_any /;"	d
extent_heap_remove_first	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_heap_remove_first /;"	d
extent_heap_remove_first	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_heap_remove_first /;"	d
extent_heap_t	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^typedef ph(extent_t) extent_heap_t;$/;"	t
extent_hook_post_reentrancy	deps/jemalloc/src/extent.c	/^extent_hook_post_reentrancy(tsdn_t *tsdn) {$/;"	f	typeref:typename:void	file:
extent_hook_pre_reentrancy	deps/jemalloc/src/extent.c	/^extent_hook_pre_reentrancy(tsdn_t *tsdn, arena_t *arena) {$/;"	f	typeref:typename:void	file:
extent_hooks	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	atomic_p_t	extent_hooks;$/;"	m	struct:base_s	typeref:typename:atomic_p_t
extent_hooks_assure_initialized	deps/jemalloc/src/extent.c	/^extent_hooks_assure_initialized(arena_t *arena,$/;"	f	typeref:typename:void	file:
extent_hooks_default	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_hooks_default /;"	d
extent_hooks_default	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_hooks_default /;"	d
extent_hooks_default	deps/jemalloc/src/extent.c	/^const extent_hooks_t	extent_hooks_default = {$/;"	v	typeref:typename:const extent_hooks_t
extent_hooks_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_hooks_get /;"	d
extent_hooks_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_hooks_get /;"	d
extent_hooks_get	deps/jemalloc/src/extent.c	/^extent_hooks_get(arena_t *arena) {$/;"	f	typeref:typename:extent_hooks_t *
extent_hooks_prep	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_hooks_prep(void) {$/;"	f	typeref:typename:void
extent_hooks_s	deps/jemalloc/include/jemalloc/jemalloc.h	/^struct extent_hooks_s {$/;"	s
extent_hooks_s	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^struct extent_hooks_s {$/;"	s
extent_hooks_s	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^struct extent_hooks_s {$/;"	s	file:
extent_hooks_set	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_hooks_set /;"	d
extent_hooks_set	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_hooks_set /;"	d
extent_hooks_set	deps/jemalloc/src/extent.c	/^extent_hooks_set(tsd_t *tsd, arena_t *arena, extent_hooks_t *extent_hooks) {$/;"	f	typeref:typename:extent_hooks_t *
extent_hooks_t	deps/jemalloc/include/jemalloc/jemalloc.h	/^typedef struct extent_hooks_s extent_hooks_t;$/;"	t	typeref:struct:extent_hooks_s
extent_hooks_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef struct extent_hooks_s extent_hooks_t;$/;"	t	typeref:struct:extent_hooks_s
extent_hooks_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^typedef struct extent_hooks_s extent_hooks_t;$/;"	t	typeref:struct:extent_hooks_s	file:
extent_in_dss	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_in_dss /;"	d
extent_in_dss	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_in_dss /;"	d
extent_in_dss	deps/jemalloc/src/extent_dss.c	/^extent_in_dss(void *addr) {$/;"	f	typeref:typename:bool
extent_in_dss_helper	deps/jemalloc/src/extent_dss.c	/^extent_in_dss_helper(void *addr, void *max) {$/;"	f	typeref:typename:bool	file:
extent_init	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_init(extent_t *extent, arena_t *arena, void *addr, size_t size,$/;"	f	typeref:typename:void
extent_interior_deregister	deps/jemalloc/src/extent.c	/^extent_interior_deregister(tsdn_t *tsdn, rtree_ctx_t *rtree_ctx,$/;"	f	typeref:typename:void	file:
extent_interior_register	deps/jemalloc/src/extent.c	/^extent_interior_register(tsdn_t *tsdn, rtree_ctx_t *rtree_ctx, extent_t *extent,$/;"	f	typeref:typename:void	file:
extent_last_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_last_get(const extent_t *extent) {$/;"	f	typeref:typename:void *
extent_list_append	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_list_append(extent_list_t *list, extent_t *extent) {$/;"	f	typeref:typename:void
extent_list_first	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_list_first(const extent_list_t *list) {$/;"	f	typeref:typename:extent_t *
extent_list_init	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_list_init(extent_list_t *list) {$/;"	f	typeref:typename:void
extent_list_last	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_list_last(const extent_list_t *list) {$/;"	f	typeref:typename:extent_t *
extent_list_prepend	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_list_prepend(extent_list_t *list, extent_t *extent) {$/;"	f	typeref:typename:void
extent_list_remove	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_list_remove(extent_list_t *list, extent_t *extent) {$/;"	f	typeref:typename:void
extent_list_replace	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_list_replace(extent_list_t *list, extent_t *to_remove,$/;"	f	typeref:typename:void
extent_list_t	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^typedef ql_head(extent_t) extent_list_t;$/;"	t
extent_lock	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_lock(tsdn_t *tsdn, extent_t *extent) {$/;"	f	typeref:typename:void
extent_lock2	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_lock2(tsdn_t *tsdn, extent_t *extent1, extent_t *extent2) {$/;"	f	typeref:typename:void
extent_lock_from_addr	deps/jemalloc/src/extent.c	/^extent_lock_from_addr(tsdn_t *tsdn, rtree_ctx_t *rtree_ctx, void *addr) {$/;"	f	typeref:typename:extent_t *	file:
extent_merge_default	deps/jemalloc/src/extent.c	/^extent_merge_default(extent_hooks_t *extent_hooks, void *addr_a, size_t size_a,$/;"	f	typeref:typename:bool	file:
extent_merge_default_impl	deps/jemalloc/src/extent.c	/^extent_merge_default_impl(void *addr_a, void *addr_b) {$/;"	f	typeref:typename:bool	file:
extent_merge_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_merge_hook(extent_hooks_t *extent_hooks, void *addr_a, size_t size_a,$/;"	f	typeref:typename:bool
extent_merge_impl	deps/jemalloc/src/extent.c	/^extent_merge_impl(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:bool	file:
extent_merge_t	deps/jemalloc/include/jemalloc/jemalloc.h	/^typedef bool (extent_merge_t)(extent_hooks_t *, void *, size_t, void *, size_t,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,void *,size_t,bool,unsigned)
extent_merge_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef bool (extent_merge_t)(extent_hooks_t *, void *, size_t, void *, size_t,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,void *,size_t,bool,unsigned)
extent_merge_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^typedef bool (extent_merge_t)(extent_hooks_t *, void *, size_t, void *, size_t,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,void *,size_t,bool,unsigned)	file:
extent_merge_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_merge_wrapper /;"	d
extent_merge_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_merge_wrapper /;"	d
extent_merge_wrapper	deps/jemalloc/src/extent.c	/^extent_merge_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:bool
extent_mutex_pool	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_mutex_pool /;"	d
extent_mutex_pool	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_mutex_pool /;"	d
extent_mutex_pool	deps/jemalloc/src/extent.c	/^mutex_pool_t	extent_mutex_pool;$/;"	v	typeref:typename:mutex_pool_t
extent_nfree_dec	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_nfree_dec(extent_t *extent) {$/;"	f	typeref:typename:void
extent_nfree_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_nfree_get(const extent_t *extent) {$/;"	f	typeref:typename:unsigned
extent_nfree_inc	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_nfree_inc(extent_t *extent) {$/;"	f	typeref:typename:void
extent_nfree_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_nfree_set(extent_t *extent, unsigned nfree) {$/;"	f	typeref:typename:void
extent_past_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_past_get(const extent_t *extent) {$/;"	f	typeref:typename:void *
extent_prof_tctx_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_prof_tctx_get(const extent_t *extent) {$/;"	f	typeref:typename:prof_tctx_t *
extent_prof_tctx_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_prof_tctx_set(extent_t *extent, prof_tctx_t *tctx) {$/;"	f	typeref:typename:void
extent_purge_forced_default	deps/jemalloc/src/extent.c	/^extent_purge_forced_default(extent_hooks_t *extent_hooks, void *addr,$/;"	f	typeref:typename:bool	file:
extent_purge_forced_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_purge_forced_hook(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	typeref:typename:bool
extent_purge_forced_impl	deps/jemalloc/src/extent.c	/^extent_purge_forced_impl(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:bool	file:
extent_purge_forced_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_purge_forced_wrapper /;"	d
extent_purge_forced_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_purge_forced_wrapper /;"	d
extent_purge_forced_wrapper	deps/jemalloc/src/extent.c	/^extent_purge_forced_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:bool
extent_purge_lazy_default	deps/jemalloc/src/extent.c	/^extent_purge_lazy_default(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	typeref:typename:bool	file:
extent_purge_lazy_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_purge_lazy_hook(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	typeref:typename:bool
extent_purge_lazy_impl	deps/jemalloc/src/extent.c	/^extent_purge_lazy_impl(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:bool	file:
extent_purge_lazy_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_purge_lazy_wrapper /;"	d
extent_purge_lazy_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_purge_lazy_wrapper /;"	d
extent_purge_lazy_wrapper	deps/jemalloc/src/extent.c	/^extent_purge_lazy_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:bool
extent_purge_t	deps/jemalloc/include/jemalloc/jemalloc.h	/^typedef bool (extent_purge_t)(extent_hooks_t *, void *, size_t, size_t, size_t,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,size_t,size_t,unsigned)
extent_purge_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef bool (extent_purge_t)(extent_hooks_t *, void *, size_t, size_t, size_t,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,size_t,size_t,unsigned)
extent_purge_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^typedef bool (extent_purge_t)(extent_hooks_t *, void *, size_t, size_t, size_t,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,size_t,size_t,unsigned)	file:
extent_record	deps/jemalloc/src/extent.c	/^extent_record(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,$/;"	f	typeref:typename:void	file:
extent_recycle	deps/jemalloc/src/extent.c	/^extent_recycle(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,$/;"	f	typeref:typename:extent_t *	file:
extent_recycle_extract	deps/jemalloc/src/extent.c	/^extent_recycle_extract(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:extent_t *	file:
extent_recycle_split	deps/jemalloc/src/extent.c	/^extent_recycle_split(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:extent_t *	file:
extent_register	deps/jemalloc/src/extent.c	/^extent_register(tsdn_t *tsdn, extent_t *extent) {$/;"	f	typeref:typename:bool	file:
extent_register_impl	deps/jemalloc/src/extent.c	/^extent_register_impl(tsdn_t *tsdn, extent_t *extent, bool gdump_add) {$/;"	f	typeref:typename:bool	file:
extent_register_no_gdump_add	deps/jemalloc/src/extent.c	/^extent_register_no_gdump_add(tsdn_t *tsdn, extent_t *extent) {$/;"	f	typeref:typename:bool	file:
extent_reregister	deps/jemalloc/src/extent.c	/^extent_reregister(tsdn_t *tsdn, extent_t *extent) {$/;"	f	typeref:typename:void	file:
extent_rtree_leaf_elm_try_lock	deps/jemalloc/src/extent.c	/^extent_rtree_leaf_elm_try_lock(tsdn_t *tsdn, rtree_leaf_elm_t *elm,$/;"	f	typeref:typename:lock_result_t	file:
extent_rtree_leaf_elms_lookup	deps/jemalloc/src/extent.c	/^extent_rtree_leaf_elms_lookup(tsdn_t *tsdn, rtree_ctx_t *rtree_ctx,$/;"	f	typeref:typename:bool	file:
extent_rtree_write_acquired	deps/jemalloc/src/extent.c	/^extent_rtree_write_acquired(tsdn_t *tsdn, rtree_leaf_elm_t *elm_a,$/;"	f	typeref:typename:void	file:
extent_s	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^struct extent_s {$/;"	s
extent_size_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_size_get(const extent_t *extent) {$/;"	f	typeref:typename:size_t
extent_size_quantize_ceil	deps/jemalloc/src/extent.c	/^extent_size_quantize_ceil(size_t size) {$/;"	f	typeref:typename:size_t	file:
extent_size_quantize_floor	deps/jemalloc/src/extent.c	/^extent_size_quantize_floor(size_t size) {$/;"	f	typeref:typename:size_t	file:
extent_size_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_size_set(extent_t *extent, size_t size) {$/;"	f	typeref:typename:void
extent_slab_data_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_slab_data_get(extent_t *extent) {$/;"	f	typeref:typename:arena_slab_data_t *
extent_slab_data_get_const	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_slab_data_get_const(const extent_t *extent) {$/;"	f	typeref:typename:const arena_slab_data_t *
extent_slab_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_slab_get(const extent_t *extent) {$/;"	f	typeref:typename:bool
extent_slab_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_slab_set(extent_t *extent, bool slab) {$/;"	f	typeref:typename:void
extent_sn_comp	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_sn_comp(const extent_t *a, const extent_t *b) {$/;"	f	typeref:typename:int
extent_sn_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_sn_get(const extent_t *extent) {$/;"	f	typeref:typename:size_t
extent_sn_next	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	atomic_zu_t		extent_sn_next;$/;"	m	struct:arena_s	typeref:typename:atomic_zu_t
extent_sn_next	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	size_t		extent_sn_next;$/;"	m	struct:base_s	typeref:typename:size_t
extent_sn_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_sn_set(extent_t *extent, size_t sn) {$/;"	f	typeref:typename:void
extent_snad_comp	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_snad_comp(const extent_t *a, const extent_t *b) {$/;"	f	typeref:typename:int
extent_split_default	deps/jemalloc/src/extent.c	/^extent_split_default(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	typeref:typename:bool	file:
extent_split_hook	deps/jemalloc/test/include/test/extent_hooks.h	/^extent_split_hook(extent_hooks_t *extent_hooks, void *addr, size_t size,$/;"	f	typeref:typename:bool
extent_split_impl	deps/jemalloc/src/extent.c	/^extent_split_impl(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:extent_t *	file:
extent_split_interior	deps/jemalloc/src/extent.c	/^extent_split_interior(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:extent_split_interior_result_t	file:
extent_split_interior_cant_alloc	deps/jemalloc/src/extent.c	/^	extent_split_interior_cant_alloc,$/;"	e	enum:__anond8df51160203	file:
extent_split_interior_error	deps/jemalloc/src/extent.c	/^	extent_split_interior_error$/;"	e	enum:__anond8df51160203	file:
extent_split_interior_ok	deps/jemalloc/src/extent.c	/^	extent_split_interior_ok,$/;"	e	enum:__anond8df51160203	file:
extent_split_interior_result_t	deps/jemalloc/src/extent.c	/^} extent_split_interior_result_t;$/;"	t	typeref:enum:__anond8df51160203	file:
extent_split_t	deps/jemalloc/include/jemalloc/jemalloc.h	/^typedef bool (extent_split_t)(extent_hooks_t *, void *, size_t, size_t, size_t,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,size_t,size_t,bool,unsigned)
extent_split_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^typedef bool (extent_split_t)(extent_hooks_t *, void *, size_t, size_t, size_t,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,size_t,size_t,bool,unsigned)
extent_split_t	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^typedef bool (extent_split_t)(extent_hooks_t *, void *, size_t, size_t, size_t,$/;"	t	typeref:typename:bool ()(extent_hooks_t *,void *,size_t,size_t,size_t,bool,unsigned)	file:
extent_split_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extent_split_wrapper /;"	d
extent_split_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extent_split_wrapper /;"	d
extent_split_wrapper	deps/jemalloc/src/extent.c	/^extent_split_wrapper(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:extent_t *
extent_state_active	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	extent_state_active   = 0,$/;"	e	enum:__anon0fd28c700103
extent_state_dirty	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	extent_state_dirty    = 1,$/;"	e	enum:__anon0fd28c700103
extent_state_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_state_get(const extent_t *extent) {$/;"	f	typeref:typename:extent_state_t
extent_state_muzzy	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	extent_state_muzzy    = 2,$/;"	e	enum:__anon0fd28c700103
extent_state_retained	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	extent_state_retained = 3$/;"	e	enum:__anon0fd28c700103
extent_state_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_state_set(extent_t *extent, extent_state_t state) {$/;"	f	typeref:typename:void
extent_state_t	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^} extent_state_t;$/;"	t	typeref:enum:__anon0fd28c700103
extent_szind_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_szind_get(const extent_t *extent) {$/;"	f	typeref:typename:szind_t
extent_szind_get_maybe_invalid	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_szind_get_maybe_invalid(const extent_t *extent) {$/;"	f	typeref:typename:szind_t
extent_szind_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_szind_set(extent_t *extent, szind_t szind) {$/;"	f	typeref:typename:void
extent_t	deps/jemalloc/include/jemalloc/internal/extent_types.h	/^typedef struct extent_s extent_t;$/;"	t	typeref:struct:extent_s
extent_tree_t	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^typedef ph(extent_t) extent_tree_t;$/;"	t
extent_try_coalesce	deps/jemalloc/src/extent.c	/^extent_try_coalesce(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:extent_t *	file:
extent_try_delayed_coalesce	deps/jemalloc/src/extent.c	/^extent_try_delayed_coalesce(tsdn_t *tsdn, arena_t *arena,$/;"	f	typeref:typename:bool	file:
extent_unlock	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_unlock(tsdn_t *tsdn, extent_t *extent) {$/;"	f	typeref:typename:void
extent_unlock2	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_unlock2(tsdn_t *tsdn, extent_t *extent1, extent_t *extent2) {$/;"	f	typeref:typename:void
extent_usize_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_usize_get(const extent_t *extent) {$/;"	f	typeref:typename:size_t
extent_zeroed_get	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_zeroed_get(const extent_t *extent) {$/;"	f	typeref:typename:bool
extent_zeroed_set	deps/jemalloc/include/jemalloc/internal/extent_inlines.h	/^extent_zeroed_set(extent_t *extent, bool zeroed) {$/;"	f	typeref:typename:void
extents_alloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extents_alloc /;"	d
extents_alloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extents_alloc /;"	d
extents_alloc	deps/jemalloc/src/extent.c	/^extents_alloc(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,$/;"	f	typeref:typename:extent_t *
extents_best_fit_locked	deps/jemalloc/src/extent.c	/^extents_best_fit_locked(tsdn_t *tsdn, arena_t *arena, extents_t *extents,$/;"	f	typeref:typename:extent_t *	file:
extents_bitmap_info	deps/jemalloc/src/extent.c	/^static const bitmap_info_t extents_bitmap_info =$/;"	v	typeref:typename:const bitmap_info_t	file:
extents_dalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extents_dalloc /;"	d
extents_dalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extents_dalloc /;"	d
extents_dalloc	deps/jemalloc/src/extent.c	/^extents_dalloc(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,$/;"	f	typeref:typename:void
extents_dirty	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	extents_t		extents_dirty;$/;"	m	struct:arena_s	typeref:typename:extents_t
extents_evict	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extents_evict /;"	d
extents_evict	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extents_evict /;"	d
extents_evict	deps/jemalloc/src/extent.c	/^extents_evict(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,$/;"	f	typeref:typename:extent_t *
extents_first_fit_locked	deps/jemalloc/src/extent.c	/^extents_first_fit_locked(tsdn_t *tsdn, arena_t *arena, extents_t *extents,$/;"	f	typeref:typename:extent_t *	file:
extents_fit_alignment	deps/jemalloc/src/extent.c	/^extents_fit_alignment(extents_t *extents, size_t min_size, size_t max_size,$/;"	f	typeref:typename:extent_t *	file:
extents_fit_locked	deps/jemalloc/src/extent.c	/^extents_fit_locked(tsdn_t *tsdn, arena_t *arena, extents_t *extents,$/;"	f	typeref:typename:extent_t *	file:
extents_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extents_init /;"	d
extents_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extents_init /;"	d
extents_insert_locked	deps/jemalloc/src/extent.c	/^extents_insert_locked(tsdn_t *tsdn, extents_t *extents, extent_t *extent) {$/;"	f	typeref:typename:void	file:
extents_leak	deps/jemalloc/src/extent.c	/^extents_leak(tsdn_t *tsdn, arena_t *arena, extent_hooks_t **r_extent_hooks,$/;"	f	typeref:typename:void	file:
extents_muzzy	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	extents_t		extents_muzzy;$/;"	m	struct:arena_s	typeref:typename:extents_t
extents_npages_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extents_npages_get /;"	d
extents_npages_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extents_npages_get /;"	d
extents_npages_get	deps/jemalloc/src/extent.c	/^extents_npages_get(extents_t *extents) {$/;"	f	typeref:typename:size_t
extents_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extents_postfork_child /;"	d
extents_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extents_postfork_child /;"	d
extents_postfork_child	deps/jemalloc/src/extent.c	/^extents_postfork_child(tsdn_t *tsdn, extents_t *extents) {$/;"	f	typeref:typename:void
extents_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extents_postfork_parent /;"	d
extents_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extents_postfork_parent /;"	d
extents_postfork_parent	deps/jemalloc/src/extent.c	/^extents_postfork_parent(tsdn_t *tsdn, extents_t *extents) {$/;"	f	typeref:typename:void
extents_prefork	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extents_prefork /;"	d
extents_prefork	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extents_prefork /;"	d
extents_prefork	deps/jemalloc/src/extent.c	/^extents_prefork(tsdn_t *tsdn, extents_t *extents) {$/;"	f	typeref:typename:void
extents_remove_locked	deps/jemalloc/src/extent.c	/^extents_remove_locked(tsdn_t *tsdn, extents_t *extents, extent_t *extent) {$/;"	f	typeref:typename:void	file:
extents_retained	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	extents_t		extents_retained;$/;"	m	struct:arena_s	typeref:typename:extents_t
extents_rtree	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extents_rtree /;"	d
extents_rtree	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extents_rtree /;"	d
extents_rtree	deps/jemalloc/src/extent.c	/^rtree_t		extents_rtree;$/;"	v	typeref:typename:rtree_t
extents_s	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^struct extents_s {$/;"	s
extents_state_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define extents_state_get /;"	d
extents_state_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define extents_state_get /;"	d
extents_state_get	deps/jemalloc/src/extent.c	/^extents_state_get(const extents_t *extents) {$/;"	f	typeref:typename:extent_state_t
extents_t	deps/jemalloc/include/jemalloc/internal/extent_types.h	/^typedef struct extents_s extents_t;$/;"	t	typeref:struct:extents_s
extra	src/quicklist.h	/^    unsigned int extra : 10; \/* more bits to steal for future usage *\/$/;"	m	struct:quicklistNode	typeref:typename:unsigned int:10
extractBoxOrReply	src/geo.c	/^int extractBoxOrReply(client *c, robj **argv, double *conversion,$/;"	f	typeref:typename:int
extractDistanceOrReply	src/geo.c	/^int extractDistanceOrReply(client *c, robj **argv,$/;"	f	typeref:typename:int
extractLongLatOrReply	src/geo.c	/^int extractLongLatOrReply(client *c, robj **argv, double *xy) {$/;"	f	typeref:typename:int
extractUnitOrReply	src/geo.c	/^double extractUnitOrReply(client *c, robj *unit) {$/;"	f	typeref:typename:double
extraline	deps/lua/src/lauxlib.c	/^  int extraline;$/;"	m	struct:LoadF	typeref:typename:int	file:
f	deps/lua/src/lauxlib.c	/^  FILE *f;$/;"	m	struct:LoadF	typeref:typename:FILE *	file:
f	deps/lua/src/lobject.h	/^  lua_CFunction f;$/;"	m	struct:CClosure	typeref:typename:lua_CFunction
f	deps/lua/src/lparser.h	/^  Proto *f;  \/* current function header *\/$/;"	m	struct:FuncState	typeref:typename:Proto *
f	deps/lua/src/lparser.h	/^  int f;  \/* patch list of `exit when false' *\/$/;"	m	struct:expdesc	typeref:typename:int
f_Ccall	deps/lua/src/lapi.c	/^static void f_Ccall (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
f_call	deps/lua/src/lapi.c	/^static void f_call (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
f_flush	deps/lua/src/liolib.c	/^static int f_flush (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_isLua	deps/lua/src/lstate.h	/^#define f_isLua(/;"	d
f_lines	deps/lua/src/liolib.c	/^static int f_lines (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_luaopen	deps/lua/src/lstate.c	/^static void f_luaopen (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
f_parser	deps/lua/src/ldo.c	/^static void f_parser (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
f_read	deps/lua/src/liolib.c	/^static int f_read (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_seek	deps/lua/src/liolib.c	/^static int f_seek (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_setvbuf	deps/lua/src/liolib.c	/^static int f_setvbuf (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_write	deps/lua/src/liolib.c	/^static int f_write (lua_State *L) {$/;"	f	typeref:typename:int	file:
factorial	deps/jemalloc/test/unit/math.c	/^factorial(unsigned x) {$/;"	f	typeref:typename:uint64_t	file:
fail	src/cluster.h	/^    } fail;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon2cc7db540708
failTest	tests/modules/basics.c	/^int failTest(RedisModuleCtx *ctx, const char *msg) {$/;"	f	typeref:typename:int
fail_reports	src/cluster.h	/^    list *fail_reports;         \/* List of nodes signaling this as failing *\/$/;"	m	struct:clusterNode	typeref:typename:list *
fail_time	src/cluster.h	/^    mstime_t fail_time;      \/* Unix time when FAIL flag was set *\/$/;"	m	struct:clusterNode	typeref:typename:mstime_t
failed	src/server.c	/^    int failed;$/;"	m	struct:redisTest	typeref:typename:int	file:
failed_calls	src/server.h	/^    long long microseconds, calls, rejected_calls, failed_calls;$/;"	m	struct:redisCommand	typeref:typename:long long
failoverCommand	src/replication.c	/^void failoverCommand(client *c) {$/;"	f	typeref:typename:void
failover_auth_count	src/cluster.h	/^    int failover_auth_count;    \/* Number of votes received so far. *\/$/;"	m	struct:clusterState	typeref:typename:int
failover_auth_epoch	src/cluster.h	/^    uint64_t failover_auth_epoch; \/* Epoch of the current election. *\/$/;"	m	struct:clusterState	typeref:typename:uint64_t
failover_auth_rank	src/cluster.h	/^    int failover_auth_rank;     \/* This slave rank for current auth request. *\/$/;"	m	struct:clusterState	typeref:typename:int
failover_auth_sent	src/cluster.h	/^    int failover_auth_sent;     \/* True if we already asked for votes. *\/$/;"	m	struct:clusterState	typeref:typename:int
failover_auth_time	src/cluster.h	/^    mstime_t failover_auth_time; \/* Time of previous or next election. *\/$/;"	m	struct:clusterState	typeref:typename:mstime_t
failover_delay_logged	src/sentinel.c	/^    mstime_t failover_delay_logged; \/* For what failover_start_time value we$/;"	m	struct:sentinelRedisInstance	typeref:typename:mstime_t	file:
failover_end_time	src/server.h	/^    mstime_t failover_end_time; \/* Deadline for failover command. *\/$/;"	m	struct:redisServer	typeref:typename:mstime_t
failover_epoch	src/sentinel.c	/^    uint64_t failover_epoch; \/* Epoch of the currently started failover. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:uint64_t	file:
failover_start_time	src/sentinel.c	/^    mstime_t failover_start_time;   \/* Last failover attempt start time. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:mstime_t	file:
failover_state	src/sentinel.c	/^    int failover_state; \/* See SENTINEL_FAILOVER_STATE_* defines. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:int	file:
failover_state	src/server.h	/^    int failover_state; \/* Failover state *\/$/;"	m	struct:redisServer	typeref:typename:int
failover_state	src/server.h	/^} failover_state;$/;"	t	typeref:enum:__anon3ef696e90203
failover_state_change_time	src/sentinel.c	/^    mstime_t failover_state_change_time;$/;"	m	struct:sentinelRedisInstance	typeref:typename:mstime_t	file:
failover_timeout	src/sentinel.c	/^    mstime_t failover_timeout;      \/* Max time to refresh failover state. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:mstime_t	file:
fails	deps/hiredis/test.c	/^static int tests = 0, fails = 0, skips = 0;$/;"	v	typeref:typename:int	file:
false	deps/jemalloc/include/msvc_compat/C99/stdbool.h	/^#define false /;"	d
fasttm	deps/lua/src/ltm.h	/^#define fasttm(/;"	d
fatal	deps/lua/src/luac.c	/^static void fatal(const char* message)$/;"	f	typeref:typename:void	file:
fd	deps/hiredis/adapters/ae.h	/^    int fd;$/;"	m	struct:redisAeEvents	typeref:typename:int
fd	deps/hiredis/adapters/ivykis.h	/^    struct iv_fd fd;$/;"	m	struct:redisIvykisEvents	typeref:struct:iv_fd
fd	deps/hiredis/hiredis.h	/^        redisFD fd;$/;"	m	union:__anon7daed6b50108::__anon7daed6b5020a	typeref:typename:redisFD
fd	deps/hiredis/hiredis.h	/^    redisFD fd;$/;"	m	struct:redisContext	typeref:typename:redisFD
fd	src/ae.h	/^    int fd;$/;"	m	struct:aeFiredEvent	typeref:typename:int
fd	src/bio.c	/^    int fd; \/* Fd for file based background jobs *\/$/;"	m	struct:bio_job	typeref:typename:int	file:
fd	src/connection.h	/^    int fd;$/;"	m	struct:connection	typeref:typename:int
fd	src/rio.h	/^            int fd;       \/* File descriptor. *\/$/;"	m	struct:_rio::__anonb6066a3c010a::__anonb6066a3c0508	typeref:typename:int
fd	src/rio.h	/^        } fd;$/;"	m	union:_rio::__anonb6066a3c010a	typeref:struct:_rio::__anonb6066a3c010a::__anonb6066a3c0508
fd	src/sentinel.c	/^    int fd;$/;"	m	struct:redisAeEvents	typeref:typename:int	file:
fd	src/server.h	/^    int fd[CONFIG_BINDADDR_MAX];$/;"	m	struct:socketFds	typeref:typename:int[]
feedAppendOnlyFile	src/aof.c	/^void feedAppendOnlyFile(struct redisCommand *cmd, int dictid, robj **argv, int argc) {$/;"	f	typeref:typename:void
feedReplicationBacklog	src/replication.c	/^void feedReplicationBacklog(void *ptr, size_t len) {$/;"	f	typeref:typename:void
feedReplicationBacklogWithObject	src/replication.c	/^void feedReplicationBacklogWithObject(robj *o) {$/;"	f	typeref:typename:void
fetchClusterConfiguration	src/redis-benchmark.c	/^static int fetchClusterConfiguration() {$/;"	f	typeref:typename:int	file:
fetchClusterSlotsConfiguration	src/redis-benchmark.c	/^static int fetchClusterSlotsConfiguration(client c) {$/;"	f	typeref:typename:int	file:
ffs	deps/jemalloc/include/msvc_compat/strings.h	/^#  define ffs(/;"	d
ffs	deps/jemalloc/include/msvc_compat/strings.h	/^static __forceinline int ffs(int x) {$/;"	f	typeref:typename:int
ffs_llu	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^ffs_llu(unsigned long long bitmap) {$/;"	f	typeref:typename:BIT_UTIL_INLINE unsigned
ffs_lu	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^ffs_lu(unsigned long bitmap) {$/;"	f	typeref:typename:BIT_UTIL_INLINE unsigned
ffs_u	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^ffs_u(unsigned bitmap) {$/;"	f	typeref:typename:BIT_UTIL_INLINE unsigned
ffs_u32	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^ffs_u32(uint32_t bitmap) {$/;"	f	typeref:typename:BIT_UTIL_INLINE unsigned
ffs_u64	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^ffs_u64(uint64_t bitmap) {$/;"	f	typeref:typename:BIT_UTIL_INLINE unsigned
ffs_zu	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^ffs_zu(size_t bitmap) {$/;"	f	typeref:typename:BIT_UTIL_INLINE unsigned
ffsl	deps/jemalloc/include/msvc_compat/strings.h	/^#  define ffsl(/;"	d
ffsl	deps/jemalloc/include/msvc_compat/strings.h	/^static __forceinline int ffsl(long x) {$/;"	f	typeref:typename:int
ffsll	deps/jemalloc/include/msvc_compat/strings.h	/^#  define ffsll(/;"	d
ffsll	deps/jemalloc/include/msvc_compat/strings.h	/^static __forceinline int ffsll(unsigned __int64 x) {$/;"	f	typeref:typename:int
field	deps/lua/src/lparser.c	/^static void field (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
field_buf	src/stream.h	/^    unsigned char field_buf[LP_INTBUF_SIZE];$/;"	m	struct:streamIterator	typeref:typename:unsigned char[]
fields	src/t_hash.c	/^        dict *fields;$/;"	m	struct:_hashZiplistEntryValidation::__anon4492e9240108	typeref:typename:dict *	file:
fields	src/t_hash.c	/^        dict *fields;$/;"	m	struct:hashZiplistValidateIntegrity::__anon4492e9240208	typeref:typename:dict *	file:
fields	src/t_zset.c	/^        dict *fields;$/;"	m	struct:_zsetZiplistValidateIntegrity::__anon6fce03460108	typeref:typename:dict *	file:
fields	src/t_zset.c	/^        dict *fields;$/;"	m	struct:zsetZiplistValidateIntegrity::__anon6fce03460208	typeref:typename:dict *	file:
file	src/rio.h	/^        } file;$/;"	m	union:_rio::__anonb6066a3c010a	typeref:struct:_rio::__anonb6066a3c010a::__anonb6066a3c0308
fileerror	deps/lua/src/liolib.c	/^static void fileerror (lua_State *L, int arg, const char *filename) {$/;"	f	typeref:typename:void	file:
fill	src/quicklist.h	/^    int fill : QL_FILL_BITS;              \/* fill factor for individual nodes *\/$/;"	m	struct:quicklist	typeref:typename:int
fill_array32	deps/jemalloc/test/src/SFMT.c	/^void fill_array32(sfmt_t *ctx, uint32_t *array, int size) {$/;"	f	typeref:typename:void
fill_array64	deps/jemalloc/test/src/SFMT.c	/^void fill_array64(sfmt_t *ctx, uint64_t *array, int size) {$/;"	f	typeref:typename:void
filter	tests/modules/commandfilter.c	/^static RedisModuleCommandFilter *filter = NULL;$/;"	v	typeref:typename:RedisModuleCommandFilter *	file:
filters	src/module.c	/^    list *filters;  \/* List of filters the module has registered. *\/$/;"	m	struct:RedisModule	typeref:typename:list *	file:
finalizeResultEmission	src/t_zset.c	/^    zrangeResultFinalizeFunction         finalizeResultEmission;$/;"	m	struct:zrange_result_handler	typeref:typename:zrangeResultFinalizeFunction	file:
finalizerProc	src/ae.h	/^    aeEventFinalizerProc *finalizerProc;$/;"	m	struct:aeTimeEvent	typeref:typename:aeEventFinalizerProc *
findBigKeys	src/redis-cli.c	/^static void findBigKeys(int memkeys, unsigned memkeys_samples) {$/;"	f	typeref:typename:void	file:
findHotKeys	src/redis-cli.c	/^static void findHotKeys(void) {$/;"	f	typeref:typename:void	file:
findReplica	src/replication.c	/^static client *findReplica(char *host, int port) {$/;"	f	typeref:typename:client *	file:
findfile	deps/lua/src/loadlib.c	/^static const char *findfile (lua_State *L, const char *name,$/;"	f	typeref:typename:const char *	file:
findindex	deps/lua/src/ltable.c	/^static int findindex (lua_State *L, Table *t, StkId key) {$/;"	f	typeref:typename:int	file:
findlocal	deps/lua/src/ldebug.c	/^static const char *findlocal (lua_State *L, CallInfo *ci, int n) {$/;"	f	typeref:typename:const char *	file:
fingerprint	src/dict.h	/^    long long fingerprint;$/;"	m	struct:dictIterator	typeref:typename:long long
fini_gen_rand	deps/jemalloc/test/src/SFMT.c	/^void fini_gen_rand(sfmt_t *ctx) {$/;"	f	typeref:typename:void
finish	deps/hiredis/examples/example-qt.h	/^        void finish() { emit finished(); }$/;"	f	class:ExampleQt	typeref:typename:void
fired	src/ae.h	/^    aeFiredEvent *fired; \/* Fired events *\/$/;"	m	struct:aeEventLoop	typeref:typename:aeFiredEvent *
firstkey	src/server.h	/^    int firstkey; \/* The first argument that's a key (0 = no keys) *\/$/;"	m	struct:redisCommand	typeref:typename:int
fixed_time_expire	src/server.h	/^    long fixed_time_expire;     \/* If > 0, expire keys against server.mstime. *\/$/;"	m	struct:redisServer	typeref:typename:long
fixjump	deps/lua/src/lcode.c	/^static void fixjump (FuncState *fs, int pc, int dest) {$/;"	f	typeref:typename:void	file:
flag	src/acl.c	/^    uint64_t flag;$/;"	m	struct:ACLCategoryItem	typeref:typename:uint64_t	file:
flag	src/acl.c	/^    uint64_t flag;$/;"	m	struct:ACLUserFlag	typeref:typename:uint64_t	file:
flag	src/cluster.c	/^    uint16_t flag;$/;"	m	struct:redisNodeFlags	typeref:typename:uint16_t	file:
flagTransaction	src/multi.c	/^void flagTransaction(client *c) {$/;"	f	typeref:typename:void
flag_opt_junk_alloc	deps/jemalloc/src/jemalloc.c	/^	flag_opt_junk_alloc	= (1U),$/;"	e	enum:__anon4e2331a50203	file:
flag_opt_junk_free	deps/jemalloc/src/jemalloc.c	/^	flag_opt_junk_free	= (1U << 1),$/;"	e	enum:__anon4e2331a50203	file:
flag_opt_utrace	deps/jemalloc/src/jemalloc.c	/^	flag_opt_utrace		= (1U << 3),$/;"	e	enum:__anon4e2331a50203	file:
flag_opt_xmalloc	deps/jemalloc/src/jemalloc.c	/^	flag_opt_xmalloc	= (1U << 4)$/;"	e	enum:__anon4e2331a50203	file:
flag_opt_zero	deps/jemalloc/src/jemalloc.c	/^	flag_opt_zero		= (1U << 2),$/;"	e	enum:__anon4e2331a50203	file:
flags	deps/hiredis/adapters/libevent.h	/^    short flags;$/;"	m	struct:redisLibeventEvents	typeref:typename:short
flags	deps/hiredis/hiredis.h	/^    int flags;$/;"	m	struct:redisContext	typeref:typename:int
flags	deps/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:hisdshdr16	typeref:typename:unsigned char
flags	deps/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:hisdshdr32	typeref:typename:unsigned char
flags	deps/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:hisdshdr64	typeref:typename:unsigned char
flags	deps/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:hisdshdr8	typeref:typename:unsigned char
flags	deps/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, and 5 msb of string length *\/$/;"	m	struct:hisdshdr5	typeref:typename:unsigned char
flags	deps/lua/src/lobject.h	/^  lu_byte flags;  \/* 1<<p means tagmethod(p) is not present *\/ $/;"	m	struct:Table	typeref:typename:lu_byte
flags	src/ae.h	/^    int flags;$/;"	m	struct:aeEventLoop	typeref:typename:int
flags	src/cluster.h	/^    int flags;      \/* CLUSTER_NODE_... *\/$/;"	m	struct:clusterNode	typeref:typename:int
flags	src/cluster.h	/^    uint16_t flags;             \/* node->flags copy *\/$/;"	m	struct:__anon2cc7db540108	typeref:typename:uint16_t
flags	src/cluster.h	/^    uint16_t flags;      \/* Sender node flags *\/$/;"	m	struct:__anon2cc7db540b08	typeref:typename:uint16_t
flags	src/config.c	/^    const unsigned int flags; \/* Flags for this specific config *\/$/;"	m	struct:standardConfig	typeref:typename:const unsigned int	file:
flags	src/connection.h	/^    short int flags;$/;"	m	struct:connection	typeref:typename:short int
flags	src/module.c	/^    int flags;                      \/* REDISMODULE_CTX_... flags. *\/$/;"	m	struct:RedisModuleCtx	typeref:typename:int	file:
flags	src/module.c	/^    int flags;      \/* REDISMODULE_REPLYFLAG_...  *\/$/;"	m	struct:RedisModuleCallReply	typeref:typename:int	file:
flags	src/module.c	/^    int flags;$/;"	m	struct:RedisModuleCommandFilter	typeref:typename:int	file:
flags	src/module.c	/^    int flags;$/;"	m	struct:moduleClusterNodeInfo	typeref:typename:int	file:
flags	src/rax.h	/^    int flags;$/;"	m	struct:raxIterator	typeref:typename:int
flags	src/redis-benchmark.c	/^    int flags;$/;"	m	struct:clusterNode	typeref:typename:int	file:
flags	src/redis-cli.c	/^    int flags;$/;"	m	struct:clusterManagerCommand	typeref:typename:int	file:
flags	src/redis-cli.c	/^    int flags;$/;"	m	struct:clusterManagerNode	typeref:typename:int	file:
flags	src/redismodule.h	/^    uint64_t flags;         \/* REDISMODULE_CLIENTINFO_FLAG_* *\/$/;"	m	struct:RedisModuleClientInfo	typeref:typename:uint64_t
flags	src/rio.h	/^    uint64_t cksum, flags;$/;"	m	struct:_rio	typeref:typename:uint64_t
flags	src/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr16	typeref:typename:unsigned char
flags	src/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr32	typeref:typename:unsigned char
flags	src/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr64	typeref:typename:unsigned char
flags	src/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr8	typeref:typename:unsigned char
flags	src/sds.h	/^    unsigned char flags; \/* 3 lsb of type, and 5 msb of string length *\/$/;"	m	struct:sdshdr5	typeref:typename:unsigned char
flags	src/sentinel.c	/^    int flags;              \/* Script job flags: SENTINEL_SCRIPT_* *\/$/;"	m	struct:sentinelScriptJob	typeref:typename:int	file:
flags	src/sentinel.c	/^    int flags;      \/* See SRI_... defines *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:int	file:
flags	src/server.h	/^    uint64_t flags;         \/* Client flags: CLIENT_* macros. *\/$/;"	m	struct:client	typeref:typename:uint64_t
flags	src/server.h	/^    uint64_t flags; \/* See USER_FLAG_* *\/$/;"	m	struct:__anon3ef696e90408	typeref:typename:uint64_t
flags	src/server.h	/^    uint64_t flags; \/* The actual flags, obtained from the 'sflags' field. *\/$/;"	m	struct:redisCommand	typeref:typename:uint64_t
flags	src/t_zset.c	/^    int flags;$/;"	m	struct:__anon6fce03460a08	typeref:typename:int	file:
flags	src/tls.c	/^    int flags;$/;"	m	struct:tls_connection	typeref:typename:int	file:
flags_str	src/redis-cli.c	/^    list *flags_str; \/* Flags string representations *\/$/;"	m	struct:clusterManagerNode	typeref:typename:list *	file:
flib	deps/lua/src/liolib.c	/^static const luaL_Reg flib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
flush	src/rio.h	/^    int (*flush)(struct _rio *);$/;"	m	struct:_rio	typeref:typename:int (*)(struct _rio *)
flushAllDataAndResetRDB	src/db.c	/^void flushAllDataAndResetRDB(int flags) {$/;"	f	typeref:typename:void
flushAppendOnlyFile	src/aof.c	/^void flushAppendOnlyFile(int force) {$/;"	f	typeref:typename:void
flushSlaveKeysWithExpireList	src/expire.c	/^void flushSlaveKeysWithExpireList(void) {$/;"	f	typeref:typename:void
flushSlavesOutputBuffers	src/networking.c	/^void flushSlavesOutputBuffers(void) {$/;"	f	typeref:typename:void
flushallCommand	src/db.c	/^void flushallCommand(client *c) {$/;"	f	typeref:typename:void
flushdbCallback	src/modules/hellohook.c	/^void flushdbCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f	typeref:typename:void
flushdbCallback	tests/modules/hooks.c	/^void flushdbCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f	typeref:typename:void
flushdbCommand	src/db.c	/^void flushdbCommand(client *c) {$/;"	f	typeref:typename:void
fn	deps/hiredis/async.h	/^    redisCallbackFn *fn;$/;"	m	struct:redisCallback	typeref:typename:redisCallbackFn *
fn	deps/hiredis/read.h	/^    redisReplyObjectFunctions *fn;$/;"	m	struct:redisReader	typeref:typename:redisReplyObjectFunctions *
fn	src/module.c	/^    RedisModuleScanCB fn;$/;"	m	struct:__anon967b47330a08	typeref:typename:RedisModuleScanCB	file:
fn	src/module.c	/^    RedisModuleScanKeyCB fn;$/;"	m	struct:__anon967b47330b08	typeref:typename:RedisModuleScanKeyCB	file:
fnames	deps/lua/src/liolib.c	/^static const char *const fnames[] = {"input", "output"};$/;"	v	typeref:typename:const char * const[]	file:
forbody	deps/lua/src/lparser.c	/^static void forbody (LexState *ls, int base, int line, int nvars, int isnum) {$/;"	f	typeref:typename:void	file:
force	src/server.h	/^    *time, *pxat, *px, *retrycount, *force, *justid, $/;"	m	struct:sharedObjectsStruct
forceCommandPropagation	src/server.c	/^void forceCommandPropagation(client *c, int flags) {$/;"	f	typeref:typename:void
force_all	src/config.c	/^    int force_all;        \/* True if we want all keywords to be force$/;"	m	struct:configSetCommand::rewriteConfigState	typeref:typename:int	file:
force_cancel_loop	src/redis-cli.c	/^static volatile sig_atomic_t force_cancel_loop = 0;$/;"	v	typeref:typename:volatile sig_atomic_t	file:
force_failover	src/server.h	/^    int force_failover; \/* If true then failover will be foreced at the$/;"	m	struct:redisServer	typeref:typename:int
force_ivsalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool force_ivsalloc =$/;"	v	typeref:typename:const bool
force_ivsalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool force_ivsalloc =$/;"	v	typeref:typename:const bool	file:
force_lock	deps/jemalloc/src/zone.c	/^	void (*force_lock)(malloc_zone_t *);$/;"	m	struct:malloc_introspection_t	typeref:typename:void (*)(malloc_zone_t *)	file:
force_unlock	deps/jemalloc/src/zone.c	/^	void (*force_unlock)(malloc_zone_t *);$/;"	m	struct:malloc_introspection_t	typeref:typename:void (*)(malloc_zone_t *)	file:
foreach	deps/lua/src/ltablib.c	/^static int foreach (lua_State *L) {$/;"	f	typeref:typename:int	file:
foreachi	deps/lua/src/ltablib.c	/^static int foreachi (lua_State *L) {$/;"	f	typeref:typename:int	file:
fork_create	tests/modules/fork.c	/^int fork_create(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
fork_exitcode	tests/modules/fork.c	/^int fork_exitcode(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
fork_kill	tests/modules/fork.c	/^int fork_kill(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
forked	src/scripting.c	/^    int forked; \/* Is this a fork()ed debugging session? *\/$/;"	m	struct:ldbState	typeref:typename:int	file:
forking	deps/jemalloc/include/jemalloc/internal/witness.h	/^	bool forking;$/;"	m	struct:witness_tsd_s	typeref:typename:bool
forlist	deps/lua/src/lparser.c	/^static void forlist (LexState *ls, TString *indexname) {$/;"	f	typeref:typename:void	file:
format_head_string	deps/hdr_histogram/hdr_histogram.c	/^static const char* format_head_string(format_type format)$/;"	f	typeref:typename:const char *	file:
format_line_string	deps/hdr_histogram/hdr_histogram.c	/^static void format_line_string(char* str, size_t len, int significant_figures, format_type forma/;"	f	typeref:typename:void	file:
format_type	deps/hdr_histogram/hdr_histogram.h	/^} format_type;$/;"	t	typeref:enum:__anon905d92fb0203
fornum	deps/lua/src/lparser.c	/^static void fornum (LexState *ls, TString *varname, int line) {$/;"	f	typeref:typename:void	file:
forstat	deps/lua/src/lparser.c	/^static void forstat (LexState *ls, int line) {$/;"	f	typeref:typename:void	file:
forward	src/server.h	/^        struct zskiplistNode *forward;$/;"	m	struct:zskiplistNode::zskiplistLevel	typeref:struct:zskiplistNode *
forwarding_cb	deps/jemalloc/test/unit/emitter.c	/^forwarding_cb(void *buf_descriptor_v, const char *str) {$/;"	f	typeref:typename:void	file:
fp	src/rio.h	/^            FILE *fp;$/;"	m	struct:_rio::__anonb6066a3c010a::__anonb6066a3c0308	typeref:typename:FILE *
fpconv_g_fmt	deps/lua/src/fpconv.c	/^int fpconv_g_fmt(char *str, double num, int precision)$/;"	f	typeref:typename:int
fpconv_init	deps/lua/src/fpconv.c	/^void fpconv_init()$/;"	f	typeref:typename:void
fpconv_init	deps/lua/src/fpconv.h	/^static inline void fpconv_init()$/;"	f	typeref:typename:void
fpconv_strtod	deps/lua/src/fpconv.c	/^double fpconv_strtod(const char *nptr, char **endptr)$/;"	f	typeref:typename:double
fpconv_update_locale	deps/lua/src/fpconv.c	/^static void fpconv_update_locale()$/;"	f	typeref:typename:void	file:
fptr	src/server.h	/^    unsigned char *fptr, *vptr;$/;"	m	struct:__anon3ef696e90c08	typeref:typename:unsigned char *
fragCreateCommand	tests/modules/defragtest.c	/^static int fragCreateCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int	file:
fragResetStatsCommand	tests/modules/defragtest.c	/^static int fragResetStatsCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int	file:
frealloc	deps/lua/src/lstate.h	/^  lua_Alloc frealloc;  \/* function to reallocate memory *\/$/;"	m	struct:global_State	typeref:typename:lua_Alloc
free	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define free /;"	d
free	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define free /;"	d
free	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define free /;"	d
free	deps/jemalloc/src/zone.c	/^	void (*free)(struct _malloc_zone_t *, void *);$/;"	m	struct:_malloc_zone_t	typeref:typename:void (*)(struct _malloc_zone_t *,void *)	file:
free	deps/lua/src/lua_cmsgpack.c	/^    size_t len, free;$/;"	m	struct:mp_buf	typeref:typename:size_t	file:
free	src/adlist.h	/^    void (*free)(void *ptr);$/;"	m	struct:list	typeref:typename:void (*)(void * ptr)
free	src/aof.c	/^    unsigned long used, free;$/;"	m	struct:aofrwblock	typeref:typename:unsigned long	file:
free	src/module.c	/^        moduleTypeFreeFunc free;$/;"	m	struct:RM_CreateDataType::typemethods	typeref:typename:moduleTypeFreeFunc	file:
free	src/redismodule.h	/^    RedisModuleTypeFreeFunc free;$/;"	m	struct:RedisModuleTypeMethods	typeref:typename:RedisModuleTypeFreeFunc
free	src/server.h	/^    moduleTypeFreeFunc free;$/;"	m	struct:RedisModuleType	typeref:typename:moduleTypeFreeFunc
free	src/zmalloc.c	/^#define free(/;"	d	file:
freeAllClients	src/redis-benchmark.c	/^static void freeAllClients(void) {$/;"	f	typeref:typename:void	file:
freeBenchmarkThread	src/redis-benchmark.c	/^static void freeBenchmarkThread(benchmarkThread *thread) {$/;"	f	typeref:typename:void	file:
freeBenchmarkThreads	src/redis-benchmark.c	/^static void freeBenchmarkThreads() {$/;"	f	typeref:typename:void	file:
freeCallback	src/dict.c	/^void freeCallback(void *privdata, void *val) {$/;"	f	typeref:typename:void
freeClient	src/networking.c	/^void freeClient(client *c) {$/;"	f	typeref:typename:void
freeClient	src/redis-benchmark.c	/^static void freeClient(client c) {$/;"	f	typeref:typename:void	file:
freeClientArgv	src/networking.c	/^static void freeClientArgv(client *c) {$/;"	f	typeref:typename:void	file:
freeClientAsync	src/networking.c	/^void freeClientAsync(client *c) {$/;"	f	typeref:typename:void
freeClientMultiState	src/multi.c	/^void freeClientMultiState(client *c) {$/;"	f	typeref:typename:void
freeClientOriginalArgv	src/networking.c	/^void freeClientOriginalArgv(client *c) {$/;"	f	typeref:typename:void
freeClientReplyValue	src/networking.c	/^void freeClientReplyValue(void *o) {$/;"	f	typeref:typename:void
freeClientsInAsyncFreeQueue	src/networking.c	/^int freeClientsInAsyncFreeQueue(void) {$/;"	f	typeref:typename:int
freeClusterLink	src/cluster.c	/^void freeClusterLink(clusterLink *link) {$/;"	f	typeref:typename:void
freeClusterManager	src/redis-cli.c	/^static void freeClusterManager(void) {$/;"	f	typeref:typename:void	file:
freeClusterManagerNode	src/redis-cli.c	/^static void freeClusterManagerNode(clusterManagerNode *node) {$/;"	f	typeref:typename:void	file:
freeClusterManagerNodeFlags	src/redis-cli.c	/^static void freeClusterManagerNodeFlags(list *flags) {$/;"	f	typeref:typename:void	file:
freeClusterNode	src/cluster.c	/^void freeClusterNode(clusterNode *n) {$/;"	f	typeref:typename:void
freeClusterNode	src/redis-benchmark.c	/^static void freeClusterNode(clusterNode *node) {$/;"	f	typeref:typename:void	file:
freeClusterNodes	src/redis-benchmark.c	/^static void freeClusterNodes() {$/;"	f	typeref:typename:void	file:
freeCompletions	deps/linenoise/linenoise.c	/^static void freeCompletions(linenoiseCompletions *lc) {$/;"	f	typeref:typename:void	file:
freeFakeClient	src/aof.c	/^void freeFakeClient(struct client *c) {$/;"	f	typeref:typename:void
freeFakeClientArgv	src/aof.c	/^void freeFakeClientArgv(struct client *c) {$/;"	f	typeref:typename:void
freeFn	deps/hiredis/alloc.h	/^    void (*freeFn)(void*);$/;"	m	struct:hiredisAllocFuncs	typeref:typename:void (*)(void *)
freeHashObject	src/object.c	/^void freeHashObject(robj *o) {$/;"	f	typeref:typename:void
freeHintsCallback	deps/linenoise/linenoise.c	/^static linenoiseFreeHintsCallback *freeHintsCallback = NULL;$/;"	v	typeref:typename:linenoiseFreeHintsCallback *	file:
freeHintsCallback	src/redis-cli.c	/^static void freeHintsCallback(void *ptr) {$/;"	f	typeref:typename:void	file:
freeHistory	deps/linenoise/linenoise.c	/^static void freeHistory(void) {$/;"	f	typeref:typename:void	file:
freeListObject	src/object.c	/^void freeListObject(robj *o) {$/;"	f	typeref:typename:void
freeLuaScriptsAsync	src/lazyfree.c	/^void freeLuaScriptsAsync(dict *lua_scripts) {$/;"	f	typeref:typename:void
freeMemoryGetNotCountedMemory	src/evict.c	/^size_t freeMemoryGetNotCountedMemory(void) {$/;"	f	typeref:typename:size_t
freeMemoryOverheadData	src/object.c	/^void freeMemoryOverheadData(struct redisMemOverhead *mh) {$/;"	f	typeref:typename:void
freeModuleObject	src/object.c	/^void freeModuleObject(robj *o) {$/;"	f	typeref:typename:void
freeObjAsync	src/lazyfree.c	/^void freeObjAsync(robj *key, robj *obj) {$/;"	f	typeref:typename:void
freeObject	deps/hiredis/read.h	/^    void (*freeObject)(void*);$/;"	m	struct:redisReplyObjectFunctions	typeref:typename:void (*)(void *)
freeRedisConfig	src/redis-benchmark.c	/^static void freeRedisConfig(redisConfig *cfg) {$/;"	f	typeref:typename:void	file:
freeRedisRunLoop	deps/hiredis/adapters/macosx.h	/^static int freeRedisRunLoop(RedisRunLoop* redisRunLoop) {$/;"	f	typeref:typename:int
freeReplicationBacklog	src/replication.c	/^void freeReplicationBacklog(void) {$/;"	f	typeref:typename:void
freeReplyObject	deps/hiredis/hiredis.c	/^void freeReplyObject(void *reply) {$/;"	f	typeref:typename:void
freeSentinelConfig	src/sentinel.c	/^void freeSentinelConfig() {$/;"	f	typeref:typename:void
freeSentinelLoadQueueEntry	src/sentinel.c	/^void freeSentinelLoadQueueEntry(void *item) {$/;"	f	typeref:typename:void
freeSetObject	src/object.c	/^void freeSetObject(robj *o) {$/;"	f	typeref:typename:void
freeSlotsToKeysMap	src/db.c	/^void freeSlotsToKeysMap(rax *rt, int async) {$/;"	f	typeref:typename:void
freeSlotsToKeysMapAsync	src/lazyfree.c	/^void freeSlotsToKeysMapAsync(rax *rt) {$/;"	f	typeref:typename:void
freeSparklineSequence	src/sparkline.c	/^void freeSparklineSequence(struct sequence *seq) {$/;"	f	typeref:typename:void
freeStream	src/t_stream.c	/^void freeStream(stream *s) {$/;"	f	typeref:typename:void
freeStreamObject	src/object.c	/^void freeStreamObject(robj *o) {$/;"	f	typeref:typename:void
freeStringObject	src/object.c	/^void freeStringObject(robj *o) {$/;"	f	typeref:typename:void
freeTrackingRadixTree	src/tracking.c	/^void freeTrackingRadixTree(rax *rt) {$/;"	f	typeref:typename:void
freeTrackingRadixTreeAsync	src/lazyfree.c	/^void freeTrackingRadixTreeAsync(rax *tracking) {$/;"	f	typeref:typename:void
freeTrackingRadixTreeCallback	src/tracking.c	/^void freeTrackingRadixTreeCallback(void *rt) {$/;"	f	typeref:typename:void
freeZsetObject	src/object.c	/^void freeZsetObject(robj *o) {$/;"	f	typeref:typename:void
free_args	src/bio.c	/^    void *free_args[]; \/* List of arguments to be passed to the free function *\/$/;"	m	struct:bio_job	typeref:typename:void * []	file:
free_definite_size	deps/jemalloc/src/zone.c	/^	void (*free_definite_size)(struct _malloc_zone_t *, void *, size_t);$/;"	m	struct:_malloc_zone_t	typeref:typename:void (*)(struct _malloc_zone_t *,void *,size_t)	file:
free_effort	src/module.c	/^            moduleTypeFreeEffortFunc free_effort;$/;"	m	struct:RM_CreateDataType::typemethods::__anon967b47330708	typeref:typename:moduleTypeFreeEffortFunc	file:
free_effort	src/redismodule.h	/^    RedisModuleTypeFreeEffortFunc free_effort;$/;"	m	struct:RedisModuleTypeMethods	typeref:typename:RedisModuleTypeFreeEffortFunc
free_effort	src/server.h	/^    moduleTypeFreeEffortFunc free_effort;$/;"	m	struct:RedisModuleType	typeref:typename:moduleTypeFreeEffortFunc
free_fn	src/bio.c	/^    lazy_free_fn *free_fn; \/* Function that will free the provided arguments *\/$/;"	m	struct:bio_job	typeref:typename:lazy_free_fn *	file:
free_privctx	deps/hiredis/hiredis.h	/^    void (*free_privctx)(void *);$/;"	m	struct:redisContextFuncs	typeref:typename:void (*)(void *)
free_privdata	deps/hiredis/hiredis.h	/^    void (*free_privdata)(void *);$/;"	m	struct:__anon7daed6b50108	typeref:typename:void (*)(void *)
free_privdata	deps/hiredis/hiredis.h	/^    void (*free_privdata)(void *);$/;"	m	struct:redisContext	typeref:typename:void (*)(void *)
free_privdata	deps/hiredis/test.c	/^void free_privdata(void *privdata) {$/;"	f	typeref:typename:void
free_privdata	src/module.c	/^    void (*free_privdata)(RedisModuleCtx*,void*);\/* privdata cleanup callback.*\/$/;"	m	struct:RedisModuleBlockedClient	typeref:typename:void (*)(RedisModuleCtx *,void *)	file:
freeaddrinfo	deps/hiredis/sockcompat.h	/^#define freeaddrinfo(/;"	d
freebsd	deps/lua/src/Makefile	/^freebsd:$/;"	t
freeexp	deps/lua/src/lcode.c	/^static void freeexp (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void	file:
freeobj	deps/lua/src/lgc.c	/^static void freeobj (lua_State *L, GCObject *o) {$/;"	f	typeref:typename:void	file:
freereg	deps/lua/src/lcode.c	/^static void freereg (FuncState *fs, int reg) {$/;"	f	typeref:typename:void	file:
freereg	deps/lua/src/lparser.h	/^  int freereg;  \/* first free register *\/$/;"	m	struct:FuncState	typeref:typename:int
freestack	deps/lua/src/lstate.c	/^static void freestack (lua_State *L, lua_State *L1) {$/;"	f	typeref:typename:void	file:
friends	src/redis-cli.c	/^    list *friends;$/;"	m	struct:clusterManagerNode	typeref:typename:list *	file:
from	src/redis-cli.c	/^    char *from;$/;"	m	struct:clusterManagerCommand	typeref:typename:char *	file:
from_askpass	src/redis-cli.c	/^    int from_askpass;$/;"	m	struct:clusterManagerCommand	typeref:typename:int	file:
from_pass	src/redis-cli.c	/^    char *from_pass;$/;"	m	struct:clusterManagerCommand	typeref:typename:char *	file:
from_user	src/redis-cli.c	/^    char *from_user;$/;"	m	struct:clusterManagerCommand	typeref:typename:char *	file:
fromstate	deps/lua/src/lstate.c	/^#define fromstate(/;"	d	file:
fs	deps/lua/src/llex.h	/^  struct FuncState *fs;  \/* `FuncState' is private to the parser *\/$/;"	m	struct:LexState	typeref:struct:FuncState *
fsl_aofrw	tests/modules/blockonkeys.c	/^void fsl_aofrw(RedisModuleIO *aof, RedisModuleString *key, void *value) {$/;"	f	typeref:typename:void
fsl_bpop	tests/modules/blockonkeys.c	/^int fsl_bpop(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
fsl_bpopgt	tests/modules/blockonkeys.c	/^int fsl_bpopgt(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
fsl_bpoppush	tests/modules/blockonkeys.c	/^int fsl_bpoppush(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
fsl_free	tests/modules/blockonkeys.c	/^void fsl_free(void *value) {$/;"	f	typeref:typename:void
fsl_getall	tests/modules/blockonkeys.c	/^int fsl_getall(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
fsl_push	tests/modules/blockonkeys.c	/^int fsl_push(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
fsl_rdb_load	tests/modules/blockonkeys.c	/^void *fsl_rdb_load(RedisModuleIO *rdb, int encver) {$/;"	f	typeref:typename:void *
fsl_rdb_save	tests/modules/blockonkeys.c	/^void fsl_rdb_save(RedisModuleIO *rdb, void *value) {$/;"	f	typeref:typename:void
fsl_t	tests/modules/blockonkeys.c	/^} fsl_t; \/* Fixed-size list *\/$/;"	t	typeref:struct:__anon601d21a40108	file:
fsl_type_create	tests/modules/blockonkeys.c	/^fsl_t *fsl_type_create() {$/;"	f	typeref:typename:fsl_t *
fsl_type_free	tests/modules/blockonkeys.c	/^void fsl_type_free(fsl_t *o) {$/;"	f	typeref:typename:void
fsltype	tests/modules/blockonkeys.c	/^static RedisModuleType *fsltype = NULL;$/;"	v	typeref:typename:RedisModuleType *	file:
full	src/redis-cli.c	/^    sds full;$/;"	m	struct:__anon6af24fe90108	typeref:typename:sds	file:
func	deps/lua/src/lapi.c	/^  StkId func;$/;"	m	struct:CallS	typeref:typename:StkId	file:
func	deps/lua/src/lapi.c	/^  lua_CFunction func;$/;"	m	struct:CCallS	typeref:typename:lua_CFunction	file:
func	deps/lua/src/lauxlib.h	/^  lua_CFunction func;$/;"	m	struct:luaL_Reg	typeref:typename:lua_CFunction
func	deps/lua/src/lstate.h	/^  StkId func;  \/* function index in the stack *\/$/;"	m	struct:CallInfo	typeref:typename:StkId
func	src/module.c	/^    RedisModuleCmdFunc func;$/;"	m	struct:RedisModuleCommandProxy	typeref:typename:RedisModuleCmdFunc	file:
func	src/module.c	/^    void *func;$/;"	m	struct:RedisModuleSharedAPI	typeref:typename:void *	file:
func1	deps/jemalloc/test/src/SFMT.c	/^static uint32_t func1(uint32_t x) {$/;"	f	typeref:typename:uint32_t	file:
func2	deps/jemalloc/test/src/SFMT.c	/^static uint32_t func2(uint32_t x) {$/;"	f	typeref:typename:uint32_t	file:
func_to_hook	deps/jemalloc/test/unit/hooks.c	/^#define func_to_hook /;"	d	file:
func_to_hook	deps/jemalloc/test/unit/hooks.c	/^func_to_hook(int arg1, int arg2) {$/;"	f	typeref:typename:int	file:
funcargs	deps/lua/src/lparser.c	/^static void funcargs (LexState *ls, expdesc *f) {$/;"	f	typeref:typename:void	file:
funcinfo	deps/lua/src/ldebug.c	/^static void funcinfo (lua_Debug *ar, Closure *cl) {$/;"	f	typeref:typename:void	file:
funcname	deps/lua/src/lparser.c	/^static int funcname (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:int	file:
funcs	deps/hiredis/hiredis.h	/^    const redisContextFuncs *funcs;   \/* Function table *\/$/;"	m	struct:redisContext	typeref:typename:const redisContextFuncs *
funcstat	deps/lua/src/lparser.c	/^static void funcstat (LexState *ls, int line) {$/;"	f	typeref:typename:void	file:
g	deps/lua/src/lstate.c	/^  global_State g;$/;"	m	struct:LG	typeref:typename:global_State	file:
g_iofile	deps/lua/src/liolib.c	/^static int g_iofile (lua_State *L, int f, const char *mode) {$/;"	f	typeref:typename:int	file:
g_read	deps/lua/src/liolib.c	/^static int g_read (lua_State *L, FILE *f, int first) {$/;"	f	typeref:typename:int	file:
g_write	deps/lua/src/liolib.c	/^static int g_write (lua_State *L, FILE *f, int arg) {$/;"	f	typeref:typename:int	file:
gai_strerror	deps/hiredis/sockcompat.h	/^#define gai_strerror(/;"	d
gc	deps/lua/src/lobject.h	/^  GCObject *gc;$/;"	m	union:__anona52fc941010a	typeref:typename:GCObject *
gc_ticker	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	ticker_t	gc_ticker;$/;"	m	struct:tcache_s	typeref:typename:ticker_t
gcdept	deps/lua/src/lstate.h	/^  lu_mem gcdept;  \/* how much GC is `behind schedule' *\/$/;"	m	struct:global_State	typeref:typename:lu_mem
gch	deps/lua/src/lstate.h	/^  GCheader gch;$/;"	m	union:GCObject	typeref:typename:GCheader
gclist	deps/lua/src/lobject.h	/^  GCObject *gclist;$/;"	m	struct:Proto	typeref:typename:GCObject *
gclist	deps/lua/src/lobject.h	/^  GCObject *gclist;$/;"	m	struct:Table	typeref:typename:GCObject *
gclist	deps/lua/src/lstate.h	/^  GCObject *gclist;$/;"	m	struct:lua_State	typeref:typename:GCObject *
gco2cl	deps/lua/src/lstate.h	/^#define gco2cl(/;"	d
gco2h	deps/lua/src/lstate.h	/^#define gco2h(/;"	d
gco2p	deps/lua/src/lstate.h	/^#define gco2p(/;"	d
gco2th	deps/lua/src/lstate.h	/^#define gco2th(/;"	d
gco2ts	deps/lua/src/lstate.h	/^#define gco2ts(/;"	d
gco2u	deps/lua/src/lstate.h	/^#define gco2u(/;"	d
gco2uv	deps/lua/src/lstate.h	/^#define gco2uv(/;"	d
gcov	deps/hiredis/Makefile	/^gcov:$/;"	t
gcov	src/Makefile	/^gcov:$/;"	t
gcpause	deps/lua/src/lstate.h	/^  int gcpause;  \/* size of pause between successive GCs *\/$/;"	m	struct:global_State	typeref:typename:int
gcstate	deps/lua/src/lstate.h	/^  lu_byte gcstate;  \/* state of garbage collector *\/$/;"	m	struct:global_State	typeref:typename:lu_byte
gcstepmul	deps/lua/src/lstate.h	/^  int gcstepmul;  \/* GC `granularity' *\/$/;"	m	struct:global_State	typeref:typename:int
gctm	deps/lua/src/loadlib.c	/^static int gctm (lua_State *L) {$/;"	f	typeref:typename:int	file:
gctx	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_gctx_t		*gctx;$/;"	m	struct:prof_tctx_s	typeref:typename:prof_gctx_t *
gctx_locks	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	*gctx_locks;$/;"	v	typeref:typename:malloc_mutex_t *	file:
gcvalue	deps/lua/src/lobject.h	/^#define gcvalue(/;"	d
genBenchmarkRandomData	src/redis-benchmark.c	/^static void genBenchmarkRandomData(char *data, int count) {$/;"	f	typeref:typename:void	file:
genClientAddrString	src/networking.c	/^void genClientAddrString(client *client, char *addr,$/;"	f	typeref:typename:void
genModulesInfoString	src/module.c	/^sds genModulesInfoString(sds info) {$/;"	f	typeref:typename:sds
genModulesInfoStringRenderModuleOptions	src/module.c	/^sds genModulesInfoStringRenderModuleOptions(struct RedisModule *module) {$/;"	f	typeref:typename:sds
genModulesInfoStringRenderModulesList	src/module.c	/^sds genModulesInfoStringRenderModulesList(list *l) {$/;"	f	typeref:typename:sds
genRedisInfoString	src/server.c	/^sds genRedisInfoString(const char *section) {$/;"	f	typeref:typename:sds
gen_mallctl_str	deps/jemalloc/test/unit/stats.c	/^gen_mallctl_str(char *cmd, char *name, unsigned arena_ind) {$/;"	f	typeref:typename:TEST_END void	file:
gen_mutex_ctl_str	deps/jemalloc/src/stats.c	/^gen_mutex_ctl_str(char *str, size_t buf_len, const char *prefix,$/;"	f	typeref:typename:void	file:
gen_rand32	deps/jemalloc/test/src/SFMT.c	/^uint32_t gen_rand32(sfmt_t *ctx) {$/;"	f	typeref:typename:uint32_t
gen_rand32_range	deps/jemalloc/test/src/SFMT.c	/^uint32_t gen_rand32_range(sfmt_t *ctx, uint32_t limit) {$/;"	f	typeref:typename:uint32_t
gen_rand64	deps/jemalloc/test/src/SFMT.c	/^uint64_t gen_rand64(sfmt_t *ctx) {$/;"	f	typeref:typename:uint64_t
gen_rand64_range	deps/jemalloc/test/src/SFMT.c	/^uint64_t gen_rand64_range(sfmt_t *ctx, uint64_t limit) {$/;"	f	typeref:typename:uint64_t
gen_rand_all	deps/jemalloc/test/include/test/SFMT-alti.h	/^static inline void gen_rand_all(sfmt_t *ctx) {$/;"	f	typeref:typename:void
gen_rand_all	deps/jemalloc/test/include/test/SFMT-sse2.h	/^static inline void gen_rand_all(sfmt_t *ctx) {$/;"	f	typeref:typename:void
gen_rand_all	deps/jemalloc/test/src/SFMT.c	/^static inline void gen_rand_all(sfmt_t *ctx) {$/;"	f	typeref:typename:void	file:
gen_rand_array	deps/jemalloc/test/include/test/SFMT-alti.h	/^static inline void gen_rand_array(sfmt_t *ctx, w128_t *array, int size) {$/;"	f	typeref:typename:void
gen_rand_array	deps/jemalloc/test/include/test/SFMT-sse2.h	/^static inline void gen_rand_array(sfmt_t *ctx, w128_t *array, int size) {$/;"	f	typeref:typename:void
gen_rand_array	deps/jemalloc/test/src/SFMT.c	/^static inline void gen_rand_array(sfmt_t *ctx, w128_t *array, int size) {$/;"	f	typeref:typename:void	file:
generateSkyline	src/lolwut6.c	/^void generateSkyline(lwCanvas *canvas) {$/;"	f	typeref:typename:void
generateSkyscraper	src/lolwut6.c	/^void generateSkyscraper(lwCanvas *canvas, struct skyscraper *si) {$/;"	f	typeref:typename:void
generate_dirty	deps/jemalloc/test/unit/decay.c	/^generate_dirty(unsigned arena_ind, size_t size) {$/;"	f	typeref:typename:void	file:
generic	deps/lua/src/Makefile	/^generic:$/;"	t
genericGetKeys	src/db.c	/^int genericGetKeys(int storeKeyOfs, int keyCountOfs, int firstKeyOfs, int keyStep,$/;"	f	typeref:typename:int
genericHgetallCommand	src/t_hash.c	/^void genericHgetallCommand(client *c, int flags) {$/;"	f	typeref:typename:void
genericSetKey	src/db.c	/^void genericSetKey(client *c, redisDb *db, robj *key, robj *val, int keepttl, int signal) {$/;"	f	typeref:typename:void
genericZpopCommand	src/t_zset.c	/^void genericZpopCommand(client *c, robj **keyv, int keyc, int where, int emitkey, robj *countarg/;"	f	typeref:typename:void
genericZrangebylexCommand	src/t_zset.c	/^void genericZrangebylexCommand(zrange_result_handler *handler,$/;"	f	typeref:typename:void
genericZrangebyrankCommand	src/t_zset.c	/^void genericZrangebyrankCommand(zrange_result_handler *handler,$/;"	f	typeref:typename:void
genericZrangebyscoreCommand	src/t_zset.c	/^void genericZrangebyscoreCommand(zrange_result_handler *handler,$/;"	f	typeref:typename:void
generic_reader	deps/lua/src/lbaselib.c	/^static const char *generic_reader (lua_State *L, void *ud, size_t *size) {$/;"	f	typeref:typename:const char *	file:
genrand64_int63	src/mt19937-64.c	/^long long genrand64_int63(void)$/;"	f	typeref:typename:long long
genrand64_int64	src/mt19937-64.c	/^unsigned long long genrand64_int64(void)$/;"	f	typeref:typename:unsigned long long
genrand64_real1	src/mt19937-64.c	/^double genrand64_real1(void)$/;"	f	typeref:typename:double
genrand64_real2	src/mt19937-64.c	/^double genrand64_real2(void)$/;"	f	typeref:typename:double
genrand64_real3	src/mt19937-64.c	/^double genrand64_real3(void)$/;"	f	typeref:typename:double
genrand_real1	deps/jemalloc/test/include/test/SFMT.h	/^static inline double genrand_real1(sfmt_t *ctx) {$/;"	f	typeref:typename:double
genrand_real2	deps/jemalloc/test/include/test/SFMT.h	/^static inline double genrand_real2(sfmt_t *ctx) {$/;"	f	typeref:typename:double
genrand_real3	deps/jemalloc/test/include/test/SFMT.h	/^static inline double genrand_real3(sfmt_t *ctx) {$/;"	f	typeref:typename:double
genrand_res53	deps/jemalloc/test/include/test/SFMT.h	/^static inline double genrand_res53(sfmt_t *ctx) {$/;"	f	typeref:typename:double
genrand_res53_mix	deps/jemalloc/test/include/test/SFMT.h	/^static inline double genrand_res53_mix(sfmt_t *ctx) {$/;"	f	typeref:typename:double
genstr	src/quicklist.c	/^static char *genstr(char *prefix, int i) {$/;"	f	typeref:typename:char *	file:
geoAppendIfWithinShape	src/geo.c	/^int geoAppendIfWithinShape(geoArray *ga, GeoShape *shape, double score, sds member) {$/;"	f	typeref:typename:int
geoArray	src/geo.h	/^typedef struct geoArray {$/;"	s
geoArray	src/geo.h	/^} geoArray;$/;"	t	typeref:struct:geoArray
geoArrayAppend	src/geo.c	/^geoPoint *geoArrayAppend(geoArray *ga) {$/;"	f	typeref:typename:geoPoint *
geoArrayCreate	src/geo.c	/^geoArray *geoArrayCreate(void) {$/;"	f	typeref:typename:geoArray *
geoArrayFree	src/geo.c	/^void geoArrayFree(geoArray *ga) {$/;"	f	typeref:typename:void
geoGetPointsInRange	src/geo.c	/^int geoGetPointsInRange(robj *zobj, double min, double max, GeoShape *shape, geoArray *ga, unsig/;"	f	typeref:typename:int
geoPoint	src/geo.h	/^typedef struct geoPoint {$/;"	s
geoPoint	src/geo.h	/^} geoPoint;$/;"	t	typeref:struct:geoPoint
geoaddCommand	src/geo.c	/^void geoaddCommand(client *c) {$/;"	f	typeref:typename:void
geodistCommand	src/geo.c	/^void geodistCommand(client *c) {$/;"	f	typeref:typename:void
geohashAlign52Bits	src/geohash_helper.c	/^GeoHashFix52Bits geohashAlign52Bits(const GeoHashBits hash) {$/;"	f	typeref:typename:GeoHashFix52Bits
geohashBoundingBox	src/geohash_helper.c	/^int geohashBoundingBox(GeoShape *shape, double *bounds) {$/;"	f	typeref:typename:int
geohashCalculateAreasByShapeWGS84	src/geohash_helper.c	/^GeoHashRadius geohashCalculateAreasByShapeWGS84(GeoShape *shape) {$/;"	f	typeref:typename:GeoHashRadius
geohashCommand	src/geo.c	/^void geohashCommand(client *c) {$/;"	f	typeref:typename:void
geohashDecode	src/geohash.c	/^int geohashDecode(const GeoHashRange long_range, const GeoHashRange lat_range,$/;"	f	typeref:typename:int
geohashDecodeAreaToLongLat	src/geohash.c	/^int geohashDecodeAreaToLongLat(const GeoHashArea *area, double *xy) {$/;"	f	typeref:typename:int
geohashDecodeToLongLatType	src/geohash.c	/^int geohashDecodeToLongLatType(const GeoHashBits hash, double *xy) {$/;"	f	typeref:typename:int
geohashDecodeToLongLatWGS84	src/geohash.c	/^int geohashDecodeToLongLatWGS84(const GeoHashBits hash, double *xy) {$/;"	f	typeref:typename:int
geohashDecodeType	src/geohash.c	/^int geohashDecodeType(const GeoHashBits hash, GeoHashArea *area) {$/;"	f	typeref:typename:int
geohashDecodeWGS84	src/geohash.c	/^int geohashDecodeWGS84(const GeoHashBits hash, GeoHashArea *area) {$/;"	f	typeref:typename:int
geohashEncode	src/geohash.c	/^int geohashEncode(const GeoHashRange *long_range, const GeoHashRange *lat_range,$/;"	f	typeref:typename:int
geohashEncodeType	src/geohash.c	/^int geohashEncodeType(double longitude, double latitude, uint8_t step, GeoHashBits *hash) {$/;"	f	typeref:typename:int
geohashEncodeWGS84	src/geohash.c	/^int geohashEncodeWGS84(double longitude, double latitude, uint8_t step,$/;"	f	typeref:typename:int
geohashEstimateStepsByRadius	src/geohash_helper.c	/^uint8_t geohashEstimateStepsByRadius(double range_meters, double lat) {$/;"	f	typeref:typename:uint8_t
geohashGetCoordRange	src/geohash.c	/^void geohashGetCoordRange(GeoHashRange *long_range, GeoHashRange *lat_range) {$/;"	f	typeref:typename:void
geohashGetDistance	src/geohash_helper.c	/^double geohashGetDistance(double lon1d, double lat1d, double lon2d, double lat2d) {$/;"	f	typeref:typename:double
geohashGetDistanceIfInRadius	src/geohash_helper.c	/^int geohashGetDistanceIfInRadius(double x1, double y1,$/;"	f	typeref:typename:int
geohashGetDistanceIfInRadiusWGS84	src/geohash_helper.c	/^int geohashGetDistanceIfInRadiusWGS84(double x1, double y1, double x2,$/;"	f	typeref:typename:int
geohashGetDistanceIfInRectangle	src/geohash_helper.c	/^int geohashGetDistanceIfInRectangle(double width_m, double height_m, double x1, double y1,$/;"	f	typeref:typename:int
geohashNeighbors	src/geohash.c	/^void geohashNeighbors(const GeoHashBits *hash, GeoHashNeighbors *neighbors) {$/;"	f	typeref:typename:void
geohash_move_x	src/geohash.c	/^static void geohash_move_x(GeoHashBits *hash, int8_t d) {$/;"	f	typeref:typename:void	file:
geohash_move_y	src/geohash.c	/^static void geohash_move_y(GeoHashBits *hash, int8_t d) {$/;"	f	typeref:typename:void	file:
geoposCommand	src/geo.c	/^void geoposCommand(client *c) {$/;"	f	typeref:typename:void
georadiusCommand	src/geo.c	/^void georadiusCommand(client *c) {$/;"	f	typeref:typename:void
georadiusGeneric	src/geo.c	/^void georadiusGeneric(client *c, int srcKeyIndex, int flags) {$/;"	f	typeref:typename:void
georadiusGetKeys	src/db.c	/^int georadiusGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f	typeref:typename:int
georadiusbymemberCommand	src/geo.c	/^void georadiusbymemberCommand(client *c) {$/;"	f	typeref:typename:void
georadiusbymemberroCommand	src/geo.c	/^void georadiusbymemberroCommand(client *c) {$/;"	f	typeref:typename:void
georadiusroCommand	src/geo.c	/^void georadiusroCommand(client *c) {$/;"	f	typeref:typename:void
geosearchCommand	src/geo.c	/^void geosearchCommand(client *c) {$/;"	f	typeref:typename:void
geosearchstoreCommand	src/geo.c	/^void geosearchstoreCommand(client *c) {$/;"	f	typeref:typename:void
get	src/config.c	/^    void (*get)(client *c, typeData data);$/;"	m	struct:typeInterface	typeref:typename:void (*)(client * c,typeData data)	file:
getAbsolutePath	src/util.c	/^sds getAbsolutePath(char *filename) {$/;"	f	typeref:typename:sds
getAllClientsInfoString	src/networking.c	/^sds getAllClientsInfoString(int type) {$/;"	f	typeref:typename:sds
getAllocatorFragmentation	src/defrag.c	/^float getAllocatorFragmentation(size_t *out_frag_bytes) {$/;"	f	typeref:typename:float
getBMode	deps/lua/src/lopcodes.h	/^#define getBMode(/;"	d
getBitOffsetFromArgument	src/bitops.c	/^int getBitOffsetFromArgument(client *c, robj *o, uint64_t *offset, int hash, int bits) {$/;"	f	typeref:typename:int
getBitfieldTypeFromArgument	src/bitops.c	/^int getBitfieldTypeFromArgument(client *c, robj *o, int *sign, int *bits) {$/;"	f	typeref:typename:int
getBlockedTypeByType	src/blocked.c	/^static int getBlockedTypeByType(int type) {$/;"	f	typeref:typename:int	file:
getCMode	deps/lua/src/lopcodes.h	/^#define getCMode(/;"	d
getCallback	deps/hiredis/examples/example-ae.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f	typeref:typename:void
getCallback	deps/hiredis/examples/example-ivykis.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f	typeref:typename:void
getCallback	deps/hiredis/examples/example-libev.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f	typeref:typename:void
getCallback	deps/hiredis/examples/example-libevent-ssl.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f	typeref:typename:void
getCallback	deps/hiredis/examples/example-libevent.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f	typeref:typename:void
getCallback	deps/hiredis/examples/example-libuv.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f	typeref:typename:void
getCallback	deps/hiredis/examples/example-macosx.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f	typeref:typename:void
getCallback	deps/hiredis/examples/example-qt.cpp	/^void getCallback(redisAsyncContext *, void * r, void * privdata) {$/;"	f	typeref:typename:void
getClientOutputBufferMemoryUsage	src/networking.c	/^unsigned long getClientOutputBufferMemoryUsage(client *c) {$/;"	f	typeref:typename:unsigned long
getClientPeerId	src/networking.c	/^char *getClientPeerId(client *c) {$/;"	f	typeref:typename:char *
getClientSockname	src/networking.c	/^char *getClientSockname(client *c) {$/;"	f	typeref:typename:char *
getClientType	src/networking.c	/^int getClientType(client *c) {$/;"	f	typeref:typename:int
getClientTypeByName	src/networking.c	/^int getClientTypeByName(char *name) {$/;"	f	typeref:typename:int
getClientTypeName	src/networking.c	/^char *getClientTypeName(int class) {$/;"	f	typeref:typename:char *
getClientsMaxBuffers	src/networking.c	/^void getClientsMaxBuffers(unsigned long *longest_output_list,$/;"	f	typeref:typename:void
getClusterConnectionsCount	src/cluster.c	/^unsigned long getClusterConnectionsCount(void) {$/;"	f	typeref:typename:unsigned long
getClusterHostFromCmdArgs	src/redis-cli.c	/^static int getClusterHostFromCmdArgs(int argc, char **argv,$/;"	f	typeref:typename:int	file:
getColumns	deps/linenoise/linenoise.c	/^static int getColumns(int ifd, int ofd) {$/;"	f	typeref:typename:int	file:
getCommand	src/t_string.c	/^void getCommand(client *c) {$/;"	f	typeref:typename:void
getCursorPosition	deps/linenoise/linenoise.c	/^static int getCursorPosition(int ifd, int ofd) {$/;"	f	typeref:typename:int	file:
getDbSize	src/redis-cli.c	/^static int getDbSize(void) {$/;"	f	typeref:typename:int	file:
getDecodedObject	src/object.c	/^robj *getDecodedObject(robj *o) {$/;"	f	typeref:typename:robj *
getDotfilePath	src/redis-cli.c	/^static sds getDotfilePath(char *envoverride, char *dotfilename) {$/;"	f	typeref:typename:sds	file:
getDoubleFromObject	src/object.c	/^int getDoubleFromObject(const robj *o, double *target) {$/;"	f	typeref:typename:int
getDoubleFromObjectOrReply	src/object.c	/^int getDoubleFromObjectOrReply(client *c, robj *o, double *target, const char *msg) {$/;"	f	typeref:typename:int
getEventMask	src/ae_kqueue.c	/^static inline int getEventMask(const char *eventsMask, int fd) {$/;"	f	typeref:typename:int	file:
getExpansiveClientsInfo	src/server.c	/^void getExpansiveClientsInfo(size_t *in_usage, size_t *out_usage) {$/;"	f	typeref:typename:void
getExpire	src/db.c	/^long long getExpire(redisDb *db, robj *key) {$/;"	f	typeref:typename:long long
getF	deps/lua/src/lauxlib.c	/^static const char *getF (lua_State *L, void *ud, size_t *size) {$/;"	f	typeref:typename:const char *	file:
getFailoverStateString	src/replication.c	/^const char *getFailoverStateString() {$/;"	f	typeref:typename:const char *
getFlushCommandFlags	src/db.c	/^int getFlushCommandFlags(client *c, int *flags) {$/;"	f	typeref:typename:int
getGenericCommand	src/t_string.c	/^int getGenericCommand(client *c) {$/;"	f	typeref:typename:int
getIOPendingCount	src/networking.c	/^static inline unsigned long getIOPendingCount(int i) {$/;"	f	typeref:typename:unsigned long	file:
getInfoField	src/redis-cli.c	/^static char *getInfoField(char *info, char *field) {$/;"	f	typeref:typename:char *	file:
getInstantaneousMetric	src/server.c	/^long long getInstantaneousMetric(int metric) {$/;"	f	typeref:typename:long long
getIntFromObjectOrReply	src/object.c	/^int getIntFromObjectOrReply(client *c, robj *o, int *target, const char *msg) {$/;"	f	typeref:typename:int
getKeyFreqs	src/redis-cli.c	/^static void getKeyFreqs(redisReply *keys, unsigned long long *freqs) {$/;"	f	typeref:typename:void	file:
getKeySizes	src/redis-cli.c	/^static void getKeySizes(redisReply *keys, typeinfo **types,$/;"	f	typeref:typename:void	file:
getKeyTypes	src/redis-cli.c	/^static void getKeyTypes(dict *types_dict, redisReply *keys, typeinfo **types) {$/;"	f	typeref:typename:void	file:
getKeysFreeResult	src/db.c	/^void getKeysFreeResult(getKeysResult *result) {$/;"	f	typeref:typename:void
getKeysFromCommand	src/db.c	/^int getKeysFromCommand(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f	typeref:typename:int
getKeysInSlot	src/db.c	/^unsigned int getKeysInSlot(unsigned int hashslot, robj **keys, unsigned int count) {$/;"	f	typeref:typename:unsigned int
getKeysPrepareResult	src/db.c	/^int *getKeysPrepareResult(getKeysResult *result, int numkeys) {$/;"	f	typeref:typename:int *
getKeysResult	src/server.h	/^} getKeysResult;$/;"	t	typeref:struct:__anon3ef696e90708
getKeysUsingCommandTable	src/db.c	/^int getKeysUsingCommandTable(struct redisCommand *cmd,robj **argv, int argc, getKeysResult *resu/;"	f	typeref:typename:int
getLRUClock	src/evict.c	/^unsigned int getLRUClock(void) {$/;"	f	typeref:typename:unsigned int
getListPositionFromObjectOrReply	src/t_list.c	/^int getListPositionFromObjectOrReply(client *c, robj *arg, int *position) {$/;"	f	typeref:typename:int
getLongDoubleFromObject	src/object.c	/^int getLongDoubleFromObject(robj *o, long double *target) {$/;"	f	typeref:typename:int
getLongDoubleFromObjectOrReply	src/object.c	/^int getLongDoubleFromObjectOrReply(client *c, robj *o, long double *target, const char *msg) {$/;"	f	typeref:typename:int
getLongFromObjectOrReply	src/object.c	/^int getLongFromObjectOrReply(client *c, robj *o, long *target, const char *msg) {$/;"	f	typeref:typename:int
getLongInfoField	src/redis-cli.c	/^static long getLongInfoField(char *info, char *field) {$/;"	f	typeref:typename:long	file:
getLongLongFromObject	src/object.c	/^int getLongLongFromObject(robj *o, long long *target) {$/;"	f	typeref:typename:int
getLongLongFromObjectOrReply	src/object.c	/^int getLongLongFromObjectOrReply(client *c, robj *o, long long *target, const char *msg) {$/;"	f	typeref:typename:int
getMaxmemoryState	src/evict.c	/^int getMaxmemoryState(size_t *total, size_t *logical, size_t *tofree, float *level) {$/;"	f	typeref:typename:int
getMcontextEip	src/debug.c	/^static void *getMcontextEip(ucontext_t *uc) {$/;"	f	typeref:typename:void *	file:
getMemoryDoctorReport	src/object.c	/^sds getMemoryDoctorReport(void) {$/;"	f	typeref:typename:sds
getMemoryOverheadData	src/object.c	/^struct redisMemOverhead *getMemoryOverheadData(void) {$/;"	f	typeref:struct:redisMemOverhead *
getMonotonicUs	src/monotonic.c	/^monotime (*getMonotonicUs)(void) = NULL;$/;"	v	typeref:typename:monotime (*)(void)
getMonotonicUs_aarch64	src/monotonic.c	/^static monotime getMonotonicUs_aarch64() {$/;"	f	typeref:typename:monotime	file:
getMonotonicUs_posix	src/monotonic.c	/^static monotime getMonotonicUs_posix() {$/;"	f	typeref:typename:monotime	file:
getMonotonicUs_x86	src/monotonic.c	/^static monotime getMonotonicUs_x86() {$/;"	f	typeref:typename:monotime	file:
getNodeByQuery	src/cluster.c	/^clusterNode *getNodeByQuery(client *c, struct redisCommand *cmd, robj **argv, int argc, int *has/;"	f	typeref:typename:clusterNode *
getObjectReadOnlyString	src/bitops.c	/^unsigned char *getObjectReadOnlyString(robj *o, long *len, char *llbuf) {$/;"	f	typeref:typename:unsigned char *
getObjectTypeName	src/db.c	/^char* getObjectTypeName(robj *o) {$/;"	f	typeref:typename:char *
getOpMode	deps/lua/src/lopcodes.h	/^#define getOpMode(/;"	d
getPositiveLongFromObjectOrReply	src/object.c	/^int getPositiveLongFromObjectOrReply(client *c, robj *o, long *target, const char *msg) {$/;"	f	typeref:typename:int
getPsyncInitialOffset	src/replication.c	/^long long getPsyncInitialOffset(void) {$/;"	f	typeref:typename:long long
getRDB	src/redis-cli.c	/^static void getRDB(clusterManagerNode *node) {$/;"	f	typeref:typename:void	file:
getRandomBytes	src/util.c	/^void getRandomBytes(unsigned char *p, size_t len) {$/;"	f	typeref:typename:void
getRandomHexChars	src/util.c	/^void getRandomHexChars(char *p, size_t len) {$/;"	f	typeref:typename:void
getRangeLongFromObjectOrReply	src/object.c	/^int getRangeLongFromObjectOrReply(client *c, robj *o, long min, long max, long *target, const ch/;"	f	typeref:typename:int
getRedisConfig	src/redis-benchmark.c	/^static redisConfig *getRedisConfig(const char *ip, int port,$/;"	f	typeref:typename:redisConfig *	file:
getRedisContext	src/redis-benchmark.c	/^static redisContext *getRedisContext(const char *ip, int port,$/;"	f	typeref:typename:redisContext *	file:
getS	deps/lua/src/lauxlib.c	/^static const char *getS (lua_State *L, void *ud, size_t *size) {$/;"	f	typeref:typename:const char *	file:
getSafeInfoString	src/server.c	/^const char *getSafeInfoString(const char *s, size_t len, char **tmp) {$/;"	f	typeref:typename:const char *
getSdsArrayFromArgv	src/redis-cli.c	/^static sds *getSdsArrayFromArgv(int argc, char **argv, int quoted) {$/;"	f	typeref:typename:sds *	file:
getSentinelRedisInstanceByAddrAndRunID	src/sentinel.c	/^sentinelRedisInstance *getSentinelRedisInstanceByAddrAndRunID(dict *instances, char *addr, int p/;"	f	typeref:typename:sentinelRedisInstance *
getSignedBitfield	src/bitops.c	/^int64_t getSignedBitfield(unsigned char *p, uint64_t offset, uint64_t bits) {$/;"	f	typeref:typename:int64_t
getSlaveKeyWithExpireCount	src/expire.c	/^size_t getSlaveKeyWithExpireCount(void) {$/;"	f	typeref:typename:size_t
getSlotOrReply	src/cluster.c	/^int getSlotOrReply(client *c, robj *o) {$/;"	f	typeref:typename:int
getStringObjectFromListPosition	src/t_list.c	/^robj *getStringObjectFromListPosition(int position) {$/;"	f	typeref:typename:robj *
getStringObjectLen	src/networking.c	/^size_t getStringObjectLen(robj *o) {$/;"	f	typeref:typename:size_t
getStringObjectSdsUsedMemory	src/networking.c	/^size_t getStringObjectSdsUsedMemory(robj *o) {$/;"	f	typeref:typename:size_t
getTestProcByName	src/server.c	/^redisTestProc *getTestProcByName(const char *name) {$/;"	f	typeref:typename:redisTestProc *
getTimeZone	src/util.c	/^long getTimeZone(void) {$/;"	f	typeref:typename:long
getTimeoutFromObjectOrReply	src/timeout.c	/^int getTimeoutFromObjectOrReply(client *c, robj *object, mstime_t *timeout, int unit) {$/;"	f	typeref:typename:int
getUnsignedBitfield	src/bitops.c	/^uint64_t getUnsignedBitfield(unsigned char *p, uint64_t offset, uint64_t bits) {$/;"	f	typeref:typename:uint64_t
get_ack_from_slaves	src/server.h	/^    int get_ack_from_slaves;            \/* If true we send REPLCONF GETACK. *\/$/;"	m	struct:redisServer	typeref:typename:int
get_arena_dirty_npurge	deps/jemalloc/test/unit/decay.c	/^get_arena_dirty_npurge(unsigned arena_ind) {$/;"	f	typeref:typename:uint64_t	file:
get_arena_muzzy_npurge	deps/jemalloc/test/unit/decay.c	/^get_arena_muzzy_npurge(unsigned arena_ind) {$/;"	f	typeref:typename:uint64_t	file:
get_arena_npurge	deps/jemalloc/test/unit/decay.c	/^get_arena_npurge(unsigned arena_ind) {$/;"	f	typeref:typename:uint64_t	file:
get_arena_npurge_impl	deps/jemalloc/test/unit/decay.c	/^get_arena_npurge_impl(const char *mibname, unsigned arena_ind) {$/;"	f	typeref:typename:uint64_t	file:
get_arena_pdirty	deps/jemalloc/test/unit/decay.c	/^get_arena_pdirty(unsigned arena_ind) {$/;"	f	typeref:typename:size_t	file:
get_arena_pmuzzy	deps/jemalloc/test/unit/decay.c	/^get_arena_pmuzzy(unsigned arena_ind) {$/;"	f	typeref:typename:size_t	file:
get_bucket_index	deps/hdr_histogram/hdr_histogram.c	/^static int32_t get_bucket_index(const struct hdr_histogram* h, int64_t value)$/;"	f	typeref:typename:int32_t	file:
get_compTM	deps/lua/src/lvm.c	/^static const TValue *get_compTM (lua_State *L, Table *mt1, Table *mt2,$/;"	f	typeref:typename:const TValue *	file:
get_defrag_hint	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define get_defrag_hint /;"	d
get_defrag_hint	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define get_defrag_hint /;"	d
get_defrag_hint	deps/jemalloc/src/jemalloc.c	/^get_defrag_hint(void* ptr) {$/;"	f	typeref:typename:JEMALLOC_EXPORT int JEMALLOC_NOTHROW
get_errno	deps/jemalloc/include/jemalloc/internal/util.h	/^get_errno(void) {$/;"	f	typeref:typename:UTIL_INLINE int
get_fsl	tests/modules/blockonkeys.c	/^int get_fsl(RedisModuleCtx *ctx, RedisModuleString *keyname, int mode, int create, fsl_t **fsl, /;"	f	typeref:typename:int
get_idstring	deps/jemalloc/test/src/SFMT.c	/^const char *get_idstring(void) {$/;"	f	typeref:typename:const char *
get_large_size	deps/jemalloc/test/integration/mallocx.c	/^get_large_size(size_t ind) {$/;"	f	typeref:typename:size_t	file:
get_large_size	deps/jemalloc/test/integration/rallocx.c	/^get_large_size(size_t ind) {$/;"	f	typeref:typename:size_t	file:
get_large_size	deps/jemalloc/test/integration/xallocx.c	/^get_large_size(size_t ind) {$/;"	f	typeref:typename:size_t	file:
get_large_size	deps/jemalloc/test/unit/arena_reset.c	/^get_large_size(size_t ind) {$/;"	f	typeref:typename:size_t	file:
get_last_error	src/connection.h	/^    const char *(*get_last_error)(struct connection *conn);$/;"	m	struct:ConnectionType	typeref:typename:const char * (*)(struct connection * conn)
get_lg_prof_sample	deps/jemalloc/test/unit/prof_reset.c	/^get_lg_prof_sample(void) {$/;"	f	typeref:typename:size_t	file:
get_max_size_class	deps/jemalloc/test/unit/size_classes.c	/^get_max_size_class(void) {$/;"	f	typeref:typename:size_t	file:
get_min_array_size32	deps/jemalloc/test/src/SFMT.c	/^int get_min_array_size32(void) {$/;"	f	typeref:typename:int
get_min_array_size64	deps/jemalloc/test/src/SFMT.c	/^int get_min_array_size64(void) {$/;"	f	typeref:typename:int
get_nlarge	deps/jemalloc/test/integration/mallocx.c	/^get_nlarge(void) {$/;"	f	typeref:typename:unsigned	file:
get_nlarge	deps/jemalloc/test/integration/rallocx.c	/^get_nlarge(void) {$/;"	f	typeref:typename:unsigned	file:
get_nlarge	deps/jemalloc/test/integration/xallocx.c	/^get_nlarge(void) {$/;"	f	typeref:typename:unsigned	file:
get_nlarge	deps/jemalloc/test/unit/arena_reset.c	/^get_nlarge(void) {$/;"	f	typeref:typename:unsigned	file:
get_nsizes_impl	deps/jemalloc/test/integration/mallocx.c	/^get_nsizes_impl(const char *cmd) {$/;"	f	typeref:typename:unsigned	file:
get_nsizes_impl	deps/jemalloc/test/integration/rallocx.c	/^get_nsizes_impl(const char *cmd) {$/;"	f	typeref:typename:unsigned	file:
get_nsizes_impl	deps/jemalloc/test/integration/xallocx.c	/^get_nsizes_impl(const char *cmd) {$/;"	f	typeref:typename:TEST_END unsigned	file:
get_nsizes_impl	deps/jemalloc/test/unit/arena_reset.c	/^get_nsizes_impl(const char *cmd) {$/;"	f	typeref:typename:unsigned	file:
get_nsmall	deps/jemalloc/test/integration/xallocx.c	/^get_nsmall(void) {$/;"	f	typeref:typename:unsigned	file:
get_nsmall	deps/jemalloc/test/unit/arena_reset.c	/^get_nsmall(void) {$/;"	f	typeref:typename:unsigned	file:
get_prompt	deps/lua/src/lua.c	/^static const char *get_prompt (lua_State *L, int firstline) {$/;"	f	typeref:typename:const char *	file:
get_rate_str	deps/jemalloc/src/stats.c	/^get_rate_str(uint64_t dividend, uint64_t divisor, char str[6]) {$/;"	f	typeref:typename:bool	file:
get_redis_tcp_options	deps/hiredis/test.c	/^redisOptions get_redis_tcp_options(struct config config) {$/;"	f	typeref:typename:redisOptions
get_redis_version	deps/hiredis/test.c	/^void get_redis_version(redisContext *c, int *majorptr, int *minorptr) {$/;"	f	typeref:typename:void
get_size_impl	deps/jemalloc/test/integration/mallocx.c	/^get_size_impl(const char *cmd, size_t ind) {$/;"	f	typeref:typename:size_t	file:
get_size_impl	deps/jemalloc/test/integration/rallocx.c	/^get_size_impl(const char *cmd, size_t ind) {$/;"	f	typeref:typename:size_t	file:
get_size_impl	deps/jemalloc/test/integration/xallocx.c	/^get_size_impl(const char *cmd, size_t ind) {$/;"	f	typeref:typename:size_t	file:
get_size_impl	deps/jemalloc/test/unit/arena_reset.c	/^get_size_impl(const char *cmd, size_t ind) {$/;"	f	typeref:typename:size_t	file:
get_small_size	deps/jemalloc/test/integration/xallocx.c	/^get_small_size(size_t ind) {$/;"	f	typeref:typename:size_t	file:
get_small_size	deps/jemalloc/test/unit/arena_reset.c	/^get_small_size(size_t ind) {$/;"	f	typeref:typename:size_t	file:
get_sub_bucket_index	deps/hdr_histogram/hdr_histogram.c	/^static int32_t get_sub_bucket_index(int64_t value, int32_t bucket_index, int32_t unit_magnitude)$/;"	f	typeref:typename:int32_t	file:
get_type	src/connection.h	/^    int (*get_type)(struct connection *conn);$/;"	m	struct:ConnectionType	typeref:typename:int (*)(struct connection * conn)
getack	src/server.h	/^    *getack, *special_asterick, *special_equals, *default_username, *redacted,$/;"	m	struct:sharedObjectsStruct
getaddrinfo	deps/hiredis/sockcompat.h	/^#define getaddrinfo(/;"	d
getapifuncptr	src/module.c	/^    void *getapifuncptr;            \/* NOTE: Must be the first field. *\/$/;"	m	struct:RedisModuleCtx	typeref:typename:void *	file:
getargs	deps/lua/src/lua.c	/^static int getargs (lua_State *L, char **argv, int n) {$/;"	f	typeref:typename:int	file:
getbinopr	deps/lua/src/lparser.c	/^static BinOpr getbinopr (int op) {$/;"	f	typeref:typename:BinOpr	file:
getbitCommand	src/bitops.c	/^void getbitCommand(client *c) {$/;"	f	typeref:typename:void
getboolfield	deps/lua/src/loslib.c	/^static int getboolfield (lua_State *L, const char *key) {$/;"	f	typeref:typename:int	file:
getcode	deps/lua/src/lcode.h	/^#define getcode(/;"	d
getcurrenv	deps/lua/src/lapi.c	/^static Table *getcurrenv (lua_State *L) {$/;"	f	typeref:typename:Table *	file:
getdelCommand	src/t_string.c	/^void getdelCommand(client *c) {$/;"	f	typeref:typename:void
getexCommand	src/t_string.c	/^void getexCommand(client *c) {$/;"	f	typeref:typename:void
getfield	deps/lua/src/loslib.c	/^static int getfield (lua_State *L, const char *key, int d) {$/;"	f	typeref:typename:int	file:
getfreepos	deps/lua/src/ltable.c	/^static Node *getfreepos (Table *t) {$/;"	f	typeref:typename:Node *	file:
getfunc	deps/lua/src/lbaselib.c	/^static void getfunc (lua_State *L, int opt) {$/;"	f	typeref:typename:void	file:
getfuncname	deps/lua/src/ldebug.c	/^static const char *getfuncname (lua_State *L, CallInfo *ci, const char **name) {$/;"	f	typeref:typename:const char *	file:
gethooktable	deps/lua/src/ldblib.c	/^static void gethooktable (lua_State *L) {$/;"	f	typeref:typename:void	file:
getinteger	deps/lua/src/lua_struct.c	/^static lua_Number getinteger (const char *buff, int endian,$/;"	f	typeref:typename:lua_Number	file:
getiofile	deps/lua/src/liolib.c	/^static FILE *getiofile (lua_State *L, int findex) {$/;"	f	typeref:typename:FILE *	file:
getjump	deps/lua/src/lcode.c	/^static int getjump (FuncState *fs, int pc) {$/;"	f	typeref:typename:int	file:
getjumpcontrol	deps/lua/src/lcode.c	/^static Instruction *getjumpcontrol (FuncState *fs, int pc) {$/;"	f	typeref:typename:Instruction *	file:
getkeys_command	tests/modules/getkeys.c	/^int getkeys_command(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
getkeys_fixed	tests/modules/getkeys.c	/^int getkeys_fixed(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
getkeys_introspect	tests/modules/getkeys.c	/^int getkeys_introspect(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
getkeys_proc	src/server.h	/^    redisGetKeysProc *getkeys_proc;$/;"	m	struct:redisCommand	typeref:typename:redisGetKeysProc *
getline	deps/lua/src/ldebug.h	/^#define getline(/;"	d
getlocvar	deps/lua/src/lparser.c	/^#define getlocvar(/;"	d	file:
getluaproto	deps/lua/src/ldebug.c	/^static Proto *getluaproto (CallInfo *ci) {$/;"	f	typeref:typename:Proto *	file:
getn	deps/lua/src/ltablib.c	/^static int getn (lua_State *L) {$/;"	f	typeref:typename:int	file:
getnum	deps/lua/src/lua_struct.c	/^static int getnum (lua_State *L, const char **fmt, int df) {$/;"	f	typeref:typename:int	file:
getobjname	deps/lua/src/ldebug.c	/^static const char *getobjname (lua_State *L, CallInfo *ci, int stackpos,$/;"	f	typeref:typename:const char *	file:
getrangeCommand	src/t_string.c	/^void getrangeCommand(client *c) {$/;"	f	typeref:typename:void
getrdb_mode	src/redis-cli.c	/^    int getrdb_mode;$/;"	m	struct:config	typeref:typename:int	file:
getsetCommand	src/t_string.c	/^void getsetCommand(client *c) {$/;"	f	typeref:typename:void
getsizes	deps/lua/src/lauxlib.c	/^static void getsizes (lua_State *L) {$/;"	f	typeref:typename:void	file:
getsockopt	deps/hiredis/sockcompat.h	/^#define getsockopt(/;"	d
getstr	deps/lua/src/lobject.h	/^#define getstr(/;"	d
getthread	deps/lua/src/ldblib.c	/^static lua_State *getthread (lua_State *L, int *arg) {$/;"	f	typeref:typename:lua_State *	file:
gettoalign	deps/lua/src/lua_struct.c	/^static int gettoalign (size_t len, Header *h, int opt, size_t size) {$/;"	f	typeref:typename:int	file:
getunopr	deps/lua/src/lparser.c	/^static UnOpr getunopr (int op) {$/;"	f	typeref:typename:UnOpr	file:
gfasttm	deps/lua/src/ltm.h	/^#define gfasttm(/;"	d
gfind_nodef	deps/lua/src/lstrlib.c	/^static int gfind_nodef (lua_State *L) {$/;"	f	typeref:typename:int	file:
gkey	deps/lua/src/ltable.h	/^#define gkey(/;"	d
global	src/modules/helloacl.c	/^static RedisModuleUser *global;$/;"	v	typeref:typename:RedisModuleUser *	file:
global	tests/modules/auth.c	/^static RedisModuleUser *global = NULL;$/;"	v	typeref:typename:RedisModuleUser *	file:
globalL	deps/lua/src/lua.c	/^static lua_State *globalL = NULL;$/;"	v	typeref:typename:lua_State *	file:
global_State	deps/lua/src/lstate.h	/^typedef struct global_State {$/;"	s
global_State	deps/lua/src/lstate.h	/^} global_State;$/;"	t	typeref:struct:global_State
global_attempts	tests/modules/defragtest.c	/^unsigned long int global_attempts = 0;$/;"	v	typeref:typename:unsigned long int
global_auth_client_id	src/modules/helloacl.c	/^static uint64_t global_auth_client_id = 0;$/;"	v	typeref:typename:uint64_t	file:
global_defragged	tests/modules/defragtest.c	/^unsigned long int global_defragged = 0;$/;"	v	typeref:typename:unsigned long int
global_mutex_names	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define global_mutex_names /;"	d
global_mutex_names	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define global_mutex_names /;"	d
global_mutex_names	deps/jemalloc/src/stats.c	/^const char *global_mutex_names[mutex_prof_num_global_mutexes] = {$/;"	v	typeref:typename:const char * []
global_strings	tests/modules/defragtest.c	/^RedisModuleString **global_strings = NULL;$/;"	v	typeref:typename:RedisModuleString **
global_strings_len	tests/modules/defragtest.c	/^int global_strings_len = 0;$/;"	v	typeref:typename:int
gmatch	deps/lua/src/lstrlib.c	/^static int gmatch (lua_State *L) {$/;"	f	typeref:typename:int	file:
gmatch_aux	deps/lua/src/lstrlib.c	/^static int gmatch_aux (lua_State *L) {$/;"	f	typeref:typename:int	file:
gnext	deps/lua/src/ltable.h	/^#define gnext(/;"	d
gnode	deps/lua/src/ltable.h	/^#define gnode(/;"	d
good_size	deps/jemalloc/src/zone.c	/^	size_t (*good_size)(malloc_zone_t *, size_t);$/;"	m	struct:malloc_introspection_t	typeref:typename:size_t (*)(malloc_zone_t *,size_t)	file:
gopher_enabled	src/server.h	/^    int gopher_enabled;         \/* If true the server will reply to gopher$/;"	m	struct:redisServer	typeref:typename:int
gossip	src/cluster.h	/^        clusterMsgDataGossip gossip[1];$/;"	m	struct:clusterMsgData::__anon2cc7db540608	typeref:typename:clusterMsgDataGossip[1]
gprof	deps/hiredis/Makefile	/^gprof:$/;"	t
grab_length	src/switchrealloc.c	/^size_t grab_length(void *ptr)$/;"	f	typeref:typename:size_t
gray	deps/lua/src/lstate.h	/^  GCObject *gray;  \/* list of gray objects *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
gray2black	deps/lua/src/lgc.h	/^#define gray2black(/;"	d
grayagain	deps/lua/src/lstate.h	/^  GCObject *grayagain;  \/* list of objects to be traversed atomically *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
group	src/help.h	/^  int group;$/;"	m	struct:commandHelp	typeref:typename:int
group_offset	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^	size_t group_offset;$/;"	m	struct:bitmap_level_s	typeref:typename:size_t
groupname	src/stream.h	/^    robj *groupname;$/;"	m	struct:streamPropInfo	typeref:typename:robj *
growCI	deps/lua/src/ldo.c	/^static CallInfo *growCI (lua_State *L) {$/;"	f	typeref:typename:CallInfo *	file:
gt	deps/lua/src/lstate.h	/^#define gt(/;"	d
gval	deps/lua/src/ltable.h	/^#define gval(/;"	d
h	deps/hdr_histogram/hdr_histogram.h	/^    const struct hdr_histogram* h;$/;"	m	struct:hdr_iter	typeref:typename:const struct hdr_histogram *
h	deps/lua/src/lparser.h	/^  Table *h;  \/* table to find (and reuse) elements in `k' *\/$/;"	m	struct:FuncState	typeref:typename:Table *
h	deps/lua/src/lstate.h	/^  struct Table h;$/;"	m	union:GCObject	typeref:struct:Table
h_steps	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define h_steps /;"	d
h_steps	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define h_steps /;"	d
h_steps	deps/jemalloc/src/arena.c	/^const uint64_t h_steps[SMOOTHSTEP_NSTEPS] = {$/;"	v	typeref:typename:const uint64_t[]
had_conf_error	deps/jemalloc/src/jemalloc.c	/^static bool had_conf_error = false;$/;"	v	typeref:typename:bool	file:
handle	deps/hiredis/adapters/libuv.h	/^  uv_poll_t          handle;$/;"	m	struct:redisLibuvEvents	typeref:typename:uv_poll_t
handle	src/module.c	/^    void *handle;   \/* Module dlopen() handle. *\/$/;"	m	struct:RedisModule	typeref:typename:void *	file:
handleBlockedClientsTimeout	src/timeout.c	/^void handleBlockedClientsTimeout(void) {$/;"	f	typeref:typename:void
handleClientsBlockedOnKeys	src/blocked.c	/^void handleClientsBlockedOnKeys(void) {$/;"	f	typeref:typename:void
handleClientsWithPendingReadsUsingThreads	src/networking.c	/^int handleClientsWithPendingReadsUsingThreads(void) {$/;"	f	typeref:typename:int
handleClientsWithPendingWrites	src/networking.c	/^int handleClientsWithPendingWrites(void) {$/;"	f	typeref:typename:int
handleClientsWithPendingWritesUsingThreads	src/networking.c	/^int handleClientsWithPendingWritesUsingThreads(void) {$/;"	f	typeref:typename:int
handleLinkIOError	src/cluster.c	/^void handleLinkIOError(clusterLink *link) {$/;"	f	typeref:typename:void
handleOOM	deps/jemalloc/src/jemalloc_cpp.cpp	/^handleOOM(std::size_t size, bool nothrow) {$/;"	f	typeref:typename:JEMALLOC_NOINLINE void *	file:
handleSSLReturnCode	src/tls.c	/^static int handleSSLReturnCode(tls_connection *conn, int ret_value, WantIOType *want) {$/;"	f	typeref:typename:int	file:
handle_luainit	deps/lua/src/lua.c	/^static int handle_luainit (lua_State *L) {$/;"	f	typeref:typename:int	file:
handle_script	deps/lua/src/lua.c	/^static int handle_script (lua_State *L, char **argv, int n) {$/;"	f	typeref:typename:int	file:
handshaking	src/redis-cli.c	/^    int handshaking;$/;"	m	struct:clusterManagerLink	typeref:typename:int	file:
hard_limit_bytes	src/server.h	/^    unsigned long long hard_limit_bytes;$/;"	m	struct:clientBufferLimitsConfig	typeref:typename:unsigned long long
harndfieldReplyWithZiplist	src/t_hash.c	/^static void harndfieldReplyWithZiplist(client *c, unsigned int count, ziplistEntry *keys, ziplis/;"	f	typeref:typename:void	file:
hasActiveChildProcess	src/server.c	/^int hasActiveChildProcess() {$/;"	f	typeref:typename:int
has_buckets	deps/hdr_histogram/hdr_histogram.c	/^static bool has_buckets(struct hdr_iter* iter)$/;"	f	typeref:typename:bool	file:
has_next	deps/hdr_histogram/hdr_histogram.c	/^static bool has_next(struct hdr_iter* iter)$/;"	f	typeref:typename:bool	file:
has_tail	src/config.c	/^    int has_tail;         \/* True if we already added directives that were$/;"	m	struct:configSetCommand::rewriteConfigState	typeref:typename:int	file:
hash	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	ckh_hash_t *hash;$/;"	m	struct:__anon25f7a4b70208	typeref:typename:ckh_hash_t *
hash	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash(const void *key, size_t len, const uint32_t seed, size_t r_hash[2]) {$/;"	f	typeref:typename:void
hash	deps/lua/src/lobject.h	/^    unsigned int hash;$/;"	m	struct:TString::__anona52fc9410208	typeref:typename:unsigned int
hash	deps/lua/src/lstate.h	/^  GCObject **hash;$/;"	m	struct:stringtable	typeref:typename:GCObject **
hash	src/geohash.h	/^    GeoHashBits hash;$/;"	m	struct:__anona01652f10408	typeref:typename:GeoHashBits
hash	src/geohash_helper.h	/^    GeoHashBits hash;$/;"	m	struct:__anon1a1c3d100108	typeref:typename:GeoHashBits
hashCallback	src/dict.c	/^uint64_t hashCallback(const void *key) {$/;"	f	typeref:typename:uint64_t
hashDictType	src/server.c	/^dictType hashDictType = {$/;"	v	typeref:typename:dictType
hashFunction	deps/hiredis/dict.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:dictType	typeref:typename:unsigned int (*)(const void * key)
hashFunction	src/dict.h	/^    uint64_t (*hashFunction)(const void *key);$/;"	m	struct:dictType	typeref:typename:uint64_t (*)(const void * key)
hashReplyFromZiplistEntry	src/t_hash.c	/^void hashReplyFromZiplistEntry(client *c, ziplistEntry *e) {$/;"	f	typeref:typename:void
hashSdsFromZiplistEntry	src/t_hash.c	/^sds hashSdsFromZiplistEntry(ziplistEntry *e) {$/;"	f	typeref:typename:sds
hashTypeConvert	src/t_hash.c	/^void hashTypeConvert(robj *o, int enc) {$/;"	f	typeref:typename:void
hashTypeConvertZiplist	src/t_hash.c	/^void hashTypeConvertZiplist(robj *o, int enc) {$/;"	f	typeref:typename:void
hashTypeCurrentFromHashTable	src/t_hash.c	/^sds hashTypeCurrentFromHashTable(hashTypeIterator *hi, int what) {$/;"	f	typeref:typename:sds
hashTypeCurrentFromZiplist	src/t_hash.c	/^void hashTypeCurrentFromZiplist(hashTypeIterator *hi, int what,$/;"	f	typeref:typename:void
hashTypeCurrentObject	src/t_hash.c	/^void hashTypeCurrentObject(hashTypeIterator *hi, int what, unsigned char **vstr, unsigned int *v/;"	f	typeref:typename:void
hashTypeCurrentObjectNewSds	src/t_hash.c	/^sds hashTypeCurrentObjectNewSds(hashTypeIterator *hi, int what) {$/;"	f	typeref:typename:sds
hashTypeDelete	src/t_hash.c	/^int hashTypeDelete(robj *o, sds field) {$/;"	f	typeref:typename:int
hashTypeDup	src/t_hash.c	/^robj *hashTypeDup(robj *o) {$/;"	f	typeref:typename:robj *
hashTypeExists	src/t_hash.c	/^int hashTypeExists(robj *o, sds field) {$/;"	f	typeref:typename:int
hashTypeGetFromHashTable	src/t_hash.c	/^sds hashTypeGetFromHashTable(robj *o, sds field) {$/;"	f	typeref:typename:sds
hashTypeGetFromZiplist	src/t_hash.c	/^int hashTypeGetFromZiplist(robj *o, sds field,$/;"	f	typeref:typename:int
hashTypeGetValue	src/t_hash.c	/^int hashTypeGetValue(robj *o, sds field, unsigned char **vstr, unsigned int *vlen, long long *vl/;"	f	typeref:typename:int
hashTypeGetValueLength	src/t_hash.c	/^size_t hashTypeGetValueLength(robj *o, sds field) {$/;"	f	typeref:typename:size_t
hashTypeGetValueObject	src/t_hash.c	/^robj *hashTypeGetValueObject(robj *o, sds field) {$/;"	f	typeref:typename:robj *
hashTypeInitIterator	src/t_hash.c	/^hashTypeIterator *hashTypeInitIterator(robj *subject) {$/;"	f	typeref:typename:hashTypeIterator *
hashTypeIterator	src/server.h	/^} hashTypeIterator;$/;"	t	typeref:struct:__anon3ef696e90c08
hashTypeLength	src/t_hash.c	/^unsigned long hashTypeLength(const robj *o) {$/;"	f	typeref:typename:unsigned long
hashTypeLookupWriteOrCreate	src/t_hash.c	/^robj *hashTypeLookupWriteOrCreate(client *c, robj *key) {$/;"	f	typeref:typename:robj *
hashTypeNext	src/t_hash.c	/^int hashTypeNext(hashTypeIterator *hi) {$/;"	f	typeref:typename:int
hashTypeRandomElement	src/t_hash.c	/^void hashTypeRandomElement(robj *hashobj, unsigned long hashsize, ziplistEntry *key, ziplistEntr/;"	f	typeref:typename:void
hashTypeReleaseIterator	src/t_hash.c	/^void hashTypeReleaseIterator(hashTypeIterator *hi) {$/;"	f	typeref:typename:void
hashTypeSet	src/t_hash.c	/^int hashTypeSet(robj *o, sds field, sds value, int flags) {$/;"	f	typeref:typename:int
hashTypeTryConversion	src/t_hash.c	/^void hashTypeTryConversion(robj *o, robj **argv, int start, int end) {$/;"	f	typeref:typename:void
hashZiplistValidateIntegrity	src/t_hash.c	/^int hashZiplistValidateIntegrity(unsigned char *zl, size_t size, int deep) {$/;"	f	typeref:typename:int
hash_fmix_32	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_fmix_32(uint32_t h) {$/;"	f	typeref:typename:uint32_t
hash_fmix_64	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_fmix_64(uint64_t k) {$/;"	f	typeref:typename:uint64_t
hash_get_block_32	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_get_block_32(const uint32_t *p, int i) {$/;"	f	typeref:typename:uint32_t
hash_get_block_64	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_get_block_64(const uint64_t *p, int i) {$/;"	f	typeref:typename:uint64_t
hash_max_ziplist_entries	src/server.h	/^    size_t hash_max_ziplist_entries;$/;"	m	struct:redisServer	typeref:typename:size_t
hash_max_ziplist_value	src/server.h	/^    size_t hash_max_ziplist_value;$/;"	m	struct:redisServer	typeref:typename:size_t
hash_rotl_32	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_rotl_32(uint32_t x, int8_t r) {$/;"	f	typeref:typename:uint32_t
hash_rotl_64	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_rotl_64(uint64_t x, int8_t r) {$/;"	f	typeref:typename:uint64_t
hash_set	tests/modules/hash.c	/^int hash_set(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
hash_variant_bits	deps/jemalloc/test/unit/hash.c	/^hash_variant_bits(hash_variant_t variant) {$/;"	f	typeref:typename:int	file:
hash_variant_string	deps/jemalloc/test/unit/hash.c	/^hash_variant_string(hash_variant_t variant) {$/;"	f	typeref:typename:const char *	file:
hash_variant_t	deps/jemalloc/test/unit/hash.c	/^} hash_variant_t;$/;"	t	typeref:enum:__anonedaaa5090103	file:
hash_variant_verify	deps/jemalloc/test/unit/hash.c	/^hash_variant_verify(hash_variant_t variant) {$/;"	f	typeref:typename:void	file:
hash_variant_verify_key	deps/jemalloc/test/unit/hash.c	/^hash_variant_verify_key(hash_variant_t variant, uint8_t *key) {$/;"	f	typeref:typename:void	file:
hash_variant_x64_128	deps/jemalloc/test/unit/hash.c	/^	hash_variant_x64_128$/;"	e	enum:__anonedaaa5090103	file:
hash_variant_x86_128	deps/jemalloc/test/unit/hash.c	/^	hash_variant_x86_128,$/;"	e	enum:__anonedaaa5090103	file:
hash_variant_x86_32	deps/jemalloc/test/unit/hash.c	/^	hash_variant_x86_32,$/;"	e	enum:__anonedaaa5090103	file:
hash_x64_128	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_x64_128(const void *key, const int len, const uint32_t seed,$/;"	f	typeref:typename:UNUSED void
hash_x86_128	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_x86_128(const void *key, const int len, uint32_t seed,$/;"	f	typeref:typename:UNUSED void
hash_x86_32	deps/jemalloc/include/jemalloc/internal/hash.h	/^hash_x86_32(const void *key, int len, uint32_t seed) {$/;"	f	typeref:typename:uint32_t
hashboolean	deps/lua/src/ltable.c	/^#define hashboolean(/;"	d	file:
hashmod	deps/lua/src/ltable.c	/^#define hashmod(/;"	d	file:
hashnum	deps/lua/src/ltable.c	/^static Node *hashnum (const Table *t, lua_Number n) {$/;"	f	typeref:typename:Node *	file:
hashpointer	deps/lua/src/ltable.c	/^#define hashpointer(/;"	d	file:
hashpow2	deps/lua/src/ltable.c	/^#define hashpow2(/;"	d	file:
hashstr	deps/lua/src/ltable.c	/^#define hashstr(/;"	d	file:
hasjumps	deps/lua/src/lcode.c	/^#define hasjumps(/;"	d	file:
hasmultret	deps/lua/src/lparser.c	/^#define hasmultret(/;"	d	file:
have_background_thread	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool have_background_thread =$/;"	v	typeref:typename:const bool
have_background_thread	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool have_background_thread =$/;"	v	typeref:typename:const bool	file:
have_dss	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool have_dss =$/;"	v	typeref:typename:const bool
have_dss	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool have_dss =$/;"	v	typeref:typename:const bool	file:
have_dss	deps/jemalloc/test/integration/MALLOCX_ARENA.c	/^static bool have_dss =$/;"	v	typeref:typename:bool	file:
have_madvise_huge	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool have_madvise_huge =$/;"	v	typeref:typename:const bool
have_madvise_huge	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool have_madvise_huge =$/;"	v	typeref:typename:const bool	file:
have_percpu_arena	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool have_percpu_arena =$/;"	v	typeref:typename:const bool
have_percpu_arena	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool have_percpu_arena =$/;"	v	typeref:typename:const bool	file:
hdelCommand	src/t_hash.c	/^void hdelCommand(client *c) {$/;"	f	typeref:typename:void
hdr_add	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_add(struct hdr_histogram* h, const struct hdr_histogram* from)$/;"	f	typeref:typename:int64_t
hdr_add_while_correcting_for_coordinated_omission	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_add_while_correcting_for_coordinated_omission($/;"	f	typeref:typename:int64_t
hdr_alloc	deps/hdr_histogram/hdr_histogram.c	/^int hdr_alloc(int64_t highest_trackable_value, int significant_figures, struct hdr_histogram** r/;"	f	typeref:typename:int
hdr_atomic_add_fetch_64	deps/hdr_histogram/hdr_atomic.h	/^#define hdr_atomic_add_fetch_64(/;"	d
hdr_atomic_add_fetch_64	deps/hdr_histogram/hdr_atomic.h	/^static inline int64_t hdr_atomic_add_fetch_64(volatile int64_t* field, int64_t value)$/;"	f	typeref:typename:int64_t
hdr_atomic_add_fetch_64	deps/hdr_histogram/hdr_atomic.h	/^static int64_t __inline hdr_atomic_add_fetch_64(volatile int64_t* field, int64_t value)$/;"	f	typeref:typename:int64_t
hdr_atomic_compare_exchange_64	deps/hdr_histogram/hdr_atomic.h	/^#define hdr_atomic_compare_exchange_64(/;"	d
hdr_atomic_compare_exchange_64	deps/hdr_histogram/hdr_atomic.h	/^static bool __inline hdr_atomic_compare_exchange_64(volatile int64_t* field, int64_t* expected, /;"	f	typeref:typename:bool
hdr_atomic_compare_exchange_64	deps/hdr_histogram/hdr_atomic.h	/^static inline bool hdr_atomic_compare_exchange_64(volatile int64_t* field, int64_t* expected, in/;"	f	typeref:typename:bool
hdr_atomic_exchange_64	deps/hdr_histogram/hdr_atomic.h	/^#define hdr_atomic_exchange_64(/;"	d
hdr_atomic_exchange_64	deps/hdr_histogram/hdr_atomic.h	/^static inline int64_t hdr_atomic_exchange_64(volatile int64_t* field, int64_t value)$/;"	f	typeref:typename:int64_t
hdr_atomic_exchange_64	deps/hdr_histogram/hdr_atomic.h	/^static int64_t __inline hdr_atomic_exchange_64(volatile int64_t* field, int64_t value)$/;"	f	typeref:typename:int64_t
hdr_atomic_load_64	deps/hdr_histogram/hdr_atomic.h	/^#define hdr_atomic_load_64(/;"	d
hdr_atomic_load_64	deps/hdr_histogram/hdr_atomic.h	/^static inline int64_t hdr_atomic_load_64(int64_t* field)$/;"	f	typeref:typename:int64_t
hdr_atomic_load_64	deps/hdr_histogram/hdr_atomic.h	/^static int64_t __inline hdr_atomic_load_64(int64_t* field)$/;"	f	typeref:typename:int64_t
hdr_atomic_load_pointer	deps/hdr_histogram/hdr_atomic.h	/^#define hdr_atomic_load_pointer(/;"	d
hdr_atomic_load_pointer	deps/hdr_histogram/hdr_atomic.h	/^static inline void* hdr_atomic_load_pointer(void** pointer)$/;"	f	typeref:typename:void *
hdr_atomic_load_pointer	deps/hdr_histogram/hdr_atomic.h	/^static void __inline * hdr_atomic_load_pointer(void** pointer)$/;"	f	typeref:typename:void *
hdr_atomic_store_64	deps/hdr_histogram/hdr_atomic.h	/^#define hdr_atomic_store_64(/;"	d
hdr_atomic_store_64	deps/hdr_histogram/hdr_atomic.h	/^static inline void hdr_atomic_store_64(int64_t* field, int64_t value)$/;"	f	typeref:typename:void
hdr_atomic_store_64	deps/hdr_histogram/hdr_atomic.h	/^static void __inline hdr_atomic_store_64(int64_t* field, int64_t value)$/;"	f	typeref:typename:void
hdr_atomic_store_pointer	deps/hdr_histogram/hdr_atomic.h	/^#define hdr_atomic_store_pointer(/;"	d
hdr_atomic_store_pointer	deps/hdr_histogram/hdr_atomic.h	/^static inline void hdr_atomic_store_pointer(void** pointer, void* value)$/;"	f	typeref:typename:void
hdr_atomic_store_pointer	deps/hdr_histogram/hdr_atomic.h	/^static void hdr_atomic_store_pointer(void** pointer, void* value)$/;"	f	typeref:typename:void
hdr_calculate_bucket_config	deps/hdr_histogram/hdr_histogram.c	/^int hdr_calculate_bucket_config($/;"	f	typeref:typename:int
hdr_close	deps/hdr_histogram/hdr_histogram.c	/^void hdr_close(struct hdr_histogram* h)$/;"	f	typeref:typename:void
hdr_count_at_index	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_count_at_index(const struct hdr_histogram* h, int32_t index)$/;"	f	typeref:typename:int64_t
hdr_count_at_value	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_count_at_value(const struct hdr_histogram* h, int64_t value)$/;"	f	typeref:typename:int64_t
hdr_get_memory_size	deps/hdr_histogram/hdr_histogram.c	/^size_t hdr_get_memory_size(struct hdr_histogram *h)$/;"	f	typeref:typename:size_t
hdr_histogram	deps/Makefile	/^hdr_histogram: .make-prerequisites$/;"	t
hdr_histogram	deps/hdr_histogram/hdr_histogram.h	/^struct hdr_histogram$/;"	s
hdr_histogram.o	deps/hdr_histogram/Makefile	/^hdr_histogram.o: hdr_histogram.h hdr_histogram.c $/;"	t
hdr_histogram_bucket_config	deps/hdr_histogram/hdr_histogram.h	/^struct hdr_histogram_bucket_config$/;"	s
hdr_init	deps/hdr_histogram/hdr_histogram.c	/^int hdr_init($/;"	f	typeref:typename:int
hdr_init_preallocated	deps/hdr_histogram/hdr_histogram.c	/^void hdr_init_preallocated(struct hdr_histogram* h, struct hdr_histogram_bucket_config* cfg)$/;"	f	typeref:typename:void
hdr_iter	deps/hdr_histogram/hdr_histogram.h	/^struct hdr_iter$/;"	s
hdr_iter_init	deps/hdr_histogram/hdr_histogram.c	/^void hdr_iter_init(struct hdr_iter* iter, const struct hdr_histogram* h)$/;"	f	typeref:typename:void
hdr_iter_linear	deps/hdr_histogram/hdr_histogram.h	/^struct hdr_iter_linear$/;"	s
hdr_iter_linear_init	deps/hdr_histogram/hdr_histogram.c	/^void hdr_iter_linear_init(struct hdr_iter* iter, const struct hdr_histogram* h, int64_t value_un/;"	f	typeref:typename:void
hdr_iter_linear_set_value_units_per_bucket	deps/hdr_histogram/hdr_histogram.c	/^void hdr_iter_linear_set_value_units_per_bucket(struct hdr_iter* iter, int64_t value_units_per_b/;"	f	typeref:typename:void
hdr_iter_log	deps/hdr_histogram/hdr_histogram.h	/^struct hdr_iter_log$/;"	s
hdr_iter_log_init	deps/hdr_histogram/hdr_histogram.c	/^void hdr_iter_log_init($/;"	f	typeref:typename:void
hdr_iter_next	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_iter_next(struct hdr_iter* iter)$/;"	f	typeref:typename:bool
hdr_iter_percentile_init	deps/hdr_histogram/hdr_histogram.c	/^void hdr_iter_percentile_init(struct hdr_iter* iter, const struct hdr_histogram* h, int32_t tick/;"	f	typeref:typename:void
hdr_iter_percentiles	deps/hdr_histogram/hdr_histogram.h	/^struct hdr_iter_percentiles$/;"	s
hdr_iter_recorded	deps/hdr_histogram/hdr_histogram.h	/^struct hdr_iter_recorded$/;"	s
hdr_iter_recorded_init	deps/hdr_histogram/hdr_histogram.c	/^void hdr_iter_recorded_init(struct hdr_iter* iter, const struct hdr_histogram* h)$/;"	f	typeref:typename:void
hdr_lowest_equivalent_value	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_lowest_equivalent_value(const struct hdr_histogram* h, int64_t value)$/;"	f	typeref:typename:int64_t
hdr_max	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_max(const struct hdr_histogram* h)$/;"	f	typeref:typename:int64_t
hdr_mean	deps/hdr_histogram/hdr_histogram.c	/^double hdr_mean(const struct hdr_histogram* h)$/;"	f	typeref:typename:double
hdr_median_equivalent_value	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_median_equivalent_value(const struct hdr_histogram *h, int64_t value)$/;"	f	typeref:typename:int64_t
hdr_min	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_min(const struct hdr_histogram* h)$/;"	f	typeref:typename:int64_t
hdr_next_non_equivalent_value	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_next_non_equivalent_value(const struct hdr_histogram *h, int64_t value)$/;"	f	typeref:typename:int64_t
hdr_percentiles_print	deps/hdr_histogram/hdr_histogram.c	/^int hdr_percentiles_print($/;"	f	typeref:typename:int
hdr_record_corrected_value	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_record_corrected_value(struct hdr_histogram* h, int64_t value, int64_t expected_interva/;"	f	typeref:typename:bool
hdr_record_corrected_value_atomic	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_record_corrected_value_atomic(struct hdr_histogram* h, int64_t value, int64_t expected_/;"	f	typeref:typename:bool
hdr_record_corrected_values	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_record_corrected_values(struct hdr_histogram* h, int64_t value, int64_t count, int64_t /;"	f	typeref:typename:bool
hdr_record_corrected_values_atomic	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_record_corrected_values_atomic(struct hdr_histogram* h, int64_t value, int64_t count, i/;"	f	typeref:typename:bool
hdr_record_value	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_record_value(struct hdr_histogram* h, int64_t value)$/;"	f	typeref:typename:bool
hdr_record_value_atomic	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_record_value_atomic(struct hdr_histogram* h, int64_t value)$/;"	f	typeref:typename:bool
hdr_record_values	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_record_values(struct hdr_histogram* h, int64_t value, int64_t count)$/;"	f	typeref:typename:bool
hdr_record_values_atomic	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_record_values_atomic(struct hdr_histogram* h, int64_t value, int64_t count)$/;"	f	typeref:typename:bool
hdr_reset	deps/hdr_histogram/hdr_histogram.c	/^void hdr_reset(struct hdr_histogram *h)$/;"	f	typeref:typename:void
hdr_reset_internal_counters	deps/hdr_histogram/hdr_histogram.c	/^void hdr_reset_internal_counters(struct hdr_histogram* h)$/;"	f	typeref:typename:void
hdr_size_of_equivalent_value_range	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_size_of_equivalent_value_range(const struct hdr_histogram* h, int64_t value)$/;"	f	typeref:typename:int64_t
hdr_stddev	deps/hdr_histogram/hdr_histogram.c	/^double hdr_stddev(const struct hdr_histogram* h)$/;"	f	typeref:typename:double
hdr_value_at_index	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_value_at_index(const struct hdr_histogram *h, int32_t index)$/;"	f	typeref:typename:int64_t
hdr_value_at_percentile	deps/hdr_histogram/hdr_histogram.c	/^int64_t hdr_value_at_percentile(const struct hdr_histogram* h, double percentile)$/;"	f	typeref:typename:int64_t
hdr_values_are_equivalent	deps/hdr_histogram/hdr_histogram.c	/^bool hdr_values_are_equivalent(const struct hdr_histogram* h, int64_t a, int64_t b)$/;"	f	typeref:typename:bool
head	deps/hiredis/async.h	/^    redisCallback *head, *tail;$/;"	m	struct:redisCallbackList	typeref:typename:redisCallback *
head	src/adlist.h	/^    listNode *head;$/;"	m	struct:list	typeref:typename:listNode *
head	src/modules/hellotype.c	/^    struct HelloTypeNode *head;$/;"	m	struct:HelloTypeObject	typeref:struct:HelloTypeNode *	file:
head	src/quicklist.h	/^    quicklistNode *head;$/;"	m	struct:quicklist	typeref:typename:quicklistNode *
head	src/rax.h	/^    raxNode *head;$/;"	m	struct:rax	typeref:typename:raxNode *
head	tests/modules/test_lazyfree.c	/^    struct LazyFreeLinkNode *head;$/;"	m	struct:LazyFreeLinkObject	typeref:struct:LazyFreeLinkNode *	file:
header	src/server.h	/^    struct zskiplistNode *header, *tail;$/;"	m	struct:zskiplist	typeref:struct:zskiplistNode *
headersize	src/ziplist.c	/^    unsigned int headersize;     \/* prevrawlensize + lensize. *\/$/;"	m	struct:zlentry	typeref:typename:unsigned int	file:
heap_print	deps/jemalloc/test/unit/ph.c	/^heap_print(const heap_t *heap) {$/;"	f	typeref:typename:void	file:
heap_t	deps/jemalloc/test/unit/ph.c	/^typedef ph(node_t) heap_t;$/;"	t	file:
heap_validate	deps/jemalloc/test/unit/ph.c	/^heap_validate(const heap_t *heap) {$/;"	f	typeref:typename:unsigned	file:
heaps	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	extent_heap_t		heaps[NPSIZES+1];$/;"	m	struct:extents_s	typeref:typename:extent_heap_t[]
height	src/geohash.h	/^            double height;$/;"	m	struct:__anona01652f10608::__anona01652f1070a::__anona01652f10808	typeref:typename:double
height	src/lolwut.h	/^    int height;$/;"	m	struct:lwCanvas	typeref:typename:int
height	src/lolwut6.c	/^    int height;     \/* Pixels height. *\/$/;"	m	struct:skyscraper	typeref:typename:int	file:
helgrind	src/Makefile	/^helgrind:$/;"	t
helloCommand	src/networking.c	/^void helloCommand(client *c) {$/;"	f	typeref:typename:void
helloacl.so	src/modules/Makefile	/^helloacl.so: helloacl.xo$/;"	t
helloacl.xo	src/modules/Makefile	/^helloacl.xo: ..\/redismodule.h$/;"	t
helloblock.so	src/modules/Makefile	/^helloblock.so: helloblock.xo$/;"	t
helloblock.xo	src/modules/Makefile	/^helloblock.xo: ..\/redismodule.h$/;"	t
hellocluster.so	src/modules/Makefile	/^hellocluster.so: hellocluster.xo$/;"	t
hellocluster.xo	src/modules/Makefile	/^hellocluster.xo: ..\/redismodule.h$/;"	t
hellodict.so	src/modules/Makefile	/^hellodict.so: hellodict.xo$/;"	t
hellodict.xo	src/modules/Makefile	/^hellodict.xo: ..\/redismodule.h$/;"	t
hellohook.so	src/modules/Makefile	/^hellohook.so: hellohook.xo$/;"	t
hellohook.xo	src/modules/Makefile	/^hellohook.xo: ..\/redismodule.h$/;"	t
hellotimer.so	src/modules/Makefile	/^hellotimer.so: hellotimer.xo$/;"	t
hellotimer.xo	src/modules/Makefile	/^hellotimer.xo: ..\/redismodule.h$/;"	t
hellotype.so	src/modules/Makefile	/^hellotype.so: hellotype.xo$/;"	t
hellotype.xo	src/modules/Makefile	/^hellotype.xo: ..\/redismodule.h$/;"	t
helloworld.so	src/modules/Makefile	/^helloworld.so: helloworld.xo$/;"	t
helloworld.xo	src/modules/Makefile	/^helloworld.xo: ..\/redismodule.h$/;"	t
helpEntries	src/redis-cli.c	/^static helpEntry *helpEntries;$/;"	v	typeref:typename:helpEntry *	file:
helpEntriesLen	src/redis-cli.c	/^static int helpEntriesLen;$/;"	v	typeref:typename:int	file:
helpEntry	src/redis-cli.c	/^} helpEntry;$/;"	t	typeref:struct:__anon6af24fe90108	file:
hex_digit_to_int	src/sds.c	/^int hex_digit_to_int(char c) {$/;"	f	typeref:typename:int
hexdigit2int	deps/lua/src/lua_cjson.c	/^static int hexdigit2int(char hex)$/;"	f	typeref:typename:int	file:
hexistsCommand	src/t_hash.c	/^void hexistsCommand(client *c) {$/;"	f	typeref:typename:void
hgetCommand	src/t_hash.c	/^void hgetCommand(client *c) {$/;"	f	typeref:typename:void
hgetallCommand	src/t_hash.c	/^void hgetallCommand(client *c) {$/;"	f	typeref:typename:void
hi_calloc	deps/hiredis/alloc.c	/^void *hi_calloc(size_t nmemb, size_t size) {$/;"	f	typeref:typename:void *
hi_calloc	deps/hiredis/alloc.h	/^static inline void *hi_calloc(size_t nmemb, size_t size) {$/;"	f	typeref:typename:void *
hi_calloc_fail	deps/hiredis/test.c	/^static void *hi_calloc_fail(size_t nmemb, size_t size) {$/;"	f	typeref:typename:void *	file:
hi_free	deps/hiredis/alloc.c	/^void hi_free(void *ptr) {$/;"	f	typeref:typename:void
hi_free	deps/hiredis/alloc.h	/^static inline void hi_free(void *ptr) {$/;"	f	typeref:typename:void
hi_hex_digit_to_int	deps/hiredis/sds.c	/^static int hi_hex_digit_to_int(char c) {$/;"	f	typeref:typename:int	file:
hi_malloc	deps/hiredis/alloc.c	/^void *hi_malloc(size_t size) {$/;"	f	typeref:typename:void *
hi_malloc	deps/hiredis/alloc.h	/^static inline void *hi_malloc(size_t size) {$/;"	f	typeref:typename:void *
hi_malloc_fail	deps/hiredis/test.c	/^static void *hi_malloc_fail(size_t size) {$/;"	f	typeref:typename:void *	file:
hi_malloc_safe	deps/hiredis/test.c	/^void *hi_malloc_safe(size_t size) {$/;"	f	typeref:typename:void *
hi_realloc	deps/hiredis/alloc.c	/^void *hi_realloc(void *ptr, size_t size) {$/;"	f	typeref:typename:void *
hi_realloc	deps/hiredis/alloc.h	/^static inline void *hi_realloc(void *ptr, size_t size) {$/;"	f	typeref:typename:void *
hi_realloc_fail	deps/hiredis/test.c	/^static void *hi_realloc_fail(void *ptr, size_t size) {$/;"	f	typeref:typename:void *	file:
hi_s_free	deps/hiredis/sdsalloc.h	/^#define hi_s_free /;"	d
hi_s_malloc	deps/hiredis/sdsalloc.h	/^#define hi_s_malloc /;"	d
hi_s_realloc	deps/hiredis/sdsalloc.h	/^#define hi_s_realloc /;"	d
hi_sdsAllocPtr	deps/hiredis/sds.c	/^void *hi_sdsAllocPtr(hisds s) {$/;"	f	typeref:typename:void *
hi_sdsAllocSize	deps/hiredis/sds.c	/^size_t hi_sdsAllocSize(hisds s) {$/;"	f	typeref:typename:size_t
hi_sdsHdrSize	deps/hiredis/sds.c	/^static inline int hi_sdsHdrSize(char type) {$/;"	f	typeref:typename:int	file:
hi_sdsIncrLen	deps/hiredis/sds.c	/^void hi_sdsIncrLen(hisds s, int incr) {$/;"	f	typeref:typename:void
hi_sdsMakeRoomFor	deps/hiredis/sds.c	/^hisds hi_sdsMakeRoomFor(hisds s, size_t addlen) {$/;"	f	typeref:typename:hisds
hi_sdsRemoveFreeSpace	deps/hiredis/sds.c	/^hisds hi_sdsRemoveFreeSpace(hisds s) {$/;"	f	typeref:typename:hisds
hi_sdsReqType	deps/hiredis/sds.c	/^static inline char hi_sdsReqType(size_t string_size) {$/;"	f	typeref:typename:char	file:
hi_sdsTest	deps/hiredis/sds.c	/^int hi_sdsTest(void) {$/;"	f	typeref:typename:int
hi_sds_free	deps/hiredis/sds.c	/^void hi_sds_free(void *ptr) { hi_s_free(ptr); }$/;"	f	typeref:typename:void
hi_sds_malloc	deps/hiredis/sds.c	/^void *hi_sds_malloc(size_t size) { return hi_s_malloc(size); }$/;"	f	typeref:typename:void *
hi_sds_realloc	deps/hiredis/sds.c	/^void *hi_sds_realloc(void *ptr, size_t size) { return hi_s_realloc(ptr,size); }$/;"	f	typeref:typename:void *
hi_sdsalloc	deps/hiredis/sds.h	/^static inline size_t hi_sdsalloc(const hisds s) {$/;"	f	typeref:typename:size_t
hi_sdsavail	deps/hiredis/sds.h	/^static inline size_t hi_sdsavail(const hisds s) {$/;"	f	typeref:typename:size_t
hi_sdscat	deps/hiredis/sds.c	/^hisds hi_sdscat(hisds s, const char *t) {$/;"	f	typeref:typename:hisds
hi_sdscatfmt	deps/hiredis/sds.c	/^hisds hi_sdscatfmt(hisds s, char const *fmt, ...) {$/;"	f	typeref:typename:hisds
hi_sdscatlen	deps/hiredis/sds.c	/^hisds hi_sdscatlen(hisds s, const void *t, size_t len) {$/;"	f	typeref:typename:hisds
hi_sdscatprintf	deps/hiredis/sds.c	/^hisds hi_sdscatprintf(hisds s, const char *fmt, ...) {$/;"	f	typeref:typename:hisds
hi_sdscatrepr	deps/hiredis/sds.c	/^hisds hi_sdscatrepr(hisds s, const char *p, size_t len) {$/;"	f	typeref:typename:hisds
hi_sdscatsds	deps/hiredis/sds.c	/^hisds hi_sdscatsds(hisds s, const hisds t) {$/;"	f	typeref:typename:hisds
hi_sdscatvprintf	deps/hiredis/sds.c	/^hisds hi_sdscatvprintf(hisds s, const char *fmt, va_list ap) {$/;"	f	typeref:typename:hisds
hi_sdsclear	deps/hiredis/sds.c	/^void hi_sdsclear(hisds s) {$/;"	f	typeref:typename:void
hi_sdscmp	deps/hiredis/sds.c	/^int hi_sdscmp(const hisds s1, const hisds s2) {$/;"	f	typeref:typename:int
hi_sdscpy	deps/hiredis/sds.c	/^hisds hi_sdscpy(hisds s, const char *t) {$/;"	f	typeref:typename:hisds
hi_sdscpylen	deps/hiredis/sds.c	/^hisds hi_sdscpylen(hisds s, const char *t, size_t len) {$/;"	f	typeref:typename:hisds
hi_sdsdup	deps/hiredis/sds.c	/^hisds hi_sdsdup(const hisds s) {$/;"	f	typeref:typename:hisds
hi_sdsempty	deps/hiredis/sds.c	/^hisds hi_sdsempty(void) {$/;"	f	typeref:typename:hisds
hi_sdsfree	deps/hiredis/sds.c	/^void hi_sdsfree(hisds s) {$/;"	f	typeref:typename:void
hi_sdsfreesplitres	deps/hiredis/sds.c	/^void hi_sdsfreesplitres(hisds *tokens, int count) {$/;"	f	typeref:typename:void
hi_sdsfromlonglong	deps/hiredis/sds.c	/^hisds hi_sdsfromlonglong(long long value) {$/;"	f	typeref:typename:hisds
hi_sdsgrowzero	deps/hiredis/sds.c	/^hisds hi_sdsgrowzero(hisds s, size_t len) {$/;"	f	typeref:typename:hisds
hi_sdsinclen	deps/hiredis/sds.h	/^static inline void hi_sdsinclen(hisds s, size_t inc) {$/;"	f	typeref:typename:void
hi_sdsjoin	deps/hiredis/sds.c	/^hisds hi_sdsjoin(char **argv, int argc, char *sep) {$/;"	f	typeref:typename:hisds
hi_sdsjoinsds	deps/hiredis/sds.c	/^hisds hi_sdsjoinsds(hisds *argv, int argc, const char *sep, size_t seplen) {$/;"	f	typeref:typename:hisds
hi_sdslen	deps/hiredis/sds.h	/^static inline size_t hi_sdslen(const hisds s) {$/;"	f	typeref:typename:size_t
hi_sdsll2str	deps/hiredis/sds.c	/^int hi_sdsll2str(char *s, long long value) {$/;"	f	typeref:typename:int
hi_sdsmapchars	deps/hiredis/sds.c	/^hisds hi_sdsmapchars(hisds s, const char *from, const char *to, size_t setlen) {$/;"	f	typeref:typename:hisds
hi_sdsnew	deps/hiredis/sds.c	/^hisds hi_sdsnew(const char *init) {$/;"	f	typeref:typename:hisds
hi_sdsnewlen	deps/hiredis/sds.c	/^hisds hi_sdsnewlen(const void *init, size_t initlen) {$/;"	f	typeref:typename:hisds
hi_sdsrange	deps/hiredis/sds.c	/^int hi_sdsrange(hisds s, ssize_t start, ssize_t end) {$/;"	f	typeref:typename:int
hi_sdssetalloc	deps/hiredis/sds.h	/^static inline void hi_sdssetalloc(hisds s, size_t newlen) {$/;"	f	typeref:typename:void
hi_sdssetlen	deps/hiredis/sds.h	/^static inline void hi_sdssetlen(hisds s, size_t newlen) {$/;"	f	typeref:typename:void
hi_sdssplitargs	deps/hiredis/sds.c	/^hisds *hi_sdssplitargs(const char *line, int *argc) {$/;"	f	typeref:typename:hisds *
hi_sdssplitlen	deps/hiredis/sds.c	/^hisds *hi_sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count) {$/;"	f	typeref:typename:hisds *
hi_sdstolower	deps/hiredis/sds.c	/^void hi_sdstolower(hisds s) {$/;"	f	typeref:typename:void
hi_sdstoupper	deps/hiredis/sds.c	/^void hi_sdstoupper(hisds s) {$/;"	f	typeref:typename:void
hi_sdstrim	deps/hiredis/sds.c	/^hisds hi_sdstrim(hisds s, const char *cset) {$/;"	f	typeref:typename:hisds
hi_sdsull2str	deps/hiredis/sds.c	/^int hi_sdsull2str(char *s, unsigned long long v) {$/;"	f	typeref:typename:int
hi_sdsupdatelen	deps/hiredis/sds.c	/^void hi_sdsupdatelen(hisds s) {$/;"	f	typeref:typename:void
hi_strdup	deps/hiredis/alloc.c	/^char *hi_strdup(const char *str) {$/;"	f	typeref:typename:char *
hi_strdup	deps/hiredis/alloc.h	/^static inline char *hi_strdup(const char *str) {$/;"	f	typeref:typename:char *
highest_equivalent_value	deps/hdr_histogram/hdr_histogram.c	/^static int64_t highest_equivalent_value(const struct hdr_histogram* h, int64_t value)$/;"	f	typeref:typename:int64_t	file:
highest_equivalent_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t highest_equivalent_value;$/;"	m	struct:hdr_iter	typeref:typename:int64_t
highest_trackable_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t highest_trackable_value;$/;"	m	struct:hdr_histogram	typeref:typename:int64_t
highest_trackable_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t highest_trackable_value;$/;"	m	struct:hdr_histogram_bucket_config	typeref:typename:int64_t
highpages	deps/jemalloc/src/extent.c	/^static atomic_zu_t highpages;$/;"	v	typeref:typename:atomic_zu_t	file:
hincrbyCommand	src/t_hash.c	/^void hincrbyCommand(client *c) {$/;"	f	typeref:typename:void
hincrbyfloatCommand	src/t_hash.c	/^void hincrbyfloatCommand(client *c) {$/;"	f	typeref:typename:void
hints	deps/linenoise/example.c	/^char *hints(const char *buf, int *color, int *bold) {$/;"	f	typeref:typename:char *
hints	src/redis-cli.c	/^    int hints;$/;"	m	struct:pref	typeref:typename:int	file:
hintsCallback	deps/linenoise/linenoise.c	/^static linenoiseHintsCallback *hintsCallback = NULL;$/;"	v	typeref:typename:linenoiseHintsCallback *	file:
hintsCallback	src/redis-cli.c	/^static char *hintsCallback(const char *buf, int *color, int *bold) {$/;"	f	typeref:typename:char *	file:
hiredis	deps/Makefile	/^hiredis: .make-prerequisites$/;"	t
hiredis-%	deps/hiredis/Makefile	/^hiredis-%: %.o $(STLIBNAME)$/;"	t
hiredis-example	deps/hiredis/Makefile	/^hiredis-example: examples\/example.c $(STLIBNAME)$/;"	t
hiredis-example-ae	deps/hiredis/Makefile	/^hiredis-example-ae: examples\/example-ae.c adapters\/ae.h $(STLIBNAME)$/;"	t
hiredis-example-ae	deps/hiredis/Makefile	/^hiredis-example-ae:$/;"	t
hiredis-example-glib	deps/hiredis/Makefile	/^hiredis-example-glib: examples\/example-glib.c adapters\/glib.h $(STLIBNAME)$/;"	t
hiredis-example-ivykis	deps/hiredis/Makefile	/^hiredis-example-ivykis: examples\/example-ivykis.c adapters\/ivykis.h $(STLIBNAME)$/;"	t
hiredis-example-libev	deps/hiredis/Makefile	/^hiredis-example-libev: examples\/example-libev.c adapters\/libev.h $(STLIBNAME)$/;"	t
hiredis-example-libevent	deps/hiredis/Makefile	/^hiredis-example-libevent: examples\/example-libevent.c adapters\/libevent.h $(STLIBNAME)$/;"	t
hiredis-example-libevent-ssl	deps/hiredis/Makefile	/^hiredis-example-libevent-ssl: examples\/example-libevent-ssl.c adapters\/libevent.h $(STLIBNAME)/;"	t
hiredis-example-libuv	deps/hiredis/Makefile	/^hiredis-example-libuv: examples\/example-libuv.c adapters\/libuv.h $(STLIBNAME)$/;"	t
hiredis-example-libuv	deps/hiredis/Makefile	/^hiredis-example-libuv:$/;"	t
hiredis-example-macosx	deps/hiredis/Makefile	/^hiredis-example-macosx: examples\/example-macosx.c adapters\/macosx.h $(STLIBNAME)$/;"	t
hiredis-example-push	deps/hiredis/Makefile	/^hiredis-example-push: examples\/example-push.c $(STLIBNAME)$/;"	t
hiredis-example-qt	deps/hiredis/Makefile	/^hiredis-example-qt: examples\/example-qt.cpp adapters\/qt.h $(STLIBNAME)$/;"	t
hiredis-example-qt	deps/hiredis/Makefile	/^hiredis-example-qt:$/;"	t
hiredis-example-ssl	deps/hiredis/Makefile	/^hiredis-example-ssl: examples\/example-ssl.c $(STLIBNAME) $(SSL_STLIBNAME)$/;"	t
hiredis-test	deps/hiredis/Makefile	/^hiredis-test: test.o $(TEST_LIBS)$/;"	t
hiredis.o	deps/hiredis/Makefile	/^hiredis.o: hiredis.c fmacros.h hiredis.h read.h sds.h alloc.h net.h async.h win32.h$/;"	t
hiredisAllocFns	deps/hiredis/alloc.c	/^hiredisAllocFuncs hiredisAllocFns = {$/;"	v	typeref:typename:hiredisAllocFuncs
hiredisAllocFuncs	deps/hiredis/alloc.h	/^typedef struct hiredisAllocFuncs {$/;"	s
hiredisAllocFuncs	deps/hiredis/alloc.h	/^} hiredisAllocFuncs;$/;"	t	typeref:struct:hiredisAllocFuncs
hiredisResetAllocators	deps/hiredis/alloc.c	/^void hiredisResetAllocators(void) {$/;"	f	typeref:typename:void
hiredisSetAllocators	deps/hiredis/alloc.c	/^hiredisAllocFuncs hiredisSetAllocators(hiredisAllocFuncs *override) {$/;"	f	typeref:typename:hiredisAllocFuncs
hisds	deps/hiredis/sds.h	/^typedef char *hisds;$/;"	t	typeref:typename:char *
hisdshdr16	deps/hiredis/sds.h	/^struct __attribute__ ((__packed__)) hisdshdr16 {$/;"	s
hisdshdr32	deps/hiredis/sds.h	/^struct __attribute__ ((__packed__)) hisdshdr32 {$/;"	s
hisdshdr5	deps/hiredis/sds.h	/^struct __attribute__ ((__packed__)) hisdshdr5 {$/;"	s
hisdshdr64	deps/hiredis/sds.h	/^struct __attribute__ ((__packed__)) hisdshdr64 {$/;"	s
hisdshdr8	deps/hiredis/sds.h	/^struct __attribute__ ((__packed__)) hisdshdr8 {$/;"	s
history	deps/linenoise/linenoise.c	/^static char **history = NULL;$/;"	v	typeref:typename:char **	file:
history_index	deps/linenoise/linenoise.c	/^    int history_index;  \/* The history index we are currently editing. *\/$/;"	m	struct:linenoiseState	typeref:typename:int	file:
history_len	deps/linenoise/linenoise.c	/^static int history_len = 0;$/;"	v	typeref:typename:int	file:
history_max_len	deps/linenoise/linenoise.c	/^static int history_max_len = LINENOISE_DEFAULT_HISTORY_MAX_LEN;$/;"	v	typeref:typename:int	file:
hits	utils/lru/lfu-simulation.c	/^    uint64_t hits;      \/* Number of real accesses. *\/$/;"	m	struct:entry	typeref:typename:uint64_t	file:
hkeysCommand	src/t_hash.c	/^void hkeysCommand(client *c) {$/;"	f	typeref:typename:void
hlenCommand	src/t_hash.c	/^void hlenCommand(client *c) {$/;"	f	typeref:typename:void
hllAdd	src/hyperloglog.c	/^int hllAdd(robj *o, unsigned char *ele, size_t elesize) {$/;"	f	typeref:typename:int
hllCount	src/hyperloglog.c	/^uint64_t hllCount(struct hllhdr *hdr, int *invalid) {$/;"	f	typeref:typename:uint64_t
hllDenseAdd	src/hyperloglog.c	/^int hllDenseAdd(uint8_t *registers, unsigned char *ele, size_t elesize) {$/;"	f	typeref:typename:int
hllDenseRegHisto	src/hyperloglog.c	/^void hllDenseRegHisto(uint8_t *registers, int* reghisto) {$/;"	f	typeref:typename:void
hllDenseSet	src/hyperloglog.c	/^int hllDenseSet(uint8_t *registers, long index, uint8_t count) {$/;"	f	typeref:typename:int
hllMerge	src/hyperloglog.c	/^int hllMerge(uint8_t *max, robj *hll) {$/;"	f	typeref:typename:int
hllPatLen	src/hyperloglog.c	/^int hllPatLen(unsigned char *ele, size_t elesize, long *regp) {$/;"	f	typeref:typename:int
hllRawRegHisto	src/hyperloglog.c	/^void hllRawRegHisto(uint8_t *registers, int* reghisto) {$/;"	f	typeref:typename:void
hllSigma	src/hyperloglog.c	/^double hllSigma(double x) {$/;"	f	typeref:typename:double
hllSparseAdd	src/hyperloglog.c	/^int hllSparseAdd(robj *o, unsigned char *ele, size_t elesize) {$/;"	f	typeref:typename:int
hllSparseRegHisto	src/hyperloglog.c	/^void hllSparseRegHisto(uint8_t *sparse, int sparselen, int *invalid, int* reghisto) {$/;"	f	typeref:typename:void
hllSparseSet	src/hyperloglog.c	/^int hllSparseSet(robj *o, long index, uint8_t count) {$/;"	f	typeref:typename:int
hllSparseToDense	src/hyperloglog.c	/^int hllSparseToDense(robj *o) {$/;"	f	typeref:typename:int
hllTau	src/hyperloglog.c	/^double hllTau(double x) {$/;"	f	typeref:typename:double
hll_sparse_max_bytes	src/server.h	/^    size_t hll_sparse_max_bytes;$/;"	m	struct:redisServer	typeref:typename:size_t
hllhdr	src/hyperloglog.c	/^struct hllhdr {$/;"	s	file:
hmgetCommand	src/t_hash.c	/^void hmgetCommand(client *c) {$/;"	f	typeref:typename:void
hook	deps/jemalloc/test/unit/hooks.c	/^hook() {$/;"	f	typeref:typename:void	file:
hook	deps/lua/src/lstate.h	/^  lua_Hook hook;$/;"	m	struct:lua_State	typeref:typename:lua_Hook
hook_called	deps/jemalloc/test/unit/hooks.c	/^static bool hook_called = false;$/;"	v	typeref:typename:bool	file:
hookcount	deps/lua/src/lstate.h	/^  int hookcount;$/;"	m	struct:lua_State	typeref:typename:int
hookf	deps/lua/src/ldblib.c	/^static void hookf (lua_State *L, lua_Debug *ar) {$/;"	f	typeref:typename:void	file:
hookmask	deps/lua/src/lstate.h	/^  lu_byte hookmask;$/;"	m	struct:lua_State	typeref:typename:lu_byte
hooks	deps/jemalloc/test/include/test/extent_hooks.h	/^static extent_hooks_t hooks = {$/;"	v	typeref:typename:extent_hooks_t
hooks_arena_new_hook	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define hooks_arena_new_hook /;"	d
hooks_arena_new_hook	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define hooks_arena_new_hook /;"	d
hooks_arena_new_hook	deps/jemalloc/src/hooks.c	/^void (*hooks_arena_new_hook)() = NULL;$/;"	v	typeref:typename:JEMALLOC_EXPORT void (*)()
hooks_libc_hook	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define hooks_libc_hook /;"	d
hooks_libc_hook	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define hooks_libc_hook /;"	d
hooks_libc_hook	deps/jemalloc/src/hooks.c	/^void (*hooks_libc_hook)() = NULL;$/;"	v	typeref:typename:JEMALLOC_EXPORT void (*)()
hooks_not_null	deps/jemalloc/test/unit/base.c	/^static extent_hooks_t hooks_not_null = {$/;"	v	typeref:typename:extent_hooks_t	file:
hooks_null	deps/jemalloc/test/unit/base.c	/^static extent_hooks_t hooks_null = {$/;"	v	typeref:typename:extent_hooks_t	file:
hooks_orig	deps/jemalloc/test/unit/arena_reset.c	/^static extent_hooks_t hooks_orig;$/;"	v	typeref:typename:extent_hooks_t	file:
hooks_unmap	deps/jemalloc/test/unit/arena_reset.c	/^static extent_hooks_t hooks_unmap = {$/;"	v	typeref:typename:extent_hooks_t	file:
host	deps/hiredis/hiredis.h	/^        char *host;$/;"	m	struct:redisContext::__anon7daed6b50408	typeref:typename:char *
host	deps/hiredis/test.c	/^        const char *host;$/;"	m	struct:config::__anonab9ca1680108	typeref:typename:const char *	file:
host	deps/hiredis/test.c	/^        const char *host;$/;"	m	struct:config::__anonab9ca1680308	typeref:typename:const char *	file:
hostip	src/redis-benchmark.c	/^    const char *hostip;$/;"	m	struct:config	typeref:typename:const char *	file:
hostip	src/redis-cli.c	/^    char *hostip;$/;"	m	struct:config	typeref:typename:char *	file:
hostname	src/sentinel.c	/^    char *hostname;         \/* Hostname OR address, as specified *\/$/;"	m	struct:sentinelAddr	typeref:typename:char *	file:
hostport	src/redis-benchmark.c	/^    int hostport;$/;"	m	struct:config	typeref:typename:int	file:
hostport	src/redis-cli.c	/^    int hostport;$/;"	m	struct:config	typeref:typename:int	file:
hostsocket	src/redis-benchmark.c	/^    const char *hostsocket;$/;"	m	struct:config	typeref:typename:const char *	file:
hostsocket	src/redis-cli.c	/^    char *hostsocket;$/;"	m	struct:config	typeref:typename:char *	file:
hotkeys	src/redis-cli.c	/^    int hotkeys;$/;"	m	struct:config	typeref:typename:int	file:
hrandfieldCommand	src/t_hash.c	/^void hrandfieldCommand(client *c) {$/;"	f	typeref:typename:void
hrandfieldWithCountCommand	src/t_hash.c	/^void hrandfieldWithCountCommand(client *c, long l, int withvalues) {$/;"	f	typeref:typename:void
hscanCommand	src/t_hash.c	/^void hscanCommand(client *c) {$/;"	f	typeref:typename:void
hset	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
hsetCommand	src/t_hash.c	/^void hsetCommand(client *c) {$/;"	f	typeref:typename:void
hsetnxCommand	src/t_hash.c	/^void hsetnxCommand(client *c) {$/;"	f	typeref:typename:void
hstrlenCommand	src/t_hash.c	/^void hstrlenCommand(client *c) {$/;"	f	typeref:typename:void
ht	deps/hiredis/dict.h	/^    dict *ht;$/;"	m	struct:dictIterator	typeref:typename:dict *
ht	src/dict.h	/^    dictht ht[2];$/;"	m	struct:dict	typeref:typename:dictht[2]
ht	src/t_zset.c	/^            } ht;$/;"	m	union:__anon6fce03460408::__anon6fce0346050a::_iterset	typeref:struct:__anon6fce03460408::__anon6fce0346050a::_iterset::__anon6fce03460708	file:
htNeedsResize	src/server.c	/^int htNeedsResize(dict *dict) {$/;"	f	typeref:typename:int
htonu64	src/endianconv.h	/^#define htonu64(/;"	d
hvalsCommand	src/t_hash.c	/^void hvalsCommand(client *c) {$/;"	f	typeref:typename:void
hvalue	deps/lua/src/lobject.h	/^#define hvalue(/;"	d
hz	src/redismodule.h	/^    int32_t hz;             \/* Approximate number of events per second. *\/$/;"	m	struct:RedisModuleCronLoopInfo	typeref:typename:int32_t
hz	src/redismodule.h	/^    int32_t hz;             \/* Approximate number of events per second. *\/$/;"	m	struct:RedisModuleLoadingProgressInfo	typeref:typename:int32_t
hz	src/server.h	/^    int hz;                     \/* serverCron() calls frequency in hertz *\/$/;"	m	struct:redisServer	typeref:typename:int
i	deps/jemalloc/src/ckh.c	/^		size_t		i;$/;"	m	union:ckh_pointer_hash::__anona5c96ad4010a	typeref:typename:size_t	file:
i	deps/jemalloc/src/extent.c	/^	for (unsigned i = 0; i < NPSIZES+1; i++) {$/;"	v	typeref:typename:unsigned
i	src/bitops.c	/^    union {uint64_t u; int64_t i;} conv;$/;"	m	union:getSignedBitfield::__anonc6b2191e010a	typeref:typename:int64_t	file:
i	src/config.c	/^        int *i;$/;"	m	union:numericConfigData::__anon722b8083020a	typeref:typename:int *	file:
i	src/module.c	/^    union {uint64_t u; int64_t i;} conv;$/;"	m	union:RM_LoadSigned::__anon967b4733090a	typeref:typename:int64_t	file:
i	src/module.c	/^    union {uint64_t u; int64_t i;} conv;$/;"	m	union:RM_SaveSigned::__anon967b4733080a	typeref:typename:int64_t	file:
i64	src/bitops.c	/^    int64_t i64;        \/* Increment amount (INCRBY) or SET value *\/$/;"	m	struct:bitfieldOp	typeref:typename:int64_t	file:
iABC	deps/lua/src/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iABx	deps/lua/src/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAmMaster	src/server.c	/^int iAmMaster(void) {$/;"	f	typeref:typename:int
iAsBx	deps/lua/src/lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
i_ci	deps/lua/src/lua.h	/^  int i_ci;  \/* active function *\/$/;"	m	struct:lua_Debug	typeref:typename:int
i_gamma	deps/jemalloc/test/include/test/math.h	/^i_gamma(double x, double p, double ln_gamma_p) {$/;"	f	typeref:typename:double
i_key	deps/lua/src/lobject.h	/^  TKey i_key;$/;"	m	struct:Node	typeref:typename:TKey
i_val	deps/lua/src/lobject.h	/^  TValue i_val;$/;"	m	struct:Node	typeref:typename:TValue
iaalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^iaalloc(tsdn_t *tsdn, const void *ptr) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE arena_t *
ialloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^ialloc(tsd_t *tsd, size_t size, szind_t ind, bool zero, bool slow_path) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
iallocztm	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^iallocztm(tsdn_t *tsdn, size_t size, szind_t ind, bool zero, tcache_t *tcache,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
iarena_cleanup	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define iarena_cleanup /;"	d
iarena_cleanup	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define iarena_cleanup /;"	d
iarena_cleanup	deps/jemalloc/src/jemalloc.c	/^iarena_cleanup(tsd_t *tsd) {$/;"	f	typeref:typename:void
id	deps/jemalloc/test/unit/ql.c	/^	char id;$/;"	m	struct:list_s	typeref:typename:char	file:
id	deps/jemalloc/test/unit/qr.c	/^	char id;$/;"	m	struct:ring_s	typeref:typename:char	file:
id	src/ae.h	/^    long long id; \/* time event identifier. *\/$/;"	m	struct:aeTimeEvent	typeref:typename:long long
id	src/module.c	/^        uint64_t id;$/;"	m	struct:moduleTypeLookupModuleByID::__anon967b47330508	typeref:typename:uint64_t	file:
id	src/redismodule.h	/^    uint64_t id;            \/* Client ID. *\/$/;"	m	struct:RedisModuleClientInfo	typeref:typename:uint64_t
id	src/redismodule.h	/^    uint64_t id;        \/* REDISMODULE_EVENT_... defines. *\/$/;"	m	struct:RedisModuleEvent	typeref:typename:uint64_t
id	src/server.h	/^    int id;                     \/* Database ID *\/$/;"	m	struct:redisDb	typeref:typename:int
id	src/server.h	/^    int id;     \/* Command ID. This is a progressive ID starting from 0 that$/;"	m	struct:redisCommand	typeref:typename:int
id	src/server.h	/^    uint64_t id;            \/* Client incremental unique ID. *\/$/;"	m	struct:client	typeref:typename:uint64_t
id	src/server.h	/^    uint64_t id; \/* Higher 54 bits of type ID + 10 lower bits of encoding ver. *\/$/;"	m	struct:RedisModuleType	typeref:typename:uint64_t
id	src/slowlog.h	/^    long long id;       \/* Unique entry identifier. *\/$/;"	m	struct:slowlogEntry	typeref:typename:long long
id	src/t_stream.c	/^    streamID id; \/* User-provided ID, for XADD only. *\/$/;"	m	struct:__anon8fe9202c0108	typeref:typename:streamID	file:
id_given	src/t_stream.c	/^    int id_given; \/* Was an ID different than "*" specified? for XADD only. *\/$/;"	m	struct:__anon8fe9202c0108	typeref:typename:int	file:
idalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^idalloc(tsd_t *tsd, void *ptr) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
idalloctm	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^idalloctm(tsdn_t *tsdn, void *ptr, tcache_t *tcache, alloc_ctx_t *alloc_ctx,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
idle	src/evict.c	/^    unsigned long long idle;    \/* Object idle time (inverse frequency for LFU) *\/$/;"	m	struct:evictionPoolEntry	typeref:typename:unsigned long long	file:
idlemode	src/redis-benchmark.c	/^    int idlemode;$/;"	m	struct:config	typeref:typename:int	file:
idx	deps/hiredis/read.h	/^    int idx; \/* index in parent (array) object *\/$/;"	m	struct:redisReadTask	typeref:typename:int
idx	deps/jemalloc/test/src/SFMT.c	/^    int idx;$/;"	m	struct:sfmt_s	typeref:typename:int	file:
idx	src/latency.h	/^    int idx; \/* Index of the next sample to store. *\/$/;"	m	struct:latencyTimeSeries	typeref:typename:int
idx	src/server.h	/^        int idx;$/;"	m	struct:redisServer::__anon3ef696e90608	typeref:typename:int
idxof	deps/jemalloc/test/src/SFMT.c	/^static inline int idxof(int i) {$/;"	f	typeref:typename:int	file:
iealloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_b.h	/^iealloc(tsdn_t *tsdn, const void *ptr) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE extent_t *
ifd	deps/linenoise/linenoise.c	/^    int ifd;            \/* Terminal stdin file descriptor. *\/$/;"	m	struct:linenoiseState	typeref:typename:int	file:
ifree	deps/jemalloc/src/jemalloc.c	/^ifree(tsd_t *tsd, void *ptr, tcache_t *tcache, bool slow_path) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
ifstat	deps/lua/src/lparser.c	/^static void ifstat (LexState *ls, int line) {$/;"	f	typeref:typename:void	file:
iget_defrag_hint	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^iget_defrag_hint(tsdn_t *tsdn, void* ptr) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE int
ignore_warnings	src/server.h	/^    char *ignore_warnings;      \/* Config: warnings that should be ignored. *\/$/;"	m	struct:redisServer	typeref:typename:char *
ii	src/server.h	/^    int ii; \/* intset iterator *\/$/;"	m	struct:__anon3ef696e90b08	typeref:typename:int
ii	src/t_zset.c	/^                int ii;$/;"	m	struct:__anon6fce03460408::__anon6fce0346050a::_iterset::__anon6fce03460608	typeref:typename:int	file:
imalloc	deps/jemalloc/src/jemalloc.c	/^imalloc(static_opts_t *sopts, dynamic_opts_t *dopts) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE int
imalloc_body	deps/jemalloc/src/jemalloc.c	/^imalloc_body(static_opts_t *sopts, dynamic_opts_t *dopts, tsd_t *tsd) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE int
imalloc_no_sample	deps/jemalloc/src/jemalloc.c	/^imalloc_no_sample(static_opts_t *sopts, dynamic_opts_t *dopts, tsd_t *tsd,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
imalloc_sample	deps/jemalloc/src/jemalloc.c	/^imalloc_sample(static_opts_t *sopts, dynamic_opts_t *dopts, tsd_t *tsd,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
importing	src/redis-benchmark.c	/^    sds *importing; \/* An array of sds where even strings are slots and odd$/;"	m	struct:clusterNode	typeref:typename:sds *	file:
importing	src/redis-cli.c	/^    sds *importing; \/* An array of sds where even strings are slots and odd$/;"	m	struct:clusterManagerNode	typeref:typename:sds *	file:
importing_count	src/redis-benchmark.c	/^    int importing_count; \/* Length of the importing array (importing slots*2) *\/$/;"	m	struct:clusterNode	typeref:typename:int	file:
importing_count	src/redis-cli.c	/^    int importing_count; \/* Length of the importing array (importing slots*2) *\/$/;"	m	struct:clusterManagerNode	typeref:typename:int	file:
importing_slots_from	src/cluster.h	/^    clusterNode *importing_slots_from[CLUSTER_SLOTS];$/;"	m	struct:clusterState	typeref:typename:clusterNode * []
in_call	src/module.c	/^    int in_call;    \/* RM_Call() nesting level *\/$/;"	m	struct:RedisModule	typeref:typename:int	file:
in_dict_field	src/module.c	/^    int in_dict_field;  \/* indication that we're currently appending to a dict *\/$/;"	m	struct:RedisModuleInfoCtx	typeref:typename:int	file:
in_eval	src/server.h	/^    int in_eval;                \/* Are we inside EVAL? *\/$/;"	m	struct:redisServer	typeref:typename:int
in_exec	src/server.h	/^    int in_exec;                \/* Are we inside EXEC? *\/$/;"	m	struct:redisServer	typeref:typename:int
in_fork_child	src/server.h	/^    int in_fork_child;          \/* indication that this is a fork child *\/$/;"	m	struct:redisServer	typeref:typename:int
in_hook	src/module.c	/^    int in_hook;    \/* Hooks callback nesting level for this module (0 or 1). *\/$/;"	m	struct:RedisModule	typeref:typename:int	file:
in_log_command	tests/modules/commandfilter.c	/^static int in_log_command = 0;$/;"	v	typeref:typename:int	file:
in_multi	src/redis-cli.c	/^    int in_multi;$/;"	m	struct:config	typeref:typename:int	file:
in_section	src/module.c	/^    int in_section;     \/* indication if we're in an active section or not *\/$/;"	m	struct:RedisModuleInfoCtx	typeref:typename:int	file:
inallocx	deps/jemalloc/src/jemalloc.c	/^inallocx(tsdn_t *tsdn, size_t size, int flags) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
inc_ci	deps/lua/src/ldo.c	/^#define inc_ci(/;"	d	file:
inclinenumber	deps/lua/src/llex.c	/^static void inclinenumber (LexState *ls) {$/;"	f	typeref:typename:void	file:
incomplete	deps/lua/src/lua.c	/^static int incomplete (lua_State *L, int status) {$/;"	f	typeref:typename:int	file:
incrCommand	src/t_string.c	/^void incrCommand(client *c) {$/;"	f	typeref:typename:void
incrDecrCommand	src/t_string.c	/^void incrDecrCommand(client *c, long long incr) {$/;"	f	typeref:typename:void
incrRefCount	src/object.c	/^void incrRefCount(robj *o) {$/;"	f	typeref:typename:void
incr_top	deps/lua/src/ldo.h	/^#define incr_top(/;"	d
incrbyCommand	src/t_string.c	/^void incrbyCommand(client *c) {$/;"	f	typeref:typename:void
incrbyfloatCommand	src/t_string.c	/^void incrbyfloatCommand(client *c) {$/;"	f	typeref:typename:void
increment	deps/lua/src/strbuf.h	/^    int increment;$/;"	m	struct:__anon10f823b40108	typeref:typename:int
incrementErrorCount	src/server.c	/^void incrementErrorCount(const char *fullerr, size_t namelen) {$/;"	f	typeref:typename:void
incrementallyRehash	src/server.c	/^int incrementallyRehash(int dbid) {$/;"	f	typeref:typename:int
ind	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	unsigned	ind;$/;"	m	struct:base_s	typeref:typename:unsigned
indefinite_sleep	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	atomic_b_t		indefinite_sleep;$/;"	m	struct:background_thread_info_s	typeref:typename:atomic_b_t
index	deps/hiredis/dict.h	/^    int index;$/;"	m	struct:dictIterator	typeref:typename:int
index	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	const ctl_named_node_t *(*index)(tsdn_t *, const size_t *, size_t,$/;"	m	struct:ctl_indexed_node_s	typeref:typename:const ctl_named_node_t * (*)(tsdn_t *,const size_t *,size_t,size_t)
index	deps/lua/src/lua_cjson.c	/^    int index;$/;"	m	struct:__anona3a73c770408	typeref:typename:int	file:
index	src/dict.h	/^    long index;$/;"	m	struct:dictIterator	typeref:typename:long
index	src/redis-benchmark.c	/^    int index;$/;"	m	struct:benchmarkThread	typeref:typename:int	file:
index	src/ziplist.c	/^        unsigned int index;$/;"	m	struct:ziplistRandomPairs::__anon4d39dfdc0108	typeref:typename:unsigned int	file:
index2adr	deps/lua/src/lapi.c	/^static TValue *index2adr (lua_State *L, int idx) {$/;"	f	typeref:typename:TValue *	file:
indexupvalue	deps/lua/src/lparser.c	/^static int indexupvalue (FuncState *fs, TString *name, expdesc *v) {$/;"	f	typeref:typename:int	file:
info	deps/lua/src/lparser.h	/^    struct { int info, aux; } s;$/;"	m	struct:expdesc::__anon581f0db7020a::__anon581f0db70308	typeref:typename:int
info	deps/lua/src/lparser.h	/^  lu_byte info;$/;"	m	struct:upvaldesc	typeref:typename:lu_byte
info	src/module.c	/^    sds info;           \/* info string we collected so far *\/$/;"	m	struct:RedisModuleInfoCtx	typeref:typename:sds	file:
info	src/sentinel.c	/^    sds info; \/* cached INFO output *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:sds	file:
infoCommand	src/server.c	/^void infoCommand(client *c) {$/;"	f	typeref:typename:void
info_cb	src/module.c	/^    RedisModuleInfoFunc info_cb; \/* Callback for module to add INFO fields. *\/$/;"	m	struct:RedisModule	typeref:typename:RedisModuleInfoFunc	file:
info_get	tests/modules/infotest.c	/^int info_get(RedisModuleCtx *ctx, RedisModuleString **argv, int argc, char field_type)$/;"	f	typeref:typename:int
info_getc	tests/modules/infotest.c	/^int info_getc(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
info_getd	tests/modules/infotest.c	/^int info_getd(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
info_geti	tests/modules/infotest.c	/^int info_geti(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
info_gets	tests/modules/infotest.c	/^int info_gets(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
info_getu	tests/modules/infotest.c	/^int info_getu(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
info_refresh	src/sentinel.c	/^    mstime_t info_refresh;  \/* Time at which we received INFO output from it. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:mstime_t	file:
info_section_from_redis	src/sentinel.c	/^#define info_section_from_redis(/;"	d	file:
info_tailcall	deps/lua/src/ldebug.c	/^static void info_tailcall (lua_Debug *ar) {$/;"	f	typeref:typename:void	file:
information_type	src/childinfo.c	/^    childInfoType information_type; \/* Type of information *\/$/;"	m	struct:__anonbbe6eb5d0108	typeref:typename:childInfoType	file:
init	deps/lua/src/lstrlib.c	/^    const char *init;$/;"	m	struct:MatchState::__anond2fa50950108	typeref:typename:const char *	file:
init	src/config.c	/^    void (*init)(typeData data);$/;"	m	struct:typeInterface	typeref:typename:void (*)(typeData data)	file:
initBenchmarkThreads	src/redis-benchmark.c	/^static void initBenchmarkThreads() {$/;"	f	typeref:typename:void	file:
initClientMultiState	src/multi.c	/^void initClientMultiState(client *c) {$/;"	f	typeref:typename:void
initConfigValues	src/config.c	/^void initConfigValues() {$/;"	f	typeref:typename:void
initCryptoLocks	src/tls.c	/^static void initCryptoLocks(void) {$/;"	f	typeref:typename:void	file:
initEntry	src/quicklist.c	/^#define initEntry(/;"	d	file:
initOpensslLocks	deps/hiredis/ssl.c	/^static int initOpensslLocks(void) {$/;"	f	typeref:typename:int	file:
initSentinel	src/sentinel.c	/^void initSentinel(void) {$/;"	f	typeref:typename:void
initSentinelConfig	src/sentinel.c	/^void initSentinelConfig(void) {$/;"	f	typeref:typename:void
initServer	src/server.c	/^void initServer(void) {$/;"	f	typeref:typename:void
initServerConfig	src/server.c	/^void initServerConfig(void) {$/;"	f	typeref:typename:void
initStaticStringObject	src/server.h	/^#define initStaticStringObject(/;"	d
initThreadedIO	src/networking.c	/^void initThreadedIO(void) {$/;"	f	typeref:typename:void
init_by_array	deps/jemalloc/test/src/SFMT.c	/^sfmt_t *init_by_array(uint32_t *init_key, int key_length) {$/;"	f	typeref:typename:sfmt_t *
init_by_array64	src/mt19937-64.c	/^void init_by_array64(unsigned long long init_key[],$/;"	f	typeref:typename:void
init_by_array_32_expected	deps/jemalloc/test/unit/SFMT.c	/^static const uint32_t init_by_array_32_expected[] = {$/;"	v	typeref:typename:const uint32_t[]	file:
init_by_array_64_expected	deps/jemalloc/test/unit/SFMT.c	/^static const uint64_t init_by_array_64_expected[] = {$/;"	v	typeref:typename:const uint64_t[]	file:
init_entries	deps/jemalloc/test/unit/ql.c	/^init_entries(list_t *entries, unsigned nentries) {$/;"	f	typeref:typename:TEST_END void	file:
init_entries	deps/jemalloc/test/unit/qr.c	/^init_entries(ring_t *entries) {$/;"	f	typeref:typename:void	file:
init_exp	deps/lua/src/lparser.c	/^static void init_exp (expdesc *e, expkind k, int i) {$/;"	f	typeref:typename:void	file:
init_gen_rand	deps/jemalloc/test/src/SFMT.c	/^sfmt_t *init_gen_rand(uint32_t seed) {$/;"	f	typeref:typename:sfmt_t *
init_gen_rand_32_expected	deps/jemalloc/test/unit/SFMT.c	/^static const uint32_t init_gen_rand_32_expected[] = {$/;"	v	typeref:typename:const uint32_t[]	file:
init_gen_rand_64_expected	deps/jemalloc/test/unit/SFMT.c	/^static const uint64_t init_gen_rand_64_expected[] = {$/;"	v	typeref:typename:const uint64_t[]	file:
init_genrand64	src/mt19937-64.c	/^void init_genrand64(unsigned long long seed)$/;"	f	typeref:typename:void
init_lock	deps/jemalloc/include/jemalloc/internal/rtree.h	/^	malloc_mutex_t		init_lock;$/;"	m	struct:rtree_s	typeref:typename:malloc_mutex_t
init_lock	deps/jemalloc/src/jemalloc.c	/^static malloc_mutex_t	init_lock = MALLOC_MUTEX_INITIALIZER;$/;"	v	typeref:typename:malloc_mutex_t	file:
init_lock	deps/jemalloc/src/jemalloc.c	/^static malloc_mutex_t	init_lock = SRWLOCK_INIT;$/;"	v	typeref:typename:malloc_mutex_t	file:
init_lock	deps/jemalloc/src/jemalloc.c	/^static malloc_mutex_t	init_lock;$/;"	v	typeref:typename:malloc_mutex_t	file:
init_lock_initialized	deps/jemalloc/src/jemalloc.c	/^static bool init_lock_initialized = false;$/;"	v	typeref:typename:bool	file:
init_opt_stats_print_opts	deps/jemalloc/src/jemalloc.c	/^init_opt_stats_print_opts(const char *v, size_t vlen) {$/;"	f	typeref:typename:void	file:
init_system_thp_mode	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define init_system_thp_mode /;"	d
init_system_thp_mode	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define init_system_thp_mode /;"	d
init_system_thp_mode	deps/jemalloc/src/pages.c	/^thp_mode_t init_system_thp_mode;$/;"	v	typeref:typename:thp_mode_t
init_thp_state	deps/jemalloc/src/pages.c	/^init_thp_state(void) {$/;"	f	typeref:typename:void	file:
initial_memory_usage	src/server.h	/^    size_t initial_memory_usage; \/* Bytes used after initialization. *\/$/;"	m	struct:redisServer	typeref:typename:size_t
initializeSentinelConfig	src/sentinel.c	/^void initializeSentinelConfig() {$/;"	f	typeref:typename:void
initialized	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	bool initialized;$/;"	m	struct:ctl_arena_s	typeref:typename:bool
initialized	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^	bool initialized;$/;"	m	struct:__anon70b3c1880108	typeref:typename:bool
initialized	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^	bool initialized;$/;"	m	struct:__anon4c1a01b90108	typeref:typename:bool
initialized	deps/jemalloc/test/src/SFMT.c	/^    int initialized;$/;"	m	struct:sfmt_s	typeref:typename:int	file:
inline	deps/hiredis/win32.h	/^#define inline /;"	d
inline	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#  define inline /;"	d
inline	src/lzf_c.c	/^# define inline /;"	d	file:
input	deps/jemalloc/test/unit/malloc_io.c	/^		const char *input;$/;"	m	struct:TEST_BEGIN::test_s	typeref:typename:const char *	file:
inputCatSds	src/object.c	/^void inputCatSds(void *result, const char *str) {$/;"	f	typeref:typename:void
input_dbnum	src/redis-cli.c	/^    int input_dbnum; \/* db num user input *\/$/;"	m	struct:config	typeref:typename:int	file:
insertHelper	src/ziplist.c	/^static unsigned char *insertHelper(unsigned char *zl, char ch, size_t len, unsigned char *pos) {$/;"	f	typeref:typename:unsigned char *	file:
inst_metric	src/server.h	/^    } inst_metric[STATS_METRIC_COUNT];$/;"	m	struct:redisServer	typeref:struct:redisServer::__anon3ef696e90608[]
install	Makefile	/^install:$/;"	t
install	deps/hiredis/Makefile	/^install: $(DYLIBNAME) $(STLIBNAME) $(PKGCONFNAME)$/;"	t
install	deps/hiredis/Makefile	/^install: install-ssl$/;"	t
install	deps/jemalloc/Makefile	/^install: install_bin install_include install_lib install_doc$/;"	t
install	deps/jemalloc/Makefile.in	/^install: install_bin install_include install_lib install_doc$/;"	t
install	deps/lua/Makefile	/^install: dummy$/;"	t
install	src/Makefile	/^install: all$/;"	t
install-ssl	deps/hiredis/Makefile	/^install-ssl: $(SSL_DYLIBNAME) $(SSL_STLIBNAME) $(SSL_PKGCONFNAME)$/;"	t
install_bin	deps/jemalloc/Makefile	/^install_bin:$/;"	t
install_bin	deps/jemalloc/Makefile.in	/^install_bin:$/;"	t
install_doc	deps/jemalloc/Makefile	/^install_doc: install_doc_html install_doc_man$/;"	t
install_doc	deps/jemalloc/Makefile.in	/^install_doc: install_doc_html install_doc_man$/;"	t
install_doc_html	deps/jemalloc/Makefile	/^install_doc_html:$/;"	t
install_doc_html	deps/jemalloc/Makefile.in	/^install_doc_html:$/;"	t
install_doc_man	deps/jemalloc/Makefile	/^install_doc_man:$/;"	t
install_doc_man	deps/jemalloc/Makefile.in	/^install_doc_man:$/;"	t
install_include	deps/jemalloc/Makefile	/^install_include:$/;"	t
install_include	deps/jemalloc/Makefile.in	/^install_include:$/;"	t
install_lib	deps/jemalloc/Makefile	/^install_lib: install_lib_shared install_lib_static install_lib_pc$/;"	t
install_lib	deps/jemalloc/Makefile.in	/^install_lib: install_lib_shared install_lib_static install_lib_pc$/;"	t
install_lib_pc	deps/jemalloc/Makefile	/^install_lib_pc: $(PC)$/;"	t
install_lib_pc	deps/jemalloc/Makefile.in	/^install_lib_pc: $(PC)$/;"	t
install_lib_shared	deps/jemalloc/Makefile	/^install_lib_shared: $(DSOS)$/;"	t
install_lib_shared	deps/jemalloc/Makefile.in	/^install_lib_shared: $(DSOS)$/;"	t
install_lib_static	deps/jemalloc/Makefile	/^install_lib_static: $(STATIC_LIBS)$/;"	t
install_lib_static	deps/jemalloc/Makefile.in	/^install_lib_static: $(STATIC_LIBS)$/;"	t
install_suffix	deps/jemalloc/Makefile	/^install_suffix := $/;"	m
install_suffix	deps/jemalloc/Makefile.in	/^install_suffix := @install_suffix@$/;"	m
instanceLink	src/sentinel.c	/^typedef struct instanceLink {$/;"	s	file:
instanceLink	src/sentinel.c	/^} instanceLink;$/;"	t	typeref:struct:instanceLink	file:
instanceLinkCloseConnection	src/sentinel.c	/^void instanceLinkCloseConnection(instanceLink *link, redisAsyncContext *c) {$/;"	f	typeref:typename:void
instanceLinkConnectionError	src/sentinel.c	/^void instanceLinkConnectionError(const redisAsyncContext *c) {$/;"	f	typeref:typename:void
instanceLinkNegotiateTLS	src/sentinel.c	/^static int instanceLinkNegotiateTLS(redisAsyncContext *context) {$/;"	f	typeref:typename:int	file:
instancesDictType	src/sentinel.c	/^dictType instancesDictType = {$/;"	v	typeref:typename:dictType
int16_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef signed __int16    int16_t;$/;"	t	typeref:typename:signed __int16
int16_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef signed short      int16_t;$/;"	t	typeref:typename:signed short
int32_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef signed __int32    int32_t;$/;"	t	typeref:typename:signed __int32
int32_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef signed int        int32_t;$/;"	t	typeref:typename:signed int
int32_t	deps/lua/src/lua_bit.c	/^typedef __int32 int32_t;$/;"	t	typeref:typename:__int32	file:
int64_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef signed __int64       int64_t;$/;"	t	typeref:typename:signed __int64
int8_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef signed __int8     int8_t;$/;"	t	typeref:typename:signed __int8
int8_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef signed char       int8_t;$/;"	t	typeref:typename:signed char
int_fast16_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int16_t   int_fast16_t;$/;"	t	typeref:typename:int16_t
int_fast32_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int32_t   int_fast32_t;$/;"	t	typeref:typename:int32_t
int_fast64_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int64_t   int_fast64_t;$/;"	t	typeref:typename:int64_t
int_fast8_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int8_t    int_fast8_t;$/;"	t	typeref:typename:int8_t
int_least16_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int16_t   int_least16_t;$/;"	t	typeref:typename:int16_t
int_least32_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int32_t   int_least32_t;$/;"	t	typeref:typename:int32_t
int_least64_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int64_t   int_least64_t;$/;"	t	typeref:typename:int64_t
int_least8_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int8_t    int_least8_t;$/;"	t	typeref:typename:int8_t
int_val	deps/jemalloc/include/jemalloc/internal/emitter.h	/^		int int_val;$/;"	m	union:emitter_col_s::__anona0eb805b010a	typeref:typename:int
integer	deps/hiredis/hiredis.h	/^    long long integer; \/* The integer when type is REDIS_REPLY_INTEGER *\/$/;"	m	struct:redisReply	typeref:typename:long long
integers	src/server.h	/^    *integers[OBJ_SHARED_INTEGERS],$/;"	m	struct:sharedObjectsStruct
interactive	src/redis-cli.c	/^    int interactive;$/;"	m	struct:config	typeref:typename:int	file:
interface	src/config.c	/^    typeInterface interface; \/* The function pointers that define the type interface *\/$/;"	m	struct:standardConfig	typeref:typename:typeInterface	file:
interleave64	src/geohash.c	/^static inline uint64_t interleave64(uint32_t xlo, uint32_t ylo) {$/;"	f	typeref:typename:uint64_t	file:
internal	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	atomic_zu_t		internal;$/;"	m	struct:arena_stats_s	typeref:typename:atomic_zu_t
interval	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	nstime_t		interval;$/;"	m	struct:arena_decay_s	typeref:typename:nstime_t
interval	src/redis-cli.c	/^    long interval;$/;"	m	struct:config	typeref:typename:long	file:
intmax_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef int64_t   intmax_t;$/;"	t	typeref:typename:int64_t
intptr_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef _W64 signed int   intptr_t;$/;"	t	typeref:typename:_W64 signed int
intptr_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef signed __int64    intptr_t;$/;"	t	typeref:typename:signed __int64
intrev16	src/endianconv.c	/^uint16_t intrev16(uint16_t v) {$/;"	f	typeref:typename:uint16_t
intrev16ifbe	src/endianconv.h	/^#define intrev16ifbe(/;"	d
intrev32	src/endianconv.c	/^uint32_t intrev32(uint32_t v) {$/;"	f	typeref:typename:uint32_t
intrev32ifbe	src/endianconv.h	/^#define intrev32ifbe(/;"	d
intrev64	src/endianconv.c	/^uint64_t intrev64(uint64_t v) {$/;"	f	typeref:typename:uint64_t
intrev64ifbe	src/endianconv.h	/^#define intrev64ifbe(/;"	d
intrinsicLatencyMode	src/redis-cli.c	/^static void intrinsicLatencyMode(void) {$/;"	f	typeref:typename:void	file:
intrinsicLatencyModeStop	src/redis-cli.c	/^static void intrinsicLatencyModeStop(int s) {$/;"	f	typeref:typename:void	file:
intrinsic_latency_duration	src/redis-cli.c	/^    int intrinsic_latency_duration;$/;"	m	struct:config	typeref:typename:int	file:
intrinsic_latency_mode	src/redis-cli.c	/^    int intrinsic_latency_mode;$/;"	m	struct:config	typeref:typename:int	file:
introspect	deps/jemalloc/src/zone.c	/^	struct malloc_introspection_t *introspect;$/;"	m	struct:_malloc_zone_t	typeref:struct:malloc_introspection_t *	file:
intset	src/intset.h	/^typedef struct intset {$/;"	s
intset	src/intset.h	/^} intset;$/;"	t	typeref:struct:intset
intsetAdd	src/intset.c	/^intset *intsetAdd(intset *is, int64_t value, uint8_t *success) {$/;"	f	typeref:typename:intset *
intsetBlobLen	src/intset.c	/^size_t intsetBlobLen(intset *is) {$/;"	f	typeref:typename:size_t
intsetFind	src/intset.c	/^uint8_t intsetFind(intset *is, int64_t value) {$/;"	f	typeref:typename:uint8_t
intsetGet	src/intset.c	/^uint8_t intsetGet(intset *is, uint32_t pos, int64_t *value) {$/;"	f	typeref:typename:uint8_t
intsetLen	src/intset.c	/^uint32_t intsetLen(const intset *is) {$/;"	f	typeref:typename:uint32_t
intsetMoveTail	src/intset.c	/^static void intsetMoveTail(intset *is, uint32_t from, uint32_t to) {$/;"	f	typeref:typename:void	file:
intsetNew	src/intset.c	/^intset *intsetNew(void) {$/;"	f	typeref:typename:intset *
intsetRandom	src/intset.c	/^int64_t intsetRandom(intset *is) {$/;"	f	typeref:typename:int64_t
intsetRemove	src/intset.c	/^intset *intsetRemove(intset *is, int64_t value, int *success) {$/;"	f	typeref:typename:intset *
intsetResize	src/intset.c	/^static intset *intsetResize(intset *is, uint32_t len) {$/;"	f	typeref:typename:intset *	file:
intsetSearch	src/intset.c	/^static uint8_t intsetSearch(intset *is, int64_t value, uint32_t *pos) {$/;"	f	typeref:typename:uint8_t	file:
intsetTest	src/intset.c	/^int intsetTest(int argc, char **argv, int accurate) {$/;"	f	typeref:typename:int
intsetUpgradeAndAdd	src/intset.c	/^static intset *intsetUpgradeAndAdd(intset *is, int64_t value) {$/;"	f	typeref:typename:intset *	file:
intsetValidateIntegrity	src/intset.c	/^int intsetValidateIntegrity(const unsigned char *p, size_t size, int deep) {$/;"	f	typeref:typename:int
intval	tests/modules/datatype.c	/^    long long intval;$/;"	m	struct:__anonc5c0b6fc0108	typeref:typename:long long	file:
invalid	deps/hiredis/async.h	/^        redisCallbackList invalid;$/;"	m	struct:redisAsyncContext::__anon89b0a8ab0208	typeref:typename:redisCallbackList
invalid_alignment_string	deps/jemalloc/src/jemalloc.c	/^	const char *invalid_alignment_string;$/;"	m	struct:static_opts_s	typeref:typename:const char *	file:
invalid_hll_err	src/hyperloglog.c	/^static char *invalid_hll_err = "-INVALIDOBJ Corrupted HLL object detected";$/;"	v	typeref:typename:char *	file:
invertjump	deps/lua/src/lcode.c	/^static void invertjump (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void	file:
io	src/rio.h	/^    } io;$/;"	m	struct:_rio	typeref:union:_rio::__anonb6066a3c010a
io_close	deps/lua/src/liolib.c	/^static int io_close (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_fclose	deps/lua/src/liolib.c	/^static int io_fclose (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_flush	deps/lua/src/liolib.c	/^static int io_flush (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_gc	deps/lua/src/liolib.c	/^static int io_gc (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_input	deps/lua/src/liolib.c	/^static int io_input (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_lines	deps/lua/src/liolib.c	/^static int io_lines (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_noclose	deps/lua/src/liolib.c	/^static int io_noclose (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_open	deps/lua/src/liolib.c	/^static int io_open (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_output	deps/lua/src/liolib.c	/^static int io_output (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_pclose	deps/lua/src/liolib.c	/^static int io_pclose (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_popen	deps/lua/src/liolib.c	/^static int io_popen (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_read	deps/lua/src/liolib.c	/^static int io_read (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_readline	deps/lua/src/liolib.c	/^static int io_readline (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_threads	src/networking.c	/^pthread_t io_threads[IO_THREADS_MAX_NUM];$/;"	v	typeref:typename:pthread_t[]
io_threads_active	src/server.h	/^    int io_threads_active;      \/* Is IO threads currently active? *\/$/;"	m	struct:redisServer	typeref:typename:int
io_threads_do_reads	src/server.h	/^    int io_threads_do_reads;    \/* Read and parse from IO threads? *\/$/;"	m	struct:redisServer	typeref:typename:int
io_threads_list	src/networking.c	/^list *io_threads_list[IO_THREADS_MAX_NUM];$/;"	v	typeref:typename:list * []
io_threads_mutex	src/networking.c	/^pthread_mutex_t io_threads_mutex[IO_THREADS_MAX_NUM];$/;"	v	typeref:typename:pthread_mutex_t[]
io_threads_num	src/server.h	/^    int io_threads_num;         \/* Number of IO threads to use. *\/$/;"	m	struct:redisServer	typeref:typename:int
io_threads_op	src/networking.c	/^int io_threads_op;      \/* IO_THREADS_OP_WRITE or IO_THREADS_OP_READ. *\/$/;"	v	typeref:typename:int
io_threads_pending	src/networking.c	/^redisAtomic unsigned long io_threads_pending[IO_THREADS_MAX_NUM];$/;"	v	typeref:typename:redisAtomic unsigned long[]
io_tmpfile	deps/lua/src/liolib.c	/^static int io_tmpfile (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_tostring	deps/lua/src/liolib.c	/^static int io_tostring (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_type	deps/lua/src/liolib.c	/^static int io_type (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_write	deps/lua/src/liolib.c	/^static int io_write (lua_State *L) {$/;"	f	typeref:typename:int	file:
ioctl	deps/hiredis/sockcompat.h	/^#define ioctl(/;"	d
iolib	deps/lua/src/liolib.c	/^static const luaL_Reg iolib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
ip	deps/hiredis/hiredis.h	/^            const char *ip;$/;"	m	struct:__anon7daed6b50108::__anon7daed6b5020a::__anon7daed6b50308	typeref:typename:const char *
ip	src/cluster.h	/^    char ip[NET_IP_STR_LEN];  \/* IP address last time it was seen *\/$/;"	m	struct:__anon2cc7db540108	typeref:typename:char[]
ip	src/cluster.h	/^    char ip[NET_IP_STR_LEN];  \/* Latest known IP address of this node *\/$/;"	m	struct:clusterNode	typeref:typename:char[]
ip	src/module.c	/^    char ip[NET_IP_STR_LEN];$/;"	m	struct:moduleClusterNodeInfo	typeref:typename:char[]	file:
ip	src/redis-benchmark.c	/^    char *ip;$/;"	m	struct:clusterNode	typeref:typename:char *	file:
ip	src/redis-cli.c	/^    char *ip;$/;"	m	struct:clusterManagerNode	typeref:typename:char *	file:
ip	src/sentinel.c	/^    char *ip;               \/* Always a resolved address *\/$/;"	m	struct:sentinelAddr	typeref:typename:char *	file:
ipairsaux	deps/lua/src/lbaselib.c	/^static int ipairsaux (lua_State *L) {$/;"	f	typeref:typename:int	file:
ipalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^ipalloc(tsd_t *tsd, size_t usize, size_t alignment, bool zero) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
ipalloct	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^ipalloct(tsdn_t *tsdn, size_t usize, size_t alignment, bool zero,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
ipallocztm	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^ipallocztm(tsdn_t *tsdn, size_t usize, size_t alignment, bool zero,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
ipfd	src/server.h	/^    socketFds ipfd;             \/* TCP socket file descriptors *\/$/;"	m	struct:redisServer	typeref:typename:socketFds
iralloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^iralloc(tsd_t *tsd, void *ptr, size_t oldsize, size_t size, size_t alignment,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
iralloct	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^iralloct(tsdn_t *tsdn, void *ptr, size_t oldsize, size_t size, size_t alignment,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
iralloct_realign	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^iralloct_realign(tsdn_t *tsdn, void *ptr, size_t oldsize, size_t size,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
irallocx_prof	deps/jemalloc/src/jemalloc.c	/^irallocx_prof(tsd_t *tsd, void *old_ptr, size_t old_usize, size_t size,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
irallocx_prof_sample	deps/jemalloc/src/jemalloc.c	/^irallocx_prof_sample(tsdn_t *tsdn, void *old_ptr, size_t old_usize,$/;"	f	typeref:typename:void *	file:
irealloc_prof	deps/jemalloc/src/jemalloc.c	/^irealloc_prof(tsd_t *tsd, void *old_ptr, size_t old_usize, size_t usize,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
irealloc_prof_sample	deps/jemalloc/src/jemalloc.c	/^irealloc_prof_sample(tsd_t *tsd, void *old_ptr, size_t old_usize, size_t usize,$/;"	f	typeref:typename:void *	file:
is	src/t_zset.c	/^                intset *is;$/;"	m	struct:__anon6fce03460408::__anon6fce0346050a::_iterset::__anon6fce03460608	typeref:typename:intset *	file:
is	src/t_zset.c	/^            } is;$/;"	m	union:__anon6fce03460408::__anon6fce0346050a::_iterset	typeref:struct:__anon6fce03460408::__anon6fce0346050a::_iterset::__anon6fce03460608	file:
isColorTerm	src/redis-cli.c	/^int isColorTerm(void) {$/;"	f	typeref:typename:int
isEvictionProcRunning	src/evict.c	/^static int isEvictionProcRunning = 0;$/;"	v	typeref:typename:int	file:
isHLLObjectOrReply	src/hyperloglog.c	/^int isHLLObjectOrReply(client *c, robj *o) {$/;"	f	typeref:typename:int
isHexChar	src/redis-cli.c	/^#define isHexChar(/;"	d	file:
isInvalidateReply	src/redis-cli.c	/^static int isInvalidateReply(redisReply *reply) {$/;"	f	typeref:typename:int	file:
isLfunction	deps/lua/src/lobject.h	/^#define isLfunction(/;"	d
isLua	deps/lua/src/lstate.h	/^#define isLua(/;"	d
isMutuallyExclusiveChildType	src/server.c	/^int isMutuallyExclusiveChildType(int type) {$/;"	f	typeref:typename:int
isObjectRepresentableAsLongLong	src/object.c	/^int isObjectRepresentableAsLongLong(robj *o, long long *llval) {$/;"	f	typeref:typename:int
isSafeToPerformEvictions	src/evict.c	/^static int isSafeToPerformEvictions(void) {$/;"	f	typeref:typename:int	file:
isSdsRepresentableAsLongLong	src/object.c	/^int isSdsRepresentableAsLongLong(sds s, long long *llval) {$/;"	f	typeref:typename:int
isUnsupportedTerm	deps/linenoise/linenoise.c	/^static int isUnsupportedTerm(void) {$/;"	f	typeref:typename:int	file:
isWatchedKeyExpired	src/multi.c	/^int isWatchedKeyExpired(client *c) {$/;"	f	typeref:typename:int
is_fetching_slots	src/redis-benchmark.c	/^    redisAtomic int is_fetching_slots;$/;"	m	struct:config	typeref:typename:redisAtomic int	file:
is_hex_digit	src/sds.c	/^int is_hex_digit(char c) {$/;"	f	typeref:typename:int
is_leap_year	src/localtime.c	/^static int is_leap_year(time_t year) {$/;"	f	typeref:typename:int	file:
is_memory	src/config.c	/^    int is_memory; \/* Indicates if this value can be loaded as a memory value *\/$/;"	m	struct:numericConfigData	typeref:typename:int	file:
is_updating_slots	src/redis-benchmark.c	/^    redisAtomic int is_updating_slots;$/;"	m	struct:config	typeref:typename:redisAtomic int	file:
is_updating_slots_mutex	src/redis-benchmark.c	/^    pthread_mutex_t is_updating_slots_mutex;$/;"	m	struct:config	typeref:typename:pthread_mutex_t	file:
is_valid_fn	src/config.c	/^    int (*is_valid_fn)(char* val, const char **err); \/* Optional function to check validity of /;"	m	struct:stringConfigData	typeref:typename:int (*)(char * val,const char ** err)	file:
is_valid_fn	src/config.c	/^    int (*is_valid_fn)(int val, const char **err); \/* Optional function to check validity of ne/;"	m	struct:boolConfigData	typeref:typename:int (*)(int val,const char ** err)	file:
is_valid_fn	src/config.c	/^    int (*is_valid_fn)(int val, const char **err); \/* Optional function to check validity of ne/;"	m	struct:enumConfigData	typeref:typename:int (*)(int val,const char ** err)	file:
is_valid_fn	src/config.c	/^    int (*is_valid_fn)(long long val, const char **err); \/* Optional function to check validity/;"	m	struct:numericConfigData	typeref:typename:int (*)(long long val,const char ** err)	file:
is_valid_fn	src/config.c	/^    int (*is_valid_fn)(sds val, const char **err); \/* Optional function to check validity of ne/;"	m	struct:sdsConfigData	typeref:typename:int (*)(sds val,const char ** err)	file:
is_vararg	deps/lua/src/lobject.h	/^  lu_byte is_vararg;$/;"	m	struct:Proto	typeref:typename:lu_byte
isalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^isalloc(tsdn_t *tsdn, const void *ptr) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
isblack	deps/lua/src/lgc.h	/^#define isblack(/;"	d
isblank	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	/^isblank(int c) {$/;"	f	typeref:typename:int
isbreakable	deps/lua/src/lparser.c	/^  lu_byte isbreakable;  \/* true if `block' is a loop *\/$/;"	m	struct:BlockCnt	typeref:typename:lu_byte	file:
iscfunction	deps/lua/src/lobject.h	/^#define iscfunction(/;"	d
iscleared	deps/lua/src/lgc.c	/^static int iscleared (const TValue *o, int iskey) {$/;"	f	typeref:typename:int	file:
iscollectable	deps/lua/src/lobject.h	/^#define iscollectable(/;"	d
iscompr	src/rax.h	/^    uint32_t iscompr:1;   \/* Node is compressed. *\/$/;"	m	struct:raxNode	typeref:typename:uint32_t:1
isdalloct	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^isdalloct(tsdn_t *tsdn, void *ptr, size_t size, tcache_t *tcache,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
isdead	deps/lua/src/lgc.h	/^#define isdead(/;"	d
isfinalized	deps/lua/src/lgc.c	/^#define isfinalized(/;"	d	file:
isfinite	src/solarisfixes.h	/^#define isfinite(/;"	d
isfree	deps/jemalloc/src/jemalloc.c	/^isfree(tsd_t *tsd, void *ptr, size_t usize, tcache_t *tcache, bool slow_path) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
isgray	deps/lua/src/lgc.h	/^#define isgray(/;"	d
isinf	deps/lua/src/lua_cjson.c	/^#define isinf(/;"	d	file:
isinf	src/solarisfixes.h	/^#define isinf(/;"	d
isinstack	deps/lua/src/ldebug.c	/^static int isinstack (CallInfo *ci, const TValue *o) {$/;"	f	typeref:typename:int	file:
iskey	src/rax.h	/^    uint32_t iskey:1;     \/* Does this node contain a key? *\/$/;"	m	struct:raxNode	typeref:typename:uint32_t:1
isnan	src/solarisfixes.h	/^#define isnan(/;"	d
isnull	src/rax.h	/^    uint32_t isnull:1;    \/* Associated value is NULL (don't store it). *\/$/;"	m	struct:raxNode	typeref:typename:uint32_t:1
isnumeral	deps/lua/src/lcode.c	/^static int isnumeral(expdesc *e) {$/;"	f	typeref:typename:int	file:
isp2	deps/lua/src/lua_struct.c	/^#define isp2(/;"	d	file:
issueCommand	src/redis-cli.c	/^static int issueCommand(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
issueCommandRepeat	src/redis-cli.c	/^static int issueCommandRepeat(int argc, char **argv, long repeat) {$/;"	f	typeref:typename:int	file:
isthreaded	deps/jemalloc/include/jemalloc/internal/mutex.h	/^#  define isthreaded /;"	d
isthreaded	deps/jemalloc/src/mutex.c	/^bool isthreaded = false;$/;"	v	typeref:typename:bool
iswhite	deps/lua/src/lgc.h	/^#define iswhite(/;"	d
item_at_depth	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	bool item_at_depth;$/;"	m	struct:emitter_s	typeref:typename:bool
item_size	deps/jemalloc/src/jemalloc.c	/^	size_t item_size;$/;"	m	struct:dynamic_opts_s	typeref:typename:size_t	file:
items	src/rax.h	/^    size_t items, maxitems; \/* Number of items contained and total space. *\/$/;"	m	struct:raxStack	typeref:typename:size_t
iter	src/module.c	/^    void *iter;     \/* Iterator. *\/$/;"	m	struct:RedisModuleKey	typeref:typename:void *	file:
iter	src/server.h	/^    quicklistIter *iter;$/;"	m	struct:__anon3ef696e90908	typeref:typename:quicklistIter *
iter	src/t_zset.c	/^    } iter;$/;"	m	struct:__anon6fce03460408	typeref:union:__anon6fce03460408::__anon6fce0346050a	file:
iter_linear_next	deps/hdr_histogram/hdr_histogram.c	/^static bool iter_linear_next(struct hdr_iter* iter)$/;"	f	typeref:typename:bool	file:
iteration	deps/jemalloc/include/jemalloc/internal/spin.h	/^	unsigned iteration;$/;"	m	struct:__anon0a9ad5bb0108	typeref:typename:unsigned
iterset	src/t_zset.c	/^typedef union _iterset iterset;$/;"	t	typeref:union:_iterset	file:
iterzset	src/t_zset.c	/^typedef union _iterzset iterzset;$/;"	t	typeref:union:_iterzset	file:
itrprintr	src/quicklist.c	/^static int itrprintr(quicklist *ql, int print) {$/;"	f	typeref:typename:int	file:
itrprintr_rev	src/quicklist.c	/^static int itrprintr_rev(quicklist *ql, int print) {$/;"	f	typeref:typename:int	file:
ivsalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^ivsalloc(tsdn_t *tsdn, const void *ptr) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
ixalloc	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_c.h	/^ixalloc(tsdn_t *tsdn, void *ptr, size_t oldsize, size_t size, size_t extra,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
ixallocx_helper	deps/jemalloc/src/jemalloc.c	/^ixallocx_helper(tsdn_t *tsdn, void *ptr, size_t old_usize, size_t size,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
ixallocx_prof	deps/jemalloc/src/jemalloc.c	/^ixallocx_prof(tsd_t *tsd, void *ptr, size_t old_usize, size_t size,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
ixallocx_prof_sample	deps/jemalloc/src/jemalloc.c	/^ixallocx_prof_sample(tsdn_t *tsdn, void *ptr, size_t old_usize, size_t size,$/;"	f	typeref:typename:size_t	file:
je_aligned_alloc	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_aligned_alloc /;"	d
je_aligned_alloc	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_aligned_alloc /;"	d
je_aligned_alloc	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_aligned_alloc /;"	d
je_calloc	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_calloc /;"	d
je_calloc	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_calloc /;"	d
je_calloc	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_calloc /;"	d
je_dallocx	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_dallocx /;"	d
je_dallocx	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_dallocx /;"	d
je_dallocx	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_dallocx /;"	d
je_dallocx	deps/jemalloc/src/jemalloc.c	/^je_dallocx(void *ptr, int flags) {$/;"	f	typeref:typename:JEMALLOC_EXPORT void JEMALLOC_NOTHROW
je_free	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_free /;"	d
je_free	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_free /;"	d
je_free	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_free /;"	d
je_free	deps/jemalloc/src/jemalloc.c	/^je_free(void *ptr) {$/;"	f	typeref:typename:JEMALLOC_EXPORT void JEMALLOC_NOTHROW
je_mallctl	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_mallctl /;"	d
je_mallctl	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_mallctl /;"	d
je_mallctl	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_mallctl /;"	d
je_mallctl	deps/jemalloc/src/jemalloc.c	/^je_mallctl(const char *name, void *oldp, size_t *oldlenp, void *newp,$/;"	f	typeref:typename:JEMALLOC_EXPORT int JEMALLOC_NOTHROW
je_mallctlbymib	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_mallctlbymib /;"	d
je_mallctlbymib	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_mallctlbymib /;"	d
je_mallctlbymib	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_mallctlbymib /;"	d
je_mallctlbymib	deps/jemalloc/src/jemalloc.c	/^je_mallctlbymib(const size_t *mib, size_t miblen, void *oldp, size_t *oldlenp,$/;"	f	typeref:typename:JEMALLOC_EXPORT int JEMALLOC_NOTHROW
je_mallctlnametomib	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_mallctlnametomib /;"	d
je_mallctlnametomib	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_mallctlnametomib /;"	d
je_mallctlnametomib	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_mallctlnametomib /;"	d
je_mallctlnametomib	deps/jemalloc/src/jemalloc.c	/^je_mallctlnametomib(const char *name, size_t *mibp, size_t *miblenp) {$/;"	f	typeref:typename:JEMALLOC_EXPORT int JEMALLOC_NOTHROW
je_malloc	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_malloc /;"	d
je_malloc	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_malloc /;"	d
je_malloc	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_malloc /;"	d
je_malloc_conf	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_malloc_conf /;"	d
je_malloc_conf	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_malloc_conf /;"	d
je_malloc_conf	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_malloc_conf /;"	d
je_malloc_message	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_malloc_message /;"	d
je_malloc_message	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_malloc_message /;"	d
je_malloc_message	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_malloc_message /;"	d
je_malloc_message	deps/jemalloc/src/malloc_io.c	/^JEMALLOC_EXPORT void	(*je_malloc_message)(void *, const char *s);$/;"	v	typeref:typename:JEMALLOC_EXPORT void (*)(void *,const char * s)
je_malloc_stats_print	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_malloc_stats_print /;"	d
je_malloc_stats_print	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_malloc_stats_print /;"	d
je_malloc_stats_print	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_malloc_stats_print /;"	d
je_malloc_stats_print	deps/jemalloc/src/jemalloc.c	/^je_malloc_stats_print(void (*write_cb)(void *, const char *), void *cbopaque,$/;"	f	typeref:typename:JEMALLOC_EXPORT void JEMALLOC_NOTHROW
je_malloc_usable_size	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_malloc_usable_size /;"	d
je_malloc_usable_size	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_malloc_usable_size /;"	d
je_malloc_usable_size	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_malloc_usable_size /;"	d
je_malloc_usable_size	deps/jemalloc/src/jemalloc.c	/^je_malloc_usable_size(JEMALLOC_USABLE_SIZE_CONST void *ptr) {$/;"	f	typeref:typename:JEMALLOC_EXPORT size_t JEMALLOC_NOTHROW
je_mallocx	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_mallocx /;"	d
je_mallocx	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_mallocx /;"	d
je_mallocx	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_mallocx /;"	d
je_memalign	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_memalign /;"	d
je_memalign	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_memalign /;"	d
je_memalign	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_memalign /;"	d
je_nallocx	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_nallocx /;"	d
je_nallocx	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_nallocx /;"	d
je_nallocx	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_nallocx /;"	d
je_posix_memalign	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_posix_memalign /;"	d
je_posix_memalign	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_posix_memalign /;"	d
je_posix_memalign	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_posix_memalign /;"	d
je_rallocx	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_rallocx /;"	d
je_rallocx	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_rallocx /;"	d
je_rallocx	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_rallocx /;"	d
je_rallocx	deps/jemalloc/src/jemalloc.c	/^je_rallocx(void *ptr, size_t size, int flags) {$/;"	f	typeref:typename:JEMALLOC_EXPORT JEMALLOC_ALLOCATOR JEMALLOC_RESTRICT_RETURN void JEMALLOC_NOTHROW * JEMALLOC_ALLOC_SIZE (2)
je_realloc	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_realloc /;"	d
je_realloc	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_realloc /;"	d
je_realloc	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_realloc /;"	d
je_realloc	deps/jemalloc/src/jemalloc.c	/^je_realloc(void *ptr, size_t size) {$/;"	f	typeref:typename:JEMALLOC_EXPORT JEMALLOC_ALLOCATOR JEMALLOC_RESTRICT_RETURN void JEMALLOC_NOTHROW * JEMALLOC_ALLOC_SIZE (2)
je_sallocx	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_sallocx /;"	d
je_sallocx	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_sallocx /;"	d
je_sallocx	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_sallocx /;"	d
je_sdallocx	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_sdallocx /;"	d
je_sdallocx	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_sdallocx /;"	d
je_sdallocx	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_sdallocx /;"	d
je_sdallocx	deps/jemalloc/src/jemalloc.c	/^je_sdallocx(void *ptr, size_t size, int flags) {$/;"	f	typeref:typename:JEMALLOC_EXPORT void JEMALLOC_NOTHROW
je_valloc	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_valloc /;"	d
je_valloc	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_valloc /;"	d
je_valloc	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_valloc /;"	d
je_xallocx	deps/jemalloc/include/jemalloc/internal/public_namespace.h	/^#define je_xallocx /;"	d
je_xallocx	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define je_xallocx /;"	d
je_xallocx	deps/jemalloc/include/jemalloc/jemalloc_rename.h	/^#  define je_xallocx /;"	d
je_xallocx	deps/jemalloc/src/jemalloc.c	/^je_xallocx(void *ptr, size_t size, size_t extra, int flags) {$/;"	f	typeref:typename:JEMALLOC_EXPORT size_t JEMALLOC_NOTHROW
jemalloc	deps/Makefile	/^jemalloc: .make-prerequisites$/;"	t
jemalloc_bg_thread	src/server.h	/^    int jemalloc_bg_thread;         \/* Enable jemalloc background thread *\/$/;"	m	struct:redisServer	typeref:typename:int
jemalloc_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define jemalloc_postfork_child /;"	d
jemalloc_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define jemalloc_postfork_child /;"	d
jemalloc_postfork_child	deps/jemalloc/src/jemalloc.c	/^jemalloc_postfork_child(void) {$/;"	f	typeref:typename:void
jemalloc_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define jemalloc_postfork_parent /;"	d
jemalloc_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define jemalloc_postfork_parent /;"	d
jemalloc_postfork_parent	deps/jemalloc/src/jemalloc.c	/^jemalloc_postfork_parent(void)$/;"	f	typeref:typename:void
jemalloc_prefork	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define jemalloc_prefork /;"	d
jemalloc_prefork	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define jemalloc_prefork /;"	d
jemalloc_prefork	deps/jemalloc/src/jemalloc.c	/^jemalloc_prefork(void)$/;"	f	typeref:typename:void
jemalloc_purge	src/zmalloc.c	/^int jemalloc_purge() {$/;"	f	typeref:typename:int
jemalloc_secure_getenv	deps/jemalloc/src/jemalloc.c	/^jemalloc_secure_getenv(const char *name) {$/;"	f	typeref:typename:char *	file:
jemalloc_zone	deps/jemalloc/src/zone.c	/^static malloc_zone_t jemalloc_zone;$/;"	v	typeref:typename:malloc_zone_t	file:
jemalloc_zone_introspect	deps/jemalloc/src/zone.c	/^static struct malloc_introspection_t jemalloc_zone_introspect;$/;"	v	typeref:struct:malloc_introspection_t	file:
jitter_state	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	uint64_t		jitter_state;$/;"	m	struct:arena_decay_s	typeref:typename:uint64_t
jpc	deps/lua/src/lparser.h	/^  int jpc;  \/* list of pending jumps to `pc' *\/$/;"	m	struct:FuncState	typeref:typename:int
json_append_array	deps/lua/src/lua_cjson.c	/^static void json_append_array(lua_State *l, json_config_t *cfg, int current_depth,$/;"	f	typeref:typename:void	file:
json_append_data	deps/lua/src/lua_cjson.c	/^static void json_append_data(lua_State *l, json_config_t *cfg,$/;"	f	typeref:typename:void	file:
json_append_number	deps/lua/src/lua_cjson.c	/^static void json_append_number(lua_State *l, json_config_t *cfg,$/;"	f	typeref:typename:void	file:
json_append_object	deps/lua/src/lua_cjson.c	/^static void json_append_object(lua_State *l, json_config_t *cfg,$/;"	f	typeref:typename:void	file:
json_append_string	deps/lua/src/lua_cjson.c	/^static void json_append_string(lua_State *l, strbuf_t *json, int lindex)$/;"	f	typeref:typename:void	file:
json_append_unicode_escape	deps/lua/src/lua_cjson.c	/^static int json_append_unicode_escape(json_parse_t *json)$/;"	f	typeref:typename:int	file:
json_arg_init	deps/lua/src/lua_cjson.c	/^static json_config_t *json_arg_init(lua_State *l, int args)$/;"	f	typeref:typename:json_config_t *	file:
json_arr_json	deps/jemalloc/test/unit/emitter.c	/^static const char *json_arr_json =$/;"	v	typeref:typename:const char *	file:
json_arr_table	deps/jemalloc/test/unit/emitter.c	/^static const char *json_arr_table = "";$/;"	v	typeref:typename:const char *	file:
json_cfg_decode_invalid_numbers	deps/lua/src/lua_cjson.c	/^static int json_cfg_decode_invalid_numbers(lua_State *l)$/;"	f	typeref:typename:int	file:
json_cfg_decode_max_depth	deps/lua/src/lua_cjson.c	/^static int json_cfg_decode_max_depth(lua_State *l)$/;"	f	typeref:typename:int	file:
json_cfg_encode_invalid_numbers	deps/lua/src/lua_cjson.c	/^static int json_cfg_encode_invalid_numbers(lua_State *l)$/;"	f	typeref:typename:int	file:
json_cfg_encode_keep_buffer	deps/lua/src/lua_cjson.c	/^static int json_cfg_encode_keep_buffer(lua_State *l)$/;"	f	typeref:typename:int	file:
json_cfg_encode_max_depth	deps/lua/src/lua_cjson.c	/^static int json_cfg_encode_max_depth(lua_State *l)$/;"	f	typeref:typename:int	file:
json_cfg_encode_number_precision	deps/lua/src/lua_cjson.c	/^static int json_cfg_encode_number_precision(lua_State *l)$/;"	f	typeref:typename:int	file:
json_cfg_encode_sparse_array	deps/lua/src/lua_cjson.c	/^static int json_cfg_encode_sparse_array(lua_State *l)$/;"	f	typeref:typename:int	file:
json_check_encode_depth	deps/lua/src/lua_cjson.c	/^static void json_check_encode_depth(lua_State *l, json_config_t *cfg,$/;"	f	typeref:typename:void	file:
json_config_t	deps/lua/src/lua_cjson.c	/^} json_config_t;$/;"	t	typeref:struct:__anona3a73c770208	file:
json_create_config	deps/lua/src/lua_cjson.c	/^static void json_create_config(lua_State *l)$/;"	f	typeref:typename:void	file:
json_decode	deps/lua/src/lua_cjson.c	/^static int json_decode(lua_State *l)$/;"	f	typeref:typename:int	file:
json_decode_ascend	deps/lua/src/lua_cjson.c	/^static inline void json_decode_ascend(json_parse_t *json)$/;"	f	typeref:typename:void	file:
json_decode_descend	deps/lua/src/lua_cjson.c	/^static void json_decode_descend(lua_State *l, json_parse_t *json, int slots)$/;"	f	typeref:typename:void	file:
json_destroy_config	deps/lua/src/lua_cjson.c	/^static int json_destroy_config(lua_State *l)$/;"	f	typeref:typename:int	file:
json_encode	deps/lua/src/lua_cjson.c	/^static int json_encode(lua_State *l)$/;"	f	typeref:typename:int	file:
json_encode_exception	deps/lua/src/lua_cjson.c	/^static void json_encode_exception(lua_State *l, json_config_t *cfg, strbuf_t *json, int lindex,$/;"	f	typeref:typename:void	file:
json_enum_option	deps/lua/src/lua_cjson.c	/^static int json_enum_option(lua_State *l, int optindex, int *setting,$/;"	f	typeref:typename:int	file:
json_fetch_config	deps/lua/src/lua_cjson.c	/^static json_config_t *json_fetch_config(lua_State *l)$/;"	f	typeref:typename:json_config_t *	file:
json_integer_option	deps/lua/src/lua_cjson.c	/^static int json_integer_option(lua_State *l, int optindex, int *setting,$/;"	f	typeref:typename:int	file:
json_is_invalid_number	deps/lua/src/lua_cjson.c	/^static int json_is_invalid_number(json_parse_t *json)$/;"	f	typeref:typename:int	file:
json_next_number_token	deps/lua/src/lua_cjson.c	/^static void json_next_number_token(json_parse_t *json, json_token_t *token)$/;"	f	typeref:typename:void	file:
json_next_string_token	deps/lua/src/lua_cjson.c	/^static void json_next_string_token(json_parse_t *json, json_token_t *token)$/;"	f	typeref:typename:void	file:
json_next_token	deps/lua/src/lua_cjson.c	/^static void json_next_token(json_parse_t *json, json_token_t *token)$/;"	f	typeref:typename:void	file:
json_parse_array_context	deps/lua/src/lua_cjson.c	/^static void json_parse_array_context(lua_State *l, json_parse_t *json)$/;"	f	typeref:typename:void	file:
json_parse_object_context	deps/lua/src/lua_cjson.c	/^static void json_parse_object_context(lua_State *l, json_parse_t *json)$/;"	f	typeref:typename:void	file:
json_parse_t	deps/lua/src/lua_cjson.c	/^} json_parse_t;$/;"	t	typeref:struct:__anona3a73c770308	file:
json_process_value	deps/lua/src/lua_cjson.c	/^static void json_process_value(lua_State *l, json_parse_t *json,$/;"	f	typeref:typename:void	file:
json_protect_conversion	deps/lua/src/lua_cjson.c	/^static int json_protect_conversion(lua_State *l)$/;"	f	typeref:typename:int	file:
json_set_token_error	deps/lua/src/lua_cjson.c	/^static void json_set_token_error(json_token_t *token, json_parse_t *json,$/;"	f	typeref:typename:void	file:
json_throw_parse_error	deps/lua/src/lua_cjson.c	/^static void json_throw_parse_error(lua_State *l, json_parse_t *json,$/;"	f	typeref:typename:void	file:
json_token_t	deps/lua/src/lua_cjson.c	/^} json_token_t;$/;"	t	typeref:struct:__anona3a73c770408	file:
json_token_type_name	deps/lua/src/lua_cjson.c	/^static const char *json_token_type_name[] = {$/;"	v	typeref:typename:const char * []	file:
json_token_type_t	deps/lua/src/lua_cjson.c	/^} json_token_type_t;$/;"	t	typeref:enum:__anona3a73c770103	file:
json_verify_invalid_number_setting	deps/lua/src/lua_cjson.c	/^#define json_verify_invalid_number_setting(/;"	d	file:
json_verify_invalid_number_setting	deps/lua/src/lua_cjson.c	/^void json_verify_invalid_number_setting(lua_State *l, int *setting)$/;"	f	typeref:typename:void
jumponcond	deps/lua/src/lcode.c	/^static int jumponcond (FuncState *fs, expdesc *e, int cond) {$/;"	f	typeref:typename:int	file:
justid	src/server.h	/^    *time, *pxat, *px, *retrycount, *force, *justid, $/;"	m	struct:sharedObjectsStruct
justify	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_justify_t justify;$/;"	m	struct:emitter_col_s	typeref:typename:emitter_justify_t
k	deps/lua/src/lobject.h	/^  TValue *k;  \/* constants used by the function *\/$/;"	m	struct:Proto	typeref:typename:TValue *
k	deps/lua/src/lparser.h	/^  expkind k;$/;"	m	struct:expdesc	typeref:typename:expkind
k	deps/lua/src/lparser.h	/^  lu_byte k;$/;"	m	struct:upvaldesc	typeref:typename:lu_byte
k	src/sha256.c	/^static const WORD k[64] = {$/;"	v	typeref:typename:const WORD[64]	file:
keepalive	src/redis-benchmark.c	/^    int keepalive;$/;"	m	struct:config	typeref:typename:int	file:
keepttl	src/server.h	/^    *lastid, *ping, *setid, *keepttl, *load, *createconsumer,$/;"	m	struct:sharedObjectsStruct
key	deps/hiredis/dict.h	/^    void *key;$/;"	m	struct:dictEntry	typeref:typename:void *
key	deps/hiredis/test.c	/^        const char *key;$/;"	m	struct:config::__anonab9ca1680308	typeref:typename:const char *	file:
key	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	const void *key;$/;"	m	struct:__anon25f7a4b70108	typeref:typename:const void *
key	deps/jemalloc/test/unit/ph.c	/^	uint64_t key;$/;"	m	struct:node_s	typeref:typename:uint64_t	file:
key	deps/jemalloc/test/unit/rb.c	/^	uint64_t key;$/;"	m	struct:node_s	typeref:typename:uint64_t	file:
key	src/cli_common.h	/^    char *key;$/;"	m	struct:cliSSLconfig	typeref:typename:char *
key	src/dict.h	/^    void *key;$/;"	m	struct:dictEntry	typeref:typename:void *
key	src/evict.c	/^    sds key;                    \/* Key name. *\/$/;"	m	struct:evictionPoolEntry	typeref:typename:sds	file:
key	src/module.c	/^    RedisModuleKey *key;$/;"	m	struct:__anon967b47330b08	typeref:typename:RedisModuleKey *	file:
key	src/module.c	/^    robj *key;      \/* Key name object. *\/$/;"	m	struct:RedisModuleKey	typeref:typename:robj *	file:
key	src/multi.c	/^    robj *key;$/;"	m	struct:watchedKey	typeref:typename:robj *	file:
key	src/rax.h	/^    unsigned char *key;     \/* The current string. *\/$/;"	m	struct:raxIterator	typeref:typename:unsigned char *
key	src/redis-check-rdb.c	/^    robj *key;                      \/* Current key we are reading. *\/$/;"	m	struct:__anon818955940108	typeref:typename:robj *	file:
key	src/server.h	/^    robj *key;$/;"	m	struct:readyList	typeref:typename:robj *
key	src/server.h	/^    struct redisObject *key;    \/* Optional name of key processed *\/$/;"	m	struct:RedisModuleIO	typeref:struct:redisObject *
key2tval	deps/lua/src/ltable.h	/^#define key2tval(/;"	d
keyCompare	deps/hiredis/dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType	typeref:typename:int (*)(void * privdata,const void * key1,const void * key2)
keyCompare	src/dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType	typeref:typename:int (*)(void * privdata,const void * key1,const void * key2)
keyDestructor	deps/hiredis/dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType	typeref:typename:void (*)(void * privdata,void * key)
keyDestructor	src/dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType	typeref:typename:void (*)(void * privdata,void * key)
keyDup	deps/hiredis/dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType	typeref:typename:void * (*)(void * privdata,const void * key)
keyDup	src/dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType	typeref:typename:void * (*)(void * privdata,const void * key)
keyHashSlot	src/cluster.c	/^unsigned int keyHashSlot(char *key, int keylen) {$/;"	f	typeref:typename:unsigned int
keyIsExpired	src/db.c	/^int keyIsExpired(redisDb *db, robj *key) {$/;"	f	typeref:typename:int
key_file	src/server.h	/^    char *key_file;                 \/* Private key filename for cert_file *\/$/;"	m	struct:redisTLSContextConfig	typeref:typename:char *
key_file_pass	src/server.h	/^    char *key_file_pass;            \/* Optional password for key_file *\/$/;"	m	struct:redisTLSContextConfig	typeref:typename:char *
key_len	src/rax.h	/^    size_t key_len;         \/* Current key length. *\/$/;"	m	struct:raxIterator	typeref:typename:size_t
key_load_delay	src/server.h	/^    int key_load_delay;             \/* Delay in microseconds between keys while$/;"	m	struct:redisServer	typeref:typename:int
key_max	src/rax.h	/^    size_t key_max;         \/* Max key len the current key buffer can hold. *\/$/;"	m	struct:raxIterator	typeref:typename:size_t
key_static_string	src/rax.h	/^    unsigned char key_static_string[RAX_ITER_STATIC_LEN];$/;"	m	struct:raxIterator	typeref:typename:unsigned char[]
key_type	src/redis-check-rdb.c	/^    int key_type;                   \/* Current key type if != -1. *\/$/;"	m	struct:__anon818955940108	typeref:typename:int	file:
keycomp	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	ckh_keycomp_t *keycomp;$/;"	m	struct:__anon25f7a4b70208	typeref:typename:ckh_keycomp_t *
keylistDictType	src/server.c	/^dictType keylistDictType = {$/;"	v	typeref:typename:dictType
keyname	src/stream.h	/^    robj *keyname;$/;"	m	struct:streamPropInfo	typeref:typename:robj *
keys	src/childinfo.c	/^    size_t keys;$/;"	m	struct:__anonbbe6eb5d0108	typeref:typename:size_t	file:
keys	src/redis-check-rdb.c	/^    unsigned long keys;             \/* Number of keys processed. *\/$/;"	m	struct:__anon818955940108	typeref:typename:unsigned long	file:
keys	src/server.h	/^    dict *keys;             \/* The keys we are waiting to terminate a blocking$/;"	m	struct:blockingState	typeref:typename:dict *
keys	src/server.h	/^    int *keys;                          \/* Key indices array, points to keysbuf or heap *\/$/;"	m	struct:__anon3ef696e90708	typeref:typename:int *
keys	src/tracking.c	/^    rax *keys;      \/* Keys modified in the current event loop cycle. *\/$/;"	m	struct:bcastState	typeref:typename:rax *	file:
keysCommand	src/db.c	/^void keysCommand(client *c) {$/;"	f	typeref:typename:void
keys_result	src/module.c	/^    getKeysResult *keys_result;$/;"	m	struct:RedisModuleCtx	typeref:typename:getKeysResult *	file:
keysbuf	src/server.h	/^    int keysbuf[MAX_KEYS_BUFFER];       \/* Pre-allocated buffer, to save heap allocations *\/$/;"	m	struct:__anon3ef696e90708	typeref:typename:int[]
keysize	src/redis-benchmark.c	/^    int keysize;$/;"	m	struct:config	typeref:typename:int	file:
keyspaceEventsFlagsToString	src/notify.c	/^sds keyspaceEventsFlagsToString(int flags) {$/;"	f	typeref:typename:sds
keyspaceEventsStringToFlags	src/notify.c	/^int keyspaceEventsStringToFlags(char *classes) {$/;"	f	typeref:typename:int
keyspace_size	utils/lru/lfu-simulation.c	/^int keyspace_size = 1000000;$/;"	v	typeref:typename:int
keystep	src/server.h	/^    int keystep;  \/* The step between first and last key *\/$/;"	m	struct:redisCommand	typeref:typename:int
killAppendOnlyChild	src/aof.c	/^void killAppendOnlyChild(void) {$/;"	f	typeref:typename:void
killIOThreads	src/networking.c	/^void killIOThreads(void) {$/;"	f	typeref:typename:void
killMainThread	src/debug.c	/^static void killMainThread(void) {$/;"	f	typeref:typename:void	file:
killRDBChild	src/rdb.c	/^void killRDBChild(void) {$/;"	f	typeref:typename:void
killThreads	src/debug.c	/^void killThreads(void) {$/;"	f	typeref:typename:void
kname	deps/lua/src/ldebug.c	/^static const char *kname (Proto *p, int c) {$/;"	f	typeref:typename:const char *	file:
kqfd	src/ae_kqueue.c	/^    int kqfd;$/;"	m	struct:aeApiState	typeref:typename:int	file:
l	deps/jemalloc/include/msvc_compat/strings.h	/^		unsigned   long l[2];$/;"	m	union:ffsll::__anon7ec42b74010a	typeref:typename:unsigned long[2]
l	deps/lua/src/lobject.h	/^    } l;$/;"	m	union:UpVal::__anona52fc941040a	typeref:struct:UpVal::__anona52fc941040a::__anona52fc9410508
l	deps/lua/src/lobject.h	/^  LClosure l;$/;"	m	union:Closure	typeref:typename:LClosure
l	deps/lua/src/lstate.c	/^  lua_State l;$/;"	m	struct:LG	typeref:typename:lua_State	file:
l	src/config.c	/^        long *l;$/;"	m	union:numericConfigData::__anon722b8083020a	typeref:typename:long *	file:
l	src/sha1.c	/^        uint32_t l[16];$/;"	m	union:SHA1Transform::__anon790f1a3a010a	typeref:typename:uint32_t[16]	file:
l2_cache	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^	rtree_ctx_cache_elm_t	l2_cache[RTREE_CTX_NCACHE_L2];$/;"	m	struct:rtree_ctx_s	typeref:typename:rtree_ctx_cache_elm_t[]
l_G	deps/lua/src/lstate.h	/^  global_State *l_G;$/;"	m	struct:lua_State	typeref:typename:global_State *
l_alloc	deps/lua/src/lauxlib.c	/^static void *l_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {$/;"	f	typeref:typename:void *	file:
l_d	deps/lua/src/luaconf.h	/^union luai_Cast { double l_d; long l_l; };$/;"	m	union:luai_Cast	typeref:typename:double
l_gt	deps/lua/src/lstate.h	/^  TValue l_gt;  \/* table of globals *\/$/;"	m	struct:lua_State	typeref:typename:TValue
l_isfalse	deps/lua/src/lobject.h	/^#define l_isfalse(/;"	d
l_l	deps/lua/src/luaconf.h	/^union luai_Cast { double l_d; long l_l; };$/;"	m	union:luai_Cast	typeref:typename:long
l_mem	deps/lua/src/llimits.h	/^typedef LUAI_MEM l_mem;$/;"	t	typeref:typename:LUAI_MEM
l_message	deps/lua/src/lua.c	/^static void l_message (const char *pname, const char *msg) {$/;"	f	typeref:typename:void	file:
l_registry	deps/lua/src/lstate.h	/^  TValue l_registry;$/;"	m	struct:global_State	typeref:typename:TValue
l_setbit	deps/lua/src/lgc.h	/^#define l_setbit(/;"	d
l_strcmp	deps/lua/src/lvm.c	/^static int l_strcmp (const TString *ls, const TString *rs) {$/;"	f	typeref:typename:int	file:
l_uacNumber	deps/lua/src/llimits.h	/^typedef LUAI_UACNUMBER l_uacNumber;$/;"	t	typeref:typename:LUAI_UACNUMBER
label	src/sparkline.h	/^    char *label;$/;"	m	struct:sample	typeref:typename:char *
label_margin_top	src/sparkline.c	/^static int label_margin_top = 1;$/;"	v	typeref:typename:int	file:
labels	src/sparkline.h	/^    int labels;$/;"	m	struct:sequence	typeref:typename:int
laction	deps/lua/src/lua.c	/^static void laction (int i) {$/;"	f	typeref:typename:void	file:
lapi.o	deps/lua/src/Makefile	/^lapi.o: lapi.c lua.h luaconf.h lapi.h lobject.h llimits.h ldebug.h \\$/;"	t
lapi_c	deps/lua/src/lapi.c	/^#define lapi_c$/;"	d	file:
lapi_h	deps/lua/src/lapi.h	/^#define lapi_h$/;"	d
large	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	extent_list_t		large;$/;"	m	struct:arena_s	typeref:typename:extent_list_t
large_dalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define large_dalloc /;"	d
large_dalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define large_dalloc /;"	d
large_dalloc	deps/jemalloc/src/large.c	/^large_dalloc(tsdn_t *tsdn, extent_t *extent) {$/;"	f	typeref:typename:void
large_dalloc_finish	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define large_dalloc_finish /;"	d
large_dalloc_finish	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define large_dalloc_finish /;"	d
large_dalloc_finish	deps/jemalloc/src/large.c	/^large_dalloc_finish(tsdn_t *tsdn, extent_t *extent) {$/;"	f	typeref:typename:void
large_dalloc_finish_impl	deps/jemalloc/src/large.c	/^large_dalloc_finish_impl(tsdn_t *tsdn, arena_t *arena, extent_t *extent) {$/;"	f	typeref:typename:void	file:
large_dalloc_junk	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define large_dalloc_junk /;"	d
large_dalloc_junk	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define large_dalloc_junk /;"	d
large_dalloc_junk	deps/jemalloc/src/large.c	/^large_dalloc_junk_t *JET_MUTABLE large_dalloc_junk = large_dalloc_junk_impl;$/;"	v	typeref:typename:large_dalloc_junk_t * JET_MUTABLE
large_dalloc_junk_impl	deps/jemalloc/src/large.c	/^large_dalloc_junk_impl(void *ptr, size_t size) {$/;"	f	typeref:typename:void	file:
large_dalloc_junk_intercept	deps/jemalloc/test/unit/junk.c	/^large_dalloc_junk_intercept(void *ptr, size_t usize) {$/;"	f	typeref:typename:void	file:
large_dalloc_junk_orig	deps/jemalloc/test/unit/junk.c	/^static large_dalloc_junk_t *large_dalloc_junk_orig;$/;"	v	typeref:typename:large_dalloc_junk_t *	file:
large_dalloc_junk_t	deps/jemalloc/include/jemalloc/internal/large_externs.h	/^typedef void (large_dalloc_junk_t)(void *, size_t);$/;"	t	typeref:typename:void ()(void *,size_t)
large_dalloc_maybe_junk	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define large_dalloc_maybe_junk /;"	d
large_dalloc_maybe_junk	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define large_dalloc_maybe_junk /;"	d
large_dalloc_maybe_junk	deps/jemalloc/src/large.c	/^large_dalloc_maybe_junk_t *JET_MUTABLE large_dalloc_maybe_junk =$/;"	v	typeref:typename:large_dalloc_maybe_junk_t * JET_MUTABLE
large_dalloc_maybe_junk_impl	deps/jemalloc/src/large.c	/^large_dalloc_maybe_junk_impl(void *ptr, size_t size) {$/;"	f	typeref:typename:void	file:
large_dalloc_maybe_junk_intercept	deps/jemalloc/test/unit/junk.c	/^large_dalloc_maybe_junk_intercept(void *ptr, size_t usize) {$/;"	f	typeref:typename:void	file:
large_dalloc_maybe_junk_orig	deps/jemalloc/test/unit/junk.c	/^static large_dalloc_maybe_junk_t *large_dalloc_maybe_junk_orig;$/;"	v	typeref:typename:large_dalloc_maybe_junk_t *	file:
large_dalloc_maybe_junk_t	deps/jemalloc/include/jemalloc/internal/large_externs.h	/^typedef void (large_dalloc_maybe_junk_t)(void *, size_t);$/;"	t	typeref:typename:void ()(void *,size_t)
large_dalloc_prep_impl	deps/jemalloc/src/large.c	/^large_dalloc_prep_impl(tsdn_t *tsdn, arena_t *arena, extent_t *extent,$/;"	f	typeref:typename:void	file:
large_dalloc_prep_junked_locked	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define large_dalloc_prep_junked_locked /;"	d
large_dalloc_prep_junked_locked	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define large_dalloc_prep_junked_locked /;"	d
large_dalloc_prep_junked_locked	deps/jemalloc/src/large.c	/^large_dalloc_prep_junked_locked(tsdn_t *tsdn, extent_t *extent) {$/;"	f	typeref:typename:void
large_malloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define large_malloc /;"	d
large_malloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define large_malloc /;"	d
large_malloc	deps/jemalloc/src/large.c	/^large_malloc(tsdn_t *tsdn, arena_t *arena, size_t usize, bool zero) {$/;"	f	typeref:typename:void *
large_mtx	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	malloc_mutex_t		large_mtx;$/;"	m	struct:arena_s	typeref:typename:malloc_mutex_t
large_palloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define large_palloc /;"	d
large_palloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define large_palloc /;"	d
large_palloc	deps/jemalloc/src/large.c	/^large_palloc(tsdn_t *tsdn, arena_t *arena, size_t usize, size_t alignment,$/;"	f	typeref:typename:void *
large_prof_tctx_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define large_prof_tctx_get /;"	d
large_prof_tctx_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define large_prof_tctx_get /;"	d
large_prof_tctx_get	deps/jemalloc/src/large.c	/^large_prof_tctx_get(tsdn_t *tsdn, const extent_t *extent) {$/;"	f	typeref:typename:prof_tctx_t *
large_prof_tctx_reset	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define large_prof_tctx_reset /;"	d
large_prof_tctx_reset	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define large_prof_tctx_reset /;"	d
large_prof_tctx_reset	deps/jemalloc/src/large.c	/^large_prof_tctx_reset(tsdn_t *tsdn, extent_t *extent) {$/;"	f	typeref:typename:void
large_prof_tctx_set	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define large_prof_tctx_set /;"	d
large_prof_tctx_set	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define large_prof_tctx_set /;"	d
large_prof_tctx_set	deps/jemalloc/src/large.c	/^large_prof_tctx_set(tsdn_t *tsdn, extent_t *extent, prof_tctx_t *tctx) {$/;"	f	typeref:typename:void
large_ralloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define large_ralloc /;"	d
large_ralloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define large_ralloc /;"	d
large_ralloc	deps/jemalloc/src/large.c	/^large_ralloc(tsdn_t *tsdn, arena_t *arena, extent_t *extent, size_t usize,$/;"	f	typeref:typename:void *
large_ralloc_move_helper	deps/jemalloc/src/large.c	/^large_ralloc_move_helper(tsdn_t *tsdn, arena_t *arena, size_t usize,$/;"	f	typeref:typename:void *	file:
large_ralloc_no_move	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define large_ralloc_no_move /;"	d
large_ralloc_no_move	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define large_ralloc_no_move /;"	d
large_ralloc_no_move	deps/jemalloc/src/large.c	/^large_ralloc_no_move(tsdn_t *tsdn, extent_t *extent, size_t usize_min,$/;"	f	typeref:typename:bool
large_ralloc_no_move_expand	deps/jemalloc/src/large.c	/^large_ralloc_no_move_expand(tsdn_t *tsdn, extent_t *extent, size_t usize,$/;"	f	typeref:typename:bool	file:
large_ralloc_no_move_shrink	deps/jemalloc/src/large.c	/^large_ralloc_no_move_shrink(tsdn_t *tsdn, extent_t *extent, size_t usize) {$/;"	f	typeref:typename:bool	file:
large_salloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define large_salloc /;"	d
large_salloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define large_salloc /;"	d
large_salloc	deps/jemalloc/src/large.c	/^large_salloc(tsdn_t *tsdn, const extent_t *extent) {$/;"	f	typeref:typename:size_t
lastLen	deps/hiredis/ssl.c	/^    size_t lastLen;$/;"	m	struct:redisSSL	typeref:typename:size_t	file:
lastVoteEpoch	src/cluster.h	/^    uint64_t lastVoteEpoch;     \/* Epoch of the last vote granted. *\/$/;"	m	struct:clusterState	typeref:typename:uint64_t
last_avail_time	src/sentinel.c	/^    mstime_t last_avail_time; \/* Last time the instance replied to ping with$/;"	m	struct:instanceLink	typeref:typename:mstime_t	file:
last_cmd_type	src/redis-cli.c	/^    int last_cmd_type;$/;"	m	struct:config	typeref:typename:int	file:
last_dbid	src/cluster.c	/^    long last_dbid;$/;"	m	struct:migrateCachedSocket	typeref:typename:long	file:
last_errno	src/connection.h	/^    int last_errno;$/;"	m	struct:connection	typeref:typename:int
last_hello_time	src/sentinel.c	/^    mstime_t last_hello_time; \/* Only used if SRI_SENTINEL is set. Last time$/;"	m	struct:sentinelRedisInstance	typeref:typename:mstime_t	file:
last_id	src/stream.h	/^    streamID last_id;       \/* Last delivered (not acknowledged) ID for this$/;"	m	struct:streamCG	typeref:typename:streamID
last_id	src/stream.h	/^    streamID last_id;       \/* Zero if there are yet no items. *\/$/;"	m	struct:stream	typeref:typename:streamID
last_master_down_reply_time	src/sentinel.c	/^    mstime_t last_master_down_reply_time; \/* Time of last reply to$/;"	m	struct:sentinelRedisInstance	typeref:typename:mstime_t	file:
last_ping_time	src/sentinel.c	/^    mstime_t last_ping_time;  \/* Time at which we sent the last ping. This is$/;"	m	struct:instanceLink	typeref:typename:mstime_t	file:
last_pong_time	src/sentinel.c	/^    mstime_t last_pong_time;  \/* Last time the instance replied to ping,$/;"	m	struct:instanceLink	typeref:typename:mstime_t	file:
last_printed_bytes	src/redis-benchmark.c	/^    int last_printed_bytes;$/;"	m	struct:config	typeref:typename:int	file:
last_pub_time	src/sentinel.c	/^    mstime_t last_pub_time;   \/* Last time we sent hello via Pub\/Sub. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:mstime_t	file:
last_reconn_time	src/sentinel.c	/^    mstime_t last_reconn_time;  \/* Last reconnection attempt performed when$/;"	m	struct:instanceLink	typeref:typename:mstime_t	file:
last_sample_count	src/server.h	/^        long long last_sample_count;\/* Count in last sample *\/$/;"	m	struct:redisServer::__anon3ef696e90608	typeref:typename:long long
last_sample_time	src/server.h	/^        long long last_sample_time; \/* Timestamp of last sample in ms *\/$/;"	m	struct:redisServer::__anon3ef696e90608	typeref:typename:long long
last_set_cursor	tests/modules/defragtest.c	/^unsigned long int last_set_cursor = 0;$/;"	v	typeref:typename:unsigned long int
last_thd	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	tsdn_t		*last_thd;$/;"	m	struct:arena_s	typeref:typename:tsdn_t *
last_use_time	src/cluster.c	/^    time_t last_use_time;$/;"	m	struct:migrateCachedSocket	typeref:typename:time_t	file:
last_val_int	tests/modules/hooks.c	/^    long last_val_int;$/;"	m	struct:EventElement	typeref:typename:long	file:
last_val_string	tests/modules/hooks.c	/^    RedisModuleString *last_val_string;$/;"	m	struct:EventElement	typeref:typename:RedisModuleString *	file:
lastbgsave_status	src/server.h	/^    int lastbgsave_status;          \/* C_OK or C_ERR *\/$/;"	m	struct:redisServer	typeref:typename:int
lastbgsave_try	src/server.h	/^    time_t lastbgsave_try;          \/* Unix time of last attempted bgsave *\/$/;"	m	struct:redisServer	typeref:typename:time_t
lastcmd	src/server.h	/^    struct redisCommand *cmd, *lastcmd;  \/* Last command executed. *\/$/;"	m	struct:client	typeref:struct:redisCommand **
lastfree	deps/lua/src/lobject.h	/^  Node *lastfree;  \/* any free position is before this position *\/$/;"	m	struct:Table	typeref:typename:Node *
lastid	src/server.h	/^    *lastid, *ping, *setid, *keepttl, *load, *createconsumer,$/;"	m	struct:sharedObjectsStruct
lastinteraction	src/server.h	/^    time_t lastinteraction; \/* Time of the last interaction, used for timeout *\/$/;"	m	struct:client	typeref:typename:time_t
lastkey	src/server.h	/^    int lastkey;  \/* The last argument that's a key *\/$/;"	m	struct:redisCommand	typeref:typename:int
lastline	deps/lua/src/llex.h	/^  int lastline;  \/* line of last token `consumed' *\/$/;"	m	struct:LexState	typeref:typename:int
lastlinedefined	deps/lua/src/lobject.h	/^  int lastlinedefined;$/;"	m	struct:Proto	typeref:typename:int
lastlinedefined	deps/lua/src/lua.h	/^  int lastlinedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug	typeref:typename:int
lastlistfield	deps/lua/src/lparser.c	/^static void lastlistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	typeref:typename:void	file:
lastsave	src/server.h	/^    time_t lastsave;                \/* Unix time of last successful save *\/$/;"	m	struct:redisServer	typeref:typename:time_t
lastsaveCommand	src/db.c	/^void lastsaveCommand(client *c) {$/;"	f	typeref:typename:void
lasttarget	deps/lua/src/lparser.h	/^  int lasttarget;   \/* `pc' of last `jump target' *\/$/;"	m	struct:FuncState	typeref:typename:int
latency	src/latency.h	/^    uint32_t latency; \/* Latency in milliseconds. *\/$/;"	m	struct:latencySample	typeref:typename:uint32_t
latency	src/redis-benchmark.c	/^    long long latency;      \/* Request latency *\/$/;"	m	struct:_client	typeref:typename:long long	file:
latencyAddSample	src/latency.c	/^void latencyAddSample(const char *event, mstime_t latency) {$/;"	f	typeref:typename:void
latencyAddSampleIfNeeded	src/latency.h	/^#define latencyAddSampleIfNeeded(/;"	d
latencyCommand	src/latency.c	/^void latencyCommand(client *c) {$/;"	f	typeref:typename:void
latencyCommandGenSparkeline	src/latency.c	/^sds latencyCommandGenSparkeline(char *event, struct latencyTimeSeries *ts) {$/;"	f	typeref:typename:sds
latencyCommandReplyWithLatestEvents	src/latency.c	/^void latencyCommandReplyWithLatestEvents(client *c) {$/;"	f	typeref:typename:void
latencyCommandReplyWithSamples	src/latency.c	/^void latencyCommandReplyWithSamples(client *c, struct latencyTimeSeries *ts) {$/;"	f	typeref:typename:void
latencyDistMode	src/redis-cli.c	/^static void latencyDistMode(void) {$/;"	f	typeref:typename:void	file:
latencyEndMonitor	src/latency.h	/^#define latencyEndMonitor(/;"	d
latencyMode	src/redis-cli.c	/^static void latencyMode(void) {$/;"	f	typeref:typename:void	file:
latencyModePrint	src/redis-cli.c	/^static void latencyModePrint(long long min, long long max, double avg, long long count) {$/;"	f	typeref:typename:void	file:
latencyMonitorInit	src/latency.c	/^void latencyMonitorInit(void) {$/;"	f	typeref:typename:void
latencyRemoveNestedEvent	src/latency.h	/^#define latencyRemoveNestedEvent(/;"	d
latencyResetEvent	src/latency.c	/^int latencyResetEvent(char *event_to_reset) {$/;"	f	typeref:typename:int
latencySample	src/latency.h	/^struct latencySample {$/;"	s
latencyStartMonitor	src/latency.h	/^#define latencyStartMonitor(/;"	d
latencyStats	src/latency.h	/^struct latencyStats {$/;"	s
latencyTimeSeries	src/latency.h	/^struct latencyTimeSeries {$/;"	s
latencyTimeSeriesDictType	src/latency.c	/^dictType latencyTimeSeriesDictType = {$/;"	v	typeref:typename:dictType
latency_dist_mode	src/redis-cli.c	/^    int latency_dist_mode;$/;"	m	struct:config	typeref:typename:int	file:
latency_events	src/server.h	/^    dict *latency_events;$/;"	m	struct:redisServer	typeref:typename:dict *
latency_histogram	src/redis-benchmark.c	/^    struct hdr_histogram* latency_histogram;$/;"	m	struct:config	typeref:struct:hdr_histogram *	file:
latency_history	src/redis-cli.c	/^    int latency_history;$/;"	m	struct:config	typeref:typename:int	file:
latency_mode	src/redis-cli.c	/^    int latency_mode;$/;"	m	struct:config	typeref:typename:int	file:
latency_monitor_threshold	src/server.h	/^    long long latency_monitor_threshold;$/;"	m	struct:redisServer	typeref:typename:long long
latitude	src/geo.h	/^    double latitude;$/;"	m	struct:geoPoint	typeref:typename:double
latitude	src/geohash.h	/^    GeoHashRange latitude;$/;"	m	struct:__anona01652f10408	typeref:typename:GeoHashRange
lauxlib.o	deps/lua/src/Makefile	/^lauxlib.o: lauxlib.c lua.h luaconf.h lauxlib.h$/;"	t
lauxlib_c	deps/lua/src/lauxlib.c	/^#define lauxlib_c$/;"	d	file:
lauxlib_h	deps/lua/src/lauxlib.h	/^#define lauxlib_h$/;"	d
lazyFreeLuaScripts	src/lazyfree.c	/^void lazyFreeLuaScripts(void *args[]) {$/;"	f	typeref:typename:void
lazyFreeTrackingTable	src/lazyfree.c	/^void lazyFreeTrackingTable(void *args[]) {$/;"	f	typeref:typename:void
lazyfreeFreeDatabase	src/lazyfree.c	/^void lazyfreeFreeDatabase(void *args[]) {$/;"	f	typeref:typename:void
lazyfreeFreeObject	src/lazyfree.c	/^void lazyfreeFreeObject(void *args[]) {$/;"	f	typeref:typename:void
lazyfreeFreeSlotsMap	src/lazyfree.c	/^void lazyfreeFreeSlotsMap(void *args[]) {$/;"	f	typeref:typename:void
lazyfreeGetFreeEffort	src/lazyfree.c	/^size_t lazyfreeGetFreeEffort(robj *key, robj *obj) {$/;"	f	typeref:typename:size_t
lazyfreeGetFreedObjectsCount	src/lazyfree.c	/^size_t lazyfreeGetFreedObjectsCount(void) {$/;"	f	typeref:typename:size_t
lazyfreeGetPendingObjectsCount	src/lazyfree.c	/^size_t lazyfreeGetPendingObjectsCount(void) {$/;"	f	typeref:typename:size_t
lazyfree_lazy_eviction	src/server.h	/^    int lazyfree_lazy_eviction;$/;"	m	struct:redisServer	typeref:typename:int
lazyfree_lazy_expire	src/server.h	/^    int lazyfree_lazy_expire;$/;"	m	struct:redisServer	typeref:typename:int
lazyfree_lazy_server_del	src/server.h	/^    int lazyfree_lazy_server_del;$/;"	m	struct:redisServer	typeref:typename:int
lazyfree_lazy_user_del	src/server.h	/^    int lazyfree_lazy_user_del;$/;"	m	struct:redisServer	typeref:typename:int
lazyfree_lazy_user_flush	src/server.h	/^    int lazyfree_lazy_user_flush;$/;"	m	struct:redisServer	typeref:typename:int
lazyfree_objects	src/lazyfree.c	/^static redisAtomic size_t lazyfree_objects = 0;$/;"	v	typeref:typename:redisAtomic size_t	file:
lazyfreed_objects	src/lazyfree.c	/^static redisAtomic size_t lazyfreed_objects = 0;$/;"	v	typeref:typename:redisAtomic size_t	file:
lbaselib.o	deps/lua/src/Makefile	/^lbaselib.o: lbaselib.c lua.h luaconf.h lauxlib.h lualib.h$/;"	t
lbaselib_c	deps/lua/src/lbaselib.c	/^#define lbaselib_c$/;"	d	file:
lcode.o	deps/lua/src/Makefile	/^lcode.o: lcode.c lua.h luaconf.h lcode.h llex.h lobject.h llimits.h \\$/;"	t
lcode_c	deps/lua/src/lcode.c	/^#define lcode_c$/;"	d	file:
lcode_h	deps/lua/src/lcode.h	/^#define lcode_h$/;"	d
lconfig_h	deps/lua/src/luaconf.h	/^#define lconfig_h$/;"	d
lcov	src/Makefile	/^lcov:$/;"	t
lcsGetKeys	src/db.c	/^int lcsGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f	typeref:typename:int
ld2string	src/util.c	/^int ld2string(char *buf, size_t len, long double value, ld2string_mode mode) {$/;"	f	typeref:typename:int
ld2string_mode	src/util.h	/^} ld2string_mode;$/;"	t	typeref:enum:__anon7e97ef900103
ldb	src/scripting.c	/^} ldb;$/;"	v	typeref:struct:ldbState
ldbAddBreakpoint	src/scripting.c	/^int ldbAddBreakpoint(int line) {$/;"	f	typeref:typename:int
ldbBreak	src/scripting.c	/^void ldbBreak(sds *argv, int argc) {$/;"	f	typeref:typename:void
ldbCatStackValue	src/scripting.c	/^sds ldbCatStackValue(sds s, lua_State *lua, int idx) {$/;"	f	typeref:typename:sds
ldbCatStackValueRec	src/scripting.c	/^sds ldbCatStackValueRec(sds s, lua_State *lua, int idx, int level) {$/;"	f	typeref:typename:sds
ldbDelBreakpoint	src/scripting.c	/^int ldbDelBreakpoint(int line) {$/;"	f	typeref:typename:int
ldbDisable	src/scripting.c	/^void ldbDisable(client *c) {$/;"	f	typeref:typename:void
ldbEnable	src/scripting.c	/^void ldbEnable(client *c) {$/;"	f	typeref:typename:void
ldbEndSession	src/scripting.c	/^void ldbEndSession(client *c) {$/;"	f	typeref:typename:void
ldbEval	src/scripting.c	/^void ldbEval(lua_State *lua, sds *argv, int argc) {$/;"	f	typeref:typename:void
ldbFlushLog	src/scripting.c	/^void ldbFlushLog(list *log) {$/;"	f	typeref:typename:void
ldbGetSourceLine	src/scripting.c	/^char *ldbGetSourceLine(int line) {$/;"	f	typeref:typename:char *
ldbInit	src/scripting.c	/^void ldbInit(void) {$/;"	f	typeref:typename:void
ldbIsBreakpoint	src/scripting.c	/^int ldbIsBreakpoint(int line) {$/;"	f	typeref:typename:int
ldbKillForkedSessions	src/scripting.c	/^void ldbKillForkedSessions(void) {$/;"	f	typeref:typename:void
ldbList	src/scripting.c	/^void ldbList(int around, int context) {$/;"	f	typeref:typename:void
ldbLog	src/scripting.c	/^void ldbLog(sds entry) {$/;"	f	typeref:typename:void
ldbLogRedisReply	src/scripting.c	/^void ldbLogRedisReply(char *reply) {$/;"	f	typeref:typename:void
ldbLogSourceLine	src/scripting.c	/^void ldbLogSourceLine(int lnum) {$/;"	f	typeref:typename:void
ldbLogStackValue	src/scripting.c	/^void ldbLogStackValue(lua_State *lua, char *prefix) {$/;"	f	typeref:typename:void
ldbLogWithMaxLen	src/scripting.c	/^void ldbLogWithMaxLen(sds entry) {$/;"	f	typeref:typename:void
ldbMaxlen	src/scripting.c	/^void ldbMaxlen(sds *argv, int argc) {$/;"	f	typeref:typename:void
ldbPendingChildren	src/scripting.c	/^int ldbPendingChildren(void) {$/;"	f	typeref:typename:int
ldbPrint	src/scripting.c	/^void ldbPrint(lua_State *lua, char *varname) {$/;"	f	typeref:typename:void
ldbPrintAll	src/scripting.c	/^void ldbPrintAll(lua_State *lua) {$/;"	f	typeref:typename:void
ldbRedis	src/scripting.c	/^void ldbRedis(lua_State *lua, sds *argv, int argc) {$/;"	f	typeref:typename:void
ldbRedisProtocolToHuman	src/scripting.c	/^char *ldbRedisProtocolToHuman(sds *o, char *reply) {$/;"	f	typeref:typename:char *
ldbRedisProtocolToHuman_Bool	src/scripting.c	/^char *ldbRedisProtocolToHuman_Bool(sds *o, char *reply) {$/;"	f	typeref:typename:char *
ldbRedisProtocolToHuman_Bulk	src/scripting.c	/^char *ldbRedisProtocolToHuman_Bulk(sds *o, char *reply) {$/;"	f	typeref:typename:char *
ldbRedisProtocolToHuman_Double	src/scripting.c	/^char *ldbRedisProtocolToHuman_Double(sds *o, char *reply) {$/;"	f	typeref:typename:char *
ldbRedisProtocolToHuman_Int	src/scripting.c	/^char *ldbRedisProtocolToHuman_Int(sds *o, char *reply) {$/;"	f	typeref:typename:char *
ldbRedisProtocolToHuman_Map	src/scripting.c	/^char *ldbRedisProtocolToHuman_Map(sds *o, char *reply) {$/;"	f	typeref:typename:char *
ldbRedisProtocolToHuman_MultiBulk	src/scripting.c	/^char *ldbRedisProtocolToHuman_MultiBulk(sds *o, char *reply) {$/;"	f	typeref:typename:char *
ldbRedisProtocolToHuman_Null	src/scripting.c	/^char *ldbRedisProtocolToHuman_Null(sds *o, char *reply) {$/;"	f	typeref:typename:char *
ldbRedisProtocolToHuman_Set	src/scripting.c	/^char *ldbRedisProtocolToHuman_Set(sds *o, char *reply) {$/;"	f	typeref:typename:char *
ldbRedisProtocolToHuman_Status	src/scripting.c	/^char *ldbRedisProtocolToHuman_Status(sds *o, char *reply) {$/;"	f	typeref:typename:char *
ldbRemoveChild	src/scripting.c	/^int ldbRemoveChild(pid_t pid) {$/;"	f	typeref:typename:int
ldbRepl	src/scripting.c	/^int ldbRepl(lua_State *lua) {$/;"	f	typeref:typename:int
ldbReplParseCommand	src/scripting.c	/^sds *ldbReplParseCommand(int *argcp, char** err) {$/;"	f	typeref:typename:sds *
ldbSendLogs	src/scripting.c	/^void ldbSendLogs(void) {$/;"	f	typeref:typename:void
ldbStartSession	src/scripting.c	/^int ldbStartSession(client *c) {$/;"	f	typeref:typename:int
ldbState	src/scripting.c	/^struct ldbState {$/;"	s	file:
ldbTrace	src/scripting.c	/^void ldbTrace(lua_State *lua) {$/;"	f	typeref:typename:void
ldblib.o	deps/lua/src/Makefile	/^ldblib.o: ldblib.c lua.h luaconf.h lauxlib.h lualib.h$/;"	t
ldblib_c	deps/lua/src/ldblib.c	/^#define ldblib_c$/;"	d	file:
ldebug.o	deps/lua/src/Makefile	/^ldebug.o: ldebug.c lua.h luaconf.h lapi.h lobject.h llimits.h lcode.h \\$/;"	t
ldebug_c	deps/lua/src/ldebug.c	/^#define ldebug_c$/;"	d	file:
ldebug_h	deps/lua/src/ldebug.h	/^#define ldebug_h$/;"	d
ldo.o	deps/lua/src/Makefile	/^ldo.o: ldo.c lua.h luaconf.h ldebug.h lstate.h lobject.h llimits.h ltm.h \\$/;"	t
ldo_c	deps/lua/src/ldo.c	/^#define ldo_c$/;"	d	file:
ldo_h	deps/lua/src/ldo.h	/^#define ldo_h$/;"	d
ldump.o	deps/lua/src/Makefile	/^ldump.o: ldump.c lua.h luaconf.h lobject.h llimits.h lstate.h ltm.h \\$/;"	t
ldump_c	deps/lua/src/ldump.c	/^#define ldump_c$/;"	d	file:
le_bits	deps/jemalloc/include/jemalloc/internal/rtree.h	/^	atomic_p_t	le_bits;$/;"	m	struct:rtree_leaf_elm_s	typeref:typename:atomic_p_t
leader	src/sentinel.c	/^    char *leader;       \/* If this is a master instance, this is the runid of$/;"	m	struct:sentinelRedisInstance	typeref:typename:char *	file:
leaderVotesDictType	src/sentinel.c	/^dictType leaderVotesDictType = {$/;"	v	typeref:typename:dictType
leader_epoch	src/sentinel.c	/^    uint64_t leader_epoch; \/* Epoch of the 'leader' field. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:uint64_t	file:
leaf	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^	rtree_leaf_elm_t	*leaf;$/;"	m	struct:rtree_ctx_cache_elm_s	typeref:typename:rtree_leaf_elm_t *
leafkey	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^	uintptr_t		leafkey;$/;"	m	struct:rtree_ctx_cache_elm_s	typeref:typename:uintptr_t
leak_ngctx	deps/jemalloc/src/prof.c	/^	size_t	leak_ngctx;$/;"	m	struct:prof_gctx_merge_iter_arg_s	typeref:typename:size_t	file:
leaveblock	deps/lua/src/lparser.c	/^static void leaveblock (FuncState *fs) {$/;"	f	typeref:typename:void	file:
leavelevel	deps/lua/src/lparser.c	/^#define leavelevel(/;"	d	file:
lecho	deps/lua/Makefile	/^lecho:$/;"	t
left	deps/lua/src/lparser.c	/^  lu_byte left;  \/* left priority for each binary operator *\/$/;"	m	struct:__anon581f0db20108	typeref:typename:lu_byte	file:
left	deps/lua/src/lua_cmsgpack.c	/^    size_t left;$/;"	m	struct:mp_cur	typeref:typename:size_t	file:
left	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
len	deps/hiredis/hiredis.h	/^    size_t len; \/* Length of string *\/$/;"	m	struct:redisReply	typeref:typename:size_t
len	deps/hiredis/read.h	/^    size_t len; \/* Buffer length *\/$/;"	m	struct:redisReader	typeref:typename:size_t
len	deps/hiredis/sds.h	/^    uint16_t len; \/* used *\/$/;"	m	struct:hisdshdr16	typeref:typename:uint16_t
len	deps/hiredis/sds.h	/^    uint32_t len; \/* used *\/$/;"	m	struct:hisdshdr32	typeref:typename:uint32_t
len	deps/hiredis/sds.h	/^    uint64_t len; \/* used *\/$/;"	m	struct:hisdshdr64	typeref:typename:uint64_t
len	deps/hiredis/sds.h	/^    uint8_t len; \/* used *\/$/;"	m	struct:hisdshdr8	typeref:typename:uint8_t
len	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	unsigned	len;$/;"	m	struct:prof_bt_s	typeref:typename:unsigned
len	deps/jemalloc/test/unit/emitter.c	/^	size_t len;$/;"	m	struct:buf_descriptor_s	typeref:typename:size_t	file:
len	deps/jemalloc/test/unit/stats_print.c	/^	size_t		len;$/;"	m	struct:__anonb5a306e00208	typeref:typename:size_t	file:
len	deps/jemalloc/test/unit/stats_print.c	/^	size_t	len; \/* Number of characters preceding '\\0' in buf. *\/$/;"	m	struct:parser_s	typeref:typename:size_t	file:
len	deps/linenoise/linenoise.c	/^    int len;$/;"	m	struct:abuf	typeref:typename:int	file:
len	deps/linenoise/linenoise.c	/^    size_t len;         \/* Current edited line length. *\/$/;"	m	struct:linenoiseState	typeref:typename:size_t	file:
len	deps/linenoise/linenoise.h	/^  size_t len;$/;"	m	struct:linenoiseCompletions	typeref:typename:size_t
len	deps/lua/src/lobject.h	/^    size_t len;$/;"	m	struct:TString::__anona52fc9410208	typeref:typename:size_t
len	deps/lua/src/lobject.h	/^    size_t len;$/;"	m	struct:Udata::__anona52fc9410308	typeref:typename:size_t
len	deps/lua/src/lstrlib.c	/^    ptrdiff_t len;$/;"	m	struct:MatchState::__anond2fa50950108	typeref:typename:ptrdiff_t	file:
len	deps/lua/src/lua_cmsgpack.c	/^    size_t len, free;$/;"	m	struct:mp_buf	typeref:typename:size_t	file:
len	src/adlist.h	/^    unsigned long len;$/;"	m	struct:list	typeref:typename:unsigned long
len	src/cluster.h	/^    uint32_t len;           \/* ID of the sender module. *\/$/;"	m	struct:__anon2cc7db540508	typeref:typename:uint32_t
len	src/module.c	/^    size_t len;     \/* Len of strings or num of elements of arrays. *\/$/;"	m	struct:RedisModuleCallReply	typeref:typename:size_t	file:
len	src/modules/hellotype.c	/^    size_t len; \/* Number of elements added. *\/$/;"	m	struct:HelloTypeObject	typeref:typename:size_t	file:
len	src/quicklist.h	/^    unsigned long len;          \/* number of quicklistNodes *\/$/;"	m	struct:quicklist	typeref:typename:unsigned long
len	src/redis-cli.c	/^    int len;                    \/* Actual length of the array *\/$/;"	m	struct:clusterManagerNodeArray	typeref:typename:int	file:
len	src/sds.h	/^    uint16_t len; \/* used *\/$/;"	m	struct:sdshdr16	typeref:typename:uint16_t
len	src/sds.h	/^    uint32_t len; \/* used *\/$/;"	m	struct:sdshdr32	typeref:typename:uint32_t
len	src/sds.h	/^    uint64_t len; \/* used *\/$/;"	m	struct:sdshdr64	typeref:typename:uint64_t
len	src/sds.h	/^    uint8_t len; \/* used *\/$/;"	m	struct:sdshdr8	typeref:typename:uint8_t
len	src/ziplist.c	/^    unsigned int len;            \/* Bytes used to represent the actual entry.$/;"	m	struct:zlentry	typeref:typename:unsigned int	file:
len	tests/modules/defragtest.c	/^    unsigned long len;$/;"	m	struct:FragObject	typeref:typename:unsigned long	file:
len	tests/modules/test_lazyfree.c	/^    size_t len; \/* Number of elements added. *\/$/;"	m	struct:LazyFreeLinkObject	typeref:typename:size_t	file:
length	deps/lua/src/strbuf.h	/^    int length;$/;"	m	struct:__anon10f823b40108	typeref:typename:int
length	src/intset.h	/^    uint32_t length;$/;"	m	struct:intset	typeref:typename:uint32_t
length	src/server.h	/^    unsigned long length;$/;"	m	struct:zskiplist	typeref:typename:unsigned long
length	src/sparkline.h	/^    int length;$/;"	m	struct:sequence	typeref:typename:int
length	src/stream.h	/^    uint64_t length;        \/* Number of elements inside this stream. *\/$/;"	m	struct:stream	typeref:typename:uint64_t
length	tests/modules/blockonkeys.c	/^    long long length;$/;"	m	struct:__anon601d21a40108	typeref:typename:long long	file:
lensize	src/ziplist.c	/^    unsigned int lensize;        \/* Bytes used to encode this entry type\/len.$/;"	m	struct:zlentry	typeref:typename:unsigned int	file:
lessequal	deps/lua/src/lvm.c	/^static int lessequal (lua_State *L, const TValue *l, const TValue *r) {$/;"	f	typeref:typename:int	file:
level	deps/lua/src/lstrlib.c	/^  int level;  \/* total number of captures (finished or unfinished) *\/$/;"	m	struct:MatchState	typeref:typename:int	file:
level	src/server.h	/^    int level;$/;"	m	struct:zskiplist	typeref:typename:int
level	src/server.h	/^    } level[];$/;"	m	struct:zskiplistNode	typeref:struct:zskiplistNode::zskiplistLevel[]
levels	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^	bitmap_level_t levels[BITMAP_MAX_LEVELS+1];$/;"	m	struct:bitmap_info_s	typeref:typename:bitmap_level_t[]
lfu_decay_time	src/server.h	/^    int lfu_decay_time;             \/* LFU counter decay factor. *\/$/;"	m	struct:redisServer	typeref:typename:int
lfu_log_factor	src/server.h	/^    int lfu_log_factor;             \/* LFU logarithmic counter factor. *\/$/;"	m	struct:redisServer	typeref:typename:int
lfunc.o	deps/lua/src/Makefile	/^lfunc.o: lfunc.c lua.h luaconf.h lfunc.h lobject.h llimits.h lgc.h lmem.h \\$/;"	t
lfunc_c	deps/lua/src/lfunc.c	/^#define lfunc_c$/;"	d	file:
lfunc_h	deps/lua/src/lfunc.h	/^#define lfunc_h$/;"	d
lg_curbuckets	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	unsigned lg_curbuckets;$/;"	m	struct:__anon25f7a4b70208	typeref:typename:unsigned
lg_fill_div	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	uint8_t		lg_fill_div[NBINS];$/;"	m	struct:tcache_s	typeref:typename:uint8_t[]
lg_floor	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^lg_floor(size_t x) {$/;"	f	typeref:typename:BIT_UTIL_INLINE unsigned
lg_minbuckets	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	unsigned lg_minbuckets;$/;"	m	struct:__anon25f7a4b70208	typeref:typename:unsigned
lg_prof_sample	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define lg_prof_sample /;"	d
lg_prof_sample	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define lg_prof_sample /;"	d
lg_prof_sample	deps/jemalloc/src/prof.c	/^size_t		lg_prof_sample;$/;"	v	typeref:typename:size_t
lgc.o	deps/lua/src/Makefile	/^lgc.o: lgc.c lua.h luaconf.h ldebug.h lstate.h lobject.h llimits.h ltm.h \\$/;"	t
lgc_c	deps/lua/src/lgc.c	/^#define lgc_c$/;"	d	file:
lgc_h	deps/lua/src/lgc.h	/^#define lgc_h$/;"	d
li	src/server.h	/^    listTypeIterator *li;$/;"	m	struct:__anon3ef696e90a08	typeref:typename:listTypeIterator *
libc_hook_ran	deps/jemalloc/test/src/test.c	/^static bool libc_hook_ran = false;$/;"	v	typeref:typename:bool	file:
libc_reentrancy_hook	deps/jemalloc/test/src/test.c	/^libc_reentrancy_hook() {$/;"	f	typeref:typename:void	file:
libc_reentrant	deps/jemalloc/test/src/test.c	/^	libc_reentrant = 1,$/;"	e	enum:__anon309c720d0103	file:
libsize	deps/lua/src/lauxlib.c	/^static int libsize (const luaL_Reg *l) {$/;"	f	typeref:typename:int	file:
likely	deps/jemalloc/include/jemalloc/internal/util.h	/^#  define likely(/;"	d
likely	src/config.h	/^#define likely(/;"	d
limit	src/t_stream.c	/^    long long limit; \/* Maximum amount of entries to trim. If 0, no limitation$/;"	m	struct:__anon8fe9202c0108	typeref:typename:long long	file:
lindexCommand	src/t_list.c	/^void lindexCommand(client *c) {$/;"	f	typeref:typename:void
line	deps/jemalloc/test/unit/stats_print.c	/^	size_t		line;$/;"	m	struct:__anonb5a306e00208	typeref:typename:size_t	file:
line	deps/jemalloc/test/unit/stats_print.c	/^	size_t	line;$/;"	m	struct:parser_s	typeref:typename:size_t	file:
line	src/redis-check-aof.c	/^static long long line = 1;$/;"	v	typeref:typename:long long	file:
line	src/server.h	/^    sds line;$/;"	m	struct:sentinelLoadQueueEntry	typeref:typename:sds
linear	deps/hdr_histogram/hdr_histogram.h	/^        struct hdr_iter_linear linear;$/;"	m	union:hdr_iter::__anon905d92fb010a	typeref:struct:hdr_iter_linear
linedefined	deps/lua/src/lobject.h	/^  int linedefined;$/;"	m	struct:Proto	typeref:typename:int
linedefined	deps/lua/src/lua.h	/^  int linedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug	typeref:typename:int
lineinfo	deps/lua/src/lobject.h	/^  int *lineinfo;  \/* map from opcodes to source lines *\/$/;"	m	struct:Proto	typeref:typename:int *
linenoise	deps/Makefile	/^linenoise: .make-prerequisites$/;"	t
linenoise	deps/linenoise/linenoise.c	/^char *linenoise(const char *prompt) {$/;"	f	typeref:typename:char *
linenoise.o	deps/linenoise/Makefile	/^linenoise.o: linenoise.h linenoise.c$/;"	t
linenoiseAddCompletion	deps/linenoise/linenoise.c	/^void linenoiseAddCompletion(linenoiseCompletions *lc, const char *str) {$/;"	f	typeref:typename:void
linenoiseAtExit	deps/linenoise/linenoise.c	/^static void linenoiseAtExit(void) {$/;"	f	typeref:typename:void	file:
linenoiseBeep	deps/linenoise/linenoise.c	/^static void linenoiseBeep(void) {$/;"	f	typeref:typename:void	file:
linenoiseClearScreen	deps/linenoise/linenoise.c	/^void linenoiseClearScreen(void) {$/;"	f	typeref:typename:void
linenoiseCompletionCallback	deps/linenoise/linenoise.h	/^typedef void(linenoiseCompletionCallback)(const char *, linenoiseCompletions *);$/;"	t	typeref:typename:void ()(const char *,linenoiseCompletions *)
linenoiseCompletions	deps/linenoise/linenoise.h	/^typedef struct linenoiseCompletions {$/;"	s
linenoiseCompletions	deps/linenoise/linenoise.h	/^} linenoiseCompletions;$/;"	t	typeref:struct:linenoiseCompletions
linenoiseEdit	deps/linenoise/linenoise.c	/^static int linenoiseEdit(int stdin_fd, int stdout_fd, char *buf, size_t buflen, const char *prom/;"	f	typeref:typename:int	file:
linenoiseEditBackspace	deps/linenoise/linenoise.c	/^void linenoiseEditBackspace(struct linenoiseState *l) {$/;"	f	typeref:typename:void
linenoiseEditDelete	deps/linenoise/linenoise.c	/^void linenoiseEditDelete(struct linenoiseState *l) {$/;"	f	typeref:typename:void
linenoiseEditDeletePrevWord	deps/linenoise/linenoise.c	/^void linenoiseEditDeletePrevWord(struct linenoiseState *l) {$/;"	f	typeref:typename:void
linenoiseEditHistoryNext	deps/linenoise/linenoise.c	/^void linenoiseEditHistoryNext(struct linenoiseState *l, int dir) {$/;"	f	typeref:typename:void
linenoiseEditInsert	deps/linenoise/linenoise.c	/^int linenoiseEditInsert(struct linenoiseState *l, char c) {$/;"	f	typeref:typename:int
linenoiseEditMoveEnd	deps/linenoise/linenoise.c	/^void linenoiseEditMoveEnd(struct linenoiseState *l) {$/;"	f	typeref:typename:void
linenoiseEditMoveHome	deps/linenoise/linenoise.c	/^void linenoiseEditMoveHome(struct linenoiseState *l) {$/;"	f	typeref:typename:void
linenoiseEditMoveLeft	deps/linenoise/linenoise.c	/^void linenoiseEditMoveLeft(struct linenoiseState *l) {$/;"	f	typeref:typename:void
linenoiseEditMoveRight	deps/linenoise/linenoise.c	/^void linenoiseEditMoveRight(struct linenoiseState *l) {$/;"	f	typeref:typename:void
linenoiseFree	deps/linenoise/linenoise.c	/^void linenoiseFree(void *ptr) {$/;"	f	typeref:typename:void
linenoiseFreeHintsCallback	deps/linenoise/linenoise.h	/^typedef void(linenoiseFreeHintsCallback)(void *);$/;"	t	typeref:typename:void ()(void *)
linenoiseHintsCallback	deps/linenoise/linenoise.h	/^typedef char*(linenoiseHintsCallback)(const char *, int *color, int *bold);$/;"	t	typeref:typename:char * ()(const char *,int * color,int * bold)
linenoiseHistoryAdd	deps/linenoise/linenoise.c	/^int linenoiseHistoryAdd(const char *line) {$/;"	f	typeref:typename:int
linenoiseHistoryLoad	deps/linenoise/linenoise.c	/^int linenoiseHistoryLoad(const char *filename) {$/;"	f	typeref:typename:int
linenoiseHistorySave	deps/linenoise/linenoise.c	/^int linenoiseHistorySave(const char *filename) {$/;"	f	typeref:typename:int
linenoiseHistorySetMaxLen	deps/linenoise/linenoise.c	/^int linenoiseHistorySetMaxLen(int len) {$/;"	f	typeref:typename:int
linenoiseMaskModeDisable	deps/linenoise/linenoise.c	/^void linenoiseMaskModeDisable(void) {$/;"	f	typeref:typename:void
linenoiseMaskModeEnable	deps/linenoise/linenoise.c	/^void linenoiseMaskModeEnable(void) {$/;"	f	typeref:typename:void
linenoiseNoTTY	deps/linenoise/linenoise.c	/^static char *linenoiseNoTTY(void) {$/;"	f	typeref:typename:char *	file:
linenoisePrintKeyCodes	deps/linenoise/linenoise.c	/^void linenoisePrintKeyCodes(void) {$/;"	f	typeref:typename:void
linenoiseRaw	deps/linenoise/linenoise.c	/^static int linenoiseRaw(char *buf, size_t buflen, const char *prompt) {$/;"	f	typeref:typename:int	file:
linenoiseSetCompletionCallback	deps/linenoise/linenoise.c	/^void linenoiseSetCompletionCallback(linenoiseCompletionCallback *fn) {$/;"	f	typeref:typename:void
linenoiseSetFreeHintsCallback	deps/linenoise/linenoise.c	/^void linenoiseSetFreeHintsCallback(linenoiseFreeHintsCallback *fn) {$/;"	f	typeref:typename:void
linenoiseSetHintsCallback	deps/linenoise/linenoise.c	/^void linenoiseSetHintsCallback(linenoiseHintsCallback *fn) {$/;"	f	typeref:typename:void
linenoiseSetMultiLine	deps/linenoise/linenoise.c	/^void linenoiseSetMultiLine(int ml) {$/;"	f	typeref:typename:void
linenoiseState	deps/linenoise/linenoise.c	/^struct linenoiseState {$/;"	s	file:
linenoise_example	deps/linenoise/Makefile	/^linenoise_example: linenoise.o example.o$/;"	t
linenum	src/server.h	/^    int linenum;$/;"	m	struct:sentinelLoadQueueEntry	typeref:typename:int
linenumber	deps/lua/src/llex.h	/^  int linenumber;  \/* input line counter *\/$/;"	m	struct:LexState	typeref:typename:int
lines	src/config.c	/^    sds *lines;           \/* Current lines as an array of sds strings *\/$/;"	m	struct:configSetCommand::rewriteConfigState	typeref:typename:sds *	file:
lines	src/scripting.c	/^    int lines;  \/* Number of lines in 'src'. *\/$/;"	m	struct:ldbState	typeref:typename:int	file:
linit.o	deps/lua/src/Makefile	/^linit.o: linit.c lua.h luaconf.h lualib.h lauxlib.h$/;"	t
linit_c	deps/lua/src/linit.c	/^#define linit_c$/;"	d	file:
link	src/cluster.h	/^    clusterLink *link;          \/* TCP\/IP link with this node *\/$/;"	m	struct:clusterNode	typeref:typename:clusterLink *
link	src/sentinel.c	/^    instanceLink *link; \/* Link to the instance, may be shared for Sentinels. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:instanceLink *	file:
linkClient	src/networking.c	/^void linkClient(client *c) {$/;"	f	typeref:typename:void
link_whole_archive	deps/jemalloc/Makefile	/^link_whole_archive := 0$/;"	m
link_whole_archive	deps/jemalloc/Makefile.in	/^link_whole_archive := @link_whole_archive@$/;"	m
linsertCommand	src/t_list.c	/^void linsertCommand(client *c) {$/;"	f	typeref:typename:void
linux	deps/lua/src/Makefile	/^linux:$/;"	t
linuxMadvFreeForkBugCheck	src/server.c	/^int linuxMadvFreeForkBugCheck(void) {$/;"	f	typeref:typename:int
linuxMemoryWarnings	src/server.c	/^void linuxMemoryWarnings(void) {$/;"	f	typeref:typename:void
linuxOvercommitMemoryValue	src/server.c	/^int linuxOvercommitMemoryValue(void) {$/;"	f	typeref:typename:int
liolib.o	deps/lua/src/Makefile	/^liolib.o: liolib.c lua.h luaconf.h lauxlib.h lualib.h$/;"	t
liolib_c	deps/lua/src/liolib.c	/^#define liolib_c$/;"	d	file:
list	src/adlist.h	/^typedef struct list {$/;"	s
list	src/adlist.h	/^} list;$/;"	t	typeref:struct:list
list	tests/modules/blockonkeys.c	/^    long long list[LIST_SIZE];$/;"	m	struct:__anon601d21a40108	typeref:typename:long long[]	file:
listAddNodeHead	src/adlist.c	/^list *listAddNodeHead(list *list, void *value)$/;"	f	typeref:typename:list *
listAddNodeTail	src/adlist.c	/^list *listAddNodeTail(list *list, void *value)$/;"	f	typeref:typename:list *
listCreate	src/adlist.c	/^list *listCreate(void)$/;"	f	typeref:typename:list *
listDelNode	src/adlist.c	/^void listDelNode(list *list, listNode *node)$/;"	f	typeref:typename:void
listDup	src/adlist.c	/^list *listDup(list *orig)$/;"	f	typeref:typename:list *
listElementsRemoved	src/t_list.c	/^void listElementsRemoved(client *c, robj *key, int where, robj *o, long count) {$/;"	f	typeref:typename:void
listEmpty	src/adlist.c	/^void listEmpty(list *list)$/;"	f	typeref:typename:void
listFirst	src/adlist.h	/^#define listFirst(/;"	d
listGetDupMethod	src/adlist.h	/^#define listGetDupMethod(/;"	d
listGetFreeMethod	src/adlist.h	/^#define listGetFreeMethod(/;"	d
listGetIterator	src/adlist.c	/^listIter *listGetIterator(list *list, int direction)$/;"	f	typeref:typename:listIter *
listGetMatchMethod	src/adlist.h	/^#define listGetMatchMethod(/;"	d
listIndex	src/adlist.c	/^listNode *listIndex(list *list, long index) {$/;"	f	typeref:typename:listNode *
listInsertNode	src/adlist.c	/^list *listInsertNode(list *list, listNode *old_node, void *value, int after) {$/;"	f	typeref:typename:list *
listIter	src/adlist.h	/^typedef struct listIter {$/;"	s
listIter	src/adlist.h	/^} listIter;$/;"	t	typeref:struct:listIter
listJoin	src/adlist.c	/^void listJoin(list *l, list *o) {$/;"	f	typeref:typename:void
listLast	src/adlist.h	/^#define listLast(/;"	d
listLength	src/adlist.h	/^#define listLength(/;"	d
listMatchObjects	src/networking.c	/^int listMatchObjects(void *a, void *b) {$/;"	f	typeref:typename:int
listNext	src/adlist.c	/^listNode *listNext(listIter *iter)$/;"	f	typeref:typename:listNode *
listNextNode	src/adlist.h	/^#define listNextNode(/;"	d
listNode	src/adlist.h	/^typedef struct listNode {$/;"	s
listNode	src/adlist.h	/^} listNode;$/;"	t	typeref:struct:listNode
listNodeValue	src/adlist.h	/^#define listNodeValue(/;"	d
listPopSaver	src/t_list.c	/^void *listPopSaver(unsigned char *data, unsigned int sz) {$/;"	f	typeref:typename:void *
listPos	src/server.h	/^    struct listPos {$/;"	s	struct:blockingState
listPrevNode	src/adlist.h	/^#define listPrevNode(/;"	d
listRelease	src/adlist.c	/^void listRelease(list *list)$/;"	f	typeref:typename:void
listReleaseIterator	src/adlist.c	/^void listReleaseIterator(listIter *iter) {$/;"	f	typeref:typename:void
listRewind	src/adlist.c	/^void listRewind(list *list, listIter *li) {$/;"	f	typeref:typename:void
listRewindTail	src/adlist.c	/^void listRewindTail(list *list, listIter *li) {$/;"	f	typeref:typename:void
listRotateHeadToTail	src/adlist.c	/^void listRotateHeadToTail(list *list) {$/;"	f	typeref:typename:void
listRotateTailToHead	src/adlist.c	/^void listRotateTailToHead(list *list) {$/;"	f	typeref:typename:void
listSearchKey	src/adlist.c	/^listNode *listSearchKey(list *list, void *key)$/;"	f	typeref:typename:listNode *
listSetDupMethod	src/adlist.h	/^#define listSetDupMethod(/;"	d
listSetFreeMethod	src/adlist.h	/^#define listSetFreeMethod(/;"	d
listSetMatchMethod	src/adlist.h	/^#define listSetMatchMethod(/;"	d
listTypeConvert	src/t_list.c	/^void listTypeConvert(robj *subject, int enc) {$/;"	f	typeref:typename:void
listTypeDelete	src/t_list.c	/^void listTypeDelete(listTypeIterator *iter, listTypeEntry *entry) {$/;"	f	typeref:typename:void
listTypeDup	src/t_list.c	/^robj *listTypeDup(robj *o) {$/;"	f	typeref:typename:robj *
listTypeEntry	src/server.h	/^} listTypeEntry;$/;"	t	typeref:struct:__anon3ef696e90a08
listTypeEqual	src/t_list.c	/^int listTypeEqual(listTypeEntry *entry, robj *o) {$/;"	f	typeref:typename:int
listTypeGet	src/t_list.c	/^robj *listTypeGet(listTypeEntry *entry) {$/;"	f	typeref:typename:robj *
listTypeInitIterator	src/t_list.c	/^listTypeIterator *listTypeInitIterator(robj *subject, long index,$/;"	f	typeref:typename:listTypeIterator *
listTypeInsert	src/t_list.c	/^void listTypeInsert(listTypeEntry *entry, robj *value, int where) {$/;"	f	typeref:typename:void
listTypeIterator	src/server.h	/^} listTypeIterator;$/;"	t	typeref:struct:__anon3ef696e90908
listTypeLength	src/t_list.c	/^unsigned long listTypeLength(const robj *subject) {$/;"	f	typeref:typename:unsigned long
listTypeNext	src/t_list.c	/^int listTypeNext(listTypeIterator *li, listTypeEntry *entry) {$/;"	f	typeref:typename:int
listTypePop	src/t_list.c	/^robj *listTypePop(robj *subject, int where) {$/;"	f	typeref:typename:robj *
listTypePush	src/t_list.c	/^void listTypePush(robj *subject, robj *value, int where) {$/;"	f	typeref:typename:void
listTypeReleaseIterator	src/t_list.c	/^void listTypeReleaseIterator(listTypeIterator *li) {$/;"	f	typeref:typename:void
list_compress_depth	src/server.h	/^    int list_compress_depth;$/;"	m	struct:redisServer	typeref:typename:int
list_head_t	deps/jemalloc/test/unit/ql.c	/^typedef ql_head(list_t) list_head_t;$/;"	t	file:
list_max_ziplist_size	src/server.h	/^    int list_max_ziplist_size;$/;"	m	struct:redisServer	typeref:typename:int
list_s	deps/jemalloc/test/unit/ql.c	/^struct list_s {$/;"	s	file:
list_t	deps/jemalloc/test/unit/ql.c	/^typedef struct list_s list_t;$/;"	t	typeref:struct:list_s	file:
listenToPort	src/server.c	/^int listenToPort(int port, socketFds *sfd) {$/;"	f	typeref:typename:int
listfield	deps/lua/src/lparser.c	/^static void listfield (LexState *ls, struct ConsControl *cc) {$/;"	f	typeref:typename:void	file:
listing	deps/lua/src/luac.c	/^static int listing=0;			\/* list bytecodes? *\/$/;"	v	typeref:typename:int	file:
listnode	src/blocked.c	/^    listNode *listnode;     \/* List node for db->blocking_keys[key] list. *\/$/;"	m	struct:bkinfo	typeref:typename:listNode *	file:
listpos	src/server.h	/^    } listpos;              \/* The positions in the src\/dst lists$/;"	m	struct:blockingState	typeref:struct:blockingState::listPos
liveclients	src/redis-benchmark.c	/^    redisAtomic int liveclients;$/;"	m	struct:config	typeref:typename:redisAtomic int	file:
liveclients_mutex	src/redis-benchmark.c	/^    pthread_mutex_t liveclients_mutex;$/;"	m	struct:config	typeref:typename:pthread_mutex_t	file:
ll	deps/jemalloc/include/msvc_compat/strings.h	/^		unsigned __int64 ll;$/;"	m	union:ffsll::__anon7ec42b74010a	typeref:typename:unsigned __int64
ll	src/config.c	/^        long long *ll;$/;"	m	union:numericConfigData::__anon722b8083020a	typeref:typename:long long *	file:
ll	src/module.c	/^        long long ll;    \/* Reply value for integer reply. *\/$/;"	m	union:RedisModuleCallReply::__anon967b4733040a	typeref:typename:long long	file:
ll2string	src/util.c	/^int ll2string(char *dst, size_t dstlen, long long svalue) {$/;"	f	typeref:typename:int
ll_funcs	deps/lua/src/loadlib.c	/^static const luaL_Reg ll_funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
ll_load	deps/lua/src/loadlib.c	/^static void *ll_load (lua_State *L, const char *path) {$/;"	f	typeref:typename:void *	file:
ll_loadfunc	deps/lua/src/loadlib.c	/^static int ll_loadfunc (lua_State *L, const char *path, const char *sym) {$/;"	f	typeref:typename:int	file:
ll_loadlib	deps/lua/src/loadlib.c	/^static int ll_loadlib (lua_State *L) {$/;"	f	typeref:typename:int	file:
ll_module	deps/lua/src/loadlib.c	/^static int ll_module (lua_State *L) {$/;"	f	typeref:typename:int	file:
ll_register	deps/lua/src/loadlib.c	/^static void **ll_register (lua_State *L, const char *path) {$/;"	f	typeref:typename:void **	file:
ll_require	deps/lua/src/loadlib.c	/^static int ll_require (lua_State *L) {$/;"	f	typeref:typename:int	file:
ll_seeall	deps/lua/src/loadlib.c	/^static int ll_seeall (lua_State *L) {$/;"	f	typeref:typename:int	file:
ll_sym	deps/lua/src/loadlib.c	/^static lua_CFunction ll_sym (lua_State *L, void *lib, const char *sym) {$/;"	f	typeref:typename:lua_CFunction	file:
ll_unloadlib	deps/lua/src/loadlib.c	/^static void ll_unloadlib (void *lib) {$/;"	f	typeref:typename:void	file:
llenCommand	src/t_list.c	/^void llenCommand(client *c) {$/;"	f	typeref:typename:void
llex	deps/lua/src/llex.c	/^static int llex (LexState *ls, SemInfo *seminfo) {$/;"	f	typeref:typename:int	file:
llex.o	deps/lua/src/Makefile	/^llex.o: llex.c lua.h luaconf.h ldo.h lobject.h llimits.h lstate.h ltm.h \\$/;"	t
llex_c	deps/lua/src/llex.c	/^#define llex_c$/;"	d	file:
llex_h	deps/lua/src/llex.h	/^#define llex_h$/;"	d
llimits_h	deps/lua/src/llimits.h	/^#define llimits_h$/;"	d
lmathlib.o	deps/lua/src/Makefile	/^lmathlib.o: lmathlib.c lua.h luaconf.h lauxlib.h lualib.h$/;"	t
lmathlib_c	deps/lua/src/lmathlib.c	/^#define lmathlib_c$/;"	d	file:
lmem.o	deps/lua/src/Makefile	/^lmem.o: lmem.c lua.h luaconf.h ldebug.h lstate.h lobject.h llimits.h \\$/;"	t
lmem_c	deps/lua/src/lmem.c	/^#define lmem_c$/;"	d	file:
lmem_h	deps/lua/src/lmem.h	/^#define lmem_h$/;"	d
lmemfind	deps/lua/src/lstrlib.c	/^static const char *lmemfind (const char *s1, size_t l1,$/;"	f	typeref:typename:const char *	file:
lmod	deps/lua/src/lobject.h	/^#define lmod(/;"	d
lmove	src/server.h	/^    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,$/;"	m	struct:sharedObjectsStruct
lmoveCommand	src/server.h	/^                        *xgroupCommand, *rpoplpushCommand, *lmoveCommand;$/;"	m	struct:redisServer	typeref:struct:redisCommand ***************
lmoveCommand	src/t_list.c	/^void lmoveCommand(client *c) {$/;"	f	typeref:typename:void
lmoveGenericCommand	src/t_list.c	/^void lmoveGenericCommand(client *c, int wherefrom, int whereto) {$/;"	f	typeref:typename:void
lmoveHandlePush	src/t_list.c	/^void lmoveHandlePush(client *c, robj *dstkey, robj *dstobj, robj *value,$/;"	f	typeref:typename:void
ln_gamma	deps/jemalloc/test/include/test/math.h	/^ln_gamma(double x) {$/;"	f	typeref:typename:double
ln_gamma_misc_expected	deps/jemalloc/test/unit/math.c	/^static const double ln_gamma_misc_expected[] = {$/;"	v	typeref:typename:TEST_END const double[]	file:
lndebug	deps/linenoise/linenoise.c	/^#define lndebug(/;"	d	file:
load	src/server.h	/^    *lastid, *ping, *setid, *keepttl, *load, *createconsumer,$/;"	m	struct:sharedObjectsStruct
loadAppendOnlyFile	src/aof.c	/^int loadAppendOnlyFile(char *filename) {$/;"	f	typeref:typename:int
loadDataFromDisk	src/server.c	/^void loadDataFromDisk(void) {$/;"	f	typeref:typename:void
loadSentinelConfigFromQueue	src/sentinel.c	/^void loadSentinelConfigFromQueue(void) {$/;"	f	typeref:typename:void
loadServerConfig	src/config.c	/^void loadServerConfig(char *filename, char config_from_stdin, char *options) {$/;"	f	typeref:typename:void
loadServerConfigFromString	src/config.c	/^void loadServerConfigFromString(char *config) {$/;"	f	typeref:typename:void
load_aux	deps/lua/src/lbaselib.c	/^static int load_aux (lua_State *L, int status) {$/;"	f	typeref:typename:int	file:
loaded_event_log	tests/modules/keyspace_events.c	/^RedisModuleDict *loaded_event_log = NULL;$/;"	v	typeref:typename:RedisModuleDict *
loader_C	deps/lua/src/loadlib.c	/^static int loader_C (lua_State *L) {$/;"	f	typeref:typename:int	file:
loader_Croot	deps/lua/src/loadlib.c	/^static int loader_Croot (lua_State *L) {$/;"	f	typeref:typename:int	file:
loader_Lua	deps/lua/src/loadlib.c	/^static int loader_Lua (lua_State *L) {$/;"	f	typeref:typename:int	file:
loader_preload	deps/lua/src/loadlib.c	/^static int loader_preload (lua_State *L) {$/;"	f	typeref:typename:int	file:
loaderror	deps/lua/src/loadlib.c	/^static void loaderror (lua_State *L, const char *filename) {$/;"	f	typeref:typename:void	file:
loaders	deps/lua/src/loadlib.c	/^static const lua_CFunction loaders[] =$/;"	v	typeref:typename:const lua_CFunction[]	file:
loading	src/server.h	/^    volatile sig_atomic_t loading; \/* We are loading data from disk if true *\/$/;"	m	struct:redisServer	typeref:typename:volatile sig_atomic_t
loadingCallback	tests/modules/hooks.c	/^void loadingCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f	typeref:typename:void
loadingProgress	src/rdb.c	/^void loadingProgress(off_t pos) {$/;"	f	typeref:typename:void
loadingProgressCallback	tests/modules/hooks.c	/^void loadingProgressCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f	typeref:typename:void
loading_loaded_bytes	src/server.h	/^    off_t loading_loaded_bytes;$/;"	m	struct:redisServer	typeref:typename:off_t
loading_process_events_interval_bytes	src/server.h	/^    off_t loading_process_events_interval_bytes;$/;"	m	struct:redisServer	typeref:typename:off_t
loading_rdb_used_mem	src/server.h	/^    off_t loading_rdb_used_mem;$/;"	m	struct:redisServer	typeref:typename:off_t
loading_start_time	src/server.h	/^    time_t loading_start_time;$/;"	m	struct:redisServer	typeref:typename:time_t
loading_total_bytes	src/server.h	/^    off_t loading_total_bytes;$/;"	m	struct:redisServer	typeref:typename:off_t
loadingerr	src/server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *********** [4]* [4]* [4]* [4]********
loadlib.o	deps/lua/src/Makefile	/^loadlib.o: loadlib.c lua.h luaconf.h lauxlib.h lualib.h$/;"	t
loadlib_c	deps/lua/src/loadlib.c	/^#define loadlib_c$/;"	d	file:
loadline	deps/lua/src/lua.c	/^static int loadline (lua_State *L) {$/;"	f	typeref:typename:int	file:
loadmodule_queue	src/server.h	/^    list *loadmodule_queue;     \/* List of modules to load at startup. *\/$/;"	m	struct:redisServer	typeref:typename:list *
lobject.o	deps/lua/src/Makefile	/^lobject.o: lobject.c lua.h luaconf.h ldo.h lobject.h llimits.h lstate.h \\$/;"	t
lobject_c	deps/lua/src/lobject.c	/^#define lobject_c$/;"	d	file:
lobject_h	deps/lua/src/lobject.h	/^#define lobject_h$/;"	d
local	deps/lua/Makefile	/^local:$/;"	t
locale_decimal_point	deps/lua/src/fpconv.c	/^static char locale_decimal_point = '.';$/;"	v	typeref:typename:char	file:
localfunc	deps/lua/src/lparser.c	/^static void localfunc (LexState *ls) {$/;"	f	typeref:typename:void	file:
localstat	deps/lua/src/lparser.c	/^static void localstat (LexState *ls) {$/;"	f	typeref:typename:void	file:
lock	deps/jemalloc/include/jemalloc/internal/bin.h	/^	malloc_mutex_t		lock;$/;"	m	struct:bin_s	typeref:typename:malloc_mutex_t
lock	deps/jemalloc/include/jemalloc/internal/mutex.h	/^			CRITICAL_SECTION	lock;$/;"	m	struct:malloc_mutex_s::__anon9c853d94020a::__anon9c853d940308	typeref:typename:CRITICAL_SECTION
lock	deps/jemalloc/include/jemalloc/internal/mutex.h	/^			OSSpinLock		lock;$/;"	m	struct:malloc_mutex_s::__anon9c853d94020a::__anon9c853d940308	typeref:typename:OSSpinLock
lock	deps/jemalloc/include/jemalloc/internal/mutex.h	/^			SRWLOCK         	lock;$/;"	m	struct:malloc_mutex_s::__anon9c853d94020a::__anon9c853d940308	typeref:typename:SRWLOCK
lock	deps/jemalloc/include/jemalloc/internal/mutex.h	/^			os_unfair_lock		lock;$/;"	m	struct:malloc_mutex_s::__anon9c853d94020a::__anon9c853d940308	typeref:typename:os_unfair_lock
lock	deps/jemalloc/include/jemalloc/internal/mutex.h	/^			pthread_mutex_t		lock;$/;"	m	struct:malloc_mutex_s::__anon9c853d94020a::__anon9c853d940308	typeref:typename:pthread_mutex_t
lock	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	malloc_mutex_t		*lock;$/;"	m	struct:prof_gctx_s	typeref:typename:malloc_mutex_t *
lock	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	malloc_mutex_t		*lock;$/;"	m	struct:prof_tdata_s	typeref:typename:malloc_mutex_t *
lock	deps/jemalloc/src/tsd.c	/^	malloc_mutex_t lock;$/;"	m	struct:tsd_init_head_s	typeref:typename:malloc_mutex_t	file:
lock	deps/jemalloc/test/include/test/mtx.h	/^	CRITICAL_SECTION	lock;$/;"	m	struct:__anon7a00f1d60108	typeref:typename:CRITICAL_SECTION
lock_order	deps/jemalloc/include/jemalloc/internal/mutex.h	/^		malloc_mutex_lock_order_t	lock_order;$/;"	m	union:malloc_mutex_s::__anon9c853d94020a	typeref:typename:malloc_mutex_lock_order_t
lock_order	deps/jemalloc/include/jemalloc/internal/mutex.h	/^	malloc_mutex_lock_order_t	lock_order;$/;"	m	struct:malloc_mutex_s	typeref:typename:malloc_mutex_lock_order_t
lock_result_failure	deps/jemalloc/src/extent.c	/^	lock_result_failure,$/;"	e	enum:__anond8df51160103	file:
lock_result_no_extent	deps/jemalloc/src/extent.c	/^	lock_result_no_extent$/;"	e	enum:__anond8df51160103	file:
lock_result_success	deps/jemalloc/src/extent.c	/^	lock_result_success,$/;"	e	enum:__anond8df51160103	file:
lock_result_t	deps/jemalloc/src/extent.c	/^} lock_result_t;$/;"	t	typeref:enum:__anond8df51160103	file:
locvars	deps/lua/src/lobject.h	/^  struct LocVar *locvars;  \/* information about local variables *\/$/;"	m	struct:Proto	typeref:struct:LocVar *
log	deps/hdr_histogram/hdr_histogram.h	/^        struct hdr_iter_log log;$/;"	m	union:hdr_iter::__anon905d92fb010a	typeref:struct:hdr_iter_log
log	deps/jemalloc/src/zone.c	/^	void (*log)(malloc_zone_t *, void *);$/;"	m	struct:malloc_introspection_t	typeref:typename:void (*)(malloc_zone_t *,void *)	file:
logCurrentClient	src/debug.c	/^void logCurrentClient(void) {$/;"	f	typeref:typename:void
logModulesInfo	src/debug.c	/^void logModulesInfo(void) {$/;"	f	typeref:typename:void
logRegisters	src/debug.c	/^void logRegisters(ucontext_t *uc) {$/;"	f	typeref:typename:void
logServerInfo	src/debug.c	/^void logServerInfo(void) {$/;"	f	typeref:typename:void
logStackContent	src/debug.c	/^void logStackContent(void **sp) {$/;"	f	typeref:typename:void
logStackTrace	src/debug.c	/^void logStackTrace(void *eip, int uplevel) {$/;"	f	typeref:typename:void
log_base	deps/hdr_histogram/hdr_histogram.h	/^    double log_base;$/;"	m	struct:hdr_iter_log	typeref:typename:double
log_command_name	tests/modules/commandfilter.c	/^static const char log_command_name[] = "commandfilter.log";$/;"	v	typeref:typename:const char[]	file:
log_do_begin	deps/jemalloc/include/jemalloc/internal/log.h	/^#define log_do_begin(/;"	d
log_do_end	deps/jemalloc/include/jemalloc/internal/log.h	/^#define log_do_end(/;"	d
log_impl_varargs	deps/jemalloc/include/jemalloc/internal/log.h	/^log_impl_varargs(const char *name, ...) {$/;"	f	typeref:typename:void
log_incr	utils/lru/lfu-simulation.c	/^uint8_t log_incr(uint8_t counter) {$/;"	f	typeref:typename:uint8_t
log_init_done	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define log_init_done /;"	d
log_init_done	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define log_init_done /;"	d
log_iter_next	deps/hdr_histogram/hdr_histogram.c	/^static bool log_iter_next(struct hdr_iter *iter)$/;"	f	typeref:typename:bool	file:
log_key_name	tests/modules/commandfilter.c	/^static RedisModuleString *log_key_name;$/;"	v	typeref:typename:RedisModuleString *	file:
log_var_extract_segment	deps/jemalloc/src/log.c	/^log_var_extract_segment(const char* segment_begin) {$/;"	f	typeref:typename:const char *	file:
log_var_matches_segment	deps/jemalloc/src/log.c	/^log_var_matches_segment(const char *segment_begin, const char *segment_end,$/;"	f	typeref:typename:bool	file:
log_var_names	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define log_var_names /;"	d
log_var_names	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define log_var_names /;"	d
log_var_names	deps/jemalloc/src/log.c	/^char log_var_names[JEMALLOC_LOG_VAR_BUFSIZE];$/;"	v	typeref:typename:char[]
log_var_s	deps/jemalloc/include/jemalloc/internal/log.h	/^struct log_var_s {$/;"	s
log_var_t	deps/jemalloc/include/jemalloc/internal/log.h	/^typedef struct log_var_s log_var_t;$/;"	t	typeref:struct:log_var_s
log_var_update_state	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define log_var_update_state /;"	d
log_var_update_state	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define log_var_update_state /;"	d
log_var_update_state	deps/jemalloc/src/log.c	/^log_var_update_state(log_var_t *log_var) {$/;"	f	typeref:typename:unsigned
logfile	src/server.h	/^    char *logfile;                  \/* Path of log file *\/$/;"	m	struct:redisServer	typeref:typename:char *
loglevel_enum	src/config.c	/^configEnum loglevel_enum[] = {$/;"	v	typeref:typename:configEnum[]
logs	src/scripting.c	/^    list *logs; \/* List of messages to send to the client. *\/$/;"	m	struct:ldbState	typeref:typename:list *	file:
lolwut5Command	src/lolwut5.c	/^void lolwut5Command(client *c) {$/;"	f	typeref:typename:void
lolwut6Command	src/lolwut6.c	/^void lolwut6Command(client *c) {$/;"	f	typeref:typename:void
lolwutCommand	src/lolwut.c	/^void lolwutCommand(client *c) {$/;"	f	typeref:typename:void
lolwutUnstableCommand	src/lolwut.c	/^void lolwutUnstableCommand(client *c) {$/;"	f	typeref:typename:void
longLatFromMember	src/geo.c	/^int longLatFromMember(robj *zobj, robj *member, double *xy) {$/;"	f	typeref:typename:int
longitude	src/geo.h	/^    double longitude;$/;"	m	struct:geoPoint	typeref:typename:double
longitude	src/geohash.h	/^    GeoHashRange longitude;$/;"	m	struct:__anona01652f10408	typeref:typename:GeoHashRange
longval	src/quicklist.h	/^    long long longval;$/;"	m	struct:quicklistEntry	typeref:typename:long long
lookahead	deps/lua/src/llex.h	/^  Token lookahead;  \/* look ahead token *\/$/;"	m	struct:LexState	typeref:typename:Token
lookupClientByID	src/networking.c	/^client *lookupClientByID(uint64_t id) {$/;"	f	typeref:typename:client *
lookupCommand	src/server.c	/^struct redisCommand *lookupCommand(sds name) {$/;"	f	typeref:struct:redisCommand *
lookupCommandByCString	src/server.c	/^struct redisCommand *lookupCommandByCString(const char *s) {$/;"	f	typeref:struct:redisCommand *
lookupCommandOrOriginal	src/server.c	/^struct redisCommand *lookupCommandOrOriginal(sds name) {$/;"	f	typeref:struct:redisCommand *
lookupKey	src/db.c	/^robj *lookupKey(redisDb *db, robj *key, int flags) {$/;"	f	typeref:typename:robj *
lookupKeyByPattern	src/sort.c	/^robj *lookupKeyByPattern(redisDb *db, robj *pattern, robj *subst, int writeflag) {$/;"	f	typeref:typename:robj *
lookupKeyRead	src/db.c	/^robj *lookupKeyRead(redisDb *db, robj *key) {$/;"	f	typeref:typename:robj *
lookupKeyReadOrReply	src/db.c	/^robj *lookupKeyReadOrReply(client *c, robj *key, robj *reply) {$/;"	f	typeref:typename:robj *
lookupKeyReadWithFlags	src/db.c	/^robj *lookupKeyReadWithFlags(redisDb *db, robj *key, int flags) {$/;"	f	typeref:typename:robj *
lookupKeyWrite	src/db.c	/^robj *lookupKeyWrite(redisDb *db, robj *key) {$/;"	f	typeref:typename:robj *
lookupKeyWriteOrReply	src/db.c	/^robj *lookupKeyWriteOrReply(client *c, robj *key, robj *reply) {$/;"	f	typeref:typename:robj *
lookupKeyWriteWithFlags	src/db.c	/^robj *lookupKeyWriteWithFlags(redisDb *db, robj *key, int flags) {$/;"	f	typeref:typename:robj *
lookupStringForBitCommand	src/bitops.c	/^robj *lookupStringForBitCommand(client *c, uint64_t maxbit) {$/;"	f	typeref:typename:robj *
loop	deps/hiredis/adapters/ae.h	/^    aeEventLoop *loop;$/;"	m	struct:redisAeEvents	typeref:typename:aeEventLoop *
loop	deps/hiredis/adapters/libev.h	/^    struct ev_loop *loop;$/;"	m	struct:redisLibevEvents	typeref:struct:ev_loop *
loop	deps/hiredis/examples/example-ae.c	/^static aeEventLoop *loop;$/;"	v	typeref:typename:aeEventLoop *	file:
loop	src/redis-benchmark.c	/^    int loop;$/;"	m	struct:config	typeref:typename:int	file:
loop	src/sentinel.c	/^    aeEventLoop *loop;$/;"	m	struct:redisAeEvents	typeref:typename:aeEventLoop *	file:
lopcodes.o	deps/lua/src/Makefile	/^lopcodes.o: lopcodes.c lopcodes.h llimits.h lua.h luaconf.h$/;"	t
lopcodes_c	deps/lua/src/lopcodes.c	/^#define lopcodes_c$/;"	d	file:
lopcodes_h	deps/lua/src/lopcodes.h	/^#define lopcodes_h$/;"	d
loslib.o	deps/lua/src/Makefile	/^loslib.o: loslib.c lua.h luaconf.h lauxlib.h lualib.h$/;"	t
loslib_c	deps/lua/src/loslib.c	/^#define loslib_c$/;"	d	file:
low_water	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	cache_bin_sz_t low_water;$/;"	m	struct:cache_bin_s	typeref:typename:cache_bin_sz_t
lower_bound	src/config.c	/^    long long lower_bound; \/* The lower bound of this numeric value *\/$/;"	m	struct:numericConfigData	typeref:typename:long long	file:
lowest_equivalent_value	deps/hdr_histogram/hdr_histogram.c	/^static int64_t lowest_equivalent_value(const struct hdr_histogram* h, int64_t value)$/;"	f	typeref:typename:int64_t	file:
lowest_equivalent_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t lowest_equivalent_value;$/;"	m	struct:hdr_iter	typeref:typename:int64_t
lowest_trackable_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t lowest_trackable_value;$/;"	m	struct:hdr_histogram	typeref:typename:int64_t
lowest_trackable_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t lowest_trackable_value;$/;"	m	struct:hdr_histogram_bucket_config	typeref:typename:int64_t
lp	src/stream.h	/^    unsigned char *lp;      \/* Current listpack. *\/$/;"	m	struct:streamIterator	typeref:typename:unsigned char *
lpAppend	src/listpack.c	/^unsigned char *lpAppend(unsigned char *lp, unsigned char *ele, uint32_t size) {$/;"	f	typeref:typename:unsigned char *
lpAppendInteger	src/t_stream.c	/^unsigned char *lpAppendInteger(unsigned char *lp, int64_t value) {$/;"	f	typeref:typename:unsigned char *
lpAssertValidEntry	src/listpack.c	/^static inline void lpAssertValidEntry(unsigned char* lp, size_t lpbytes, unsigned char *p) {$/;"	f	typeref:typename:void	file:
lpBytes	src/listpack.c	/^uint32_t lpBytes(unsigned char *lp) {$/;"	f	typeref:typename:uint32_t
lpCurrentEncodedSizeBytes	src/listpack.c	/^uint32_t lpCurrentEncodedSizeBytes(unsigned char *p) {$/;"	f	typeref:typename:uint32_t
lpCurrentEncodedSizeUnsafe	src/listpack.c	/^uint32_t lpCurrentEncodedSizeUnsafe(unsigned char *p) {$/;"	f	typeref:typename:uint32_t
lpDecodeBacklen	src/listpack.c	/^uint64_t lpDecodeBacklen(unsigned char *p) {$/;"	f	typeref:typename:uint64_t
lpDelete	src/listpack.c	/^unsigned char *lpDelete(unsigned char *lp, unsigned char *p, unsigned char **newp) {$/;"	f	typeref:typename:unsigned char *
lpEncodeBacklen	src/listpack.c	/^unsigned long lpEncodeBacklen(unsigned char *buf, uint64_t l) {$/;"	f	typeref:typename:unsigned long
lpEncodeGetType	src/listpack.c	/^int lpEncodeGetType(unsigned char *ele, uint32_t size, unsigned char *intenc, uint64_t *enclen) /;"	f	typeref:typename:int
lpEncodeString	src/listpack.c	/^void lpEncodeString(unsigned char *buf, unsigned char *s, uint32_t len) {$/;"	f	typeref:typename:void
lpFirst	src/listpack.c	/^unsigned char *lpFirst(unsigned char *lp) {$/;"	f	typeref:typename:unsigned char *
lpFree	src/listpack.c	/^void lpFree(unsigned char *lp) {$/;"	f	typeref:typename:void
lpGet	src/listpack.c	/^unsigned char *lpGet(unsigned char *p, int64_t *count, unsigned char *intbuf) {$/;"	f	typeref:typename:unsigned char *
lpGetEdgeStreamID	src/t_stream.c	/^int lpGetEdgeStreamID(unsigned char *lp, int first, streamID *master_id, streamID *edge_id)$/;"	f	typeref:typename:int
lpGetInteger	src/t_stream.c	/^#define lpGetInteger(/;"	d	file:
lpGetIntegerIfValid	src/t_stream.c	/^static inline int64_t lpGetIntegerIfValid(unsigned char *ele, int *valid) {$/;"	f	typeref:typename:int64_t	file:
lpGetNumElements	src/listpack.c	/^#define lpGetNumElements(/;"	d	file:
lpGetTotalBytes	src/listpack.c	/^#define lpGetTotalBytes(/;"	d	file:
lpInsert	src/listpack.c	/^unsigned char *lpInsert(unsigned char *lp, unsigned char *ele, uint32_t size, unsigned char *p, /;"	f	typeref:typename:unsigned char *
lpLast	src/listpack.c	/^unsigned char *lpLast(unsigned char *lp) {$/;"	f	typeref:typename:unsigned char *
lpLength	src/listpack.c	/^uint32_t lpLength(unsigned char *lp) {$/;"	f	typeref:typename:uint32_t
lpNew	src/listpack.c	/^unsigned char *lpNew(size_t capacity) {$/;"	f	typeref:typename:unsigned char *
lpNext	src/listpack.c	/^unsigned char *lpNext(unsigned char *lp, unsigned char *p) {$/;"	f	typeref:typename:unsigned char *
lpPrev	src/listpack.c	/^unsigned char *lpPrev(unsigned char *lp, unsigned char *p) {$/;"	f	typeref:typename:unsigned char *
lpReplaceInteger	src/t_stream.c	/^unsigned char *lpReplaceInteger(unsigned char *lp, unsigned char **pos, int64_t value) {$/;"	f	typeref:typename:unsigned char *
lpSeek	src/listpack.c	/^unsigned char *lpSeek(unsigned char *lp, long index) {$/;"	f	typeref:typename:unsigned char *
lpSetNumElements	src/listpack.c	/^#define lpSetNumElements(/;"	d	file:
lpSetTotalBytes	src/listpack.c	/^#define lpSetTotalBytes(/;"	d	file:
lpShrinkToFit	src/listpack.c	/^unsigned char* lpShrinkToFit(unsigned char *lp) {$/;"	f	typeref:typename:unsigned char *
lpSkip	src/listpack.c	/^unsigned char *lpSkip(unsigned char *p) {$/;"	f	typeref:typename:unsigned char *
lpStringToInt64	src/listpack.c	/^int lpStringToInt64(const char *s, unsigned long slen, int64_t *value) {$/;"	f	typeref:typename:int
lpValidateFirst	src/listpack.c	/^unsigned char *lpValidateFirst(unsigned char *lp) {$/;"	f	typeref:typename:unsigned char *
lpValidateIntegrity	src/listpack.c	/^int lpValidateIntegrity(unsigned char *lp, size_t size, int deep){$/;"	f	typeref:typename:int
lpValidateNext	src/listpack.c	/^int lpValidateNext(unsigned char *lp, unsigned char **pp, size_t lpbytes) {$/;"	f	typeref:typename:int
lp_ele	src/stream.h	/^    unsigned char *lp_ele;  \/* Current listpack cursor. *\/$/;"	m	struct:streamIterator	typeref:typename:unsigned char *
lp_flags	src/stream.h	/^    unsigned char *lp_flags; \/* Current entry flags pointer. *\/$/;"	m	struct:streamIterator	typeref:typename:unsigned char *
lp_free	src/listpack_malloc.h	/^#define lp_free /;"	d
lp_malloc	src/listpack_malloc.h	/^#define lp_malloc /;"	d
lp_malloc_size	src/listpack_malloc.h	/^#define lp_malloc_size /;"	d
lp_realloc	src/listpack_malloc.h	/^#define lp_realloc /;"	d
lparser.o	deps/lua/src/Makefile	/^lparser.o: lparser.c lua.h luaconf.h lcode.h llex.h lobject.h llimits.h \\$/;"	t
lparser_c	deps/lua/src/lparser.c	/^#define lparser_c$/;"	d	file:
lparser_h	deps/lua/src/lparser.h	/^#define lparser_h$/;"	d
lpop	src/server.h	/^    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,$/;"	m	struct:sharedObjectsStruct
lpopCommand	src/server.h	/^                        *lpopCommand, *rpopCommand, *zpopminCommand,$/;"	m	struct:redisServer	typeref:struct:redisCommand ****
lpopCommand	src/t_list.c	/^void lpopCommand(client *c) {$/;"	f	typeref:typename:void
lposCommand	src/t_list.c	/^void lposCommand(client *c) {$/;"	f	typeref:typename:void
lpush	src/server.h	/^    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,$/;"	m	struct:sharedObjectsStruct
lpushCommand	src/server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand,$/;"	m	struct:redisServer	typeref:struct:redisCommand ***
lpushCommand	src/t_list.c	/^void lpushCommand(client *c) {$/;"	f	typeref:typename:void
lpushxCommand	src/t_list.c	/^void lpushxCommand(client *c) {$/;"	f	typeref:typename:void
lrangeCommand	src/t_list.c	/^void lrangeCommand(client *c) {$/;"	f	typeref:typename:void
lremCommand	src/t_list.c	/^void lremCommand(client *c) {$/;"	f	typeref:typename:void
lrs	src/module.c	/^            zlexrangespec lrs;     \/* Lex range. *\/$/;"	m	struct:RedisModuleKey::__anon967b4733010a::__anon967b47330208	typeref:typename:zlexrangespec	file:
lru	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	extent_list_t		lru;$/;"	m	struct:extents_s	typeref:typename:extent_list_t
lru	src/server.h	/^    unsigned lru:LRU_BITS; \/* LRU time (relative to global lru_clock) or$/;"	m	struct:redisObject	typeref:typename:unsigned
lru_test_mode	src/redis-cli.c	/^    int lru_test_mode;$/;"	m	struct:config	typeref:typename:int	file:
lru_test_sample_size	src/redis-cli.c	/^    long long lru_test_sample_size;$/;"	m	struct:config	typeref:typename:long long	file:
lruclock	src/server.h	/^    redisAtomic unsigned int lruclock; \/* Clock for LRU eviction *\/$/;"	m	struct:redisServer	typeref:typename:redisAtomic unsigned int
ls	deps/lua/src/lparser.h	/^  struct LexState *ls;  \/* lexical state *\/$/;"	m	struct:FuncState	typeref:struct:LexState *
lsetCommand	src/t_list.c	/^void lsetCommand(client *c) {$/;"	f	typeref:typename:void
lshift128	deps/jemalloc/test/src/SFMT.c	/^static inline void lshift128(w128_t *out, w128_t const *in, int shift) {$/;"	f	typeref:typename:void	file:
lsizenode	deps/lua/src/lobject.h	/^  lu_byte lsizenode;  \/* log2 of size of `node' array *\/$/;"	m	struct:Table	typeref:typename:lu_byte
lstate.o	deps/lua/src/Makefile	/^lstate.o: lstate.c lua.h luaconf.h ldebug.h lstate.h lobject.h llimits.h \\$/;"	t
lstate_c	deps/lua/src/lstate.c	/^#define lstate_c$/;"	d	file:
lstate_h	deps/lua/src/lstate.h	/^#define lstate_h$/;"	d
lstats	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_large_t	lstats[NSIZES - NBINS];$/;"	m	struct:arena_stats_s	typeref:typename:arena_stats_large_t[]
lstats	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	arena_stats_large_t lstats[NSIZES - NBINS];$/;"	m	struct:ctl_arena_stats_s	typeref:typename:arena_stats_large_t[]
lstop	deps/lua/src/lua.c	/^static void lstop (lua_State *L, lua_Debug *ar) {$/;"	f	typeref:typename:void	file:
lstring.o	deps/lua/src/Makefile	/^lstring.o: lstring.c lua.h luaconf.h lmem.h llimits.h lobject.h lstate.h \\$/;"	t
lstring_c	deps/lua/src/lstring.c	/^#define lstring_c$/;"	d	file:
lstring_h	deps/lua/src/lstring.h	/^#define lstring_h$/;"	d
lstrlib.o	deps/lua/src/Makefile	/^lstrlib.o: lstrlib.c lua.h luaconf.h lauxlib.h lualib.h$/;"	t
lstrlib_c	deps/lua/src/lstrlib.c	/^#define lstrlib_c$/;"	d	file:
ltable.o	deps/lua/src/Makefile	/^ltable.o: ltable.c lua.h luaconf.h ldebug.h lstate.h lobject.h llimits.h \\$/;"	t
ltable_c	deps/lua/src/ltable.c	/^#define ltable_c$/;"	d	file:
ltable_h	deps/lua/src/ltable.h	/^#define ltable_h$/;"	d
ltablib.o	deps/lua/src/Makefile	/^ltablib.o: ltablib.c lua.h luaconf.h lauxlib.h lualib.h$/;"	t
ltablib_c	deps/lua/src/ltablib.c	/^#define ltablib_c$/;"	d	file:
ltm.o	deps/lua/src/Makefile	/^ltm.o: ltm.c lua.h luaconf.h lobject.h llimits.h lstate.h ltm.h lzio.h \\$/;"	t
ltm_c	deps/lua/src/ltm.c	/^#define ltm_c$/;"	d	file:
ltm_h	deps/lua/src/ltm.h	/^#define ltm_h$/;"	d
ltrimCommand	src/t_list.c	/^void ltrimCommand(client *c) {$/;"	f	typeref:typename:void
lu_byte	deps/lua/src/llimits.h	/^typedef unsigned char lu_byte;$/;"	t	typeref:typename:unsigned char
lu_int32	deps/lua/src/llimits.h	/^typedef LUAI_UINT32 lu_int32;$/;"	t	typeref:typename:LUAI_UINT32
lu_mem	deps/lua/src/llimits.h	/^typedef LUAI_UMEM lu_mem;$/;"	t	typeref:typename:LUAI_UMEM
lua	deps/Makefile	/^lua: .make-prerequisites$/;"	t
lua	src/server.h	/^    lua_State *lua; \/* The Lua interpreter. We use just one for all clients *\/$/;"	m	struct:redisServer	typeref:typename:lua_State *
lua.o	deps/lua/src/Makefile	/^lua.o: lua.c lua.h luaconf.h lauxlib.h lualib.h$/;"	t
luaA_pushobject	deps/lua/src/lapi.c	/^void luaA_pushobject (lua_State *L, const TValue *o) {$/;"	f	typeref:typename:void
luaB_assert	deps/lua/src/lbaselib.c	/^static int luaB_assert (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_auxwrap	deps/lua/src/lbaselib.c	/^static int luaB_auxwrap (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_cocreate	deps/lua/src/lbaselib.c	/^static int luaB_cocreate (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_collectgarbage	deps/lua/src/lbaselib.c	/^static int luaB_collectgarbage (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_coresume	deps/lua/src/lbaselib.c	/^static int luaB_coresume (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_corunning	deps/lua/src/lbaselib.c	/^static int luaB_corunning (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_costatus	deps/lua/src/lbaselib.c	/^static int luaB_costatus (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_cowrap	deps/lua/src/lbaselib.c	/^static int luaB_cowrap (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_dofile	deps/lua/src/lbaselib.c	/^static int luaB_dofile (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_error	deps/lua/src/lbaselib.c	/^static int luaB_error (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_gcinfo	deps/lua/src/lbaselib.c	/^static int luaB_gcinfo (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_getfenv	deps/lua/src/lbaselib.c	/^static int luaB_getfenv (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_getmetatable	deps/lua/src/lbaselib.c	/^static int luaB_getmetatable (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_ipairs	deps/lua/src/lbaselib.c	/^static int luaB_ipairs (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_load	deps/lua/src/lbaselib.c	/^static int luaB_load (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_loadfile	deps/lua/src/lbaselib.c	/^static int luaB_loadfile (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_loadstring	deps/lua/src/lbaselib.c	/^static int luaB_loadstring (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_newproxy	deps/lua/src/lbaselib.c	/^static int luaB_newproxy (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_next	deps/lua/src/lbaselib.c	/^static int luaB_next (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_pairs	deps/lua/src/lbaselib.c	/^static int luaB_pairs (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_pcall	deps/lua/src/lbaselib.c	/^static int luaB_pcall (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_print	deps/lua/src/lbaselib.c	/^static int luaB_print (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_rawequal	deps/lua/src/lbaselib.c	/^static int luaB_rawequal (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_rawget	deps/lua/src/lbaselib.c	/^static int luaB_rawget (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_rawset	deps/lua/src/lbaselib.c	/^static int luaB_rawset (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_select	deps/lua/src/lbaselib.c	/^static int luaB_select (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_setfenv	deps/lua/src/lbaselib.c	/^static int luaB_setfenv (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_setmetatable	deps/lua/src/lbaselib.c	/^static int luaB_setmetatable (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_tonumber	deps/lua/src/lbaselib.c	/^static int luaB_tonumber (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_tostring	deps/lua/src/lbaselib.c	/^static int luaB_tostring (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_type	deps/lua/src/lbaselib.c	/^static int luaB_type (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_unpack	deps/lua/src/lbaselib.c	/^static int luaB_unpack (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_xpcall	deps/lua/src/lbaselib.c	/^static int luaB_xpcall (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_yield	deps/lua/src/lbaselib.c	/^static int luaB_yield (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaC_barrier	deps/lua/src/lgc.h	/^#define luaC_barrier(/;"	d
luaC_barrierback	deps/lua/src/lgc.c	/^void luaC_barrierback (lua_State *L, Table *t) {$/;"	f	typeref:typename:void
luaC_barrierf	deps/lua/src/lgc.c	/^void luaC_barrierf (lua_State *L, GCObject *o, GCObject *v) {$/;"	f	typeref:typename:void
luaC_barriert	deps/lua/src/lgc.h	/^#define luaC_barriert(/;"	d
luaC_callGCTM	deps/lua/src/lgc.c	/^void luaC_callGCTM (lua_State *L) {$/;"	f	typeref:typename:void
luaC_checkGC	deps/lua/src/lgc.h	/^#define luaC_checkGC(/;"	d
luaC_freeall	deps/lua/src/lgc.c	/^void luaC_freeall (lua_State *L) {$/;"	f	typeref:typename:void
luaC_fullgc	deps/lua/src/lgc.c	/^void luaC_fullgc (lua_State *L) {$/;"	f	typeref:typename:void
luaC_link	deps/lua/src/lgc.c	/^void luaC_link (lua_State *L, GCObject *o, lu_byte tt) {$/;"	f	typeref:typename:void
luaC_linkupval	deps/lua/src/lgc.c	/^void luaC_linkupval (lua_State *L, UpVal *uv) {$/;"	f	typeref:typename:void
luaC_objbarrier	deps/lua/src/lgc.h	/^#define luaC_objbarrier(/;"	d
luaC_objbarriert	deps/lua/src/lgc.h	/^#define luaC_objbarriert(/;"	d
luaC_separateudata	deps/lua/src/lgc.c	/^size_t luaC_separateudata (lua_State *L, int all) {$/;"	f	typeref:typename:size_t
luaC_step	deps/lua/src/lgc.c	/^void luaC_step (lua_State *L) {$/;"	f	typeref:typename:void
luaC_white	deps/lua/src/lgc.h	/^#define luaC_white(/;"	d
luaCreateFunction	src/scripting.c	/^sds luaCreateFunction(client *c, lua_State *lua, robj *body) {$/;"	f	typeref:typename:sds
luaD_call	deps/lua/src/ldo.c	/^void luaD_call (lua_State *L, StkId func, int nResults) {$/;"	f	typeref:typename:void
luaD_callhook	deps/lua/src/ldo.c	/^void luaD_callhook (lua_State *L, int event, int line) {$/;"	f	typeref:typename:void
luaD_checkstack	deps/lua/src/ldo.h	/^#define luaD_checkstack(/;"	d
luaD_growstack	deps/lua/src/ldo.c	/^void luaD_growstack (lua_State *L, int n) {$/;"	f	typeref:typename:void
luaD_pcall	deps/lua/src/ldo.c	/^int luaD_pcall (lua_State *L, Pfunc func, void *u,$/;"	f	typeref:typename:int
luaD_poscall	deps/lua/src/ldo.c	/^int luaD_poscall (lua_State *L, StkId firstResult) {$/;"	f	typeref:typename:int
luaD_precall	deps/lua/src/ldo.c	/^int luaD_precall (lua_State *L, StkId func, int nresults) {$/;"	f	typeref:typename:int
luaD_protectedparser	deps/lua/src/ldo.c	/^int luaD_protectedparser (lua_State *L, ZIO *z, const char *name) {$/;"	f	typeref:typename:int
luaD_rawrunprotected	deps/lua/src/ldo.c	/^int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {$/;"	f	typeref:typename:int
luaD_reallocCI	deps/lua/src/ldo.c	/^void luaD_reallocCI (lua_State *L, int newsize) {$/;"	f	typeref:typename:void
luaD_reallocstack	deps/lua/src/ldo.c	/^void luaD_reallocstack (lua_State *L, int newsize) {$/;"	f	typeref:typename:void
luaD_seterrorobj	deps/lua/src/ldo.c	/^void luaD_seterrorobj (lua_State *L, int errcode, StkId oldtop) {$/;"	f	typeref:typename:void
luaD_throw	deps/lua/src/ldo.c	/^void luaD_throw (lua_State *L, int errcode) {$/;"	f	typeref:typename:void
luaE_freethread	deps/lua/src/lstate.c	/^void luaE_freethread (lua_State *L, lua_State *L1) {$/;"	f	typeref:typename:void
luaE_newthread	deps/lua/src/lstate.c	/^lua_State *luaE_newthread (lua_State *L) {$/;"	f	typeref:typename:lua_State *
luaF_close	deps/lua/src/lfunc.c	/^void luaF_close (lua_State *L, StkId level) {$/;"	f	typeref:typename:void
luaF_findupval	deps/lua/src/lfunc.c	/^UpVal *luaF_findupval (lua_State *L, StkId level) {$/;"	f	typeref:typename:UpVal *
luaF_freeclosure	deps/lua/src/lfunc.c	/^void luaF_freeclosure (lua_State *L, Closure *c) {$/;"	f	typeref:typename:void
luaF_freeproto	deps/lua/src/lfunc.c	/^void luaF_freeproto (lua_State *L, Proto *f) {$/;"	f	typeref:typename:void
luaF_freeupval	deps/lua/src/lfunc.c	/^void luaF_freeupval (lua_State *L, UpVal *uv) {$/;"	f	typeref:typename:void
luaF_getlocalname	deps/lua/src/lfunc.c	/^const char *luaF_getlocalname (const Proto *f, int local_number, int pc) {$/;"	f	typeref:typename:const char *
luaF_newCclosure	deps/lua/src/lfunc.c	/^Closure *luaF_newCclosure (lua_State *L, int nelems, Table *e) {$/;"	f	typeref:typename:Closure *
luaF_newLclosure	deps/lua/src/lfunc.c	/^Closure *luaF_newLclosure (lua_State *L, int nelems, Table *e) {$/;"	f	typeref:typename:Closure *
luaF_newproto	deps/lua/src/lfunc.c	/^Proto *luaF_newproto (lua_State *L) {$/;"	f	typeref:typename:Proto *
luaF_newupval	deps/lua/src/lfunc.c	/^UpVal *luaF_newupval (lua_State *L) {$/;"	f	typeref:typename:UpVal *
luaG_aritherror	deps/lua/src/ldebug.c	/^void luaG_aritherror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f	typeref:typename:void
luaG_checkcode	deps/lua/src/ldebug.c	/^int luaG_checkcode (const Proto *pt) {$/;"	f	typeref:typename:int
luaG_checkopenop	deps/lua/src/ldebug.c	/^int luaG_checkopenop (Instruction i) {$/;"	f	typeref:typename:int
luaG_concaterror	deps/lua/src/ldebug.c	/^void luaG_concaterror (lua_State *L, StkId p1, StkId p2) {$/;"	f	typeref:typename:void
luaG_errormsg	deps/lua/src/ldebug.c	/^void luaG_errormsg (lua_State *L) {$/;"	f	typeref:typename:void
luaG_ordererror	deps/lua/src/ldebug.c	/^int luaG_ordererror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f	typeref:typename:int
luaG_runerror	deps/lua/src/ldebug.c	/^void luaG_runerror (lua_State *L, const char *fmt, ...) {$/;"	f	typeref:typename:void
luaG_typeerror	deps/lua/src/ldebug.c	/^void luaG_typeerror (lua_State *L, const TValue *o, const char *op) {$/;"	f	typeref:typename:void
luaH_free	deps/lua/src/ltable.c	/^void luaH_free (lua_State *L, Table *t) {$/;"	f	typeref:typename:void
luaH_get	deps/lua/src/ltable.c	/^const TValue *luaH_get (Table *t, const TValue *key) {$/;"	f	typeref:typename:const TValue *
luaH_getn	deps/lua/src/ltable.c	/^int luaH_getn (Table *t) {$/;"	f	typeref:typename:int
luaH_getnum	deps/lua/src/ltable.c	/^const TValue *luaH_getnum (Table *t, int key) {$/;"	f	typeref:typename:const TValue *
luaH_getstr	deps/lua/src/ltable.c	/^const TValue *luaH_getstr (Table *t, TString *key) {$/;"	f	typeref:typename:const TValue *
luaH_isdummy	deps/lua/src/ltable.c	/^int luaH_isdummy (Node *n) { return n == dummynode; }$/;"	f	typeref:typename:int
luaH_mainposition	deps/lua/src/ltable.c	/^Node *luaH_mainposition (const Table *t, const TValue *key) {$/;"	f	typeref:typename:Node *
luaH_new	deps/lua/src/ltable.c	/^Table *luaH_new (lua_State *L, int narray, int nhash) {$/;"	f	typeref:typename:Table *
luaH_next	deps/lua/src/ltable.c	/^int luaH_next (lua_State *L, Table *t, StkId key) {$/;"	f	typeref:typename:int
luaH_resizearray	deps/lua/src/ltable.c	/^void luaH_resizearray (lua_State *L, Table *t, int nasize) {$/;"	f	typeref:typename:void
luaH_set	deps/lua/src/ltable.c	/^TValue *luaH_set (lua_State *L, Table *t, const TValue *key) {$/;"	f	typeref:typename:TValue *
luaH_setnum	deps/lua/src/ltable.c	/^TValue *luaH_setnum (lua_State *L, Table *t, int key) {$/;"	f	typeref:typename:TValue *
luaH_setstr	deps/lua/src/ltable.c	/^TValue *luaH_setstr (lua_State *L, Table *t, TString *key) {$/;"	f	typeref:typename:TValue *
luaI_openlib	deps/lua/src/lauxlib.c	/^LUALIB_API void luaI_openlib (lua_State *L, const char *libname,$/;"	f	typeref:typename:LUALIB_API void
luaI_openlib	deps/lua/src/lauxlib.h	/^#define luaI_openlib	/;"	d
luaI_openlib	deps/lua/src/lauxlib.h	/^LUALIB_API void (luaI_openlib) (lua_State *L, const char *libname,$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,const char * libname,const luaL_Reg * l,int nup)
luaK_checkstack	deps/lua/src/lcode.c	/^void luaK_checkstack (FuncState *fs, int n) {$/;"	f	typeref:typename:void
luaK_code	deps/lua/src/lcode.c	/^static int luaK_code (FuncState *fs, Instruction i, int line) {$/;"	f	typeref:typename:int	file:
luaK_codeABC	deps/lua/src/lcode.c	/^int luaK_codeABC (FuncState *fs, OpCode o, int a, int b, int c) {$/;"	f	typeref:typename:int
luaK_codeABx	deps/lua/src/lcode.c	/^int luaK_codeABx (FuncState *fs, OpCode o, int a, unsigned int bc) {$/;"	f	typeref:typename:int
luaK_codeAsBx	deps/lua/src/lcode.h	/^#define luaK_codeAsBx(/;"	d
luaK_concat	deps/lua/src/lcode.c	/^void luaK_concat (FuncState *fs, int *l1, int l2) {$/;"	f	typeref:typename:void
luaK_dischargevars	deps/lua/src/lcode.c	/^void luaK_dischargevars (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_exp2RK	deps/lua/src/lcode.c	/^int luaK_exp2RK (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:int
luaK_exp2anyreg	deps/lua/src/lcode.c	/^int luaK_exp2anyreg (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:int
luaK_exp2nextreg	deps/lua/src/lcode.c	/^void luaK_exp2nextreg (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_exp2val	deps/lua/src/lcode.c	/^void luaK_exp2val (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_fixline	deps/lua/src/lcode.c	/^void luaK_fixline (FuncState *fs, int line) {$/;"	f	typeref:typename:void
luaK_getlabel	deps/lua/src/lcode.c	/^int luaK_getlabel (FuncState *fs) {$/;"	f	typeref:typename:int
luaK_goiffalse	deps/lua/src/lcode.c	/^static void luaK_goiffalse (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void	file:
luaK_goiftrue	deps/lua/src/lcode.c	/^void luaK_goiftrue (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_indexed	deps/lua/src/lcode.c	/^void luaK_indexed (FuncState *fs, expdesc *t, expdesc *k) {$/;"	f	typeref:typename:void
luaK_infix	deps/lua/src/lcode.c	/^void luaK_infix (FuncState *fs, BinOpr op, expdesc *v) {$/;"	f	typeref:typename:void
luaK_jump	deps/lua/src/lcode.c	/^int luaK_jump (FuncState *fs) {$/;"	f	typeref:typename:int
luaK_nil	deps/lua/src/lcode.c	/^void luaK_nil (FuncState *fs, int from, int n) {$/;"	f	typeref:typename:void
luaK_numberK	deps/lua/src/lcode.c	/^int luaK_numberK (FuncState *fs, lua_Number r) {$/;"	f	typeref:typename:int
luaK_patchlist	deps/lua/src/lcode.c	/^void luaK_patchlist (FuncState *fs, int list, int target) {$/;"	f	typeref:typename:void
luaK_patchtohere	deps/lua/src/lcode.c	/^void luaK_patchtohere (FuncState *fs, int list) {$/;"	f	typeref:typename:void
luaK_posfix	deps/lua/src/lcode.c	/^void luaK_posfix (FuncState *fs, BinOpr op, expdesc *e1, expdesc *e2) {$/;"	f	typeref:typename:void
luaK_prefix	deps/lua/src/lcode.c	/^void luaK_prefix (FuncState *fs, UnOpr op, expdesc *e) {$/;"	f	typeref:typename:void
luaK_reserveregs	deps/lua/src/lcode.c	/^void luaK_reserveregs (FuncState *fs, int n) {$/;"	f	typeref:typename:void
luaK_ret	deps/lua/src/lcode.c	/^void luaK_ret (FuncState *fs, int first, int nret) {$/;"	f	typeref:typename:void
luaK_self	deps/lua/src/lcode.c	/^void luaK_self (FuncState *fs, expdesc *e, expdesc *key) {$/;"	f	typeref:typename:void
luaK_setlist	deps/lua/src/lcode.c	/^void luaK_setlist (FuncState *fs, int base, int nelems, int tostore) {$/;"	f	typeref:typename:void
luaK_setmultret	deps/lua/src/lcode.h	/^#define luaK_setmultret(/;"	d
luaK_setoneret	deps/lua/src/lcode.c	/^void luaK_setoneret (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_setreturns	deps/lua/src/lcode.c	/^void luaK_setreturns (FuncState *fs, expdesc *e, int nresults) {$/;"	f	typeref:typename:void
luaK_storevar	deps/lua/src/lcode.c	/^void luaK_storevar (FuncState *fs, expdesc *var, expdesc *ex) {$/;"	f	typeref:typename:void
luaK_stringK	deps/lua/src/lcode.c	/^int luaK_stringK (FuncState *fs, TString *s) {$/;"	f	typeref:typename:int
luaL_Buffer	deps/lua/src/lauxlib.h	/^typedef struct luaL_Buffer {$/;"	s
luaL_Buffer	deps/lua/src/lauxlib.h	/^} luaL_Buffer;$/;"	t	typeref:struct:luaL_Buffer
luaL_Reg	deps/lua/src/lauxlib.h	/^typedef struct luaL_Reg {$/;"	s
luaL_Reg	deps/lua/src/lauxlib.h	/^} luaL_Reg;$/;"	t	typeref:struct:luaL_Reg
luaL_addchar	deps/lua/src/lauxlib.h	/^#define luaL_addchar(/;"	d
luaL_addlstring	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l) {$/;"	f	typeref:typename:LUALIB_API void
luaL_addlstring	deps/lua/src/lauxlib.h	/^LUALIB_API void (luaL_addlstring) (luaL_Buffer *B, const char *s, size_t l);$/;"	v	typeref:typename:LUALIB_API void ()(luaL_Buffer * B,const char * s,size_t l)
luaL_addsize	deps/lua/src/lauxlib.h	/^#define luaL_addsize(/;"	d
luaL_addstring	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_addstring (luaL_Buffer *B, const char *s) {$/;"	f	typeref:typename:LUALIB_API void
luaL_addstring	deps/lua/src/lauxlib.h	/^LUALIB_API void (luaL_addstring) (luaL_Buffer *B, const char *s);$/;"	v	typeref:typename:LUALIB_API void ()(luaL_Buffer * B,const char * s)
luaL_addvalue	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_addvalue (luaL_Buffer *B) {$/;"	f	typeref:typename:LUALIB_API void
luaL_addvalue	deps/lua/src/lauxlib.h	/^LUALIB_API void (luaL_addvalue) (luaL_Buffer *B);$/;"	v	typeref:typename:LUALIB_API void ()(luaL_Buffer * B)
luaL_argcheck	deps/lua/src/lauxlib.h	/^#define luaL_argcheck(/;"	d
luaL_argerror	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_argerror (lua_State *L, int narg, const char *extramsg) {$/;"	f	typeref:typename:LUALIB_API int
luaL_argerror	deps/lua/src/lauxlib.h	/^LUALIB_API int (luaL_argerror) (lua_State *L, int numarg, const char *extramsg);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int numarg,const char * extramsg)
luaL_buffinit	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_buffinit (lua_State *L, luaL_Buffer *B) {$/;"	f	typeref:typename:LUALIB_API void
luaL_buffinit	deps/lua/src/lauxlib.h	/^LUALIB_API void (luaL_buffinit) (lua_State *L, luaL_Buffer *B);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,luaL_Buffer * B)
luaL_callmeta	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_callmeta (lua_State *L, int obj, const char *event) {$/;"	f	typeref:typename:LUALIB_API int
luaL_callmeta	deps/lua/src/lauxlib.h	/^LUALIB_API int (luaL_callmeta) (lua_State *L, int obj, const char *e);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int obj,const char * e)
luaL_checkany	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_checkany (lua_State *L, int narg) {$/;"	f	typeref:typename:LUALIB_API void
luaL_checkany	deps/lua/src/lauxlib.h	/^LUALIB_API void (luaL_checkany) (lua_State *L, int narg);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,int narg)
luaL_checkint	deps/lua/src/lauxlib.h	/^#define luaL_checkint(/;"	d
luaL_checkinteger	deps/lua/src/lauxlib.c	/^LUALIB_API lua_Integer luaL_checkinteger (lua_State *L, int narg) {$/;"	f	typeref:typename:LUALIB_API lua_Integer
luaL_checklong	deps/lua/src/lauxlib.h	/^#define luaL_checklong(/;"	d
luaL_checklstring	deps/lua/src/lauxlib.c	/^LUALIB_API const char *luaL_checklstring (lua_State *L, int narg, size_t *len) {$/;"	f	typeref:typename:LUALIB_API const char *
luaL_checklstring	deps/lua/src/lauxlib.h	/^LUALIB_API const char *(luaL_checklstring) (lua_State *L, int numArg,$/;"	v	typeref:typename:LUALIB_API const char * ()(lua_State * L,int numArg,size_t * l)
luaL_checknumber	deps/lua/src/lauxlib.c	/^LUALIB_API lua_Number luaL_checknumber (lua_State *L, int narg) {$/;"	f	typeref:typename:LUALIB_API lua_Number
luaL_checkoption	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_checkoption (lua_State *L, int narg, const char *def,$/;"	f	typeref:typename:LUALIB_API int
luaL_checkoption	deps/lua/src/lauxlib.h	/^LUALIB_API int (luaL_checkoption) (lua_State *L, int narg, const char *def,$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int narg,const char * def,const char * const lst[])
luaL_checkstack	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_checkstack (lua_State *L, int space, const char *mes) {$/;"	f	typeref:typename:LUALIB_API void
luaL_checkstack	deps/lua/src/lauxlib.h	/^LUALIB_API void (luaL_checkstack) (lua_State *L, int sz, const char *msg);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,int sz,const char * msg)
luaL_checkstring	deps/lua/src/lauxlib.h	/^#define luaL_checkstring(/;"	d
luaL_checktype	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_checktype (lua_State *L, int narg, int t) {$/;"	f	typeref:typename:LUALIB_API void
luaL_checktype	deps/lua/src/lauxlib.h	/^LUALIB_API void (luaL_checktype) (lua_State *L, int narg, int t);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,int narg,int t)
luaL_checkudata	deps/lua/src/lauxlib.c	/^LUALIB_API void *luaL_checkudata (lua_State *L, int ud, const char *tname) {$/;"	f	typeref:typename:LUALIB_API void *
luaL_checkudata	deps/lua/src/lauxlib.h	/^LUALIB_API void *(luaL_checkudata) (lua_State *L, int ud, const char *tname);$/;"	v	typeref:typename:LUALIB_API void * ()(lua_State * L,int ud,const char * tname)
luaL_dofile	deps/lua/src/lauxlib.h	/^#define luaL_dofile(/;"	d
luaL_dostring	deps/lua/src/lauxlib.h	/^#define luaL_dostring(/;"	d
luaL_error	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_error (lua_State *L, const char *fmt, ...) {$/;"	f	typeref:typename:LUALIB_API int
luaL_error	deps/lua/src/lauxlib.h	/^LUALIB_API int (luaL_error) (lua_State *L, const char *fmt, ...);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,const char * fmt,...)
luaL_findtable	deps/lua/src/lauxlib.c	/^LUALIB_API const char *luaL_findtable (lua_State *L, int idx,$/;"	f	typeref:typename:LUALIB_API const char *
luaL_findtable	deps/lua/src/lauxlib.h	/^LUALIB_API const char *(luaL_findtable) (lua_State *L, int idx,$/;"	v	typeref:typename:LUALIB_API const char * ()(lua_State * L,int idx,const char * fname,int szhint)
luaL_getmetafield	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_getmetafield (lua_State *L, int obj, const char *event) {$/;"	f	typeref:typename:LUALIB_API int
luaL_getmetafield	deps/lua/src/lauxlib.h	/^LUALIB_API int (luaL_getmetafield) (lua_State *L, int obj, const char *e);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int obj,const char * e)
luaL_getmetatable	deps/lua/src/lauxlib.h	/^#define luaL_getmetatable(/;"	d
luaL_getn	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_getn (lua_State *L, int t) {$/;"	f	typeref:typename:LUALIB_API int
luaL_getn	deps/lua/src/lauxlib.h	/^#define luaL_getn(/;"	d
luaL_getn	deps/lua/src/lauxlib.h	/^LUALIB_API int (luaL_getn) (lua_State *L, int t);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int t)
luaL_gsub	deps/lua/src/lauxlib.c	/^LUALIB_API const char *luaL_gsub (lua_State *L, const char *s, const char *p,$/;"	f	typeref:typename:LUALIB_API const char *
luaL_gsub	deps/lua/src/lauxlib.h	/^LUALIB_API const char *(luaL_gsub) (lua_State *L, const char *s, const char *p,$/;"	v	typeref:typename:LUALIB_API const char * ()(lua_State * L,const char * s,const char * p,const char * r)
luaL_loadbuffer	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_loadbuffer (lua_State *L, const char *buff, size_t size,$/;"	f	typeref:typename:LUALIB_API int
luaL_loadbuffer	deps/lua/src/lauxlib.h	/^LUALIB_API int (luaL_loadbuffer) (lua_State *L, const char *buff, size_t sz,$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,const char * buff,size_t sz,const char * name)
luaL_loadfile	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_loadfile (lua_State *L, const char *filename) {$/;"	f	typeref:typename:LUALIB_API int
luaL_loadfile	deps/lua/src/lauxlib.h	/^LUALIB_API int (luaL_loadfile) (lua_State *L, const char *filename);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,const char * filename)
luaL_loadstring	deps/lua/src/lauxlib.h	/^LUALIB_API int (luaL_loadstring) (lua_State *L, const char *s);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,const char * s)
luaL_newmetatable	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_newmetatable (lua_State *L, const char *tname) {$/;"	f	typeref:typename:LUALIB_API int
luaL_newmetatable	deps/lua/src/lauxlib.h	/^LUALIB_API int   (luaL_newmetatable) (lua_State *L, const char *tname);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,const char * tname)
luaL_newstate	deps/lua/src/lauxlib.c	/^LUALIB_API lua_State *luaL_newstate (void) {$/;"	f	typeref:typename:LUALIB_API lua_State *
luaL_newstate	deps/lua/src/lauxlib.h	/^LUALIB_API lua_State *(luaL_newstate) (void);$/;"	v	typeref:typename:LUALIB_API lua_State * ()(void)
luaL_openlibs	deps/lua/src/linit.c	/^LUALIB_API void luaL_openlibs (lua_State *L) {$/;"	f	typeref:typename:LUALIB_API void
luaL_openlibs	deps/lua/src/lualib.h	/^LUALIB_API void (luaL_openlibs) (lua_State *L); $/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L)
luaL_opt	deps/lua/src/lauxlib.h	/^#define luaL_opt(/;"	d
luaL_optint	deps/lua/src/lauxlib.h	/^#define luaL_optint(/;"	d
luaL_optinteger	deps/lua/src/lauxlib.c	/^LUALIB_API lua_Integer luaL_optinteger (lua_State *L, int narg,$/;"	f	typeref:typename:LUALIB_API lua_Integer
luaL_optlong	deps/lua/src/lauxlib.h	/^#define luaL_optlong(/;"	d
luaL_optlstring	deps/lua/src/lauxlib.c	/^LUALIB_API const char *luaL_optlstring (lua_State *L, int narg,$/;"	f	typeref:typename:LUALIB_API const char *
luaL_optlstring	deps/lua/src/lauxlib.h	/^LUALIB_API const char *(luaL_optlstring) (lua_State *L, int numArg,$/;"	v	typeref:typename:LUALIB_API const char * ()(lua_State * L,int numArg,const char * def,size_t * l)
luaL_optnumber	deps/lua/src/lauxlib.c	/^LUALIB_API lua_Number luaL_optnumber (lua_State *L, int narg, lua_Number def) {$/;"	f	typeref:typename:LUALIB_API lua_Number
luaL_optstring	deps/lua/src/lauxlib.h	/^#define luaL_optstring(/;"	d
luaL_prepbuffer	deps/lua/src/lauxlib.c	/^LUALIB_API char *luaL_prepbuffer (luaL_Buffer *B) {$/;"	f	typeref:typename:LUALIB_API char *
luaL_prepbuffer	deps/lua/src/lauxlib.h	/^LUALIB_API char *(luaL_prepbuffer) (luaL_Buffer *B);$/;"	v	typeref:typename:LUALIB_API char * ()(luaL_Buffer * B)
luaL_pushresult	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_pushresult (luaL_Buffer *B) {$/;"	f	typeref:typename:LUALIB_API void
luaL_pushresult	deps/lua/src/lauxlib.h	/^LUALIB_API void (luaL_pushresult) (luaL_Buffer *B);$/;"	v	typeref:typename:LUALIB_API void ()(luaL_Buffer * B)
luaL_putchar	deps/lua/src/lauxlib.h	/^#define luaL_putchar(/;"	d
luaL_ref	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_ref (lua_State *L, int t) {$/;"	f	typeref:typename:LUALIB_API int
luaL_ref	deps/lua/src/lauxlib.h	/^LUALIB_API int (luaL_ref) (lua_State *L, int t);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int t)
luaL_reg	deps/lua/src/lauxlib.h	/^#define luaL_reg	/;"	d
luaL_register	deps/lua/src/lauxlib.h	/^LUALIB_API void (luaL_register) (lua_State *L, const char *libname,$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,const char * libname,const luaL_Reg * l)
luaL_register	deps/lua/src/lua_struct.c	/^#define luaL_register(/;"	d	file:
luaL_setfuncs	deps/lua/src/lua_cjson.c	/^static void luaL_setfuncs (lua_State *l, const luaL_Reg *reg, int nup)$/;"	f	typeref:typename:void	file:
luaL_setn	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_setn (lua_State *L, int t, int n) {$/;"	f	typeref:typename:LUALIB_API void
luaL_setn	deps/lua/src/lauxlib.h	/^#define luaL_setn(/;"	d
luaL_setn	deps/lua/src/lauxlib.h	/^LUALIB_API void (luaL_setn) (lua_State *L, int t, int n);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,int t,int n)
luaL_typename	deps/lua/src/lauxlib.h	/^#define luaL_typename(/;"	d
luaL_typerror	deps/lua/src/lauxlib.c	/^LUALIB_API int luaL_typerror (lua_State *L, int narg, const char *tname) {$/;"	f	typeref:typename:LUALIB_API int
luaL_typerror	deps/lua/src/lauxlib.h	/^LUALIB_API int (luaL_typerror) (lua_State *L, int narg, const char *tname);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int narg,const char * tname)
luaL_unref	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_unref (lua_State *L, int t, int ref) {$/;"	f	typeref:typename:LUALIB_API void
luaL_unref	deps/lua/src/lauxlib.h	/^LUALIB_API void (luaL_unref) (lua_State *L, int t, int ref);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,int t,int ref)
luaL_where	deps/lua/src/lauxlib.c	/^LUALIB_API void luaL_where (lua_State *L, int level) {$/;"	f	typeref:typename:LUALIB_API void
luaL_where	deps/lua/src/lauxlib.h	/^LUALIB_API void (luaL_where) (lua_State *L, int lvl);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,int lvl)
luaLdbLineHook	src/scripting.c	/^void luaLdbLineHook(lua_State *lua, lua_Debug *ar) {$/;"	f	typeref:typename:void
luaLoadLib	src/scripting.c	/^void luaLoadLib(lua_State *lua, const char *libname, lua_CFunction luafunc) {$/;"	f	typeref:typename:void
luaLoadLibraries	src/scripting.c	/^void luaLoadLibraries(lua_State *lua) {$/;"	f	typeref:typename:void
luaLogCommand	src/scripting.c	/^int luaLogCommand(lua_State *lua) {$/;"	f	typeref:typename:int
luaM_free	deps/lua/src/lmem.h	/^#define luaM_free(/;"	d
luaM_freearray	deps/lua/src/lmem.h	/^#define luaM_freearray(/;"	d
luaM_freemem	deps/lua/src/lmem.h	/^#define luaM_freemem(/;"	d
luaM_growaux_	deps/lua/src/lmem.c	/^void *luaM_growaux_ (lua_State *L, void *block, int *size, size_t size_elems,$/;"	f	typeref:typename:void *
luaM_growvector	deps/lua/src/lmem.h	/^#define luaM_growvector(/;"	d
luaM_malloc	deps/lua/src/lmem.h	/^#define luaM_malloc(/;"	d
luaM_new	deps/lua/src/lmem.h	/^#define luaM_new(/;"	d
luaM_newvector	deps/lua/src/lmem.h	/^#define luaM_newvector(/;"	d
luaM_realloc_	deps/lua/src/lmem.c	/^void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {$/;"	f	typeref:typename:void *
luaM_reallocv	deps/lua/src/lmem.h	/^#define luaM_reallocv(/;"	d
luaM_reallocvector	deps/lua/src/lmem.h	/^#define luaM_reallocvector(/;"	d
luaM_toobig	deps/lua/src/lmem.c	/^void *luaM_toobig (lua_State *L) {$/;"	f	typeref:typename:void *
luaMaskCountHook	src/scripting.c	/^void luaMaskCountHook(lua_State *lua, lua_Debug *ar) {$/;"	f	typeref:typename:void
luaO_chunkid	deps/lua/src/lobject.c	/^void luaO_chunkid (char *out, const char *source, size_t bufflen) {$/;"	f	typeref:typename:void
luaO_fb2int	deps/lua/src/lobject.c	/^int luaO_fb2int (int x) {$/;"	f	typeref:typename:int
luaO_int2fb	deps/lua/src/lobject.c	/^int luaO_int2fb (unsigned int x) {$/;"	f	typeref:typename:int
luaO_log2	deps/lua/src/lobject.c	/^int luaO_log2 (unsigned int x) {$/;"	f	typeref:typename:int
luaO_nilobject	deps/lua/src/lobject.h	/^#define luaO_nilobject	/;"	d
luaO_nilobject_	deps/lua/src/lobject.c	/^const TValue luaO_nilobject_ = {{NULL}, LUA_TNIL};$/;"	v	typeref:typename:const TValue
luaO_nilobject_	deps/lua/src/lobject.h	/^LUAI_DATA const TValue luaO_nilobject_;$/;"	v	typeref:typename:LUAI_DATA const TValue
luaO_pushfstring	deps/lua/src/lobject.c	/^const char *luaO_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f	typeref:typename:const char *
luaO_pushvfstring	deps/lua/src/lobject.c	/^const char *luaO_pushvfstring (lua_State *L, const char *fmt, va_list argp) {$/;"	f	typeref:typename:const char *
luaO_rawequalObj	deps/lua/src/lobject.c	/^int luaO_rawequalObj (const TValue *t1, const TValue *t2) {$/;"	f	typeref:typename:int
luaO_str2d	deps/lua/src/lobject.c	/^int luaO_str2d (const char *s, lua_Number *result) {$/;"	f	typeref:typename:int
luaP_opmodes	deps/lua/src/lopcodes.c	/^const lu_byte luaP_opmodes[NUM_OPCODES] = {$/;"	v	typeref:typename:const lu_byte[]
luaP_opmodes	deps/lua/src/lopcodes.h	/^LUAI_DATA const lu_byte luaP_opmodes[NUM_OPCODES];$/;"	v	typeref:typename:LUAI_DATA const lu_byte[]
luaP_opnames	deps/lua/src/lopcodes.c	/^const char *const luaP_opnames[NUM_OPCODES+1] = {$/;"	v	typeref:typename:const char * const[]
luaP_opnames	deps/lua/src/lopcodes.h	/^LUAI_DATA const char *const luaP_opnames[NUM_OPCODES+1];  \/* opcode names *\/$/;"	v	typeref:typename:LUAI_DATA const char * const[]
luaPushError	src/scripting.c	/^void luaPushError(lua_State *lua, char *error) {$/;"	f	typeref:typename:void
luaRaiseError	src/scripting.c	/^int luaRaiseError(lua_State *lua) {$/;"	f	typeref:typename:int
luaRedisBreakpointCommand	src/scripting.c	/^int luaRedisBreakpointCommand(lua_State *lua) {$/;"	f	typeref:typename:int
luaRedisCallCommand	src/scripting.c	/^int luaRedisCallCommand(lua_State *lua) {$/;"	f	typeref:typename:int
luaRedisDebugCommand	src/scripting.c	/^int luaRedisDebugCommand(lua_State *lua) {$/;"	f	typeref:typename:int
luaRedisErrorReplyCommand	src/scripting.c	/^int luaRedisErrorReplyCommand(lua_State *lua) {$/;"	f	typeref:typename:int
luaRedisGenericCommand	src/scripting.c	/^int luaRedisGenericCommand(lua_State *lua, int raise_error) {$/;"	f	typeref:typename:int
luaRedisPCallCommand	src/scripting.c	/^int luaRedisPCallCommand(lua_State *lua) {$/;"	f	typeref:typename:int
luaRedisReplicateCommandsCommand	src/scripting.c	/^int luaRedisReplicateCommandsCommand(lua_State *lua) {$/;"	f	typeref:typename:int
luaRedisReturnSingleFieldTable	src/scripting.c	/^int luaRedisReturnSingleFieldTable(lua_State *lua, char *field) {$/;"	f	typeref:typename:int
luaRedisSetReplCommand	src/scripting.c	/^int luaRedisSetReplCommand(lua_State *lua) {$/;"	f	typeref:typename:int
luaRedisSha1hexCommand	src/scripting.c	/^int luaRedisSha1hexCommand(lua_State *lua) {$/;"	f	typeref:typename:int
luaRedisStatusReplyCommand	src/scripting.c	/^int luaRedisStatusReplyCommand(lua_State *lua) {$/;"	f	typeref:typename:int
luaRemoveUnsupportedFunctions	src/scripting.c	/^void luaRemoveUnsupportedFunctions(lua_State *lua) {$/;"	f	typeref:typename:void
luaReplyToRedisReply	src/scripting.c	/^void luaReplyToRedisReply(client *c, lua_State *lua) {$/;"	f	typeref:typename:void
luaS_fix	deps/lua/src/lstring.h	/^#define luaS_fix(/;"	d
luaS_new	deps/lua/src/lstring.h	/^#define luaS_new(/;"	d
luaS_newliteral	deps/lua/src/lstring.h	/^#define luaS_newliteral(/;"	d
luaS_newlstr	deps/lua/src/lstring.c	/^TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {$/;"	f	typeref:typename:TString *
luaS_newudata	deps/lua/src/lstring.c	/^Udata *luaS_newudata (lua_State *L, size_t s, Table *e) {$/;"	f	typeref:typename:Udata *
luaS_resize	deps/lua/src/lstring.c	/^void luaS_resize (lua_State *L, int newsize) {$/;"	f	typeref:typename:void
luaSetGlobalArray	src/scripting.c	/^void luaSetGlobalArray(lua_State *lua, char *var, robj **elev, int elec) {$/;"	f	typeref:typename:void
luaSetResp	src/scripting.c	/^int luaSetResp(lua_State *lua) {$/;"	f	typeref:typename:int
luaSortArray	src/scripting.c	/^void luaSortArray(lua_State *lua) {$/;"	f	typeref:typename:void
luaT_gettm	deps/lua/src/ltm.c	/^const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {$/;"	f	typeref:typename:const TValue *
luaT_gettmbyobj	deps/lua/src/ltm.c	/^const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o, TMS event) {$/;"	f	typeref:typename:const TValue *
luaT_init	deps/lua/src/ltm.c	/^void luaT_init (lua_State *L) {$/;"	f	typeref:typename:void
luaT_typenames	deps/lua/src/ltm.c	/^const char *const luaT_typenames[] = {$/;"	v	typeref:typename:const char * const[]
luaT_typenames	deps/lua/src/ltm.h	/^LUAI_DATA const char *const luaT_typenames[];$/;"	v	typeref:typename:LUAI_DATA const char * const[]
luaU_dump	deps/lua/etc/noparser.c	/^LUAI_FUNC int luaU_dump (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip) {$/;"	f	typeref:typename:LUAI_FUNC int
luaU_dump	deps/lua/src/ldump.c	/^int luaU_dump (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip)$/;"	f	typeref:typename:int
luaU_header	deps/lua/src/lundump.c	/^void luaU_header (char* h)$/;"	f	typeref:typename:void
luaU_undump	deps/lua/src/lundump.c	/^Proto* luaU_undump (lua_State* L, ZIO* Z, Mbuffer* buff, const char* name)$/;"	f	typeref:typename:Proto *
luaV_concat	deps/lua/src/lvm.c	/^void luaV_concat (lua_State *L, int total, int last) {$/;"	f	typeref:typename:void
luaV_equalval	deps/lua/src/lvm.c	/^int luaV_equalval (lua_State *L, const TValue *t1, const TValue *t2) {$/;"	f	typeref:typename:int
luaV_execute	deps/lua/src/lvm.c	/^void luaV_execute (lua_State *L, int nexeccalls) {$/;"	f	typeref:typename:void
luaV_gettable	deps/lua/src/lvm.c	/^void luaV_gettable (lua_State *L, const TValue *t, TValue *key, StkId val) {$/;"	f	typeref:typename:void
luaV_lessthan	deps/lua/src/lvm.c	/^int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r) {$/;"	f	typeref:typename:int
luaV_settable	deps/lua/src/lvm.c	/^void luaV_settable (lua_State *L, const TValue *t, TValue *key, StkId val) {$/;"	f	typeref:typename:void
luaV_tonumber	deps/lua/src/lvm.c	/^const TValue *luaV_tonumber (const TValue *obj, TValue *n) {$/;"	f	typeref:typename:const TValue *
luaV_tostring	deps/lua/src/lvm.c	/^int luaV_tostring (lua_State *L, StkId obj) {$/;"	f	typeref:typename:int
luaX_init	deps/lua/etc/noparser.c	/^LUAI_FUNC void luaX_init (lua_State *L) {$/;"	f	typeref:typename:LUAI_FUNC void
luaX_init	deps/lua/src/llex.c	/^void luaX_init (lua_State *L) {$/;"	f	typeref:typename:void
luaX_lexerror	deps/lua/src/llex.c	/^void luaX_lexerror (LexState *ls, const char *msg, int token) {$/;"	f	typeref:typename:void
luaX_lookahead	deps/lua/src/llex.c	/^void luaX_lookahead (LexState *ls) {$/;"	f	typeref:typename:void
luaX_newstring	deps/lua/src/llex.c	/^TString *luaX_newstring (LexState *ls, const char *str, size_t l) {$/;"	f	typeref:typename:TString *
luaX_next	deps/lua/src/llex.c	/^void luaX_next (LexState *ls) {$/;"	f	typeref:typename:void
luaX_setinput	deps/lua/src/llex.c	/^void luaX_setinput (lua_State *L, LexState *ls, ZIO *z, TString *source) {$/;"	f	typeref:typename:void
luaX_syntaxerror	deps/lua/src/llex.c	/^void luaX_syntaxerror (LexState *ls, const char *msg) {$/;"	f	typeref:typename:void
luaX_token2str	deps/lua/src/llex.c	/^const char *luaX_token2str (LexState *ls, int token) {$/;"	f	typeref:typename:const char *
luaX_tokens	deps/lua/src/llex.c	/^const char *const luaX_tokens [] = {$/;"	v	typeref:typename:const char * const[]
luaX_tokens	deps/lua/src/llex.h	/^LUAI_DATA const char *const luaX_tokens [];$/;"	v	typeref:typename:LUAI_DATA const char * const[]
luaY_checklimit	deps/lua/src/lparser.c	/^#define luaY_checklimit(/;"	d	file:
luaY_parser	deps/lua/etc/noparser.c	/^LUAI_FUNC Proto *luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff, const char *name) {$/;"	f	typeref:typename:LUAI_FUNC Proto *
luaY_parser	deps/lua/src/lparser.c	/^Proto *luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff, const char *name) {$/;"	f	typeref:typename:Proto *
luaZ_buffer	deps/lua/src/lzio.h	/^#define luaZ_buffer(/;"	d
luaZ_bufflen	deps/lua/src/lzio.h	/^#define luaZ_bufflen(/;"	d
luaZ_fill	deps/lua/src/lzio.c	/^int luaZ_fill (ZIO *z) {$/;"	f	typeref:typename:int
luaZ_freebuffer	deps/lua/src/lzio.h	/^#define luaZ_freebuffer(/;"	d
luaZ_init	deps/lua/src/lzio.c	/^void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader, void *data) {$/;"	f	typeref:typename:void
luaZ_initbuffer	deps/lua/src/lzio.h	/^#define luaZ_initbuffer(/;"	d
luaZ_lookahead	deps/lua/src/lzio.c	/^int luaZ_lookahead (ZIO *z) {$/;"	f	typeref:typename:int
luaZ_openspace	deps/lua/src/lzio.c	/^char *luaZ_openspace (lua_State *L, Mbuffer *buff, size_t n) {$/;"	f	typeref:typename:char *
luaZ_read	deps/lua/src/lzio.c	/^size_t luaZ_read (ZIO *z, void *b, size_t n) {$/;"	f	typeref:typename:size_t
luaZ_resetbuffer	deps/lua/src/lzio.h	/^#define luaZ_resetbuffer(/;"	d
luaZ_resizebuffer	deps/lua/src/lzio.h	/^#define luaZ_resizebuffer(/;"	d
luaZ_sizebuffer	deps/lua/src/lzio.h	/^#define luaZ_sizebuffer(/;"	d
lua_Alloc	deps/lua/src/lua.h	/^typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);$/;"	t	typeref:typename:void * (*)(void * ud,void * ptr,size_t osize,size_t nsize)
lua_CFunction	deps/lua/src/lua.h	/^typedef int (*lua_CFunction) (lua_State *L);$/;"	t	typeref:typename:int (*)(lua_State * L)
lua_Chunkreader	deps/lua/src/lua.h	/^#define lua_Chunkreader	/;"	d
lua_Chunkwriter	deps/lua/src/lua.h	/^#define lua_Chunkwriter	/;"	d
lua_Debug	deps/lua/src/lua.h	/^struct lua_Debug {$/;"	s
lua_Debug	deps/lua/src/lua.h	/^typedef struct lua_Debug lua_Debug;  \/* activation record *\/$/;"	t	typeref:struct:lua_Debug
lua_Hook	deps/lua/src/lua.h	/^typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);$/;"	t	typeref:typename:void (*)(lua_State * L,lua_Debug * ar)
lua_Integer	deps/lua/src/lua.h	/^typedef LUA_INTEGER lua_Integer;$/;"	t	typeref:typename:LUA_INTEGER
lua_Number	deps/lua/src/lua.h	/^typedef LUA_NUMBER lua_Number;$/;"	t	typeref:typename:LUA_NUMBER
lua_Reader	deps/lua/src/lua.h	/^typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);$/;"	t	typeref:typename:const char * (*)(lua_State * L,void * ud,size_t * sz)
lua_State	deps/lua/src/lstate.h	/^struct lua_State {$/;"	s
lua_State	deps/lua/src/lua.h	/^typedef struct lua_State lua_State;$/;"	t	typeref:struct:lua_State
lua_TValue	deps/lua/src/lobject.h	/^typedef struct lua_TValue {$/;"	s
lua_Writer	deps/lua/src/lua.h	/^typedef int (*lua_Writer) (lua_State *L, const void* p, size_t sz, void* ud);$/;"	t	typeref:typename:int (*)(lua_State * L,const void * p,size_t sz,void * ud)
lua_always_replicate_commands	src/server.h	/^    int lua_always_replicate_commands; \/* Default replication type. *\/$/;"	m	struct:redisServer	typeref:typename:int
lua_array_length	deps/lua/src/lua_cjson.c	/^static int lua_array_length(lua_State *l, json_config_t *cfg, strbuf_t *json)$/;"	f	typeref:typename:int	file:
lua_assert	deps/lua/src/llimits.h	/^#define lua_assert(/;"	d
lua_assert	deps/lua/src/lualib.h	/^#define lua_assert(/;"	d
lua_atpanic	deps/lua/src/lapi.c	/^LUA_API lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf) {$/;"	f	typeref:typename:LUA_API lua_CFunction
lua_c	deps/lua/src/lua.c	/^#define lua_c$/;"	d	file:
lua_caches	src/server.h	/^    size_t lua_caches;$/;"	m	struct:redisMemOverhead	typeref:typename:size_t
lua_call	deps/lua/src/lapi.c	/^LUA_API void lua_call (lua_State *L, int nargs, int nresults) {$/;"	f	typeref:typename:LUA_API void
lua_call	deps/lua/src/lua.h	/^LUA_API void  (lua_call) (lua_State *L, int nargs, int nresults);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int nargs,int nresults)
lua_caller	src/server.h	/^    client *lua_caller;   \/* The client running EVAL right now, or NULL *\/$/;"	m	struct:redisServer	typeref:typename:client *
lua_checkstack	deps/lua/src/lapi.c	/^LUA_API int lua_checkstack (lua_State *L, int size) {$/;"	f	typeref:typename:LUA_API int
lua_checkstack	deps/lua/src/lua.h	/^LUA_API int   (lua_checkstack) (lua_State *L, int sz);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int sz)
lua_cjson_new	deps/lua/src/lua_cjson.c	/^static int lua_cjson_new(lua_State *l)$/;"	f	typeref:typename:int	file:
lua_cjson_safe_new	deps/lua/src/lua_cjson.c	/^static int lua_cjson_safe_new(lua_State *l)$/;"	f	typeref:typename:int	file:
lua_client	src/server.h	/^    client *lua_client;   \/* The "fake client" to query Redis from Lua *\/$/;"	m	struct:redisServer	typeref:typename:client *
lua_close	deps/lua/src/lstate.c	/^LUA_API void lua_close (lua_State *L) {$/;"	f	typeref:typename:LUA_API void
lua_close	deps/lua/src/lua.h	/^LUA_API void       (lua_close) (lua_State *L);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L)
lua_concat	deps/lua/src/lapi.c	/^LUA_API void lua_concat (lua_State *L, int n) {$/;"	f	typeref:typename:LUA_API void
lua_concat	deps/lua/src/lua.h	/^LUA_API void  (lua_concat) (lua_State *L, int n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int n)
lua_cpcall	deps/lua/src/lapi.c	/^LUA_API int lua_cpcall (lua_State *L, lua_CFunction func, void *ud) {$/;"	f	typeref:typename:LUA_API int
lua_cpcall	deps/lua/src/lua.h	/^LUA_API int   (lua_cpcall) (lua_State *L, lua_CFunction func, void *ud);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,lua_CFunction func,void * ud)
lua_createtable	deps/lua/src/lapi.c	/^LUA_API void lua_createtable (lua_State *L, int narray, int nrec) {$/;"	f	typeref:typename:LUA_API void
lua_createtable	deps/lua/src/lua.h	/^LUA_API void  (lua_createtable) (lua_State *L, int narr, int nrec);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int narr,int nrec)
lua_cur_script	src/server.h	/^    char* lua_cur_script; \/* SHA1 of the script currently running, or NULL *\/$/;"	m	struct:redisServer	typeref:typename:char *
lua_dump	deps/lua/src/lapi.c	/^LUA_API int lua_dump (lua_State *L, lua_Writer writer, void *data) {$/;"	f	typeref:typename:LUA_API int
lua_dump	deps/lua/src/lua.h	/^LUA_API int (lua_dump) (lua_State *L, lua_Writer writer, void *data);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,lua_Writer writer,void * data)
lua_equal	deps/lua/src/lapi.c	/^LUA_API int lua_equal (lua_State *L, int index1, int index2) {$/;"	f	typeref:typename:LUA_API int
lua_equal	deps/lua/src/lua.h	/^LUA_API int            (lua_equal) (lua_State *L, int idx1, int idx2);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx1,int idx2)
lua_error	deps/lua/src/lapi.c	/^LUA_API int lua_error (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_error	deps/lua/src/lua.h	/^LUA_API int   (lua_error) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_freeline	deps/lua/src/luaconf.h	/^#define lua_freeline(/;"	d
lua_gc	deps/lua/src/lapi.c	/^LUA_API int lua_gc (lua_State *L, int what, int data) {$/;"	f	typeref:typename:LUA_API int
lua_gc	deps/lua/src/lua.h	/^LUA_API int (lua_gc) (lua_State *L, int what, int data);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int what,int data)
lua_getallocf	deps/lua/src/lapi.c	/^LUA_API lua_Alloc lua_getallocf (lua_State *L, void **ud) {$/;"	f	typeref:typename:LUA_API lua_Alloc
lua_getfenv	deps/lua/src/lapi.c	/^LUA_API void lua_getfenv (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_getfenv	deps/lua/src/lua.h	/^LUA_API void  (lua_getfenv) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_getfield	deps/lua/src/lapi.c	/^LUA_API void lua_getfield (lua_State *L, int idx, const char *k) {$/;"	f	typeref:typename:LUA_API void
lua_getfield	deps/lua/src/lua.h	/^LUA_API void  (lua_getfield) (lua_State *L, int idx, const char *k);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx,const char * k)
lua_getgccount	deps/lua/src/lua.h	/^#define lua_getgccount(/;"	d
lua_getglobal	deps/lua/src/lua.h	/^#define lua_getglobal(/;"	d
lua_gethook	deps/lua/src/ldebug.c	/^LUA_API lua_Hook lua_gethook (lua_State *L) {$/;"	f	typeref:typename:LUA_API lua_Hook
lua_gethookcount	deps/lua/src/ldebug.c	/^LUA_API int lua_gethookcount (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_gethookmask	deps/lua/src/ldebug.c	/^LUA_API int lua_gethookmask (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_getinfo	deps/lua/src/ldebug.c	/^LUA_API int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar) {$/;"	f	typeref:typename:LUA_API int
lua_getlocal	deps/lua/src/ldebug.c	/^LUA_API const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f	typeref:typename:LUA_API const char *
lua_getmetatable	deps/lua/src/lapi.c	/^LUA_API int lua_getmetatable (lua_State *L, int objindex) {$/;"	f	typeref:typename:LUA_API int
lua_getmetatable	deps/lua/src/lua.h	/^LUA_API int   (lua_getmetatable) (lua_State *L, int objindex);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int objindex)
lua_getref	deps/lua/src/lauxlib.h	/^#define lua_getref(/;"	d
lua_getregistry	deps/lua/src/lua.h	/^#define lua_getregistry(/;"	d
lua_getstack	deps/lua/src/ldebug.c	/^LUA_API int lua_getstack (lua_State *L, int level, lua_Debug *ar) {$/;"	f	typeref:typename:LUA_API int
lua_gettable	deps/lua/src/lapi.c	/^LUA_API void lua_gettable (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_gettable	deps/lua/src/lua.h	/^LUA_API void  (lua_gettable) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_gettop	deps/lua/src/lapi.c	/^LUA_API int lua_gettop (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_gettop	deps/lua/src/lua.h	/^LUA_API int   (lua_gettop) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_getupvalue	deps/lua/src/lapi.c	/^LUA_API const char *lua_getupvalue (lua_State *L, int funcindex, int n) {$/;"	f	typeref:typename:LUA_API const char *
lua_h	deps/lua/src/lua.h	/^#define lua_h$/;"	d
lua_ident	deps/lua/src/lapi.c	/^const char lua_ident[] =$/;"	v	typeref:typename:const char[]
lua_insert	deps/lua/src/lapi.c	/^LUA_API void lua_insert (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_insert	deps/lua/src/lua.h	/^LUA_API void  (lua_insert) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_isboolean	deps/lua/src/lua.h	/^#define lua_isboolean(/;"	d
lua_iscfunction	deps/lua/src/lapi.c	/^LUA_API int lua_iscfunction (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_iscfunction	deps/lua/src/lua.h	/^LUA_API int             (lua_iscfunction) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_isfunction	deps/lua/src/lua.h	/^#define lua_isfunction(/;"	d
lua_islightuserdata	deps/lua/src/lua.h	/^#define lua_islightuserdata(/;"	d
lua_isnil	deps/lua/src/lua.h	/^#define lua_isnil(/;"	d
lua_isnone	deps/lua/src/lua.h	/^#define lua_isnone(/;"	d
lua_isnoneornil	deps/lua/src/lua.h	/^#define lua_isnoneornil(/;"	d
lua_isnumber	deps/lua/src/lapi.c	/^LUA_API int lua_isnumber (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_isnumber	deps/lua/src/lua.h	/^LUA_API int             (lua_isnumber) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_isstring	deps/lua/src/lapi.c	/^LUA_API int lua_isstring (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_isstring	deps/lua/src/lua.h	/^LUA_API int             (lua_isstring) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_istable	deps/lua/src/lua.h	/^#define lua_istable(/;"	d
lua_isthread	deps/lua/src/lua.h	/^#define lua_isthread(/;"	d
lua_isuserdata	deps/lua/src/lapi.c	/^LUA_API int lua_isuserdata (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_isuserdata	deps/lua/src/lua.h	/^LUA_API int             (lua_isuserdata) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_kill	src/server.h	/^    int lua_kill;         \/* Kill the script if true. *\/$/;"	m	struct:redisServer	typeref:typename:int
lua_lessthan	deps/lua/src/lapi.c	/^LUA_API int lua_lessthan (lua_State *L, int index1, int index2) {$/;"	f	typeref:typename:LUA_API int
lua_lessthan	deps/lua/src/lua.h	/^LUA_API int            (lua_lessthan) (lua_State *L, int idx1, int idx2);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx1,int idx2)
lua_load	deps/lua/src/lapi.c	/^LUA_API int lua_load (lua_State *L, lua_Reader reader, void *data,$/;"	f	typeref:typename:LUA_API int
lua_load	deps/lua/src/lua.h	/^LUA_API int   (lua_load) (lua_State *L, lua_Reader reader, void *dt,$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,lua_Reader reader,void * dt,const char * chunkname)
lua_lock	deps/lua/src/llimits.h	/^#define lua_lock(/;"	d
lua_longjmp	deps/lua/src/ldo.c	/^struct lua_longjmp {$/;"	s	file:
lua_multi_emitted	src/server.h	/^    int lua_multi_emitted;\/* True if we already propagated MULTI. *\/$/;"	m	struct:redisServer	typeref:typename:int
lua_newstate	deps/lua/src/lstate.c	/^LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) {$/;"	f	typeref:typename:LUA_API lua_State *
lua_newstate	deps/lua/src/lua.h	/^LUA_API lua_State *(lua_newstate) (lua_Alloc f, void *ud);$/;"	v	typeref:typename:LUA_API lua_State * ()(lua_Alloc f,void * ud)
lua_newtable	deps/lua/src/lua.h	/^#define lua_newtable(/;"	d
lua_newthread	deps/lua/src/lapi.c	/^LUA_API lua_State *lua_newthread (lua_State *L) {$/;"	f	typeref:typename:LUA_API lua_State *
lua_newthread	deps/lua/src/lua.h	/^LUA_API lua_State *(lua_newthread) (lua_State *L);$/;"	v	typeref:typename:LUA_API lua_State * ()(lua_State * L)
lua_newuserdata	deps/lua/src/lapi.c	/^LUA_API void *lua_newuserdata (lua_State *L, size_t size) {$/;"	f	typeref:typename:LUA_API void *
lua_newuserdata	deps/lua/src/lua.h	/^LUA_API void *(lua_newuserdata) (lua_State *L, size_t sz);$/;"	v	typeref:typename:LUA_API void * ()(lua_State * L,size_t sz)
lua_next	deps/lua/src/lapi.c	/^LUA_API int lua_next (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_next	deps/lua/src/lua.h	/^LUA_API int   (lua_next) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_number2int	deps/lua/src/luaconf.h	/^#define lua_number2int(/;"	d
lua_number2integer	deps/lua/src/luaconf.h	/^#define lua_number2integer(/;"	d
lua_number2str	deps/lua/src/luaconf.h	/^#define lua_number2str(/;"	d
lua_objlen	deps/lua/src/lapi.c	/^LUA_API size_t lua_objlen (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API size_t
lua_oom	src/server.h	/^    int lua_oom;          \/* OOM detected when script start? *\/$/;"	m	struct:redisServer	typeref:typename:int
lua_open	deps/lua/src/lua.h	/^#define lua_open(/;"	d
lua_pcall	deps/lua/src/lapi.c	/^LUA_API int lua_pcall (lua_State *L, int nargs, int nresults, int errfunc) {$/;"	f	typeref:typename:LUA_API int
lua_pcall	deps/lua/src/lua.h	/^LUA_API int   (lua_pcall) (lua_State *L, int nargs, int nresults, int errfunc);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int nargs,int nresults,int errfunc)
lua_pclose	deps/lua/src/luaconf.h	/^#define lua_pclose(/;"	d
lua_pop	deps/lua/src/lua.h	/^#define lua_pop(/;"	d
lua_popen	deps/lua/src/luaconf.h	/^#define lua_popen(/;"	d
lua_pushboolean	deps/lua/src/lapi.c	/^LUA_API void lua_pushboolean (lua_State *L, int b) {$/;"	f	typeref:typename:LUA_API void
lua_pushboolean	deps/lua/src/lua.h	/^LUA_API void  (lua_pushboolean) (lua_State *L, int b);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int b)
lua_pushcclosure	deps/lua/src/lapi.c	/^LUA_API void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n) {$/;"	f	typeref:typename:LUA_API void
lua_pushcclosure	deps/lua/src/lua.h	/^LUA_API void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,lua_CFunction fn,int n)
lua_pushcfunction	deps/lua/src/lua.h	/^#define lua_pushcfunction(/;"	d
lua_pushfstring	deps/lua/src/lapi.c	/^LUA_API const char *lua_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f	typeref:typename:LUA_API const char *
lua_pushfstring	deps/lua/src/lua.h	/^LUA_API const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,const char * fmt,...)
lua_pushinteger	deps/lua/src/lapi.c	/^LUA_API void lua_pushinteger (lua_State *L, lua_Integer n) {$/;"	f	typeref:typename:LUA_API void
lua_pushinteger	deps/lua/src/lua.h	/^LUA_API void  (lua_pushinteger) (lua_State *L, lua_Integer n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,lua_Integer n)
lua_pushlightuserdata	deps/lua/src/lapi.c	/^LUA_API void lua_pushlightuserdata (lua_State *L, void *p) {$/;"	f	typeref:typename:LUA_API void
lua_pushlightuserdata	deps/lua/src/lua.h	/^LUA_API void  (lua_pushlightuserdata) (lua_State *L, void *p);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,void * p)
lua_pushliteral	deps/lua/src/lua.h	/^#define lua_pushliteral(/;"	d
lua_pushlstring	deps/lua/src/lapi.c	/^LUA_API void lua_pushlstring (lua_State *L, const char *s, size_t len) {$/;"	f	typeref:typename:LUA_API void
lua_pushlstring	deps/lua/src/lua.h	/^LUA_API void  (lua_pushlstring) (lua_State *L, const char *s, size_t l);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,const char * s,size_t l)
lua_pushnil	deps/lua/src/lapi.c	/^LUA_API void lua_pushnil (lua_State *L) {$/;"	f	typeref:typename:LUA_API void
lua_pushnil	deps/lua/src/lua.h	/^LUA_API void  (lua_pushnil) (lua_State *L);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L)
lua_pushnumber	deps/lua/src/lapi.c	/^LUA_API void lua_pushnumber (lua_State *L, lua_Number n) {$/;"	f	typeref:typename:LUA_API void
lua_pushnumber	deps/lua/src/lua.h	/^LUA_API void  (lua_pushnumber) (lua_State *L, lua_Number n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,lua_Number n)
lua_pushstring	deps/lua/src/lapi.c	/^LUA_API void lua_pushstring (lua_State *L, const char *s) {$/;"	f	typeref:typename:LUA_API void
lua_pushstring	deps/lua/src/lua.h	/^LUA_API void  (lua_pushstring) (lua_State *L, const char *s);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,const char * s)
lua_pushthread	deps/lua/src/lapi.c	/^LUA_API int lua_pushthread (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_pushthread	deps/lua/src/lua.h	/^LUA_API int   (lua_pushthread) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_pushunsigned	deps/lua/src/lua_cmsgpack.c	/^    #define lua_pushunsigned(/;"	d	file:
lua_pushvalue	deps/lua/src/lapi.c	/^LUA_API void lua_pushvalue (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_pushvalue	deps/lua/src/lua.h	/^LUA_API void  (lua_pushvalue) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_pushvfstring	deps/lua/src/lapi.c	/^LUA_API const char *lua_pushvfstring (lua_State *L, const char *fmt,$/;"	f	typeref:typename:LUA_API const char *
lua_pushvfstring	deps/lua/src/lua.h	/^LUA_API const char *(lua_pushvfstring) (lua_State *L, const char *fmt,$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,const char * fmt,va_list argp)
lua_random_dirty	src/server.h	/^    int lua_random_dirty; \/* True if a random command was called during the$/;"	m	struct:redisServer	typeref:typename:int
lua_rawequal	deps/lua/src/lapi.c	/^LUA_API int lua_rawequal (lua_State *L, int index1, int index2) {$/;"	f	typeref:typename:LUA_API int
lua_rawequal	deps/lua/src/lua.h	/^LUA_API int            (lua_rawequal) (lua_State *L, int idx1, int idx2);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx1,int idx2)
lua_rawget	deps/lua/src/lapi.c	/^LUA_API void lua_rawget (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_rawget	deps/lua/src/lua.h	/^LUA_API void  (lua_rawget) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_rawgeti	deps/lua/src/lapi.c	/^LUA_API void lua_rawgeti (lua_State *L, int idx, int n) {$/;"	f	typeref:typename:LUA_API void
lua_rawgeti	deps/lua/src/lua.h	/^LUA_API void  (lua_rawgeti) (lua_State *L, int idx, int n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx,int n)
lua_rawset	deps/lua/src/lapi.c	/^LUA_API void lua_rawset (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_rawset	deps/lua/src/lua.h	/^LUA_API void  (lua_rawset) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_rawseti	deps/lua/src/lapi.c	/^LUA_API void lua_rawseti (lua_State *L, int idx, int n) {$/;"	f	typeref:typename:LUA_API void
lua_rawseti	deps/lua/src/lua.h	/^LUA_API void  (lua_rawseti) (lua_State *L, int idx, int n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx,int n)
lua_readline	deps/lua/src/luaconf.h	/^#define lua_readline(/;"	d
lua_ref	deps/lua/src/lauxlib.h	/^#define lua_ref(/;"	d
lua_register	deps/lua/src/lua.h	/^#define lua_register(/;"	d
lua_remove	deps/lua/src/lapi.c	/^LUA_API void lua_remove (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_remove	deps/lua/src/lua.h	/^LUA_API void  (lua_remove) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_repl	src/server.h	/^    int lua_repl;         \/* Script replication flags for redis.set_repl(). *\/$/;"	m	struct:redisServer	typeref:typename:int
lua_replace	deps/lua/src/lapi.c	/^LUA_API void lua_replace (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_replace	deps/lua/src/lua.h	/^LUA_API void  (lua_replace) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_replicate_commands	src/server.h	/^    int lua_replicate_commands; \/* True if we are doing single commands repl. *\/$/;"	m	struct:redisServer	typeref:typename:int
lua_resume	deps/lua/src/ldo.c	/^LUA_API int lua_resume (lua_State *L, int nargs) {$/;"	f	typeref:typename:LUA_API int
lua_resume	deps/lua/src/lua.h	/^LUA_API int  (lua_resume) (lua_State *L, int narg);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int narg)
lua_saveline	deps/lua/src/luaconf.h	/^#define lua_saveline(/;"	d
lua_scripts	src/server.h	/^    dict *lua_scripts;         \/* A dictionary of SHA1 -> Lua scripts *\/$/;"	m	struct:redisServer	typeref:typename:dict *
lua_scripts_mem	src/server.h	/^    unsigned long long lua_scripts_mem;  \/* Cached scripts' memory + oh *\/$/;"	m	struct:redisServer	typeref:typename:unsigned long long
lua_setallocf	deps/lua/src/lapi.c	/^LUA_API void lua_setallocf (lua_State *L, lua_Alloc f, void *ud) {$/;"	f	typeref:typename:LUA_API void
lua_setfenv	deps/lua/src/lapi.c	/^LUA_API int lua_setfenv (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_setfenv	deps/lua/src/lua.h	/^LUA_API int   (lua_setfenv) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_setfield	deps/lua/src/lapi.c	/^LUA_API void lua_setfield (lua_State *L, int idx, const char *k) {$/;"	f	typeref:typename:LUA_API void
lua_setfield	deps/lua/src/lua.h	/^LUA_API void  (lua_setfield) (lua_State *L, int idx, const char *k);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx,const char * k)
lua_setglobal	deps/lua/src/lua.h	/^#define lua_setglobal(/;"	d
lua_sethook	deps/lua/src/ldebug.c	/^LUA_API int lua_sethook (lua_State *L, lua_Hook func, int mask, int count) {$/;"	f	typeref:typename:LUA_API int
lua_setlevel	deps/lua/src/lapi.c	/^LUA_API void lua_setlevel (lua_State *from, lua_State *to) {$/;"	f	typeref:typename:LUA_API void
lua_setlocal	deps/lua/src/ldebug.c	/^LUA_API const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f	typeref:typename:LUA_API const char *
lua_setmetatable	deps/lua/src/lapi.c	/^LUA_API int lua_setmetatable (lua_State *L, int objindex) {$/;"	f	typeref:typename:LUA_API int
lua_setmetatable	deps/lua/src/lua.h	/^LUA_API int   (lua_setmetatable) (lua_State *L, int objindex);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int objindex)
lua_settable	deps/lua/src/lapi.c	/^LUA_API void lua_settable (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_settable	deps/lua/src/lua.h	/^LUA_API void  (lua_settable) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_settop	deps/lua/src/lapi.c	/^LUA_API void lua_settop (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_settop	deps/lua/src/lua.h	/^LUA_API void  (lua_settop) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_setupvalue	deps/lua/src/lapi.c	/^LUA_API const char *lua_setupvalue (lua_State *L, int funcindex, int n) {$/;"	f	typeref:typename:LUA_API const char *
lua_status	deps/lua/src/lapi.c	/^LUA_API int  lua_status (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_status	deps/lua/src/lua.h	/^LUA_API int  (lua_status) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_stdin_is_tty	deps/lua/src/luaconf.h	/^#define lua_stdin_is_tty(/;"	d
lua_str2number	deps/lua/src/luaconf.h	/^#define lua_str2number(/;"	d
lua_strlen	deps/lua/src/lua.h	/^#define lua_strlen(/;"	d
lua_time_limit	src/server.h	/^    mstime_t lua_time_limit;  \/* Script timeout in milliseconds *\/$/;"	m	struct:redisServer	typeref:typename:mstime_t
lua_time_snapshot	src/server.h	/^    mstime_t lua_time_snapshot; \/* Snapshot of mstime when script is started *\/$/;"	m	struct:redisServer	typeref:typename:mstime_t
lua_time_start	src/server.h	/^    monotime lua_time_start;  \/* monotonic timer to detect timed-out script *\/$/;"	m	struct:redisServer	typeref:typename:monotime
lua_timedout	src/server.h	/^    int lua_timedout;     \/* True if we reached the time limit for script$/;"	m	struct:redisServer	typeref:typename:int
lua_tmpnam	deps/lua/src/luaconf.h	/^#define lua_tmpnam(/;"	d
lua_toboolean	deps/lua/src/lapi.c	/^LUA_API int lua_toboolean (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_toboolean	deps/lua/src/lua.h	/^LUA_API int             (lua_toboolean) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_tocfunction	deps/lua/src/lapi.c	/^LUA_API lua_CFunction lua_tocfunction (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API lua_CFunction
lua_tointeger	deps/lua/src/lapi.c	/^LUA_API lua_Integer lua_tointeger (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API lua_Integer
lua_tolstring	deps/lua/src/lapi.c	/^LUA_API const char *lua_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f	typeref:typename:LUA_API const char *
lua_tolstring	deps/lua/src/lua.h	/^LUA_API const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,int idx,size_t * len)
lua_tonumber	deps/lua/src/lapi.c	/^LUA_API lua_Number lua_tonumber (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API lua_Number
lua_topointer	deps/lua/src/lapi.c	/^LUA_API const void *lua_topointer (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API const void *
lua_topointer	deps/lua/src/lua.h	/^LUA_API const void     *(lua_topointer) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API const void * ()(lua_State * L,int idx)
lua_tostring	deps/lua/src/lua.h	/^#define lua_tostring(/;"	d
lua_tothread	deps/lua/src/lapi.c	/^LUA_API lua_State *lua_tothread (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API lua_State *
lua_tothread	deps/lua/src/lua.h	/^LUA_API lua_State      *(lua_tothread) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API lua_State * ()(lua_State * L,int idx)
lua_touserdata	deps/lua/src/lapi.c	/^LUA_API void *lua_touserdata (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void *
lua_touserdata	deps/lua/src/lua.h	/^LUA_API void	       *(lua_touserdata) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void * ()(lua_State * L,int idx)
lua_type	deps/lua/src/lapi.c	/^LUA_API int lua_type (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_type	deps/lua/src/lua.h	/^LUA_API int             (lua_type) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_typename	deps/lua/src/lapi.c	/^LUA_API const char *lua_typename (lua_State *L, int t) {$/;"	f	typeref:typename:LUA_API const char *
lua_typename	deps/lua/src/lua.h	/^LUA_API const char     *(lua_typename) (lua_State *L, int tp);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,int tp)
lua_unlock	deps/lua/src/llimits.h	/^#define lua_unlock(/;"	d
lua_unref	deps/lua/src/lauxlib.h	/^#define lua_unref(/;"	d
lua_upvalueindex	deps/lua/src/lua.h	/^#define lua_upvalueindex(/;"	d
lua_write_dirty	src/server.h	/^    int lua_write_dirty;  \/* True if a write command was called during the$/;"	m	struct:redisServer	typeref:typename:int
lua_xmove	deps/lua/src/lapi.c	/^LUA_API void lua_xmove (lua_State *from, lua_State *to, int n) {$/;"	f	typeref:typename:LUA_API void
lua_xmove	deps/lua/src/lua.h	/^LUA_API void  (lua_xmove) (lua_State *from, lua_State *to, int n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * from,lua_State * to,int n)
lua_yield	deps/lua/src/ldo.c	/^LUA_API int lua_yield (lua_State *L, int nresults) {$/;"	f	typeref:typename:LUA_API int
lua_yield	deps/lua/src/lua.h	/^LUA_API int  (lua_yield) (lua_State *L, int nresults);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int nresults)
luaall_c	deps/lua/etc/all.c	/^#define luaall_c$/;"	d	file:
luabp	src/scripting.c	/^    int luabp;  \/* Stop at next line because redis.breakpoint() was called. *\/$/;"	m	struct:ldbState	typeref:typename:int	file:
luac.o	deps/lua/src/Makefile	/^luac.o: luac.c lua.h luaconf.h lauxlib.h ldo.h lobject.h llimits.h \\$/;"	t
luac_c	deps/lua/src/luac.c	/^#define luac_c$/;"	d	file:
luac_c	deps/lua/src/print.c	/^#define luac_c$/;"	d	file:
luai_Cast	deps/lua/src/luaconf.h	/^union luai_Cast { double l_d; long l_l; };$/;"	u
luai_apicheck	deps/lua/src/luaconf.h	/^#define luai_apicheck(/;"	d
luai_jmpbuf	deps/lua/src/luaconf.h	/^#define luai_jmpbuf	/;"	d
luai_numadd	deps/lua/src/luaconf.h	/^#define luai_numadd(/;"	d
luai_numdiv	deps/lua/src/luaconf.h	/^#define luai_numdiv(/;"	d
luai_numeq	deps/lua/src/luaconf.h	/^#define luai_numeq(/;"	d
luai_numisnan	deps/lua/src/luaconf.h	/^#define luai_numisnan(/;"	d
luai_numle	deps/lua/src/luaconf.h	/^#define luai_numle(/;"	d
luai_numlt	deps/lua/src/luaconf.h	/^#define luai_numlt(/;"	d
luai_nummod	deps/lua/src/luaconf.h	/^#define luai_nummod(/;"	d
luai_nummul	deps/lua/src/luaconf.h	/^#define luai_nummul(/;"	d
luai_numpow	deps/lua/src/luaconf.h	/^#define luai_numpow(/;"	d
luai_numsub	deps/lua/src/luaconf.h	/^#define luai_numsub(/;"	d
luai_numunm	deps/lua/src/luaconf.h	/^#define luai_numunm(/;"	d
luai_threadyield	deps/lua/src/llimits.h	/^#define luai_threadyield(/;"	d
luai_userstateclose	deps/lua/src/luaconf.h	/^#define luai_userstateclose(/;"	d
luai_userstatefree	deps/lua/src/luaconf.h	/^#define luai_userstatefree(/;"	d
luai_userstateopen	deps/lua/src/luaconf.h	/^#define luai_userstateopen(/;"	d
luai_userstateresume	deps/lua/src/luaconf.h	/^#define luai_userstateresume(/;"	d
luai_userstatethread	deps/lua/src/luaconf.h	/^#define luai_userstatethread(/;"	d
luai_userstateyield	deps/lua/src/luaconf.h	/^#define luai_userstateyield(/;"	d
lualib_h	deps/lua/src/lualib.h	/^#define lualib_h$/;"	d
lualibs	deps/lua/src/linit.c	/^static const luaL_Reg lualibs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
luaopen_base	deps/lua/src/lbaselib.c	/^LUALIB_API int luaopen_base (lua_State *L) {$/;"	f	typeref:typename:LUALIB_API int
luaopen_base	deps/lua/src/lualib.h	/^LUALIB_API int (luaopen_base) (lua_State *L);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L)
luaopen_bit	deps/lua/src/lua_bit.c	/^LUALIB_API int luaopen_bit(lua_State *L)$/;"	f	typeref:typename:LUALIB_API int
luaopen_bit	src/scripting.c	/^LUALIB_API int (luaopen_bit) (lua_State *L);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L)
luaopen_cjson	deps/lua/src/lua_cjson.c	/^int luaopen_cjson(lua_State *l)$/;"	f	typeref:typename:int
luaopen_cjson	src/scripting.c	/^LUALIB_API int (luaopen_cjson) (lua_State *L);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L)
luaopen_cjson_safe	deps/lua/src/lua_cjson.c	/^int luaopen_cjson_safe(lua_State *l)$/;"	f	typeref:typename:int
luaopen_cmsgpack	deps/lua/src/lua_cmsgpack.c	/^LUALIB_API int luaopen_cmsgpack(lua_State *L) {$/;"	f	typeref:typename:LUALIB_API int
luaopen_cmsgpack	src/scripting.c	/^LUALIB_API int (luaopen_cmsgpack) (lua_State *L);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L)
luaopen_cmsgpack_safe	deps/lua/src/lua_cmsgpack.c	/^LUALIB_API int luaopen_cmsgpack_safe(lua_State *L) {$/;"	f	typeref:typename:LUALIB_API int
luaopen_create	deps/lua/src/lua_cmsgpack.c	/^int luaopen_create(lua_State *L) {$/;"	f	typeref:typename:int
luaopen_debug	deps/lua/src/ldblib.c	/^LUALIB_API int luaopen_debug (lua_State *L) {$/;"	f	typeref:typename:LUALIB_API int
luaopen_debug	deps/lua/src/lualib.h	/^LUALIB_API int (luaopen_debug) (lua_State *L);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L)
luaopen_io	deps/lua/src/liolib.c	/^LUALIB_API int luaopen_io (lua_State *L) {$/;"	f	typeref:typename:LUALIB_API int
luaopen_io	deps/lua/src/lualib.h	/^LUALIB_API int (luaopen_io) (lua_State *L);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L)
luaopen_math	deps/lua/src/lmathlib.c	/^LUALIB_API int luaopen_math (lua_State *L) {$/;"	f	typeref:typename:LUALIB_API int
luaopen_math	deps/lua/src/lualib.h	/^LUALIB_API int (luaopen_math) (lua_State *L);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L)
luaopen_os	deps/lua/src/loslib.c	/^LUALIB_API int luaopen_os (lua_State *L) {$/;"	f	typeref:typename:LUALIB_API int
luaopen_os	deps/lua/src/lualib.h	/^LUALIB_API int (luaopen_os) (lua_State *L);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L)
luaopen_package	deps/lua/src/loadlib.c	/^LUALIB_API int luaopen_package (lua_State *L) {$/;"	f	typeref:typename:LUALIB_API int
luaopen_package	deps/lua/src/lualib.h	/^LUALIB_API int (luaopen_package) (lua_State *L);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L)
luaopen_string	deps/lua/src/lstrlib.c	/^LUALIB_API int luaopen_string (lua_State *L) {$/;"	f	typeref:typename:LUALIB_API int
luaopen_string	deps/lua/src/lualib.h	/^LUALIB_API int (luaopen_string) (lua_State *L);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L)
luaopen_struct	deps/lua/src/lua_struct.c	/^LUALIB_API int luaopen_struct (lua_State *L) {$/;"	f	typeref:typename:LUALIB_API int
luaopen_struct	src/scripting.c	/^LUALIB_API int (luaopen_struct) (lua_State *L);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L)
luaopen_table	deps/lua/src/ltablib.c	/^LUALIB_API int luaopen_table (lua_State *L) {$/;"	f	typeref:typename:LUALIB_API int
luaopen_table	deps/lua/src/lualib.h	/^LUALIB_API int (luaopen_table) (lua_State *L);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L)
lundump.o	deps/lua/src/Makefile	/^lundump.o: lundump.c lua.h luaconf.h ldebug.h lstate.h lobject.h \\$/;"	t
lundump_c	deps/lua/src/lundump.c	/^#define lundump_c$/;"	d	file:
lundump_h	deps/lua/src/lundump.h	/^#define lundump_h$/;"	d
lval	src/ziplist.h	/^    long long lval;$/;"	m	struct:__anon4d39dfe10108	typeref:typename:long long
lvl	deps/lua/src/lauxlib.h	/^  int lvl;  \/* number of strings in the stack (level) *\/$/;"	m	struct:luaL_Buffer	typeref:typename:int
lvm.o	deps/lua/src/Makefile	/^lvm.o: lvm.c lua.h luaconf.h ldebug.h lstate.h lobject.h llimits.h ltm.h \\$/;"	t
lvm_c	deps/lua/src/lvm.c	/^#define lvm_c$/;"	d	file:
lvm_h	deps/lua/src/lvm.h	/^#define lvm_h$/;"	d
lwCanvas	src/lolwut.h	/^typedef struct lwCanvas {$/;"	s
lwCanvas	src/lolwut.h	/^} lwCanvas;$/;"	t	typeref:struct:lwCanvas
lwCreateCanvas	src/lolwut.c	/^lwCanvas *lwCreateCanvas(int width, int height, int bgcolor) {$/;"	f	typeref:typename:lwCanvas *
lwDrawLine	src/lolwut.c	/^void lwDrawLine(lwCanvas *canvas, int x1, int y1, int x2, int y2, int color) {$/;"	f	typeref:typename:void
lwDrawPixel	src/lolwut.c	/^void lwDrawPixel(lwCanvas *canvas, int x, int y, int color) {$/;"	f	typeref:typename:void
lwDrawSchotter	src/lolwut5.c	/^lwCanvas *lwDrawSchotter(int console_cols, int squares_per_row, int squares_per_col) {$/;"	f	typeref:typename:lwCanvas *
lwDrawSquare	src/lolwut.c	/^void lwDrawSquare(lwCanvas *canvas, int x, int y, float size, float angle, int color) {$/;"	f	typeref:typename:void
lwFreeCanvas	src/lolwut.c	/^void lwFreeCanvas(lwCanvas *canvas) {$/;"	f	typeref:typename:void
lwGetPixel	src/lolwut.c	/^int lwGetPixel(lwCanvas *canvas, int x, int y) {$/;"	f	typeref:typename:int
lwTranslatePixelsGroup	src/lolwut5.c	/^void lwTranslatePixelsGroup(int byte, char *output) {$/;"	f	typeref:typename:void
lzf_compress	src/lzf_c.c	/^lzf_compress (const void *const in_data, unsigned int in_len,$/;"	f	typeref:typename:unsigned int
lzf_decompress	src/lzf_d.c	/^lzf_decompress (const void *const in_data,  unsigned int in_len,$/;"	f	typeref:typename:unsigned int
lzf_movsb	src/lzf_d.c	/^# define lzf_movsb(/;"	d	file:
lzio.o	deps/lua/src/Makefile	/^lzio.o: lzio.c lua.h luaconf.h llimits.h lmem.h lstate.h lobject.h ltm.h \\$/;"	t
lzio_c	deps/lua/src/lzio.c	/^#define lzio_c$/;"	d	file:
lzio_h	deps/lua/src/lzio.h	/^#define lzio_h$/;"	d
m_adapter	deps/hiredis/examples/example-qt.h	/^        RedisQtAdapter m_adapter;$/;"	m	class:ExampleQt	typeref:typename:RedisQtAdapter
m_ctx	deps/hiredis/adapters/qt.h	/^        redisAsyncContext * m_ctx;$/;"	m	class:RedisQtAdapter	typeref:typename:redisAsyncContext *
m_ctx	deps/hiredis/examples/example-qt.h	/^        redisAsyncContext * m_ctx;$/;"	m	class:ExampleQt	typeref:typename:redisAsyncContext *
m_read	deps/hiredis/adapters/qt.h	/^        QSocketNotifier * m_read;$/;"	m	class:RedisQtAdapter	typeref:typename:QSocketNotifier *
m_value	deps/hiredis/examples/example-qt.h	/^        const char * m_value;$/;"	m	class:ExampleQt	typeref:typename:const char *
m_write	deps/hiredis/adapters/qt.h	/^        QSocketNotifier * m_write;$/;"	m	class:RedisQtAdapter	typeref:typename:QSocketNotifier *
macosx	deps/lua/src/Makefile	/^macosx:$/;"	t
mad	src/latency.h	/^    uint32_t mad;           \/* Mean absolute deviation. *\/$/;"	m	struct:latencyStats	typeref:typename:uint32_t
magic	deps/jemalloc/include/jemalloc/internal/div.h	/^	uint32_t magic;$/;"	m	struct:div_info_s	typeref:typename:uint32_t
magic	deps/jemalloc/test/unit/ph.c	/^	uint32_t magic;$/;"	m	struct:node_s	typeref:typename:uint32_t	file:
magic	deps/jemalloc/test/unit/rb.c	/^	uint32_t magic;$/;"	m	struct:node_s	typeref:typename:uint32_t	file:
magic	src/hyperloglog.c	/^    char magic[4];      \/* "HYLL" *\/$/;"	m	struct:hllhdr	typeref:typename:char[4]	file:
main	deps/hiredis/examples/example-ae.c	/^int main (int argc, char **argv) {$/;"	f	typeref:typename:int
main	deps/hiredis/examples/example-glib.c	/^main (gint argc     G_GNUC_UNUSED,$/;"	f	typeref:typename:gint
main	deps/hiredis/examples/example-ivykis.c	/^int main (int argc, char **argv) {$/;"	f	typeref:typename:int
main	deps/hiredis/examples/example-libev.c	/^int main (int argc, char **argv) {$/;"	f	typeref:typename:int
main	deps/hiredis/examples/example-libevent-ssl.c	/^int main (int argc, char **argv) {$/;"	f	typeref:typename:int
main	deps/hiredis/examples/example-libevent.c	/^int main (int argc, char **argv) {$/;"	f	typeref:typename:int
main	deps/hiredis/examples/example-libuv.c	/^int main (int argc, char **argv) {$/;"	f	typeref:typename:int
main	deps/hiredis/examples/example-macosx.c	/^int main (int argc, char **argv) {$/;"	f	typeref:typename:int
main	deps/hiredis/examples/example-push.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	deps/hiredis/examples/example-qt.cpp	/^int main (int argc, char **argv) {$/;"	f	typeref:typename:int
main	deps/hiredis/examples/example-ssl.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	deps/hiredis/examples/example.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	deps/hiredis/sds.c	/^int main(void) {$/;"	f	typeref:typename:int
main	deps/hiredis/test.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	deps/jemalloc/msvc/test_threads/test_threads_main.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	deps/jemalloc/test/integration/MALLOCX_ARENA.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/integration/aligned_alloc.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/integration/allocated.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/integration/cpp/basic.cpp	/^main() {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/integration/extent.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/integration/mallocx.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/integration/overflow.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/integration/posix_memalign.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/integration/rallocx.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/integration/sdallocx.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/integration/thread_arena.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/integration/thread_tcache_enabled.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/integration/xallocx.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/stress/microbench.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/SFMT.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/a0.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/arena_reset.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/atomic.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/background_thread.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/background_thread_enable.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/base.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/bit_util.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/bitmap.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/ckh.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/decay.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/div.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/emitter.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/extent_quantize.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/fork.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/hash.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/hooks.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/junk.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/log.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/mallctl.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/malloc_io.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/math.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/mq.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/mtx.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/nstime.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/pack.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/pages.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/ph.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/prng.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/prof_accum.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/prof_active.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/prof_gdump.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/prof_idump.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/prof_reset.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/prof_tctx.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/prof_thread_name.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/ql.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/qr.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/rb.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/retained.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/rtree.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/size_classes.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/slab.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/smoothstep.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/spin.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/stats.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/stats_print.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/ticker.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/tsd.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/witness.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/jemalloc/test/unit/zero.c	/^main(void) {$/;"	f	typeref:typename:TEST_END int
main	deps/linenoise/example.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	deps/lua/etc/min.c	/^int main(void)$/;"	f	typeref:typename:int
main	deps/lua/src/lua.c	/^int main (int argc, char **argv) {$/;"	f	typeref:typename:int
main	deps/lua/src/luac.c	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	src/crc64.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	src/localtime.c	/^int main(void) {$/;"	f	typeref:typename:int
main	src/mt19937-64.c	/^int main(void)$/;"	f	typeref:typename:int
main	src/redis-benchmark.c	/^int main(int argc, const char **argv) {$/;"	f	typeref:typename:int
main	src/redis-cli.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	src/server.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	src/setproctitle.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	src/siphash.c	/^int main(void) {$/;"	f	typeref:typename:int
main	utils/corrupt_rdb.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	utils/hashtable/rehashing.c	/^int main(void) {$/;"	f	typeref:typename:int
main	utils/lru/lfu-simulation.c	/^int main(void) {$/;"	f	typeref:typename:int
main	utils/tracking_collisions.c	/^int main(void) {$/;"	f	typeref:typename:int
main_thread_id	src/server.h	/^    pthread_t main_thread_id;         \/* Main thread id *\/$/;"	m	struct:redisServer	typeref:typename:pthread_t
mainloop	deps/hiredis/examples/example-glib.c	/^static GMainLoop *mainloop;$/;"	v	typeref:typename:GMainLoop *	file:
mainposition	deps/lua/src/ltable.c	/^static Node *mainposition (const Table *t, const TValue *key) {$/;"	f	typeref:typename:Node *	file:
mainthread	deps/lua/src/lstate.h	/^  struct lua_State *mainthread;$/;"	m	struct:global_State	typeref:struct:lua_State *
makeObjectShared	src/object.c	/^robj *makeObjectShared(robj *o) {$/;"	f	typeref:typename:robj *
makeThreadKillable	src/server.c	/^void makeThreadKillable(void) {$/;"	f	typeref:typename:void
makemask	deps/lua/src/ldblib.c	/^static int makemask (const char *smask, int count) {$/;"	f	typeref:typename:int	file:
makewhite	deps/lua/src/lgc.c	/^#define makewhite(/;"	d	file:
mallctl	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define mallctl /;"	d
mallctl	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define mallctl /;"	d
mallctl	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define mallctl /;"	d
mallctl_bool_get	deps/jemalloc/test/unit/prof_active.c	/^mallctl_bool_get(const char *name, bool expected, const char *func, int line) {$/;"	f	typeref:typename:void	file:
mallctl_bool_set	deps/jemalloc/test/unit/prof_active.c	/^mallctl_bool_set(const char *name, bool old_expected, bool val_new,$/;"	f	typeref:typename:void	file:
mallctl_failure	deps/jemalloc/test/integration/thread_arena.c	/^mallctl_failure(int err) {$/;"	f	typeref:typename:void	file:
mallctl_int	src/debug.c	/^void mallctl_int(client *c, robj **argv, int argc) {$/;"	f	typeref:typename:void
mallctl_prof_active_get	deps/jemalloc/test/unit/prof_active.c	/^#define mallctl_prof_active_get(/;"	d	file:
mallctl_prof_active_get_impl	deps/jemalloc/test/unit/prof_active.c	/^mallctl_prof_active_get_impl(bool prof_active_old_expected, const char *func,$/;"	f	typeref:typename:void	file:
mallctl_prof_active_set	deps/jemalloc/test/unit/prof_active.c	/^#define mallctl_prof_active_set(/;"	d	file:
mallctl_prof_active_set_impl	deps/jemalloc/test/unit/prof_active.c	/^mallctl_prof_active_set_impl(bool prof_active_old_expected,$/;"	f	typeref:typename:void	file:
mallctl_string	src/debug.c	/^void mallctl_string(client *c, robj **argv, int argc) {$/;"	f	typeref:typename:void
mallctl_thread_name_get	deps/jemalloc/test/unit/prof_thread_name.c	/^#define mallctl_thread_name_get(/;"	d	file:
mallctl_thread_name_get_impl	deps/jemalloc/test/unit/prof_thread_name.c	/^mallctl_thread_name_get_impl(const char *thread_name_expected, const char *func,$/;"	f	typeref:typename:void	file:
mallctl_thread_name_set	deps/jemalloc/test/unit/prof_thread_name.c	/^#define mallctl_thread_name_set(/;"	d	file:
mallctl_thread_name_set_impl	deps/jemalloc/test/unit/prof_thread_name.c	/^mallctl_thread_name_set_impl(const char *thread_name, const char *func,$/;"	f	typeref:typename:void	file:
mallctl_thread_prof_active_get	deps/jemalloc/test/unit/prof_active.c	/^#define mallctl_thread_prof_active_get(/;"	d	file:
mallctl_thread_prof_active_get_impl	deps/jemalloc/test/unit/prof_active.c	/^mallctl_thread_prof_active_get_impl(bool thread_prof_active_old_expected,$/;"	f	typeref:typename:void	file:
mallctl_thread_prof_active_set	deps/jemalloc/test/unit/prof_active.c	/^#define mallctl_thread_prof_active_set(/;"	d	file:
mallctl_thread_prof_active_set_impl	deps/jemalloc/test/unit/prof_active.c	/^mallctl_thread_prof_active_set_impl(bool thread_prof_active_old_expected,$/;"	f	typeref:typename:void	file:
mallctlbymib	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define mallctlbymib /;"	d
mallctlbymib	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define mallctlbymib /;"	d
mallctlbymib	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define mallctlbymib /;"	d
mallctlnametomib	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define mallctlnametomib /;"	d
mallctlnametomib	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define mallctlnametomib /;"	d
mallctlnametomib	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define mallctlnametomib /;"	d
malloc	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define malloc /;"	d
malloc	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define malloc /;"	d
malloc	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define malloc /;"	d
malloc	deps/jemalloc/src/zone.c	/^	void *(*malloc)(struct _malloc_zone_t *, size_t);$/;"	m	struct:_malloc_zone_t	typeref:typename:void * (*)(struct _malloc_zone_t *,size_t)	file:
malloc	src/zmalloc.c	/^#define malloc(/;"	d	file:
mallocFn	deps/hiredis/alloc.h	/^    void *(*mallocFn)(size_t);$/;"	m	struct:hiredisAllocFuncs	typeref:typename:void * (*)(size_t)
malloc_abort_invalid_conf	deps/jemalloc/src/jemalloc.c	/^malloc_abort_invalid_conf(void) {$/;"	f	typeref:typename:void	file:
malloc_conf	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define malloc_conf /;"	d
malloc_conf	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define malloc_conf /;"	d
malloc_conf	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define malloc_conf /;"	d
malloc_conf	deps/jemalloc/test/unit/background_thread_enable.c	/^const char *malloc_conf = "background_thread:false,narenas:1,max_background_threads:20";$/;"	v	typeref:typename:const char *
malloc_conf_error	deps/jemalloc/src/jemalloc.c	/^malloc_conf_error(const char *msg, const char *k, size_t klen, const char *v,$/;"	f	typeref:typename:void	file:
malloc_conf_init	deps/jemalloc/src/jemalloc.c	/^malloc_conf_init(void) {$/;"	f	typeref:typename:void	file:
malloc_conf_next	deps/jemalloc/src/jemalloc.c	/^malloc_conf_next(char const **opts_p, char const **k_p, size_t *klen_p,$/;"	f	typeref:typename:bool	file:
malloc_cprintf	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_cprintf /;"	d
malloc_cprintf	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_cprintf /;"	d
malloc_cprintf	deps/jemalloc/src/malloc_io.c	/^malloc_cprintf(void (*write_cb)(void *, const char *), void *cbopaque,$/;"	f	typeref:typename:JEMALLOC_FORMAT_PRINTF (3,4)void
malloc_cpuid_t	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^typedef int malloc_cpuid_t;$/;"	t	typeref:typename:int
malloc_dallocx	deps/jemalloc/test/stress/microbench.c	/^malloc_dallocx(void) {$/;"	f	typeref:typename:TEST_END void	file:
malloc_free	deps/jemalloc/test/stress/microbench.c	/^malloc_free(void) {$/;"	f	typeref:typename:void	file:
malloc_getcpu	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^malloc_getcpu(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE malloc_cpuid_t
malloc_init	deps/jemalloc/src/jemalloc.c	/^malloc_init(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
malloc_init_a0	deps/jemalloc/src/jemalloc.c	/^malloc_init_a0(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
malloc_init_a0_initialized	deps/jemalloc/src/jemalloc.c	/^	malloc_init_a0_initialized	= 2,$/;"	e	enum:__anon4e2331a50103	file:
malloc_init_hard	deps/jemalloc/src/jemalloc.c	/^malloc_init_hard(void) {$/;"	f	typeref:typename:bool	file:
malloc_init_hard_a0	deps/jemalloc/src/jemalloc.c	/^malloc_init_hard_a0(void) {$/;"	f	typeref:typename:bool	file:
malloc_init_hard_a0_locked	deps/jemalloc/src/jemalloc.c	/^malloc_init_hard_a0_locked() {$/;"	f	typeref:typename:bool	file:
malloc_init_hard_cleanup	deps/jemalloc/src/jemalloc.c	/^malloc_init_hard_cleanup(tsdn_t *tsdn, bool reentrancy_set) {$/;"	f	typeref:typename:void	file:
malloc_init_hard_finish	deps/jemalloc/src/jemalloc.c	/^malloc_init_hard_finish(void) {$/;"	f	typeref:typename:bool	file:
malloc_init_hard_needed	deps/jemalloc/src/jemalloc.c	/^malloc_init_hard_needed(void) {$/;"	f	typeref:typename:bool	file:
malloc_init_hard_recursible	deps/jemalloc/src/jemalloc.c	/^malloc_init_hard_recursible(void) {$/;"	f	typeref:typename:bool	file:
malloc_init_initialized	deps/jemalloc/src/jemalloc.c	/^	malloc_init_initialized		= 0 \/* Common case --> jnz. *\/$/;"	e	enum:__anon4e2331a50103	file:
malloc_init_narenas	deps/jemalloc/src/jemalloc.c	/^malloc_init_narenas(void) {$/;"	f	typeref:typename:bool	file:
malloc_init_percpu	deps/jemalloc/src/jemalloc.c	/^malloc_init_percpu(void) {$/;"	f	typeref:typename:void	file:
malloc_init_recursible	deps/jemalloc/src/jemalloc.c	/^	malloc_init_recursible		= 1,$/;"	e	enum:__anon4e2331a50103	file:
malloc_init_state	deps/jemalloc/src/jemalloc.c	/^static malloc_init_t	malloc_init_state = malloc_init_uninitialized;$/;"	v	typeref:typename:malloc_init_t	file:
malloc_init_t	deps/jemalloc/src/jemalloc.c	/^} malloc_init_t;$/;"	t	typeref:enum:__anon4e2331a50103	file:
malloc_init_uninitialized	deps/jemalloc/src/jemalloc.c	/^	malloc_init_uninitialized	= 3,$/;"	e	enum:__anon4e2331a50103	file:
malloc_initialized	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_initialized /;"	d
malloc_initialized	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_initialized /;"	d
malloc_initialized	deps/jemalloc/src/jemalloc.c	/^malloc_initialized(void) {$/;"	f	typeref:typename:bool
malloc_initializer	deps/jemalloc/src/jemalloc.c	/^static bool			malloc_initializer = NO_INITIALIZER;$/;"	v	typeref:typename:bool	file:
malloc_initializer	deps/jemalloc/src/jemalloc.c	/^static pthread_t		malloc_initializer = NO_INITIALIZER;$/;"	v	typeref:typename:pthread_t	file:
malloc_introspection_t	deps/jemalloc/src/zone.c	/^typedef struct malloc_introspection_t {$/;"	s	file:
malloc_introspection_t	deps/jemalloc/src/zone.c	/^} malloc_introspection_t;$/;"	t	typeref:struct:malloc_introspection_t	file:
malloc_message	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define malloc_message /;"	d
malloc_message	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define malloc_message /;"	d
malloc_message	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define malloc_message /;"	d
malloc_mus_free	deps/jemalloc/test/stress/microbench.c	/^malloc_mus_free(void) {$/;"	f	typeref:typename:TEST_END void	file:
malloc_mutex_address_ordered	deps/jemalloc/include/jemalloc/internal/mutex.h	/^	malloc_mutex_address_ordered$/;"	e	enum:__anon9c853d940103
malloc_mutex_assert_not_owner	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_assert_not_owner(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f	typeref:typename:void
malloc_mutex_assert_owner	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_assert_owner(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f	typeref:typename:void
malloc_mutex_boot	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_mutex_boot /;"	d
malloc_mutex_boot	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_mutex_boot /;"	d
malloc_mutex_boot	deps/jemalloc/src/mutex.c	/^malloc_mutex_boot(void) {$/;"	f	typeref:typename:bool
malloc_mutex_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_mutex_init /;"	d
malloc_mutex_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_mutex_init /;"	d
malloc_mutex_init	deps/jemalloc/src/mutex.c	/^malloc_mutex_init(malloc_mutex_t *mutex, const char *name,$/;"	f	typeref:typename:bool
malloc_mutex_lock	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_lock(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f	typeref:typename:void
malloc_mutex_lock_final	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_lock_final(malloc_mutex_t *mutex) {$/;"	f	typeref:typename:void
malloc_mutex_lock_order_t	deps/jemalloc/include/jemalloc/internal/mutex.h	/^} malloc_mutex_lock_order_t;$/;"	t	typeref:enum:__anon9c853d940103
malloc_mutex_lock_slow	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_mutex_lock_slow /;"	d
malloc_mutex_lock_slow	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_mutex_lock_slow /;"	d
malloc_mutex_lock_slow	deps/jemalloc/src/mutex.c	/^malloc_mutex_lock_slow(malloc_mutex_t *mutex) {$/;"	f	typeref:typename:void
malloc_mutex_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_mutex_postfork_child /;"	d
malloc_mutex_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_mutex_postfork_child /;"	d
malloc_mutex_postfork_child	deps/jemalloc/src/mutex.c	/^malloc_mutex_postfork_child(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f	typeref:typename:void
malloc_mutex_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_mutex_postfork_parent /;"	d
malloc_mutex_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_mutex_postfork_parent /;"	d
malloc_mutex_postfork_parent	deps/jemalloc/src/mutex.c	/^malloc_mutex_postfork_parent(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f	typeref:typename:void
malloc_mutex_prefork	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_mutex_prefork /;"	d
malloc_mutex_prefork	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_mutex_prefork /;"	d
malloc_mutex_prefork	deps/jemalloc/src/mutex.c	/^malloc_mutex_prefork(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f	typeref:typename:void
malloc_mutex_prof_data_reset	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_mutex_prof_data_reset /;"	d
malloc_mutex_prof_data_reset	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_mutex_prof_data_reset /;"	d
malloc_mutex_prof_data_reset	deps/jemalloc/src/mutex.c	/^malloc_mutex_prof_data_reset(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f	typeref:typename:void
malloc_mutex_prof_merge	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_prof_merge(mutex_prof_data_t *sum, mutex_prof_data_t *data) {$/;"	f	typeref:typename:void
malloc_mutex_prof_read	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_prof_read(tsdn_t *tsdn, mutex_prof_data_t *data,$/;"	f	typeref:typename:void
malloc_mutex_rank_exclusive	deps/jemalloc/include/jemalloc/internal/mutex.h	/^	malloc_mutex_rank_exclusive,$/;"	e	enum:__anon9c853d940103
malloc_mutex_s	deps/jemalloc/include/jemalloc/internal/mutex.h	/^struct malloc_mutex_s {$/;"	s
malloc_mutex_t	deps/jemalloc/include/jemalloc/internal/mutex.h	/^typedef struct malloc_mutex_s malloc_mutex_t;$/;"	t	typeref:struct:malloc_mutex_s
malloc_mutex_trylock	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_trylock(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f	typeref:typename:bool
malloc_mutex_trylock_final	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_trylock_final(malloc_mutex_t *mutex) {$/;"	f	typeref:typename:bool
malloc_mutex_unlock	deps/jemalloc/include/jemalloc/internal/mutex.h	/^malloc_mutex_unlock(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f	typeref:typename:void
malloc_nallocx_free	deps/jemalloc/test/stress/microbench.c	/^malloc_nallocx_free(void) {$/;"	f	typeref:typename:TEST_END void	file:
malloc_narenas_default	deps/jemalloc/src/jemalloc.c	/^malloc_narenas_default(void) {$/;"	f	typeref:typename:unsigned	file:
malloc_ncpus	deps/jemalloc/src/jemalloc.c	/^malloc_ncpus(void) {$/;"	f	typeref:typename:unsigned	file:
malloc_printf	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_printf /;"	d
malloc_printf	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_printf /;"	d
malloc_printf	deps/jemalloc/src/malloc_io.c	/^malloc_printf(const char *format, ...) {$/;"	f	typeref:typename:JEMALLOC_FORMAT_PRINTF (1,2)void
malloc_read_fd	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^malloc_read_fd(int fd, void *buf, size_t count) {$/;"	f	typeref:typename:ssize_t
malloc_sallocx_free	deps/jemalloc/test/stress/microbench.c	/^malloc_sallocx_free(void) {$/;"	f	typeref:typename:void	file:
malloc_sdallocx	deps/jemalloc/test/stress/microbench.c	/^malloc_sdallocx(void) {$/;"	f	typeref:typename:void	file:
malloc_slow	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_slow /;"	d
malloc_slow	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_slow /;"	d
malloc_slow	deps/jemalloc/src/jemalloc.c	/^bool			malloc_slow = true;$/;"	v	typeref:typename:bool
malloc_slow_flag_init	deps/jemalloc/src/jemalloc.c	/^malloc_slow_flag_init(void) {$/;"	f	typeref:typename:void	file:
malloc_slow_flags	deps/jemalloc/src/jemalloc.c	/^static uint8_t	malloc_slow_flags;$/;"	v	typeref:typename:uint8_t	file:
malloc_snprintf	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_snprintf /;"	d
malloc_snprintf	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_snprintf /;"	d
malloc_snprintf	deps/jemalloc/src/malloc_io.c	/^malloc_snprintf(char *str, size_t size, const char *format, ...) {$/;"	f
malloc_statistics_t	deps/jemalloc/src/zone.c	/^typedef struct malloc_statistics_t {$/;"	s	file:
malloc_statistics_t	deps/jemalloc/src/zone.c	/^} malloc_statistics_t;$/;"	t	typeref:struct:malloc_statistics_t	file:
malloc_stats	src/server.h	/^struct malloc_stats {$/;"	s
malloc_stats_print	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define malloc_stats_print /;"	d
malloc_stats_print	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define malloc_stats_print /;"	d
malloc_stats_print	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define malloc_stats_print /;"	d
malloc_strtoumax	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_strtoumax /;"	d
malloc_strtoumax	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_strtoumax /;"	d
malloc_strtoumax	deps/jemalloc/src/malloc_io.c	/^malloc_strtoumax(const char *restrict nptr, char **restrict endptr, int base) {$/;"	f	typeref:typename:uintmax_t
malloc_tsd_boot0	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_tsd_boot0 /;"	d
malloc_tsd_boot0	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_tsd_boot0 /;"	d
malloc_tsd_boot0	deps/jemalloc/src/tsd.c	/^malloc_tsd_boot0(void) {$/;"	f	typeref:typename:tsd_t *
malloc_tsd_boot1	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_tsd_boot1 /;"	d
malloc_tsd_boot1	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_tsd_boot1 /;"	d
malloc_tsd_boot1	deps/jemalloc/src/tsd.c	/^malloc_tsd_boot1(void) {$/;"	f	typeref:typename:void
malloc_tsd_cleanup_register	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_tsd_cleanup_register /;"	d
malloc_tsd_cleanup_register	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_tsd_cleanup_register /;"	d
malloc_tsd_cleanup_register	deps/jemalloc/src/tsd.c	/^malloc_tsd_cleanup_register(bool (*f)(void)) {$/;"	f	typeref:typename:void
malloc_tsd_cleanup_t	deps/jemalloc/include/jemalloc/internal/tsd_types.h	/^typedef bool (*malloc_tsd_cleanup_t)(void);$/;"	t	typeref:typename:bool (*)(void)
malloc_tsd_dalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_tsd_dalloc /;"	d
malloc_tsd_dalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_tsd_dalloc /;"	d
malloc_tsd_dalloc	deps/jemalloc/src/tsd.c	/^malloc_tsd_dalloc(void *wrapper) {$/;"	f	typeref:typename:void
malloc_tsd_malloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_tsd_malloc /;"	d
malloc_tsd_malloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_tsd_malloc /;"	d
malloc_tsd_malloc	deps/jemalloc/src/tsd.c	/^malloc_tsd_malloc(size_t size) {$/;"	f	typeref:typename:void *
malloc_usable_size	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define malloc_usable_size /;"	d
malloc_usable_size	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define malloc_usable_size /;"	d
malloc_usable_size	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define malloc_usable_size /;"	d
malloc_utrace_t	deps/jemalloc/src/jemalloc.c	/^} malloc_utrace_t;$/;"	t	typeref:struct:__anon4e2331a50308	file:
malloc_vcprintf	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_vcprintf /;"	d
malloc_vcprintf	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_vcprintf /;"	d
malloc_vcprintf	deps/jemalloc/src/malloc_io.c	/^malloc_vcprintf(void (*write_cb)(void *, const char *), void *cbopaque,$/;"	f	typeref:typename:void
malloc_vsnprintf	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_vsnprintf /;"	d
malloc_vsnprintf	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_vsnprintf /;"	d
malloc_vsnprintf	deps/jemalloc/src/malloc_io.c	/^malloc_vsnprintf(char *str, size_t size, const char *format, va_list ap) {$/;"	f	typeref:typename:size_t
malloc_write	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define malloc_write /;"	d
malloc_write	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define malloc_write /;"	d
malloc_write	deps/jemalloc/src/malloc_io.c	/^malloc_write(const char *s) {$/;"	f	typeref:typename:void
malloc_write_fd	deps/jemalloc/include/jemalloc/internal/malloc_io.h	/^malloc_write_fd(int fd, const void *buf, size_t count) {$/;"	f	typeref:typename:ssize_t
malloc_zone_t	deps/jemalloc/src/zone.c	/^} malloc_zone_t;$/;"	t	typeref:struct:_malloc_zone_t	file:
mallocx	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define mallocx /;"	d
mallocx	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define mallocx /;"	d
mallocx	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define mallocx /;"	d
mallocx	src/zmalloc.c	/^#define mallocx(/;"	d	file:
mallocx_free	deps/jemalloc/test/stress/microbench.c	/^mallocx_free(void) {$/;"	f	typeref:typename:void	file:
manualFailoverCheckTimeout	src/cluster.c	/^void manualFailoverCheckTimeout(void) {$/;"	f	typeref:typename:void
mapped	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	atomic_zu_t		mapped; \/* Partially derived. *\/$/;"	m	struct:arena_stats_s	typeref:typename:atomic_zu_t
mapped	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	size_t		mapped;$/;"	m	struct:base_s	typeref:typename:size_t
mapped	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t mapped;$/;"	m	struct:ctl_stats_s	typeref:typename:size_t
maps_coalesce	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h	/^static const bool maps_coalesce =$/;"	v	typeref:typename:const bool
maps_coalesce	deps/jemalloc/include/jemalloc/internal/jemalloc_preamble.h.in	/^static const bool maps_coalesce =$/;"	v	typeref:typename:const bool	file:
markNodeAsFailingIfNeeded	src/cluster.c	/^void markNodeAsFailingIfNeeded(clusterNode *node) {$/;"	f	typeref:typename:void
markfinalized	deps/lua/src/lgc.c	/^#define markfinalized(/;"	d	file:
markmt	deps/lua/src/lgc.c	/^static void markmt (global_State *g) {$/;"	f	typeref:typename:void	file:
markobject	deps/lua/src/lgc.c	/^#define markobject(/;"	d	file:
markroot	deps/lua/src/lgc.c	/^static void markroot (lua_State *L) {$/;"	f	typeref:typename:void	file:
marktmu	deps/lua/src/lgc.c	/^static void marktmu (global_State *g) {$/;"	f	typeref:typename:void	file:
markupval	deps/lua/src/lparser.c	/^static void markupval (FuncState *fs, int level) {$/;"	f	typeref:typename:void	file:
markvalue	deps/lua/src/lgc.c	/^#define markvalue(/;"	d	file:
mask	src/ae.h	/^    int mask; \/* one of AE_(READABLE|WRITABLE|BARRIER) *\/$/;"	m	struct:aeFileEvent	typeref:typename:int
mask	src/ae.h	/^    int mask;$/;"	m	struct:aeFiredEvent	typeref:typename:int
mask	src/ae.h	/^typedef void aeFileProc(struct aeEventLoop *eventLoop, int fd, void *clientData, int mask);$/;"	t	typeref:typename:void aeFileProc (struct aeEventLoop * eventLoop,int fd,void * clientData,int)
maskmarks	deps/lua/src/lgc.c	/^#define maskmarks	/;"	d	file:
maskmode	deps/linenoise/linenoise.c	/^static int maskmode = 0; \/* Show "***" instead of input. For passwords. *\/$/;"	v	typeref:typename:int	file:
master	src/redismodule.h	/^    int master;             \/* true if master, false if replica *\/$/;"	m	struct:RedisModuleReplicationInfo	typeref:typename:int
master	src/sentinel.c	/^    struct sentinelRedisInstance *master; \/* Master instance if it's slave. *\/$/;"	m	struct:sentinelRedisInstance	typeref:struct:sentinelRedisInstance *	file:
master	src/server.h	/^    client *master;     \/* Client that is master for this slave *\/$/;"	m	struct:redisServer	typeref:typename:client *
masterTryPartialResynchronization	src/replication.c	/^int masterTryPartialResynchronization(client *c) {$/;"	f	typeref:typename:int
master_fields_count	src/stream.h	/^    uint64_t master_fields_count;       \/* Master entries # of fields. *\/$/;"	m	struct:streamIterator	typeref:typename:uint64_t
master_fields_ptr	src/stream.h	/^    unsigned char *master_fields_ptr;   \/* Master field to emit next. *\/$/;"	m	struct:streamIterator	typeref:typename:unsigned char *
master_fields_start	src/stream.h	/^    unsigned char *master_fields_start; \/* Master entries start in listpack. *\/$/;"	m	struct:streamIterator	typeref:typename:unsigned char *
master_id	src/module.c	/^    char master_id[40]; \/* Only if flags & REDISMODULE_NODE_MASTER is true. *\/$/;"	m	struct:moduleClusterNodeInfo	typeref:typename:char[40]	file:
master_id	src/redis-cli.c	/^    char *master_id;$/;"	m	struct:clusterManagerCommand	typeref:typename:char *	file:
master_id	src/stream.h	/^    streamID master_id;     \/* ID of the master entry at listpack head. *\/$/;"	m	struct:streamIterator	typeref:typename:streamID
master_initial_offset	src/server.h	/^    long long master_initial_offset;           \/* Master PSYNC offset. *\/$/;"	m	struct:redisServer	typeref:typename:long long
master_link_down_time	src/sentinel.c	/^    mstime_t master_link_down_time; \/* Slave replication link down time. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:mstime_t	file:
master_repl_offset	src/server.h	/^    long long master_repl_offset;   \/* My current replication offset *\/$/;"	m	struct:redisServer	typeref:typename:long long
master_replid	src/server.h	/^    char master_replid[CONFIG_RUN_ID_SIZE+1];  \/* Master PSYNC runid. *\/$/;"	m	struct:redisServer	typeref:typename:char[]
masterauth	src/server.h	/^    sds masterauth;                 \/* AUTH with this password with master *\/$/;"	m	struct:redisServer	typeref:typename:sds
masterdownerr	src/server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *********** [4]* [4]* [4]* [4]***********
masterhost	src/redismodule.h	/^    char *masterhost;       \/* master instance hostname for NOW_REPLICA *\/$/;"	m	struct:RedisModuleReplicationInfo	typeref:typename:char *
masterhost	src/server.h	/^    char *masterhost;               \/* Hostname of master *\/$/;"	m	struct:redisServer	typeref:typename:char *
masterport	src/redismodule.h	/^    int masterport;         \/* master instance port for NOW_REPLICA *\/$/;"	m	struct:RedisModuleReplicationInfo	typeref:typename:int
masterport	src/server.h	/^    int masterport;                 \/* Port of master *\/$/;"	m	struct:redisServer	typeref:typename:int
masters	src/sentinel.c	/^    dict *masters;      \/* Dictionary of master sentinelRedisInstances.$/;"	m	struct:sentinelState	typeref:typename:dict *	file:
masteruser	src/server.h	/^    char *masteruser;               \/* AUTH with this user and masterauth with master *\/$/;"	m	struct:redisServer	typeref:typename:char *
match	deps/lua/src/lstrlib.c	/^static const char *match (MatchState *ms, const char *s, const char *p) {$/;"	f	typeref:typename:const char *	file:
match	src/adlist.h	/^    int (*match)(void *ptr, void *key);$/;"	m	struct:list	typeref:typename:int (*)(void * ptr,void * key)
match_capture	deps/lua/src/lstrlib.c	/^static const char *match_capture (MatchState *ms, const char *s, int l) {$/;"	f	typeref:typename:const char *	file:
match_class	deps/lua/src/lstrlib.c	/^static int match_class (int c, int cl) {$/;"	f	typeref:typename:int	file:
matchbalance	deps/lua/src/lstrlib.c	/^static const char *matchbalance (MatchState *ms, const char *s,$/;"	f	typeref:typename:const char *	file:
matchbracketclass	deps/lua/src/lstrlib.c	/^static int matchbracketclass (int c, const char *p, const char *ec) {$/;"	f	typeref:typename:int	file:
math_abs	deps/lua/src/lmathlib.c	/^static int math_abs (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_acos	deps/lua/src/lmathlib.c	/^static int math_acos (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_asin	deps/lua/src/lmathlib.c	/^static int math_asin (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_atan	deps/lua/src/lmathlib.c	/^static int math_atan (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_atan2	deps/lua/src/lmathlib.c	/^static int math_atan2 (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_ceil	deps/lua/src/lmathlib.c	/^static int math_ceil (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_cos	deps/lua/src/lmathlib.c	/^static int math_cos (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_cosh	deps/lua/src/lmathlib.c	/^static int math_cosh (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_deg	deps/lua/src/lmathlib.c	/^static int math_deg (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_exp	deps/lua/src/lmathlib.c	/^static int math_exp (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_floor	deps/lua/src/lmathlib.c	/^static int math_floor (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_fmod	deps/lua/src/lmathlib.c	/^static int math_fmod (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_frexp	deps/lua/src/lmathlib.c	/^static int math_frexp (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_ldexp	deps/lua/src/lmathlib.c	/^static int math_ldexp (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_log	deps/lua/src/lmathlib.c	/^static int math_log (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_log10	deps/lua/src/lmathlib.c	/^static int math_log10 (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_max	deps/lua/src/lmathlib.c	/^static int math_max (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_min	deps/lua/src/lmathlib.c	/^static int math_min (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_modf	deps/lua/src/lmathlib.c	/^static int math_modf (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_pow	deps/lua/src/lmathlib.c	/^static int math_pow (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_rad	deps/lua/src/lmathlib.c	/^static int math_rad (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_random	deps/lua/src/lmathlib.c	/^static int math_random (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_randomseed	deps/lua/src/lmathlib.c	/^static int math_randomseed (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_sin	deps/lua/src/lmathlib.c	/^static int math_sin (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_sinh	deps/lua/src/lmathlib.c	/^static int math_sinh (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_sqrt	deps/lua/src/lmathlib.c	/^static int math_sqrt (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_tan	deps/lua/src/lmathlib.c	/^static int math_tan (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_tanh	deps/lua/src/lmathlib.c	/^static int math_tanh (lua_State *L) {$/;"	f	typeref:typename:int	file:
mathlib	deps/lua/src/lmathlib.c	/^static const luaL_Reg mathlib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
max	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	unsigned	max;$/;"	m	struct:__anonc2210a4f0108	typeref:typename:unsigned
max	src/geohash.h	/^    double max;$/;"	m	struct:__anona01652f10308	typeref:typename:double
max	src/latency.h	/^    uint32_t max;           \/* Max of current samples. *\/$/;"	m	struct:latencyStats	typeref:typename:uint32_t
max	src/latency.h	/^    uint32_t max; \/* Max latency observed for this event. *\/$/;"	m	struct:latencyTimeSeries	typeref:typename:uint32_t
max	src/redis-cli.c	/^    long long max;   \/* Max latency to fit into this interval (usec). *\/$/;"	m	struct:distsamples	typeref:typename:long long	file:
max	src/server.h	/^    double min, max;$/;"	m	struct:__anon3ef696e90d08	typeref:typename:double
max	src/server.h	/^    sds min, max;     \/* May be set to shared.(minstring|maxstring) *\/$/;"	m	struct:__anon3ef696e90e08	typeref:typename:sds
max	src/sparkline.h	/^    double min, max;$/;"	m	struct:sequence	typeref:typename:double
max_background_threads	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define max_background_threads /;"	d
max_background_threads	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define max_background_threads /;"	d
max_background_threads	deps/jemalloc/src/background_thread.c	/^size_t max_background_threads;$/;"	v	typeref:typename:size_t
max_background_threads_ctl	deps/jemalloc/src/ctl.c	/^max_background_threads_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	typeref:typename:int	file:
max_expand	deps/lua/src/lstrlib.c	/^static const char *max_expand (MatchState *ms, const char *s,$/;"	f	typeref:typename:const char *	file:
max_n_thds	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	uint32_t		max_n_thds;$/;"	m	struct:__anonb26b3fca0308	typeref:typename:uint32_t
max_processing_chunk	src/rio.h	/^    size_t max_processing_chunk;$/;"	m	struct:_rio	typeref:typename:size_t
max_size_in_use	deps/jemalloc/src/zone.c	/^	size_t max_size_in_use;$/;"	m	struct:malloc_statistics_t	typeref:typename:size_t	file:
max_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t max_value;$/;"	m	struct:hdr_histogram	typeref:typename:int64_t
max_wait_time	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	nstime_t		max_wait_time;$/;"	m	struct:__anonb26b3fca0308	typeref:typename:nstime_t
maxbuf	deps/hiredis/read.h	/^    size_t maxbuf; \/* Max length of unused buffer *\/$/;"	m	struct:redisReader	typeref:typename:size_t
maxclients	src/server.h	/^    unsigned int maxclients;            \/* Max number of simultaneous clients *\/$/;"	m	struct:redisServer	typeref:typename:unsigned int
maxelements	deps/hiredis/read.h	/^    long long maxelements; \/* Max multi-bulk elements *\/$/;"	m	struct:redisReader	typeref:typename:long long
maxex	src/server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon3ef696e90d08	typeref:typename:int
maxex	src/server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon3ef696e90e08	typeref:typename:int
maxfd	src/ae.h	/^    int maxfd;   \/* highest file descriptor currently registered *\/$/;"	m	struct:aeEventLoop	typeref:typename:int
maxidletime	src/server.h	/^    int maxidletime;                \/* Client timeout in seconds *\/$/;"	m	struct:redisServer	typeref:typename:int
maxitems	src/rax.h	/^    size_t items, maxitems; \/* Number of items contained and total space. *\/$/;"	m	struct:raxStack	typeref:typename:size_t
maxlen	src/scripting.c	/^    size_t maxlen;  \/* Max var dump \/ reply length. *\/$/;"	m	struct:ldbState	typeref:typename:size_t	file:
maxlen	src/t_stream.c	/^    long long maxlen; \/* After trimming, leave stream at this length . *\/$/;"	m	struct:__anon8fe9202c0108	typeref:typename:long long	file:
maxlen_hint_sent	src/scripting.c	/^    int maxlen_hint_sent; \/* Did we already hint about "set maxlen"? *\/$/;"	m	struct:ldbState	typeref:typename:int	file:
maxmemory	src/server.h	/^    unsigned long long maxmemory;   \/* Max number of memory bytes to use *\/$/;"	m	struct:redisServer	typeref:typename:unsigned long long
maxmemory_eviction_tenacity	src/server.h	/^    int maxmemory_eviction_tenacity;\/* Aggressiveness of eviction processing *\/$/;"	m	struct:redisServer	typeref:typename:int
maxmemory_policy	src/server.h	/^    int maxmemory_policy;           \/* Policy for key eviction *\/$/;"	m	struct:redisServer	typeref:typename:int
maxmemory_policy_enum	src/config.c	/^configEnum maxmemory_policy_enum[] = {$/;"	v	typeref:typename:configEnum[]
maxmemory_samples	src/server.h	/^    int maxmemory_samples;          \/* Precision of random sampling *\/$/;"	m	struct:redisServer	typeref:typename:int
maxn	deps/lua/src/ltablib.c	/^static int maxn (lua_State *L) {$/;"	f	typeref:typename:int	file:
maxrows	deps/linenoise/linenoise.c	/^    size_t maxrows;     \/* Maximum num of rows used so far (multiline mode) *\/$/;"	m	struct:linenoiseState	typeref:typename:size_t	file:
maxstacksize	deps/lua/src/lobject.h	/^  lu_byte maxstacksize;$/;"	m	struct:Proto	typeref:typename:lu_byte
maxstep	tests/modules/defragtest.c	/^    int maxstep;$/;"	m	struct:FragObject	typeref:typename:int	file:
maxstring	src/server.h	/^    sds minstring, maxstring;$/;"	m	struct:sharedObjectsStruct	typeref:typename:sds
may_overflow	deps/jemalloc/src/jemalloc.c	/^	bool may_overflow;$/;"	m	struct:static_opts_s	typeref:typename:bool	file:
maybeCheckWant	deps/hiredis/ssl.c	/^static int maybeCheckWant(redisSSL *rssl, int rv) {$/;"	f	typeref:typename:int	file:
mb_delim	src/redis-cli.c	/^    sds mb_delim;$/;"	m	struct:config	typeref:typename:sds	file:
mbulkhdr	src/server.h	/^    *mbulkhdr[OBJ_SHARED_BULKHDR_LEN], \/* "*<value>\\r\\n" *\/$/;"	m	struct:sharedObjectsStruct
mdouleClusterNodeInfo	src/module.c	/^} mdouleClusterNodeInfo;$/;"	t	typeref:struct:moduleClusterNodeInfo	file:
med3	src/pqsort.c	/^med3(char *a, char *b, char *c,$/;"	f	typeref:typename:char *	file:
median_equivalent_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t median_equivalent_value;$/;"	m	struct:hdr_iter	typeref:typename:int64_t
mem_usage	src/module.c	/^        moduleTypeMemUsageFunc mem_usage;$/;"	m	struct:RM_CreateDataType::typemethods	typeref:typename:moduleTypeMemUsageFunc	file:
mem_usage	src/redismodule.h	/^    RedisModuleTypeMemUsageFunc mem_usage;$/;"	m	struct:RedisModuleTypeMethods	typeref:typename:RedisModuleTypeMemUsageFunc
mem_usage	src/server.h	/^    moduleTypeMemUsageFunc mem_usage;$/;"	m	struct:RedisModuleType	typeref:typename:moduleTypeMemUsageFunc
memalign	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define memalign /;"	d
memalign	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define memalign /;"	d
memalign	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define memalign /;"	d
memalign	deps/jemalloc/src/zone.c	/^	void *(*memalign)(struct _malloc_zone_t *, size_t, size_t);$/;"	m	struct:_malloc_zone_t	typeref:typename:void * (*)(struct _malloc_zone_t *,size_t,size_t)	file:
member	src/geo.h	/^    char *member;$/;"	m	struct:geoPoint	typeref:typename:char *
membersOfAllNeighbors	src/geo.c	/^int membersOfAllNeighbors(robj *zobj, GeoHashRadius n, GeoShape *shape, geoArray *ga, unsigned l/;"	f	typeref:typename:int
membersOfGeoHashBox	src/geo.c	/^int membersOfGeoHashBox(robj *zobj, GeoHashBits hash, geoArray *ga, GeoShape *shape, unsigned lo/;"	f	typeref:typename:int
memcheck_enabled	src/server.h	/^    int memcheck_enabled;           \/* Enable memory check on crash. *\/$/;"	m	struct:redisServer	typeref:typename:int
memkeys	src/redis-cli.c	/^    int memkeys;$/;"	m	struct:config	typeref:typename:int	file:
memkeys_samples	src/redis-cli.c	/^    unsigned memkeys_samples;$/;"	m	struct:config	typeref:typename:unsigned	file:
memmapchars	src/util.c	/^char *memmapchars(char *s, size_t len, const char *from, const char *to, size_t setlen) {$/;"	f	typeref:typename:char *
memory	src/module.c	/^    char memory[];$/;"	m	struct:RedisModulePoolAllocBlock	typeref:typename:char[]	file:
memoryCommand	src/object.c	/^void memoryCommand(client *c) {$/;"	f	typeref:typename:void
memoryGetKeys	src/db.c	/^int memoryGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f	typeref:typename:int
mempbrk	src/util.c	/^const char *mempbrk(const char *s, size_t len, const char *chars, size_t charslen) {$/;"	f	typeref:typename:const char *
memrev16	src/endianconv.c	/^void memrev16(void *p) {$/;"	f	typeref:typename:void
memrev16ifbe	src/endianconv.h	/^#define memrev16ifbe(/;"	d
memrev32	src/endianconv.c	/^void memrev32(void *p) {$/;"	f	typeref:typename:void
memrev32ifbe	src/endianconv.h	/^#define memrev32ifbe(/;"	d
memrev64	src/endianconv.c	/^void memrev64(void *p) {$/;"	f	typeref:typename:void
memrev64ifbe	src/endianconv.h	/^#define memrev64ifbe(/;"	d
memrevifle	deps/lua/src/lua_cmsgpack.c	/^void memrevifle(void *ptr, size_t len) {$/;"	f	typeref:typename:void
memtest	src/memtest.c	/^void memtest(size_t megabytes, int passes) {$/;"	f	typeref:typename:void
memtest_addressing	src/memtest.c	/^int memtest_addressing(unsigned long *l, size_t bytes, int interactive) {$/;"	f	typeref:typename:int
memtest_alloc_and_test	src/memtest.c	/^void memtest_alloc_and_test(size_t megabytes, int passes) {$/;"	f	typeref:typename:void
memtest_compare	src/memtest.c	/^int memtest_compare(unsigned long *l, size_t bytes, int interactive) {$/;"	f	typeref:typename:int
memtest_compare_times	src/memtest.c	/^int memtest_compare_times(unsigned long *m, size_t bytes, int pass, int times,$/;"	f	typeref:typename:int
memtest_fill_random	src/memtest.c	/^void memtest_fill_random(unsigned long *l, size_t bytes, int interactive) {$/;"	f	typeref:typename:void
memtest_fill_value	src/memtest.c	/^void memtest_fill_value(unsigned long *l, size_t bytes, unsigned long v1,$/;"	f	typeref:typename:void
memtest_preserving_test	src/memtest.c	/^int memtest_preserving_test(unsigned long *m, size_t bytes, int passes) {$/;"	f	typeref:typename:int
memtest_progress_end	src/memtest.c	/^void memtest_progress_end(void) {$/;"	f	typeref:typename:void
memtest_progress_start	src/memtest.c	/^void memtest_progress_start(char *title, int pass) {$/;"	f	typeref:typename:void
memtest_progress_step	src/memtest.c	/^void memtest_progress_step(size_t curr, size_t size, char c) {$/;"	f	typeref:typename:void
memtest_test	src/memtest.c	/^int memtest_test(unsigned long *m, size_t bytes, int passes, int interactive) {$/;"	f	typeref:typename:int
memtest_test_linux_anonymous_maps	src/debug.c	/^int memtest_test_linux_anonymous_maps(void) {$/;"	f	typeref:typename:int
memtoll	src/util.c	/^long long memtoll(const char *p, int *err) {$/;"	f	typeref:typename:long long
merge	deps/jemalloc/include/jemalloc/jemalloc.h	/^	extent_merge_t		*merge;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_merge_t *
merge	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_merge_t		*merge;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_merge_t *
merge	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^	extent_merge_t		*merge;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_merge_t *	file:
message_len	src/cluster.h	/^    uint32_t message_len;$/;"	m	struct:__anon2cc7db540308	typeref:typename:uint32_t
messagebulk	src/server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
metadata	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t metadata;$/;"	m	struct:ctl_stats_s	typeref:typename:size_t
metadata_thp	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	atomic_zu_t		metadata_thp;$/;"	m	struct:arena_stats_s	typeref:typename:atomic_zu_t
metadata_thp	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t metadata_thp;$/;"	m	struct:ctl_stats_s	typeref:typename:size_t
metadata_thp_always	deps/jemalloc/include/jemalloc/internal/base_types.h	/^	metadata_thp_always     = 2,$/;"	e	enum:__anon7b9bac700103
metadata_thp_auto	deps/jemalloc/include/jemalloc/internal/base_types.h	/^	metadata_thp_auto       = 1,$/;"	e	enum:__anon7b9bac700103
metadata_thp_disabled	deps/jemalloc/include/jemalloc/internal/base_types.h	/^	metadata_thp_disabled   = 0,$/;"	e	enum:__anon7b9bac700103
metadata_thp_enabled	deps/jemalloc/include/jemalloc/internal/base_inlines.h	/^metadata_thp_enabled(void) {$/;"	f	typeref:typename:bool
metadata_thp_madvise	deps/jemalloc/src/base.c	/^metadata_thp_madvise(void) {$/;"	f	typeref:typename:bool	file:
metadata_thp_mode_limit	deps/jemalloc/include/jemalloc/internal/base_types.h	/^	metadata_thp_mode_limit = 3$/;"	e	enum:__anon7b9bac700103
metadata_thp_mode_names	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define metadata_thp_mode_names /;"	d
metadata_thp_mode_names	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define metadata_thp_mode_names /;"	d
metadata_thp_mode_names	deps/jemalloc/src/base.c	/^const char *metadata_thp_mode_names[] = {$/;"	v	typeref:typename:const char * []
metadata_thp_mode_t	deps/jemalloc/include/jemalloc/internal/base_types.h	/^} metadata_thp_mode_t;$/;"	t	typeref:enum:__anon7b9bac700103
metatable	deps/lua/src/lobject.h	/^    struct Table *metatable;$/;"	m	struct:Udata::__anona52fc9410308	typeref:struct:Table *
metatable	deps/lua/src/lobject.h	/^  struct Table *metatable;$/;"	m	struct:Table	typeref:struct:Table *
mf_can_start	src/cluster.h	/^    int mf_can_start;           \/* If non-zero signal that the manual failover$/;"	m	struct:clusterState	typeref:typename:int
mf_end	src/cluster.h	/^    mstime_t mf_end;            \/* Manual failover time limit (ms unixtime).$/;"	m	struct:clusterState	typeref:typename:mstime_t
mf_master_offset	src/cluster.h	/^    long long mf_master_offset; \/* Master offset the slave needs to start MF$/;"	m	struct:clusterState	typeref:typename:long long
mf_slave	src/cluster.h	/^    clusterNode *mf_slave;      \/* Slave performing the manual failover. *\/$/;"	m	struct:clusterState	typeref:typename:clusterNode *
mflags	src/cluster.h	/^    unsigned char mflags[3]; \/* Message flags: CLUSTERMSG_FLAG[012]_... *\/$/;"	m	struct:__anon2cc7db540b08	typeref:typename:unsigned char[3]
mgetCommand	src/t_string.c	/^void mgetCommand(client *c) {$/;"	f	typeref:typename:void
microseconds	src/server.h	/^    long long microseconds, calls, rejected_calls, failed_calls;$/;"	m	struct:redisCommand	typeref:typename:long long
mid_quote	deps/jemalloc/test/unit/emitter.c	/^	bool mid_quote;$/;"	m	struct:buf_descriptor_s	typeref:typename:bool	file:
migrateCacheDictType	src/server.c	/^dictType migrateCacheDictType = {$/;"	v	typeref:typename:dictType
migrateCachedSocket	src/cluster.c	/^typedef struct migrateCachedSocket {$/;"	s	file:
migrateCachedSocket	src/cluster.c	/^} migrateCachedSocket;$/;"	t	typeref:struct:migrateCachedSocket	file:
migrateCloseSocket	src/cluster.c	/^void migrateCloseSocket(robj *host, robj *port) {$/;"	f	typeref:typename:void
migrateCloseTimedoutSockets	src/cluster.c	/^void migrateCloseTimedoutSockets(void) {$/;"	f	typeref:typename:void
migrateCommand	src/cluster.c	/^void migrateCommand(client *c) {$/;"	f	typeref:typename:void
migrateGetKeys	src/db.c	/^int migrateGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f	typeref:typename:int
migrateGetSocket	src/cluster.c	/^migrateCachedSocket* migrateGetSocket(client *c, robj *host, robj *port, long timeout) {$/;"	f	typeref:typename:migrateCachedSocket *
migrate_cached_sockets	src/server.h	/^    dict *migrate_cached_sockets;\/* MIGRATE cached sockets *\/$/;"	m	struct:redisServer	typeref:typename:dict *
migrating	src/redis-benchmark.c	/^    sds *migrating; \/* An array of sds where even strings are slots and odd$/;"	m	struct:clusterNode	typeref:typename:sds *	file:
migrating	src/redis-cli.c	/^    sds *migrating; \/* An array of sds where even strings are slots and odd$/;"	m	struct:clusterManagerNode	typeref:typename:sds *	file:
migrating_count	src/redis-benchmark.c	/^    int migrating_count; \/* Length of the migrating array (migrating slots*2) *\/$/;"	m	struct:clusterNode	typeref:typename:int	file:
migrating_count	src/redis-cli.c	/^    int migrating_count; \/* Length of the migrating array (migrating slots*2) *\/$/;"	m	struct:clusterManagerNode	typeref:typename:int	file:
migrating_slots_to	src/cluster.h	/^    clusterNode *migrating_slots_to[CLUSTER_SLOTS];$/;"	m	struct:clusterState	typeref:typename:clusterNode * []
min	deps/lua/etc/Makefile	/^min:	min.c$/;"	t
min	src/geohash.h	/^    double min;$/;"	m	struct:__anona01652f10308	typeref:typename:double
min	src/latency.h	/^    uint32_t min;           \/* Min of current samples. *\/$/;"	m	struct:latencyStats	typeref:typename:uint32_t
min	src/pqsort.c	/^#define min(/;"	d	file:
min	src/server.h	/^    double min, max;$/;"	m	struct:__anon3ef696e90d08	typeref:typename:double
min	src/server.h	/^    sds min, max;     \/* May be set to shared.(minstring|maxstring) *\/$/;"	m	struct:__anon3ef696e90e08	typeref:typename:sds
min	src/sparkline.h	/^    double min, max;$/;"	m	struct:sequence	typeref:typename:double
min_alignment	deps/jemalloc/src/jemalloc.c	/^	size_t min_alignment;$/;"	m	struct:static_opts_s	typeref:typename:size_t	file:
min_expand	deps/lua/src/lstrlib.c	/^static const char *min_expand (MatchState *ms, const char *s,$/;"	f	typeref:typename:const char *	file:
min_value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t min_value;$/;"	m	struct:hdr_histogram	typeref:typename:int64_t
minex	src/server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon3ef696e90d08	typeref:typename:int
minex	src/server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon3ef696e90e08	typeref:typename:int
mingw	deps/lua/src/Makefile	/^mingw:$/;"	t
minid	src/t_stream.c	/^    streamID minid; \/* Trim by ID (No stream entries with ID < 'minid' will remain) *\/$/;"	m	struct:__anon8fe9202c0108	typeref:typename:streamID	file:
minstring	src/server.h	/^    sds minstring, maxstring;$/;"	m	struct:sharedObjectsStruct	typeref:typename:sds
minutes_diff	utils/lru/lfu-simulation.c	/^uint16_t minutes_diff(uint16_t now, uint16_t prev) {$/;"	f	typeref:typename:uint16_t
mixDigest	src/debug.c	/^void mixDigest(unsigned char *digest, void *ptr, size_t len) {$/;"	f	typeref:typename:void
mixStringObjectDigest	src/debug.c	/^void mixStringObjectDigest(unsigned char *digest, robj *o) {$/;"	f	typeref:typename:void
mkfuncname	deps/lua/src/loadlib.c	/^static const char *mkfuncname (lua_State *L, const char *modname) {$/;"	f	typeref:typename:const char *	file:
mlmode	deps/linenoise/linenoise.c	/^static int mlmode = 0;  \/* Multi line mode. Default is single line. *\/$/;"	v	typeref:typename:int	file:
mm_recursion	deps/jemalloc/test/include/test/SFMT-sse2.h	/^JEMALLOC_ALWAYS_INLINE __m128i mm_recursion(__m128i *a, __m128i *b,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE __m128i
mmap_flags	deps/jemalloc/src/pages.c	/^static int	mmap_flags;$/;"	v	typeref:typename:int	file:
modal_json	deps/jemalloc/test/unit/emitter.c	/^const char *modal_json =$/;"	v	typeref:typename:const char *
modal_table	deps/jemalloc/test/unit/emitter.c	/^const char *modal_table =$/;"	v	typeref:typename:const char *
mode	src/module.c	/^    int mode;       \/* Opening mode. *\/$/;"	m	struct:RedisModuleKey	typeref:typename:int	file:
modinit	deps/lua/src/loadlib.c	/^static void modinit (lua_State *L, const char *modname) {$/;"	f	typeref:typename:void	file:
module	src/cluster.h	/^    } module;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon2cc7db540a08
module	src/module.c	/^    RedisModule *module;                \/* Module reference. *\/$/;"	m	struct:RedisModuleTimer	typeref:typename:RedisModule *	file:
module	src/module.c	/^    RedisModule *module;    \/* Module blocking the client. *\/$/;"	m	struct:RedisModuleBlockedClient	typeref:typename:RedisModule *	file:
module	src/module.c	/^    RedisModule *module;$/;"	m	struct:RedisModuleCommandFilter	typeref:typename:RedisModule *	file:
module	src/module.c	/^    RedisModule *module;$/;"	m	struct:RedisModuleEventListener	typeref:typename:RedisModule *	file:
module	src/module.c	/^    RedisModule *module;$/;"	m	struct:RedisModuleKeyspaceSubscriber	typeref:typename:RedisModule *	file:
module	src/module.c	/^    RedisModule *module;$/;"	m	struct:RedisModuleSharedAPI	typeref:typename:RedisModule *	file:
module	src/module.c	/^    struct RedisModule *module;     \/* Module reference. *\/$/;"	m	struct:RedisModuleCtx	typeref:struct:RedisModule *	file:
module	src/module.c	/^    struct RedisModule *module;$/;"	m	struct:RedisModuleCommandProxy	typeref:struct:RedisModule *	file:
module	src/module.c	/^    struct RedisModule *module;$/;"	m	struct:RedisModuleInfoCtx	typeref:struct:RedisModule *	file:
module	src/module.c	/^    struct RedisModule *module;$/;"	m	struct:moduleClusterReceiver	typeref:struct:RedisModule *	file:
module	src/server.h	/^    struct RedisModule *module;$/;"	m	struct:RedisModuleType	typeref:struct:RedisModule *
moduleAPIDictType	src/module.c	/^dictType moduleAPIDictType = {$/;"	v	typeref:typename:dictType
moduleAcquireGIL	src/module.c	/^void moduleAcquireGIL(void) {$/;"	f	typeref:typename:void
moduleAllDatatypesHandleErrors	src/module.c	/^int moduleAllDatatypesHandleErrors() {$/;"	f	typeref:typename:int
moduleAssertUnsharedString	src/module.c	/^RedisModuleString *moduleAssertUnsharedString(RedisModuleString *str) {$/;"	f	typeref:typename:RedisModuleString *
moduleBlockClient	src/module.c	/^RedisModuleBlockedClient *moduleBlockClient(RedisModuleCtx *ctx, RedisModuleCmdFunc reply_callba/;"	f	typeref:typename:RedisModuleBlockedClient *
moduleBlockedClientMayTimeout	src/module.c	/^int moduleBlockedClientMayTimeout(client *c) {$/;"	f	typeref:typename:int
moduleBlockedClientPipeReadable	src/module.c	/^void moduleBlockedClientPipeReadable(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	typeref:typename:void
moduleBlockedClientTimedOut	src/module.c	/^void moduleBlockedClientTimedOut(client *c) {$/;"	f	typeref:typename:void
moduleCallClusterReceivers	src/module.c	/^void moduleCallClusterReceivers(const char *sender_id, uint64_t module_id, uint8_t type, const u/;"	f	typeref:typename:void
moduleCallCommandFilters	src/module.c	/^void moduleCallCommandFilters(client *c) {$/;"	f	typeref:typename:void
moduleChangeCallback	tests/modules/hooks.c	/^void moduleChangeCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f	typeref:typename:void
moduleClientIsBlockedOnKeys	src/module.c	/^int moduleClientIsBlockedOnKeys(client *c) {$/;"	f	typeref:typename:int
moduleCloseKey	src/module.c	/^static void moduleCloseKey(RedisModuleKey *key) {$/;"	f	typeref:typename:void	file:
moduleClusterNodeInfo	src/module.c	/^typedef struct moduleClusterNodeInfo {$/;"	s	file:
moduleClusterReceiver	src/module.c	/^typedef struct moduleClusterReceiver {$/;"	s	file:
moduleClusterReceiver	src/module.c	/^} moduleClusterReceiver;$/;"	t	typeref:struct:moduleClusterReceiver	file:
moduleCommand	src/module.c	/^void moduleCommand(client *c) {$/;"	f	typeref:typename:void
moduleCommandFilters	src/module.c	/^static list *moduleCommandFilters;$/;"	v	typeref:typename:list *	file:
moduleCount	src/module.c	/^size_t moduleCount(void) {$/;"	f	typeref:typename:size_t
moduleCreateArgvFromUserFormat	src/module.c	/^robj **moduleCreateArgvFromUserFormat(const char *cmdname, const char *fmt, int *argcp, int *fla/;"	f	typeref:typename:robj **
moduleCreateCallReplyFromProto	src/module.c	/^RedisModuleCallReply *moduleCreateCallReplyFromProto(RedisModuleCtx *ctx, sds proto) {$/;"	f	typeref:typename:RedisModuleCallReply *
moduleCreateEmptyKey	src/module.c	/^int moduleCreateEmptyKey(RedisModuleKey *key, int type) {$/;"	f	typeref:typename:int
moduleDefragGlobals	src/module.c	/^long moduleDefragGlobals(void) {$/;"	f	typeref:typename:long
moduleDefragValue	src/module.c	/^int moduleDefragValue(robj *key, robj *value, long *defragged) {$/;"	f	typeref:typename:int
moduleDelKeyIfEmpty	src/module.c	/^int moduleDelKeyIfEmpty(RedisModuleKey *key) {$/;"	f	typeref:typename:int
moduleFireServerEvent	src/module.c	/^void moduleFireServerEvent(uint64_t eid, int subid, void *data) {$/;"	f	typeref:typename:void
moduleForkInfo	src/module.c	/^} moduleForkInfo = {0};$/;"	v	typeref:struct:RedisModuleForkInfo
moduleFreeAuthenticatedClients	src/module.c	/^static void moduleFreeAuthenticatedClients(RedisModule *module) {$/;"	f	typeref:typename:void	file:
moduleFreeCallReplyRec	src/module.c	/^void moduleFreeCallReplyRec(RedisModuleCallReply *reply, int freenested){$/;"	f	typeref:typename:void
moduleFreeContext	src/module.c	/^void moduleFreeContext(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:void
moduleFreeContextReusedClient	src/module.c	/^static client *moduleFreeContextReusedClient;$/;"	v	typeref:typename:client *	file:
moduleFreeModuleStructure	src/module.c	/^void moduleFreeModuleStructure(struct RedisModule *module) {$/;"	f	typeref:typename:void
moduleGIL	src/module.c	/^static pthread_mutex_t moduleGIL = PTHREAD_MUTEX_INITIALIZER;$/;"	v	typeref:typename:pthread_mutex_t	file:
moduleGetCommandKeysViaAPI	src/module.c	/^int moduleGetCommandKeysViaAPI(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *r/;"	f	typeref:typename:int
moduleGetReplyClient	src/module.c	/^client *moduleGetReplyClient(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:client *
moduleHandleBlockedClients	src/module.c	/^void moduleHandleBlockedClients(void) {$/;"	f	typeref:typename:void
moduleHandlePropagationAfterCommandCallback	src/module.c	/^void moduleHandlePropagationAfterCommandCallback(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:void
moduleInitDigestContext	src/server.h	/^#define moduleInitDigestContext(/;"	d
moduleInitIOContext	src/server.h	/^#define moduleInitIOContext(/;"	d
moduleInitKey	src/module.c	/^static void moduleInitKey(RedisModuleKey *kp, RedisModuleCtx *ctx, robj *keyname, robj *value, i/;"	f	typeref:typename:void	file:
moduleInitKeyTypeSpecific	src/module.c	/^static void moduleInitKeyTypeSpecific(RedisModuleKey *key) {$/;"	f	typeref:typename:void	file:
moduleInitModulesSystem	src/module.c	/^void moduleInitModulesSystem(void) {$/;"	f	typeref:typename:void
moduleInitModulesSystemLast	src/module.c	/^void moduleInitModulesSystemLast(void) {$/;"	f	typeref:typename:void
moduleKeyspaceSubscribers	src/module.c	/^static list *moduleKeyspaceSubscribers;$/;"	v	typeref:typename:list *	file:
moduleLateDefrag	src/module.c	/^int moduleLateDefrag(robj *key, robj *value, unsigned long *cursor, long long endtime, long long/;"	f	typeref:typename:int
moduleLoad	src/module.c	/^int moduleLoad(const char *path, void **module_argv, int module_argc) {$/;"	f	typeref:typename:int
moduleLoadFromQueue	src/module.c	/^void moduleLoadFromQueue(void) {$/;"	f	typeref:typename:void
moduleLoadQueueEntry	src/server.h	/^struct moduleLoadQueueEntry {$/;"	s
moduleLoadString	src/module.c	/^void *moduleLoadString(RedisModuleIO *io, int plain, size_t *lenptr) {$/;"	f	typeref:typename:void *
moduleLogRaw	src/module.c	/^void moduleLogRaw(RedisModule *module, const char *levelstr, const char *fmt, va_list ap) {$/;"	f	typeref:typename:void
moduleNotifyKeyUnlink	src/module.c	/^void moduleNotifyKeyUnlink(robj *key, robj *val) {$/;"	f	typeref:typename:void
moduleNotifyKeyspaceEvent	src/module.c	/^void moduleNotifyKeyspaceEvent(int type, const char *event, robj *key, int dbid) {$/;"	f	typeref:typename:void
moduleNotifyUserChanged	src/module.c	/^void moduleNotifyUserChanged(client *c) {$/;"	f	typeref:typename:void
moduleParseCallReply	src/module.c	/^void moduleParseCallReply(RedisModuleCallReply *reply) {$/;"	f	typeref:typename:void
moduleParseCallReply_Array	src/module.c	/^void moduleParseCallReply_Array(RedisModuleCallReply *reply) {$/;"	f	typeref:typename:void
moduleParseCallReply_BulkString	src/module.c	/^void moduleParseCallReply_BulkString(RedisModuleCallReply *reply) {$/;"	f	typeref:typename:void
moduleParseCallReply_Int	src/module.c	/^void moduleParseCallReply_Int(RedisModuleCallReply *reply) {$/;"	f	typeref:typename:void
moduleParseCallReply_SimpleString	src/module.c	/^void moduleParseCallReply_SimpleString(RedisModuleCallReply *reply) {$/;"	f	typeref:typename:void
modulePopulateClientInfoStructure	src/module.c	/^int modulePopulateClientInfoStructure(void *ci, client *client, int structver) {$/;"	f	typeref:typename:int
modulePopulateReplicationInfoStructure	src/module.c	/^int modulePopulateReplicationInfoStructure(void *ri, int structver) {$/;"	f	typeref:typename:int
moduleRDBLoadError	src/module.c	/^void moduleRDBLoadError(RedisModuleIO *io) {$/;"	f	typeref:typename:void
moduleRegisterApi	src/module.c	/^int moduleRegisterApi(const char *funcname, void *funcptr) {$/;"	f	typeref:typename:int
moduleRegisterCoreAPI	src/module.c	/^void moduleRegisterCoreAPI(void) {$/;"	f	typeref:typename:void
moduleReleaseGIL	src/module.c	/^void moduleReleaseGIL(void) {$/;"	f	typeref:typename:void
moduleReplicateMultiIfNeeded	src/module.c	/^void moduleReplicateMultiIfNeeded(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:void
moduleScanCallback	src/module.c	/^static void moduleScanCallback(void *privdata, const dictEntry *de) {$/;"	f	typeref:typename:void	file:
moduleScanKeyCallback	src/module.c	/^static void moduleScanKeyCallback(void *privdata, const dictEntry *de) {$/;"	f	typeref:typename:void	file:
moduleTimerHandler	src/module.c	/^int moduleTimerHandler(struct aeEventLoop *eventLoop, long long id, void *clientData) {$/;"	f	typeref:typename:int
moduleTryAcquireGIL	src/module.c	/^int moduleTryAcquireGIL(void) {$/;"	f	typeref:typename:int
moduleTryServeClientBlockedOnKey	src/module.c	/^int moduleTryServeClientBlockedOnKey(client *c, robj *key) {$/;"	f	typeref:typename:int
moduleType	src/server.h	/^} moduleType;$/;"	t	typeref:struct:RedisModuleType
moduleTypeAuxLoadFunc	src/server.h	/^typedef int (*moduleTypeAuxLoadFunc)(struct RedisModuleIO *rdb, int encver, int when);$/;"	t	typeref:typename:int (*)(struct RedisModuleIO * rdb,int encver,int when)
moduleTypeAuxSaveFunc	src/server.h	/^typedef void (*moduleTypeAuxSaveFunc)(struct RedisModuleIO *rdb, int when);$/;"	t	typeref:typename:void (*)(struct RedisModuleIO * rdb,int when)
moduleTypeCopyFunc	src/server.h	/^typedef void *(*moduleTypeCopyFunc)(struct redisObject *fromkey, struct redisObject *tokey, cons/;"	t	typeref:typename:void * (*)(struct redisObject * fromkey,struct redisObject * tokey,const void * value)
moduleTypeDefragFunc	src/server.h	/^typedef int (*moduleTypeDefragFunc)(struct RedisModuleDefragCtx *ctx, struct redisObject *key, v/;"	t	typeref:typename:int (*)(struct RedisModuleDefragCtx * ctx,struct redisObject * key,void ** value)
moduleTypeDigestFunc	src/server.h	/^typedef void (*moduleTypeDigestFunc)(struct RedisModuleDigest *digest, void *value);$/;"	t	typeref:typename:void (*)(struct RedisModuleDigest * digest,void * value)
moduleTypeDupOrReply	src/module.c	/^robj *moduleTypeDupOrReply(client *c, robj *fromkey, robj *tokey, robj *value) {$/;"	f	typeref:typename:robj *
moduleTypeEncodeId	src/module.c	/^uint64_t moduleTypeEncodeId(const char *name, int encver) {$/;"	f	typeref:typename:uint64_t
moduleTypeFreeEffortFunc	src/server.h	/^typedef size_t (*moduleTypeFreeEffortFunc)(struct redisObject *key, const void *value);$/;"	t	typeref:typename:size_t (*)(struct redisObject * key,const void * value)
moduleTypeFreeFunc	src/server.h	/^typedef void (*moduleTypeFreeFunc)(void *value);$/;"	t	typeref:typename:void (*)(void * value)
moduleTypeLoadFunc	src/server.h	/^typedef void *(*moduleTypeLoadFunc)(struct RedisModuleIO *io, int encver);$/;"	t	typeref:typename:void * (*)(struct RedisModuleIO * io,int encver)
moduleTypeLookupModuleByID	src/module.c	/^moduleType *moduleTypeLookupModuleByID(uint64_t id) {$/;"	f	typeref:typename:moduleType *
moduleTypeLookupModuleByName	src/module.c	/^moduleType *moduleTypeLookupModuleByName(const char *name) {$/;"	f	typeref:typename:moduleType *
moduleTypeMemUsageFunc	src/server.h	/^typedef size_t (*moduleTypeMemUsageFunc)(const void *value);$/;"	t	typeref:typename:size_t (*)(const void * value)
moduleTypeModuleName	src/module.c	/^const char *moduleTypeModuleName(moduleType *mt) {$/;"	f	typeref:typename:const char *
moduleTypeNameByID	src/module.c	/^void moduleTypeNameByID(char *name, uint64_t moduleid) {$/;"	f	typeref:typename:void
moduleTypeRewriteFunc	src/server.h	/^typedef void (*moduleTypeRewriteFunc)(struct RedisModuleIO *io, struct redisObject *key, void *v/;"	t	typeref:typename:void (*)(struct RedisModuleIO * io,struct redisObject * key,void * value)
moduleTypeSaveFunc	src/server.h	/^typedef void (*moduleTypeSaveFunc)(struct RedisModuleIO *io, void *value);$/;"	t	typeref:typename:void (*)(struct RedisModuleIO * io,void * value)
moduleTypeUnlinkFunc	src/server.h	/^typedef void (*moduleTypeUnlinkFunc)(struct redisObject *key, void *value);$/;"	t	typeref:typename:void (*)(struct redisObject * key,void * value)
moduleUnblockClient	src/module.c	/^void moduleUnblockClient(client *c) {$/;"	f	typeref:typename:void
moduleUnblockClientByHandle	src/module.c	/^int moduleUnblockClientByHandle(RedisModuleBlockedClient *bc, void *privdata) {$/;"	f	typeref:typename:int
moduleUnblockedClients	src/module.c	/^static list *moduleUnblockedClients;$/;"	v	typeref:typename:list *	file:
moduleUnblockedClientsMutex	src/module.c	/^static pthread_mutex_t moduleUnblockedClientsMutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	typeref:typename:pthread_mutex_t	file:
moduleUnload	src/module.c	/^int moduleUnload(sds name) {$/;"	f	typeref:typename:int
moduleUnregisterCommands	src/module.c	/^void moduleUnregisterCommands(struct RedisModule *module) {$/;"	f	typeref:typename:void
moduleUnregisterFilters	src/module.c	/^int moduleUnregisterFilters(RedisModule *module) {$/;"	f	typeref:typename:int
moduleUnregisterSharedAPI	src/module.c	/^int moduleUnregisterSharedAPI(RedisModule *module) {$/;"	f	typeref:typename:int
moduleUnregisterUsedAPI	src/module.c	/^int moduleUnregisterUsedAPI(RedisModule *module) {$/;"	f	typeref:typename:int
moduleUnsubscribeAllServerEvents	src/module.c	/^void moduleUnsubscribeAllServerEvents(RedisModule *module) {$/;"	f	typeref:typename:void
moduleUnsubscribeNotifications	src/module.c	/^void moduleUnsubscribeNotifications(RedisModule *module) {$/;"	f	typeref:typename:void
moduleValue	src/server.h	/^typedef struct moduleValue {$/;"	s
moduleValue	src/server.h	/^} moduleValue;$/;"	t	typeref:struct:moduleValue
moduleZsetAddFlagsFromCoreFlags	src/module.c	/^int moduleZsetAddFlagsFromCoreFlags(int flags) {$/;"	f	typeref:typename:int
moduleZsetAddFlagsToCoreFlags	src/module.c	/^int moduleZsetAddFlagsToCoreFlags(int flags) {$/;"	f	typeref:typename:int
module_blocked_handle	src/server.h	/^    void *module_blocked_handle; \/* RedisModuleBlockedClient structure.$/;"	m	struct:blockingState	typeref:typename:void *
module_blocked_pipe	src/server.h	/^    int module_blocked_pipe[2]; \/* Pipe used to awake the event loop if a$/;"	m	struct:redisServer	typeref:typename:int[2]
module_client	src/server.h	/^    client *module_client;      \/* "Fake" client to call Redis from modules *\/$/;"	m	struct:redisServer	typeref:typename:client *
module_event_log	tests/modules/keyspace_events.c	/^RedisModuleDict *module_event_log = NULL;$/;"	v	typeref:typename:RedisModuleDict *
module_id	src/cluster.h	/^    uint64_t module_id;     \/* ID of the sender module. *\/$/;"	m	struct:__anon2cc7db540508	typeref:typename:uint64_t
module_id	src/module.c	/^    uint64_t module_id;$/;"	m	struct:moduleClusterReceiver	typeref:typename:uint64_t	file:
module_name	src/redismodule.h	/^    const char* module_name;\/* Name of module loaded or unloaded. *\/$/;"	m	struct:RedisModuleModuleChange	typeref:typename:const char *
module_version	src/redismodule.h	/^    int32_t module_version; \/* Module version. *\/$/;"	m	struct:RedisModuleModuleChange	typeref:typename:int32_t
moduleapi	src/server.h	/^    dict *moduleapi;            \/* Exported core APIs dictionary for modules. *\/$/;"	m	struct:redisServer	typeref:typename:dict *
modules	src/module.c	/^static dict *modules; \/* Hash table of modules. SDS -> RedisModule ptr.*\/$/;"	v	typeref:typename:dict *	file:
modulesCollectInfo	src/module.c	/^sds modulesCollectInfo(sds info, const char *section, int for_crash_report, int sections) {$/;"	f	typeref:typename:sds
modulesDictType	src/server.c	/^dictType modulesDictType = {$/;"	v	typeref:typename:dictType
monitorCommand	src/server.c	/^void monitorCommand(client *c) {$/;"	f	typeref:typename:void
monitor_cfg	src/server.h	/^    list *monitor_cfg;$/;"	m	struct:sentinelConfig	typeref:typename:list *
monitor_mode	src/redis-cli.c	/^    int monitor_mode;$/;"	m	struct:config	typeref:typename:int	file:
monitors	src/server.h	/^    list *slaves, *monitors;    \/* List of slaves and MONITORs *\/$/;"	m	struct:redisServer	typeref:typename:list **
mono_ticksPerMicrosecond	src/monotonic.c	/^static long mono_ticksPerMicrosecond = 0;$/;"	v	typeref:typename:long	file:
monotime	src/monotonic.h	/^typedef uint64_t monotime;$/;"	t	typeref:typename:uint64_t
monotonicInit	src/monotonic.c	/^const char * monotonicInit() {$/;"	f	typeref:typename:const char *
monotonicInit_aarch64	src/monotonic.c	/^static void monotonicInit_aarch64() {$/;"	f	typeref:typename:void	file:
monotonicInit_posix	src/monotonic.c	/^static void monotonicInit_posix() {$/;"	f	typeref:typename:void	file:
monotonicInit_x86linux	src/monotonic.c	/^static void monotonicInit_x86linux() {$/;"	f	typeref:typename:void	file:
monotonic_info_string	src/monotonic.c	/^static char monotonic_info_string[32];$/;"	v	typeref:typename:char[32]	file:
monotonic_mock	deps/jemalloc/test/unit/decay.c	/^static bool monotonic_mock;$/;"	v	typeref:typename:bool	file:
moveCommand	src/db.c	/^void moveCommand(client *c) {$/;"	f	typeref:typename:void
moveToNextTask	deps/hiredis/read.c	/^static void moveToNextTask(redisReader *r) {$/;"	f	typeref:typename:void	file:
move_next	deps/hdr_histogram/hdr_histogram.c	/^static bool move_next(struct hdr_iter* iter)$/;"	f	typeref:typename:bool	file:
mp_buf	deps/lua/src/lua_cmsgpack.c	/^typedef struct mp_buf {$/;"	s	file:
mp_buf	deps/lua/src/lua_cmsgpack.c	/^} mp_buf;$/;"	t	typeref:struct:mp_buf	file:
mp_buf_append	deps/lua/src/lua_cmsgpack.c	/^void mp_buf_append(lua_State *L, mp_buf *buf, const unsigned char *s, size_t len) {$/;"	f	typeref:typename:void
mp_buf_free	deps/lua/src/lua_cmsgpack.c	/^void mp_buf_free(lua_State *L, mp_buf *buf) {$/;"	f	typeref:typename:void
mp_buf_new	deps/lua/src/lua_cmsgpack.c	/^mp_buf *mp_buf_new(lua_State *L) {$/;"	f	typeref:typename:mp_buf *
mp_cur	deps/lua/src/lua_cmsgpack.c	/^typedef struct mp_cur {$/;"	s	file:
mp_cur	deps/lua/src/lua_cmsgpack.c	/^} mp_cur;$/;"	t	typeref:struct:mp_cur	file:
mp_cur_consume	deps/lua/src/lua_cmsgpack.c	/^#define mp_cur_consume(/;"	d	file:
mp_cur_init	deps/lua/src/lua_cmsgpack.c	/^void mp_cur_init(mp_cur *cursor, const unsigned char *s, size_t len) {$/;"	f	typeref:typename:void
mp_cur_need	deps/lua/src/lua_cmsgpack.c	/^#define mp_cur_need(/;"	d	file:
mp_decode_to_lua_array	deps/lua/src/lua_cmsgpack.c	/^void mp_decode_to_lua_array(lua_State *L, mp_cur *c, size_t len) {$/;"	f	typeref:typename:void
mp_decode_to_lua_hash	deps/lua/src/lua_cmsgpack.c	/^void mp_decode_to_lua_hash(lua_State *L, mp_cur *c, size_t len) {$/;"	f	typeref:typename:void
mp_decode_to_lua_type	deps/lua/src/lua_cmsgpack.c	/^void mp_decode_to_lua_type(lua_State *L, mp_cur *c) {$/;"	f	typeref:typename:void
mp_encode_array	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_array(lua_State *L, mp_buf *buf, int64_t n) {$/;"	f	typeref:typename:void
mp_encode_bytes	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_bytes(lua_State *L, mp_buf *buf, const unsigned char *s, size_t len) {$/;"	f	typeref:typename:void
mp_encode_double	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_double(lua_State *L, mp_buf *buf, double d) {$/;"	f	typeref:typename:void
mp_encode_int	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_int(lua_State *L, mp_buf *buf, int64_t n) {$/;"	f	typeref:typename:void
mp_encode_lua_bool	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_bool(lua_State *L, mp_buf *buf) {$/;"	f	typeref:typename:void
mp_encode_lua_integer	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_integer(lua_State *L, mp_buf *buf) {$/;"	f	typeref:typename:void
mp_encode_lua_null	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_null(lua_State *L, mp_buf *buf) {$/;"	f	typeref:typename:void
mp_encode_lua_number	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_number(lua_State *L, mp_buf *buf) {$/;"	f	typeref:typename:void
mp_encode_lua_string	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_string(lua_State *L, mp_buf *buf) {$/;"	f	typeref:typename:void
mp_encode_lua_table	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_table(lua_State *L, mp_buf *buf, int level) {$/;"	f	typeref:typename:void
mp_encode_lua_table_as_array	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_table_as_array(lua_State *L, mp_buf *buf, int level) {$/;"	f	typeref:typename:void
mp_encode_lua_table_as_map	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_table_as_map(lua_State *L, mp_buf *buf, int level) {$/;"	f	typeref:typename:void
mp_encode_lua_type	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_lua_type(lua_State *L, mp_buf *buf, int level) {$/;"	f	typeref:typename:void
mp_encode_map	deps/lua/src/lua_cmsgpack.c	/^void mp_encode_map(lua_State *L, mp_buf *buf, int64_t n) {$/;"	f	typeref:typename:void
mp_pack	deps/lua/src/lua_cmsgpack.c	/^int mp_pack(lua_State *L) {$/;"	f	typeref:typename:int
mp_realloc	deps/lua/src/lua_cmsgpack.c	/^void *mp_realloc(lua_State *L, void *target, size_t osize,size_t nsize) {$/;"	f	typeref:typename:void *
mp_safe	deps/lua/src/lua_cmsgpack.c	/^int mp_safe(lua_State *L) {$/;"	f	typeref:typename:int
mp_unpack	deps/lua/src/lua_cmsgpack.c	/^int mp_unpack(lua_State *L) {$/;"	f	typeref:typename:int
mp_unpack_full	deps/lua/src/lua_cmsgpack.c	/^int mp_unpack_full(lua_State *L, int limit, int offset) {$/;"	f	typeref:typename:int
mp_unpack_limit	deps/lua/src/lua_cmsgpack.c	/^int mp_unpack_limit(lua_State *L) {$/;"	f	typeref:typename:int
mp_unpack_one	deps/lua/src/lua_cmsgpack.c	/^int mp_unpack_one(lua_State *L) {$/;"	f	typeref:typename:int
mq_gen	deps/jemalloc/test/include/test/mq.h	/^#define mq_gen(/;"	d
mq_gen	deps/jemalloc/test/unit/mq.c	/^mq_gen(static, mq_, mq_t, mq_msg_t, link)$/;"	f
mq_msg	deps/jemalloc/test/include/test/mq.h	/^#define mq_msg(/;"	d
mq_msg_s	deps/jemalloc/test/unit/mq.c	/^struct mq_msg_s {$/;"	s	file:
mq_msg_t	deps/jemalloc/test/unit/mq.c	/^typedef struct mq_msg_s mq_msg_t;$/;"	t	typeref:struct:mq_msg_s	file:
mq_nanosleep	deps/jemalloc/test/src/mq.c	/^mq_nanosleep(unsigned ns) {$/;"	f	typeref:typename:void
ms	src/redismodule.h	/^    uint64_t ms;$/;"	m	struct:RedisModuleStreamID	typeref:typename:uint64_t
ms	src/stream.h	/^    uint64_t ms;        \/* Unix time in milliseconds. *\/$/;"	m	struct:streamID	typeref:typename:uint64_t
msetCommand	src/t_string.c	/^void msetCommand(client *c) {$/;"	f	typeref:typename:void
msetGenericCommand	src/t_string.c	/^void msetGenericCommand(client *c, int nx) {$/;"	f	typeref:typename:void
msetnxCommand	src/t_string.c	/^void msetnxCommand(client *c) {$/;"	f	typeref:typename:void
msg	src/cluster.h	/^        clusterMsgDataPublish msg;$/;"	m	struct:clusterMsgData::__anon2cc7db540808	typeref:typename:clusterMsgDataPublish
msg	src/cluster.h	/^        clusterMsgModule msg;$/;"	m	struct:clusterMsgData::__anon2cc7db540a08	typeref:typename:clusterMsgModule
mstate	src/server.h	/^    multiState mstate;      \/* MULTI\/EXEC state *\/$/;"	m	struct:client	typeref:typename:multiState
mstime	src/quicklist.c	/^static long long mstime(void) { return ustime() \/ 1000; }$/;"	f	typeref:typename:long long	file:
mstime	src/redis-benchmark.c	/^static long long mstime(void) {$/;"	f	typeref:typename:long long	file:
mstime	src/redis-cli.c	/^static long long mstime(void) {$/;"	f	typeref:typename:long long	file:
mstime	src/server.c	/^mstime_t mstime(void) {$/;"	f	typeref:typename:mstime_t
mstime	src/server.h	/^    mstime_t mstime;            \/* 'unixtime' in milliseconds. *\/$/;"	m	struct:redisServer	typeref:typename:mstime_t
mstime_t	src/redismodule.h	/^typedef long long mstime_t;$/;"	t	typeref:typename:long long
mstime_t	src/server.h	/^typedef long long mstime_t; \/* millisecond time type. *\/$/;"	t	typeref:typename:long long
mt	deps/lua/src/lstate.h	/^  struct Table *mt[NUM_TAGS];  \/* metatables for basic types *\/$/;"	m	struct:global_State	typeref:struct:Table * []
mt	src/module.c	/^        moduleType *mt;$/;"	m	struct:moduleTypeLookupModuleByID::__anon967b47330508	typeref:typename:moduleType *	file:
mt	src/mt19937-64.c	/^static unsigned long long mt[NN];$/;"	v	typeref:typename:unsigned long long[]	file:
mti	src/mt19937-64.c	/^static int mti=NN+1;$/;"	v	typeref:typename:int	file:
mtx	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	malloc_mutex_t		mtx;$/;"	m	struct:arena_stats_s	typeref:typename:malloc_mutex_t
mtx	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	malloc_mutex_t		mtx;$/;"	m	struct:arena_decay_s	typeref:typename:malloc_mutex_t
mtx	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	malloc_mutex_t		mtx;$/;"	m	struct:background_thread_info_s	typeref:typename:malloc_mutex_t
mtx	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	malloc_mutex_t	mtx;$/;"	m	struct:base_s	typeref:typename:malloc_mutex_t
mtx	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	malloc_mutex_t		mtx;$/;"	m	struct:extents_s	typeref:typename:malloc_mutex_t
mtx	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	malloc_mutex_t	mtx;$/;"	m	struct:prof_accum_s	typeref:typename:malloc_mutex_t
mtx	deps/jemalloc/test/unit/mtx.c	/^	mtx_t		mtx;$/;"	m	struct:__anon0f5a9b9e0108	typeref:typename:mtx_t	file:
mtx_fini	deps/jemalloc/test/src/mtx.c	/^mtx_fini(mtx_t *mtx) {$/;"	f	typeref:typename:void
mtx_init	deps/jemalloc/test/src/mtx.c	/^mtx_init(mtx_t *mtx) {$/;"	f	typeref:typename:bool
mtx_lock	deps/jemalloc/test/src/mtx.c	/^mtx_lock(mtx_t *mtx) {$/;"	f	typeref:typename:void
mtx_t	deps/jemalloc/test/include/test/mtx.h	/^} mtx_t;$/;"	t	typeref:struct:__anon7a00f1d60108
mtx_unlock	deps/jemalloc/test/src/mtx.c	/^mtx_unlock(mtx_t *mtx) {$/;"	f	typeref:typename:void
multi	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
multiCmd	src/server.h	/^typedef struct multiCmd {$/;"	s
multiCmd	src/server.h	/^} multiCmd;$/;"	t	typeref:struct:multiCmd
multiCommand	src/multi.c	/^void multiCommand(client *c) {$/;"	f	typeref:typename:void
multiCommand	src/server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand,$/;"	m	struct:redisServer	typeref:struct:redisCommand **
multiState	src/server.h	/^typedef struct multiState {$/;"	s
multiState	src/server.h	/^} multiState;$/;"	t	typeref:struct:multiState
multibulklen	src/server.h	/^    int multibulklen;       \/* Number of multi bulk arguments left to read. *\/$/;"	m	struct:client	typeref:typename:int
mutex_addr_comp	deps/jemalloc/src/mutex.c	/^mutex_addr_comp(const witness_t *witness1, void *mutex1,$/;"	f	typeref:typename:int	file:
mutex_data	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	mutex_prof_data_t mutex_data;$/;"	m	struct:bin_stats_s	typeref:typename:mutex_prof_data_t
mutex_owner_stats_update	deps/jemalloc/include/jemalloc/internal/mutex.h	/^mutex_owner_stats_update(tsdn_t *tsdn, malloc_mutex_t *mutex) {$/;"	f	typeref:typename:void
mutex_pool_assert_not_held	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^mutex_pool_assert_not_held(tsdn_t *tsdn, mutex_pool_t *pool) {$/;"	f	typeref:typename:void
mutex_pool_assert_owner	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^mutex_pool_assert_owner(tsdn_t *tsdn, mutex_pool_t *pool, uintptr_t key) {$/;"	f	typeref:typename:void
mutex_pool_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define mutex_pool_init /;"	d
mutex_pool_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define mutex_pool_init /;"	d
mutex_pool_init	deps/jemalloc/src/mutex_pool.c	/^mutex_pool_init(mutex_pool_t *pool, const char *name, witness_rank_t rank) {$/;"	f	typeref:typename:bool
mutex_pool_lock	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^mutex_pool_lock(tsdn_t *tsdn, mutex_pool_t *pool, uintptr_t key) {$/;"	f	typeref:typename:void
mutex_pool_lock2	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^mutex_pool_lock2(tsdn_t *tsdn, mutex_pool_t *pool, uintptr_t key1,$/;"	f	typeref:typename:void
mutex_pool_mutex	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^mutex_pool_mutex(mutex_pool_t *pool, uintptr_t key) {$/;"	f	typeref:typename:malloc_mutex_t *
mutex_pool_s	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^struct mutex_pool_s {$/;"	s
mutex_pool_t	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^typedef struct mutex_pool_s mutex_pool_t;$/;"	t	typeref:struct:mutex_pool_s
mutex_pool_unlock	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^mutex_pool_unlock(tsdn_t *tsdn, mutex_pool_t *pool, uintptr_t key) {$/;"	f	typeref:typename:void
mutex_pool_unlock2	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^mutex_pool_unlock2(tsdn_t *tsdn, mutex_pool_t *pool, uintptr_t key1,$/;"	f	typeref:typename:void
mutex_prof_arena_ind_t	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^} mutex_prof_arena_ind_t;$/;"	t	typeref:enum:__anonb26b3fca0203
mutex_prof_data	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	mutex_prof_data_t mutex_prof_data[mutex_prof_num_arena_mutexes];$/;"	m	struct:arena_stats_s	typeref:typename:mutex_prof_data_t[]
mutex_prof_data	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	mutex_prof_data_t mutex_prof_data[mutex_prof_num_global_mutexes];$/;"	m	struct:ctl_stats_s	typeref:typename:mutex_prof_data_t[]
mutex_prof_data_init	deps/jemalloc/src/mutex.c	/^mutex_prof_data_init(mutex_prof_data_t *data) {$/;"	f	typeref:typename:void	file:
mutex_prof_data_t	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^} mutex_prof_data_t;$/;"	t	typeref:struct:__anonb26b3fca0308
mutex_prof_global_ind_t	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^} mutex_prof_global_ind_t;$/;"	t	typeref:enum:__anonb26b3fca0103
mutex_stats_emit	deps/jemalloc/src/stats.c	/^mutex_stats_emit(emitter_t *emitter, emitter_row_t *row,$/;"	f	typeref:typename:void	file:
mutex_stats_init_cols	deps/jemalloc/src/stats.c	/^mutex_stats_init_cols(emitter_row_t *row, const char *table_name,$/;"	f	typeref:typename:void	file:
mutex_stats_read_arena	deps/jemalloc/src/stats.c	/^mutex_stats_read_arena(unsigned arena_ind, mutex_prof_arena_ind_t mutex_ind,$/;"	f	typeref:typename:void	file:
mutex_stats_read_arena_bin	deps/jemalloc/src/stats.c	/^mutex_stats_read_arena_bin(unsigned arena_ind, unsigned bin_ind,$/;"	f	typeref:typename:void	file:
mutex_stats_read_global	deps/jemalloc/src/stats.c	/^mutex_stats_read_global(const char *name, emitter_col_t *col_name,$/;"	f	typeref:typename:void	file:
mutexes	deps/jemalloc/include/jemalloc/internal/mutex_pool.h	/^	malloc_mutex_t mutexes[MUTEX_POOL_SIZE];$/;"	m	struct:mutex_pool_s	typeref:typename:malloc_mutex_t[]
muzzy_decay_ms	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	ssize_t muzzy_decay_ms;$/;"	m	struct:ctl_arena_s	typeref:typename:ssize_t
muzzy_decay_ms_default	deps/jemalloc/src/arena.c	/^static atomic_zd_t muzzy_decay_ms_default;$/;"	v	typeref:typename:atomic_zd_t	file:
myid	src/sentinel.c	/^    char myid[CONFIG_RUN_ID_SIZE+1]; \/* This sentinel ID. *\/$/;"	m	struct:sentinelState	typeref:typename:char[]	file:
myip	src/cluster.h	/^    char myip[NET_IP_STR_LEN];    \/* Sender IP, if not all zeroed. *\/$/;"	m	struct:__anon2cc7db540b08	typeref:typename:char[]
myself	src/cluster.c	/^clusterNode *myself = NULL;$/;"	v	typeref:typename:clusterNode *
myself	src/cluster.h	/^    clusterNode *myself;  \/* This node *\/$/;"	m	struct:clusterState	typeref:typename:clusterNode *
myslots	src/cluster.h	/^    unsigned char myslots[CLUSTER_SLOTS\/8];$/;"	m	struct:__anon2cc7db540b08	typeref:typename:unsigned char[]
n	deps/lua/src/lobject.h	/^  lua_Number n;$/;"	m	union:__anona52fc941010a	typeref:typename:lua_Number
n	deps/lua/src/lua_bit.c	/^  lua_Number n;$/;"	m	union:__anonc7e4cb99010a	typeref:typename:lua_Number	file:
n	deps/lua/src/lzio.h	/^  size_t n;			\/* bytes still unread *\/$/;"	m	struct:Zio	typeref:typename:size_t
n	deps/lua/src/lzio.h	/^  size_t n;$/;"	m	struct:Mbuffer	typeref:typename:size_t
nCcalls	deps/lua/src/lstate.h	/^  unsigned short nCcalls;  \/* number of nested C calls *\/$/;"	m	struct:lua_State	typeref:typename:unsigned short
n_background_threads	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define n_background_threads /;"	d
n_background_threads	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define n_background_threads /;"	d
n_background_threads	deps/jemalloc/src/background_thread.c	/^size_t n_background_threads;$/;"	v	typeref:typename:size_t
n_lock_ops	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	uint64_t		n_lock_ops;$/;"	m	struct:__anonb26b3fca0308	typeref:typename:uint64_t
n_owner_switches	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	uint64_t		n_owner_switches;$/;"	m	struct:__anonb26b3fca0308	typeref:typename:uint64_t
n_spin_acquired	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	uint64_t		n_spin_acquired;$/;"	m	struct:__anonb26b3fca0308	typeref:typename:uint64_t
n_thp	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	size_t		n_thp;$/;"	m	struct:base_s	typeref:typename:size_t
n_wait_times	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	uint64_t		n_wait_times;$/;"	m	struct:__anonb26b3fca0308	typeref:typename:uint64_t
n_waiting_thds	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	atomic_u32_t		n_waiting_thds;$/;"	m	struct:__anonb26b3fca0308	typeref:typename:atomic_u32_t
na	deps/lua/src/lparser.c	/^  int na;  \/* total number of array elements *\/$/;"	m	struct:ConsControl	typeref:typename:int	file:
nactive	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	atomic_zu_t		nactive;$/;"	m	struct:arena_s	typeref:typename:atomic_zu_t
nactvar	deps/lua/src/lparser.c	/^  lu_byte nactvar;  \/* # active locals outside the breakable structure *\/$/;"	m	struct:BlockCnt	typeref:typename:lu_byte	file:
nactvar	deps/lua/src/lparser.h	/^  lu_byte nactvar;  \/* number of active local variables *\/$/;"	m	struct:FuncState	typeref:typename:lu_byte
nallocx	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define nallocx /;"	d
nallocx	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define nallocx /;"	d
nallocx	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define nallocx /;"	d
name	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	const char *name;$/;"	m	struct:ctl_named_node_s	typeref:typename:const char *
name	deps/jemalloc/include/jemalloc/internal/log.h	/^	const char *name;$/;"	m	struct:log_var_s	typeref:typename:const char *
name	deps/jemalloc/include/jemalloc/internal/witness.h	/^	const char		*name;$/;"	m	struct:witness_s	typeref:typename:const char *
name	deps/lua/src/lauxlib.h	/^  const char *name;$/;"	m	struct:luaL_Reg	typeref:typename:const char *
name	deps/lua/src/ldo.c	/^  const char *name;$/;"	m	struct:SParser	typeref:typename:const char *	file:
name	deps/lua/src/lua.h	/^  const char *name;	\/* (n) *\/$/;"	m	struct:lua_Debug	typeref:typename:const char *
name	deps/lua/src/lundump.c	/^ const char* name;$/;"	m	struct:__anonbd9d9e9e0108	typeref:typename:const char *	file:
name	src/acl.c	/^    const char *name;$/;"	m	struct:ACLCategoryItem	typeref:typename:const char *	file:
name	src/acl.c	/^    const char *name;$/;"	m	struct:ACLUserFlag	typeref:typename:const char *	file:
name	src/cluster.c	/^    char *name;$/;"	m	struct:redisNodeFlags	typeref:typename:char *	file:
name	src/cluster.h	/^    char name[CLUSTER_NAMELEN]; \/* Node name, hex string, sha1-size *\/$/;"	m	struct:clusterNode	typeref:typename:char[]
name	src/config.c	/^    const char *name; \/* The user visible name of this config *\/$/;"	m	struct:standardConfig	typeref:typename:const char *	file:
name	src/config.c	/^    const char *name;$/;"	m	struct:configEnum	typeref:typename:const char *	file:
name	src/db.c	/^        char *name;$/;"	m	struct:sortGetKeys::__anoncf2eac130108	typeref:typename:char *	file:
name	src/help.h	/^  char *name;$/;"	m	struct:commandHelp	typeref:typename:char *
name	src/module.c	/^    char *name;     \/* Module name. *\/$/;"	m	struct:RedisModule	typeref:typename:char *	file:
name	src/quicklist.h	/^    char *name;$/;"	m	struct:quicklistBookmark	typeref:typename:char *
name	src/redis-benchmark.c	/^    sds name;$/;"	m	struct:clusterNode	typeref:typename:sds	file:
name	src/redis-cli.c	/^    char *name;$/;"	m	struct:__anon6af24fe90208	typeref:typename:char *	file:
name	src/redis-cli.c	/^    char *name;$/;"	m	struct:clusterManagerCommand	typeref:typename:char *	file:
name	src/redis-cli.c	/^    char *name;$/;"	m	struct:clusterManagerCommandDef	typeref:typename:char *	file:
name	src/redis-cli.c	/^    char *name;$/;"	m	struct:clusterManagerOptionDef	typeref:typename:char *	file:
name	src/redis-cli.c	/^    sds name;$/;"	m	struct:clusterManagerNode	typeref:typename:sds	file:
name	src/sentinel.c	/^    char *name;     \/* Master name from the point of view of this sentinel. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:char *	file:
name	src/server.c	/^    char *name;$/;"	m	struct:redisTest	typeref:typename:char *	file:
name	src/server.h	/^    char *name;$/;"	m	struct:redisCommand	typeref:typename:char *
name	src/server.h	/^    char *name;$/;"	m	struct:redisFunctionSym	typeref:typename:char *
name	src/server.h	/^    char name[10]; \/* 9 bytes name + null term. Charset: A-Z a-z 0-9 _- *\/$/;"	m	struct:RedisModuleType	typeref:typename:char[10]
name	src/server.h	/^    robj *name;             \/* As set by CLIENT SETNAME. *\/$/;"	m	struct:client	typeref:typename:robj *
name	src/server.h	/^    sds name;       \/* The username as an SDS string. *\/$/;"	m	struct:__anon3ef696e90408	typeref:typename:sds
name	src/stream.h	/^    sds name;                   \/* Consumer name. This is how the consumer$/;"	m	struct:streamConsumer	typeref:typename:sds
named	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	bool named;$/;"	m	struct:ctl_node_s	typeref:typename:bool
namewhat	deps/lua/src/lua.h	/^  const char *namewhat;	\/* (n) `global', `local', `field', `method' *\/$/;"	m	struct:lua_Debug	typeref:typename:const char *
narenas	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	unsigned narenas;$/;"	m	struct:ctl_arenas_s	typeref:typename:unsigned
narenas_auto	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define narenas_auto /;"	d
narenas_auto	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define narenas_auto /;"	d
narenas_auto	deps/jemalloc/src/jemalloc.c	/^unsigned		narenas_auto; \/* Read-only after initialization. *\/$/;"	v	typeref:typename:unsigned
narenas_total_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define narenas_total_get /;"	d
narenas_total_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define narenas_total_get /;"	d
narenas_total_get	deps/jemalloc/src/jemalloc.c	/^narenas_total_get(void) {$/;"	f	typeref:typename:unsigned
narenas_total_inc	deps/jemalloc/src/jemalloc.c	/^narenas_total_inc(void) {$/;"	f	typeref:typename:void	file:
narenas_total_set	deps/jemalloc/src/jemalloc.c	/^narenas_total_set(unsigned narenas) {$/;"	f	typeref:typename:void	file:
native	deps/lua/src/lua_struct.c	/^} const native = {1};$/;"	v	typeref:union:__anondc84fe7f010a const
nbits	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^	size_t nbits;$/;"	m	struct:bitmap_info_s	typeref:typename:size_t
ncached	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	cache_bin_sz_t ncached;$/;"	m	struct:cache_bin_s	typeref:typename:cache_bin_sz_t
ncached_max	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	cache_bin_sz_t ncached_max;$/;"	m	struct:cache_bin_info_s	typeref:typename:cache_bin_sz_t
nchildren	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t nchildren;$/;"	m	struct:ctl_named_node_s	typeref:typename:size_t
ncleanups	deps/jemalloc/src/tsd.c	/^static unsigned ncleanups;$/;"	v	typeref:typename:unsigned	file:
ncpus	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define ncpus /;"	d
ncpus	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define ncpus /;"	d
ncpus	deps/jemalloc/src/jemalloc.c	/^unsigned	ncpus;$/;"	v	typeref:typename:unsigned
ndalloc	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	ndalloc;$/;"	m	struct:arena_stats_large_s	typeref:typename:arena_stats_u64_t
ndalloc	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	uint64_t	ndalloc;$/;"	m	struct:bin_stats_s	typeref:typename:uint64_t
ndalloc_large	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	ndalloc_large; \/* Derived. *\/$/;"	m	struct:arena_stats_s	typeref:typename:arena_stats_u64_t
ndalloc_small	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	uint64_t ndalloc_small;$/;"	m	struct:ctl_arena_stats_s	typeref:typename:uint64_t
need_value	deps/lua/src/lcode.c	/^static int need_value (FuncState *fs, int list) {$/;"	f	typeref:typename:int	file:
neighbors	src/geohash_helper.h	/^    GeoHashNeighbors neighbors;$/;"	m	struct:__anon1a1c3d100108	typeref:typename:GeoHashNeighbors
nested_dict_json	deps/jemalloc/test/unit/emitter.c	/^static const char *nested_dict_json =$/;"	v	typeref:typename:const char *	file:
nested_dict_table	deps/jemalloc/test/unit/emitter.c	/^static const char *nested_dict_table =$/;"	v	typeref:typename:const char *	file:
nesting_depth	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	int nesting_depth;$/;"	m	struct:emitter_s	typeref:typename:int
net.o	deps/hiredis/Makefile	/^net.o: net.c fmacros.h net.h hiredis.h read.h sds.h alloc.h sockcompat.h win32.h$/;"	t
neterr	src/server.h	/^    char neterr[ANET_ERR_LEN];   \/* Error buffer for anet.c *\/$/;"	m	struct:redisServer	typeref:typename:char[]
newImpl	deps/jemalloc/src/jemalloc_cpp.cpp	/^newImpl(std::size_t size) noexcept(IsNoExcept) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
new_localvar	deps/lua/src/lparser.c	/^static void new_localvar (LexState *ls, TString *name, int n) {$/;"	f	typeref:typename:void	file:
new_localvarliteral	deps/lua/src/lparser.c	/^#define new_localvarliteral(/;"	d	file:
newfenv	deps/lua/src/liolib.c	/^static void newfenv (lua_State *L, lua_CFunction cls) {$/;"	f	typeref:typename:void	file:
newfile	deps/lua/src/liolib.c	/^static FILE **newfile (lua_State *L) {$/;"	f	typeref:typename:FILE **	file:
newkey	deps/lua/src/ltable.c	/^static TValue *newkey (lua_State *L, Table *t, const TValue *key) {$/;"	f	typeref:typename:TValue *	file:
newlstr	deps/lua/src/lstring.c	/^static TString *newlstr (lua_State *L, const char *str, size_t l,$/;"	f	typeref:typename:TString *	file:
next	deps/hiredis/async.h	/^    struct redisCallback *next; \/* simple singly linked list *\/$/;"	m	struct:redisCallback	typeref:struct:redisCallback *
next	deps/hiredis/dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry *
next	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	base_block_t	*next;$/;"	m	struct:base_block_s	typeref:typename:base_block_t *
next	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^		tcaches_t	*next;$/;"	m	union:tcaches_s::__anon676e9ac0010a	typeref:typename:tcaches_t *
next	deps/lua/src/llex.c	/^#define next(/;"	d	file:
next	deps/lua/src/lobject.h	/^      struct UpVal *next;$/;"	m	struct:UpVal::__anona52fc941040a::__anona52fc9410508	typeref:struct:UpVal *
next	deps/lua/src/lobject.h	/^    struct Node *next;  \/* for chaining *\/$/;"	m	struct:TKey::__anona52fc9410608	typeref:struct:Node *
next	src/adlist.h	/^    listNode *next;$/;"	m	struct:listIter	typeref:typename:listNode *
next	src/adlist.h	/^    struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode *
next	src/ae.h	/^    struct aeTimeEvent *next;$/;"	m	struct:aeTimeEvent	typeref:struct:aeTimeEvent *
next	src/dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry *
next	src/module.c	/^    struct RedisModulePoolAllocBlock *next;$/;"	m	struct:RedisModulePoolAllocBlock	typeref:struct:RedisModulePoolAllocBlock *	file:
next	src/module.c	/^    struct moduleClusterReceiver *next;$/;"	m	struct:moduleClusterReceiver	typeref:struct:moduleClusterReceiver *	file:
next	src/modules/hellotype.c	/^    struct HelloTypeNode *next;$/;"	m	struct:HelloTypeNode	typeref:struct:HelloTypeNode *	file:
next	src/quicklist.h	/^    struct quicklistNode *next;$/;"	m	struct:quicklistNode	typeref:struct:quicklistNode *
next	src/rand.c	/^static void next(void) {$/;"	f	typeref:typename:void	file:
next	tests/modules/test_lazyfree.c	/^    struct LazyFreeLinkNode *next;$/;"	m	struct:LazyFreeLinkNode	typeref:struct:LazyFreeLinkNode *	file:
nextArgument	deps/hiredis/async.c	/^static const char *nextArgument(const char *start, const char **str, size_t *len) {$/;"	f	typeref:typename:const char *	file:
nextEntry	deps/hiredis/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator	typeref:typename:dictEntry **
nextEntry	src/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator	typeref:typename:dictEntry **
next_client_id	src/server.h	/^    redisAtomic uint64_t next_client_id; \/* Next client unique ID. Incremental. *\/$/;"	m	struct:redisServer	typeref:typename:redisAtomic uint64_t
next_gc_bin	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	szind_t		next_gc_bin;$/;"	m	struct:tcache_s	typeref:typename:szind_t
next_num	src/setcpuaffinity.c	/^static int next_num(const char *str, char **end, int *result) {$/;"	f	typeref:typename:int	file:
next_thr_uid	deps/jemalloc/src/prof.c	/^static uint64_t		next_thr_uid;$/;"	v	typeref:typename:uint64_t	file:
next_thr_uid_mtx	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	next_thr_uid_mtx;$/;"	v	typeref:typename:malloc_mutex_t	file:
next_token	src/setcpuaffinity.c	/^static const char *next_token(const char *q,  int sep) {$/;"	f	typeref:typename:const char *	file:
next_value_greater_than_reporting_level_upper_bound	deps/hdr_histogram/hdr_histogram.c	/^static bool next_value_greater_than_reporting_level_upper_bound($/;"	f	typeref:typename:bool	file:
next_value_reporting_level	deps/hdr_histogram/hdr_histogram.h	/^    int64_t next_value_reporting_level;$/;"	m	struct:hdr_iter_linear	typeref:typename:int64_t
next_value_reporting_level	deps/hdr_histogram/hdr_histogram.h	/^    int64_t next_value_reporting_level;$/;"	m	struct:hdr_iter_log	typeref:typename:int64_t
next_value_reporting_level_lowest_equivalent	deps/hdr_histogram/hdr_histogram.h	/^    int64_t next_value_reporting_level_lowest_equivalent;$/;"	m	struct:hdr_iter_linear	typeref:typename:int64_t
next_value_reporting_level_lowest_equivalent	deps/hdr_histogram/hdr_histogram.h	/^    int64_t next_value_reporting_level_lowest_equivalent;$/;"	m	struct:hdr_iter_log	typeref:typename:int64_t
next_wakeup	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	nstime_t		next_wakeup;$/;"	m	struct:background_thread_info_s	typeref:typename:nstime_t
nextid	src/acl.c	/^static unsigned long nextid = 0; \/* Next command id that has not been assigned *\/$/;"	v	typeref:typename:unsigned long	file:
nfds_t	deps/hiredis/sockcompat.h	/^typedef ULONG nfds_t;$/;"	t	typeref:typename:ULONG
nfills	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	uint64_t	nfills;$/;"	m	struct:bin_stats_s	typeref:typename:uint64_t
nfinished	deps/jemalloc/test/unit/retained.c	/^static atomic_u_t	nfinished;$/;"	v	typeref:typename:atomic_u_t	file:
nflushes	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	uint64_t	nflushes;$/;"	m	struct:bin_stats_s	typeref:typename:uint64_t
ngcotouv	deps/lua/src/lstate.h	/^#define ngcotouv(/;"	d
ngroups	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^	size_t ngroups;$/;"	m	struct:bitmap_info_s	typeref:typename:size_t
ngrows	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	uint64_t ngrows;$/;"	m	struct:__anon25f7a4b70208	typeref:typename:uint64_t
nh	deps/lua/src/lparser.c	/^  int nh;  \/* total number of `record' elements *\/$/;"	m	struct:ConsControl	typeref:typename:int	file:
nhbins	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nhbins /;"	d
nhbins	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nhbins /;"	d
nhbins	deps/jemalloc/src/tcache.c	/^unsigned		nhbins;$/;"	v	typeref:typename:unsigned
nil	deps/hiredis/test.c	/^    int nil;$/;"	m	struct:pushCounters	typeref:typename:int	file:
nilK	deps/lua/src/lcode.c	/^static int nilK (FuncState *fs) {$/;"	f	typeref:typename:int	file:
ninserts	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	uint64_t ninserts;$/;"	m	struct:__anon25f7a4b70208	typeref:typename:uint64_t
nk	deps/lua/src/lobject.h	/^  } nk;$/;"	m	union:TKey	typeref:struct:TKey::__anona52fc9410608
nk	deps/lua/src/lparser.h	/^  int nk;  \/* number of elements in `k' *\/$/;"	m	struct:FuncState	typeref:typename:int
nkeys	tests/modules/scan.c	/^    size_t nkeys;$/;"	m	struct:__anon99e813050108	typeref:typename:size_t	file:
nlevels	deps/jemalloc/include/jemalloc/internal/bitmap.h	/^	unsigned nlevels;$/;"	m	struct:bitmap_info_s	typeref:typename:unsigned
nlimbo	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	unsigned		nlimbo;$/;"	m	struct:prof_gctx_s	typeref:typename:unsigned
nlocvars	deps/lua/src/lparser.h	/^  short nlocvars;  \/* number of elements in `locvars' *\/$/;"	m	struct:FuncState	typeref:typename:short
nmadvise	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	nmadvise;$/;"	m	struct:arena_stats_decay_s	typeref:typename:arena_stats_u64_t
nmalloc	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	nmalloc;$/;"	m	struct:arena_stats_large_s	typeref:typename:arena_stats_u64_t
nmalloc	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	uint64_t	nmalloc;$/;"	m	struct:bin_stats_s	typeref:typename:uint64_t
nmalloc_large	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	nmalloc_large; \/* Derived. *\/$/;"	m	struct:arena_stats_s	typeref:typename:arena_stats_u64_t
nmalloc_small	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	uint64_t nmalloc_small;$/;"	m	struct:ctl_arena_stats_s	typeref:typename:uint64_t
no_auth_warning	src/redis-cli.c	/^    int no_auth_warning;$/;"	m	struct:config	typeref:typename:int	file:
no_lazy_lock	deps/jemalloc/test/unit/stats.c	/^no_lazy_lock(void) {$/;"	f	typeref:typename:void	file:
no_mkstream	src/t_stream.c	/^    int no_mkstream; \/* if set to 1 do not create new stream *\/$/;"	m	struct:__anon8fe9202c0108	typeref:typename:int	file:
noautherr	src/server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
node	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	ctl_node_t node;$/;"	m	struct:ctl_named_node_s	typeref:typename:ctl_node_t
node	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	struct ctl_node_s node;$/;"	m	struct:ctl_indexed_node_s	typeref:struct:ctl_node_s
node	deps/lua/src/lobject.h	/^  Node *node;$/;"	m	struct:Table	typeref:typename:Node *
node	src/cluster.h	/^    struct clusterNode *node;   \/* Node related to this link if any, or NULL *\/$/;"	m	struct:clusterLink	typeref:struct:clusterNode *
node	src/cluster.h	/^    struct clusterNode *node;  \/* Node reporting the failure condition. *\/$/;"	m	struct:clusterNodeFailReport	typeref:struct:clusterNode *
node	src/quicklist.h	/^    quicklistNode *node;$/;"	m	struct:quicklistBookmark	typeref:typename:quicklistNode *
node	src/quicklist.h	/^    quicklistNode *node;$/;"	m	struct:quicklistEntry	typeref:typename:quicklistNode *
node	src/rax.h	/^    raxNode *node;          \/* Current node. Only for unsafe iteration. *\/$/;"	m	struct:raxIterator	typeref:typename:raxNode *
node	src/t_zset.c	/^                zskiplistNode *node;$/;"	m	struct:__anon6fce03460408::__anon6fce0346050a::_iterzset::__anon6fce03460908	typeref:typename:zskiplistNode *	file:
nodeCantFailover	src/cluster.h	/^#define nodeCantFailover(/;"	d
nodeFailed	src/cluster.h	/^#define nodeFailed(/;"	d
nodeHasAddr	src/cluster.h	/^#define nodeHasAddr(/;"	d
nodeInHandshake	src/cluster.h	/^#define nodeInHandshake(/;"	d
nodeIp2String	src/cluster.c	/^void nodeIp2String(char *buf, clusterLink *link, char *announced_ip) {$/;"	f	typeref:typename:void
nodeIsMaster	src/cluster.h	/^#define nodeIsMaster(/;"	d
nodeIsSlave	src/cluster.h	/^#define nodeIsSlave(/;"	d
nodeTimedOut	src/cluster.h	/^#define nodeTimedOut(/;"	d
nodeUpdateAddressIfNeeded	src/cluster.c	/^int nodeUpdateAddressIfNeeded(clusterNode *node, clusterLink *link,$/;"	f	typeref:typename:int
nodeWithoutAddr	src/cluster.h	/^#define nodeWithoutAddr(/;"	d
node_addr	src/redis-cli.c	/^    sds node_addr;$/;"	m	struct:clusterManagerLink	typeref:typename:sds	file:
node_cb	src/rax.h	/^    raxNodeCallback node_cb; \/* Optional node callback. Normally set to NULL. *\/$/;"	m	struct:raxIterator	typeref:typename:raxNodeCallback
node_cmp	deps/jemalloc/test/unit/ph.c	/^node_cmp(const node_t *a, const node_t *b) {$/;"	f	typeref:typename:int	file:
node_cmp	deps/jemalloc/test/unit/rb.c	/^node_cmp(const node_t *a, const node_t *b) {$/;"	f	typeref:typename:int	file:
node_cmp_magic	deps/jemalloc/test/unit/ph.c	/^node_cmp_magic(const node_t *a, const node_t *b) {$/;"	f	typeref:typename:int	file:
node_name	src/redis-cli.c	/^    sds node_name;$/;"	m	struct:clusterManagerLink	typeref:typename:sds	file:
node_print	deps/jemalloc/test/unit/ph.c	/^node_print(const node_t *node, unsigned depth) {$/;"	f	typeref:typename:void	file:
node_remove	deps/jemalloc/test/unit/ph.c	/^node_remove(heap_t *heap, node_t *node) {$/;"	f	typeref:typename:TEST_END void	file:
node_remove	deps/jemalloc/test/unit/rb.c	/^node_remove(tree_t *tree, node_t *node, unsigned nnodes) {$/;"	f	typeref:typename:void	file:
node_remove_any	deps/jemalloc/test/unit/ph.c	/^node_remove_any(heap_t *heap) {$/;"	f	typeref:typename:node_t *	file:
node_remove_first	deps/jemalloc/test/unit/ph.c	/^node_remove_first(heap_t *heap) {$/;"	f	typeref:typename:node_t *	file:
node_s	deps/jemalloc/test/unit/ph.c	/^struct node_s {$/;"	s	file:
node_s	deps/jemalloc/test/unit/rb.c	/^struct node_s {$/;"	s	file:
node_t	deps/jemalloc/test/unit/ph.c	/^typedef struct node_s node_t;$/;"	t	typeref:struct:node_s	file:
node_t	deps/jemalloc/test/unit/rb.c	/^typedef struct node_s node_t;$/;"	t	typeref:struct:node_s	file:
node_validate	deps/jemalloc/test/unit/ph.c	/^node_validate(const node_t *node, const node_t *parent) {$/;"	f	typeref:typename:unsigned	file:
nodecfg	src/cluster.h	/^        clusterMsgDataUpdate nodecfg;$/;"	m	struct:clusterMsgData::__anon2cc7db540908	typeref:typename:clusterMsgDataUpdate
nodename	src/cluster.h	/^    char nodename[CLUSTER_NAMELEN]; \/* Name of the slots owner. *\/$/;"	m	struct:__anon2cc7db540408	typeref:typename:char[]
nodename	src/cluster.h	/^    char nodename[CLUSTER_NAMELEN];$/;"	m	struct:__anon2cc7db540108	typeref:typename:char[]
nodename	src/cluster.h	/^    char nodename[CLUSTER_NAMELEN];$/;"	m	struct:__anon2cc7db540208	typeref:typename:char[]
nodes	src/cluster.h	/^    dict *nodes;          \/* Hash table of name -> clusterNode structures *\/$/;"	m	struct:clusterState	typeref:typename:dict *
nodes	src/redis-cli.c	/^    clusterManagerNode **nodes; \/* Actual nodes array *\/$/;"	m	struct:clusterManagerNodeArray	typeref:typename:clusterManagerNode **	file:
nodes	src/redis-cli.c	/^    list *nodes;    \/* List of nodes in the configuration. *\/$/;"	m	struct:clusterManager	typeref:typename:list *	file:
nodes_black_list	src/cluster.h	/^    dict *nodes_black_list; \/* Nodes we don't re-add for a few seconds. *\/$/;"	m	struct:clusterState	typeref:typename:dict *
nokeyerr	src/server.h	/^    *emptyarray, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *********** [4]* [4]* [4]* [4]***
nolocks_localtime	src/localtime.c	/^void nolocks_localtime(struct tm *tmp, time_t t, time_t tz, int dst) {$/;"	f	typeref:typename:void
non_reentrant	deps/jemalloc/test/src/test.c	/^	non_reentrant = 0,$/;"	e	enum:__anon309c720d0103	file:
non_zero_min	deps/hdr_histogram/hdr_histogram.c	/^static int64_t non_zero_min(const struct hdr_histogram* h)$/;"	f	typeref:typename:int64_t	file:
none	deps/lua/Makefile	/^none:$/;"	t
none	deps/lua/src/Makefile	/^none:$/;"	t
noninteractive	src/redis-cli.c	/^static int noninteractive(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
noopt	deps/hiredis/Makefile	/^noopt:$/;"	t
noopt	src/Makefile	/^noopt:$/;"	t
noparser	deps/lua/etc/Makefile	/^noparser: noparser.o$/;"	t
noreplicaserr	src/server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
normalize_index	deps/hdr_histogram/hdr_histogram.c	/^static int32_t normalize_index(const struct hdr_histogram* h, int32_t index)$/;"	f	typeref:typename:int32_t	file:
normalizing_index_offset	deps/hdr_histogram/hdr_histogram.h	/^    int32_t normalizing_index_offset;$/;"	m	struct:hdr_histogram	typeref:typename:int32_t
north	src/geohash.h	/^    GeoHashBits north;$/;"	m	struct:__anona01652f10508	typeref:typename:GeoHashBits
north_east	src/geohash.h	/^    GeoHashBits north_east;$/;"	m	struct:__anona01652f10508	typeref:typename:GeoHashBits
north_west	src/geohash.h	/^    GeoHashBits north_west;$/;"	m	struct:__anona01652f10508	typeref:typename:GeoHashBits
noscripterr	src/server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *********** [4]* [4]* [4]* [4]*******
not_implemented	deps/jemalloc/include/jemalloc/internal/assert.h	/^#define not_implemented(/;"	d
not_implemented	deps/jemalloc/src/malloc_io.c	/^#define not_implemented(/;"	d	file:
not_implemented	deps/jemalloc/test/include/test/jemalloc_test.h	/^#define not_implemented(/;"	d
not_implemented	deps/jemalloc/test/include/test/jemalloc_test.h.in	/^#define not_implemented(/;"	d	file:
not_reached	deps/jemalloc/include/jemalloc/internal/assert.h	/^#define not_reached(/;"	d
not_reached	deps/jemalloc/src/malloc_io.c	/^#define not_reached(/;"	d	file:
not_reached	deps/jemalloc/test/include/test/jemalloc_test.h	/^#define not_reached(/;"	d
not_reached	deps/jemalloc/test/include/test/jemalloc_test.h.in	/^#define not_reached(/;"	d	file:
notail	deps/lua/src/lua.c	/^#define notail(/;"	d	file:
notification_script	src/sentinel.c	/^    char *notification_script;$/;"	m	struct:sentinelRedisInstance	typeref:typename:char *	file:
notifyKeyspaceEvent	src/notify.c	/^void notifyKeyspaceEvent(int type, char *event, robj *key, int dbid) {$/;"	f	typeref:typename:void
notify_callback	src/module.c	/^    RedisModuleNotificationFunc notify_callback;$/;"	m	struct:RedisModuleKeyspaceSubscriber	typeref:typename:RedisModuleNotificationFunc	file:
notify_keyspace_events	src/server.h	/^    int notify_keyspace_events; \/* Events to propagate via Pub\/Sub. This is an$/;"	m	struct:redisServer	typeref:typename:int
notused	src/hyperloglog.c	/^    uint8_t notused[3]; \/* Reserved for future use, must be zero. *\/$/;"	m	struct:hllhdr	typeref:typename:uint8_t[3]	file:
notused1	src/cluster.h	/^    char notused1[32];  \/* 32 bytes reserved for future usage. *\/$/;"	m	struct:__anon2cc7db540b08	typeref:typename:char[32]
notused1	src/cluster.h	/^    uint16_t notused1;$/;"	m	struct:__anon2cc7db540108	typeref:typename:uint16_t
np	deps/lua/src/lparser.h	/^  int np;  \/* number of elements in `p' *\/$/;"	m	struct:FuncState	typeref:typename:int
npages	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	atomic_zu_t		npages;$/;"	m	struct:extents_s	typeref:typename:atomic_zu_t
npages_to_purge_new	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	size_t			npages_to_purge_new;$/;"	m	struct:background_thread_info_s	typeref:typename:size_t
npending	src/ae_evport.c	/^    uint_t  npending;                           \/* # of pending fds *\/$/;"	m	struct:aeApiState	typeref:typename:uint_t	file:
npurge	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	npurge;$/;"	m	struct:arena_stats_decay_s	typeref:typename:arena_stats_u64_t
nregs	deps/jemalloc/include/jemalloc/internal/bin.h	/^	uint32_t		nregs;$/;"	m	struct:bin_info_s	typeref:typename:uint32_t
nregs_per_run_compute	deps/jemalloc/test/unit/pack.c	/^nregs_per_run_compute(void) {$/;"	f	typeref:typename:size_t	file:
nrelocs	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	uint64_t nrelocs;$/;"	m	struct:__anon25f7a4b70208	typeref:typename:uint64_t
nreplies	tests/modules/scan.c	/^    size_t nreplies;$/;"	m	struct:__anon99e813050208	typeref:typename:size_t	file:
nrequests	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	nrequests; \/* Partially derived. *\/$/;"	m	struct:arena_stats_large_s	typeref:typename:arena_stats_u64_t
nrequests	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	uint64_t	nrequests;$/;"	m	struct:bin_stats_s	typeref:typename:uint64_t
nrequests	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	uint64_t nrequests;$/;"	m	struct:cache_bin_stats_s	typeref:typename:uint64_t
nrequests_large	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	nrequests_large; \/* Derived. *\/$/;"	m	struct:arena_stats_s	typeref:typename:arena_stats_u64_t
nrequests_small	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	uint64_t nrequests_small;$/;"	m	struct:ctl_arena_stats_s	typeref:typename:uint64_t
nresults	deps/lua/src/lapi.c	/^  int nresults;$/;"	m	struct:CallS	typeref:typename:int	file:
nresults	deps/lua/src/lstate.h	/^  int nresults;  \/* expected number of results from this function *\/$/;"	m	struct:CallInfo	typeref:typename:int
ns	deps/jemalloc/include/jemalloc/internal/nstime.h	/^	uint64_t ns;$/;"	m	struct:__anon7fbd88310108	typeref:typename:uint64_t
nshrinkfails	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	uint64_t nshrinkfails;$/;"	m	struct:__anon25f7a4b70208	typeref:typename:uint64_t
nshrinks	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	uint64_t nshrinks;$/;"	m	struct:__anon25f7a4b70208	typeref:typename:uint64_t
nslabs	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	uint64_t	nslabs;$/;"	m	struct:bin_stats_s	typeref:typename:uint64_t
nstime_add	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_add /;"	d
nstime_add	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_add /;"	d
nstime_add	deps/jemalloc/src/nstime.c	/^nstime_add(nstime_t *time, const nstime_t *addend) {$/;"	f	typeref:typename:void
nstime_compare	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_compare /;"	d
nstime_compare	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_compare /;"	d
nstime_compare	deps/jemalloc/src/nstime.c	/^nstime_compare(const nstime_t *a, const nstime_t *b) {$/;"	f	typeref:typename:int
nstime_copy	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_copy /;"	d
nstime_copy	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_copy /;"	d
nstime_copy	deps/jemalloc/src/nstime.c	/^nstime_copy(nstime_t *time, const nstime_t *source) {$/;"	f	typeref:typename:void
nstime_divide	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_divide /;"	d
nstime_divide	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_divide /;"	d
nstime_divide	deps/jemalloc/src/nstime.c	/^nstime_divide(const nstime_t *time, const nstime_t *divisor) {$/;"	f	typeref:typename:uint64_t
nstime_get	deps/jemalloc/src/nstime.c	/^nstime_get(nstime_t *time) {$/;"	f	typeref:typename:void	file:
nstime_iadd	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_iadd /;"	d
nstime_iadd	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_iadd /;"	d
nstime_iadd	deps/jemalloc/src/nstime.c	/^nstime_iadd(nstime_t *time, uint64_t addend) {$/;"	f	typeref:typename:void
nstime_idivide	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_idivide /;"	d
nstime_idivide	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_idivide /;"	d
nstime_idivide	deps/jemalloc/src/nstime.c	/^nstime_idivide(nstime_t *time, uint64_t divisor) {$/;"	f	typeref:typename:void
nstime_imultiply	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_imultiply /;"	d
nstime_imultiply	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_imultiply /;"	d
nstime_imultiply	deps/jemalloc/src/nstime.c	/^nstime_imultiply(nstime_t *time, uint64_t multiplier) {$/;"	f	typeref:typename:void
nstime_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_init /;"	d
nstime_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_init /;"	d
nstime_init	deps/jemalloc/src/nstime.c	/^nstime_init(nstime_t *time, uint64_t ns) {$/;"	f	typeref:typename:void
nstime_init2	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_init2 /;"	d
nstime_init2	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_init2 /;"	d
nstime_init2	deps/jemalloc/src/nstime.c	/^nstime_init2(nstime_t *time, uint64_t sec, uint64_t nsec) {$/;"	f	typeref:typename:void
nstime_isubtract	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_isubtract /;"	d
nstime_isubtract	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_isubtract /;"	d
nstime_isubtract	deps/jemalloc/src/nstime.c	/^nstime_isubtract(nstime_t *time, uint64_t subtrahend) {$/;"	f	typeref:typename:void
nstime_monotonic	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_monotonic /;"	d
nstime_monotonic	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_monotonic /;"	d
nstime_monotonic	deps/jemalloc/src/nstime.c	/^nstime_monotonic_t *JET_MUTABLE nstime_monotonic = nstime_monotonic_impl;$/;"	v	typeref:typename:nstime_monotonic_t * JET_MUTABLE
nstime_monotonic_impl	deps/jemalloc/src/nstime.c	/^nstime_monotonic_impl(void) {$/;"	f	typeref:typename:bool	file:
nstime_monotonic_mock	deps/jemalloc/test/unit/decay.c	/^nstime_monotonic_mock(void) {$/;"	f	typeref:typename:bool	file:
nstime_monotonic_orig	deps/jemalloc/test/unit/decay.c	/^static nstime_monotonic_t *nstime_monotonic_orig;$/;"	v	typeref:typename:nstime_monotonic_t *	file:
nstime_monotonic_t	deps/jemalloc/include/jemalloc/internal/nstime.h	/^typedef bool (nstime_monotonic_t)(void);$/;"	t	typeref:typename:bool ()(void)
nstime_msec	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_msec /;"	d
nstime_msec	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_msec /;"	d
nstime_msec	deps/jemalloc/src/nstime.c	/^nstime_msec(const nstime_t *time) {$/;"	f	typeref:typename:uint64_t
nstime_ns	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_ns /;"	d
nstime_ns	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_ns /;"	d
nstime_ns	deps/jemalloc/src/nstime.c	/^nstime_ns(const nstime_t *time) {$/;"	f	typeref:typename:uint64_t
nstime_nsec	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_nsec /;"	d
nstime_nsec	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_nsec /;"	d
nstime_nsec	deps/jemalloc/src/nstime.c	/^nstime_nsec(const nstime_t *time) {$/;"	f	typeref:typename:uint64_t
nstime_sec	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_sec /;"	d
nstime_sec	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_sec /;"	d
nstime_sec	deps/jemalloc/src/nstime.c	/^nstime_sec(const nstime_t *time) {$/;"	f	typeref:typename:uint64_t
nstime_subtract	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_subtract /;"	d
nstime_subtract	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_subtract /;"	d
nstime_subtract	deps/jemalloc/src/nstime.c	/^nstime_subtract(nstime_t *time, const nstime_t *subtrahend) {$/;"	f	typeref:typename:void
nstime_t	deps/jemalloc/include/jemalloc/internal/nstime.h	/^} nstime_t;$/;"	t	typeref:struct:__anon7fbd88310108
nstime_update	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define nstime_update /;"	d
nstime_update	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define nstime_update /;"	d
nstime_update	deps/jemalloc/src/nstime.c	/^nstime_update_t *JET_MUTABLE nstime_update = nstime_update_impl;$/;"	v	typeref:typename:nstime_update_t * JET_MUTABLE
nstime_update_impl	deps/jemalloc/src/nstime.c	/^nstime_update_impl(nstime_t *time) {$/;"	f	typeref:typename:bool	file:
nstime_update_mock	deps/jemalloc/test/unit/decay.c	/^nstime_update_mock(nstime_t *time) {$/;"	f	typeref:typename:bool	file:
nstime_update_orig	deps/jemalloc/test/unit/decay.c	/^static nstime_update_t *nstime_update_orig;$/;"	v	typeref:typename:nstime_update_t *	file:
nstime_update_t	deps/jemalloc/include/jemalloc/internal/nstime.h	/^typedef bool (nstime_update_t)(nstime_t *);$/;"	t	typeref:typename:bool ()(nstime_t *)
nthreads	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	atomic_u_t		nthreads[2];$/;"	m	struct:arena_s	typeref:typename:atomic_u_t[2]
nthreads	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	unsigned nthreads;$/;"	m	struct:ctl_arena_s	typeref:typename:unsigned
nticks	deps/jemalloc/include/jemalloc/internal/ticker.h	/^	int32_t nticks;$/;"	m	struct:__anondffa78830108	typeref:typename:int32_t
ntohu64	src/endianconv.h	/^#define ntohu64(/;"	d
nul	src/setproctitle.c	/^	char *nul;$/;"	m	struct:__anon6a58858f0108	typeref:typename:char *	file:
null	src/server.h	/^    *colon, *queued, *null[4], *nullarray[4], *emptymap[4], *emptyset[4],$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *********** [4]
null_out_result_on_error	deps/jemalloc/src/jemalloc.c	/^	bool null_out_result_on_error;$/;"	m	struct:static_opts_s	typeref:typename:bool	file:
nullarray	src/server.h	/^    *colon, *queued, *null[4], *nullarray[4], *emptymap[4], *emptyset[4],$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *********** [4]* [4]
num_dbs	src/server.h	/^    size_t num_dbs;$/;"	m	struct:redisMemOverhead	typeref:typename:size_t
num_items	deps/jemalloc/src/jemalloc.c	/^	size_t num_items;$/;"	m	struct:dynamic_opts_s	typeref:typename:size_t	file:
num_runs	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	uint64_t num_runs;$/;"	m	struct:background_thread_stats_s	typeref:typename:uint64_t
num_threads	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	size_t num_threads;$/;"	m	struct:background_thread_stats_s	typeref:typename:size_t
num_threads	src/redis-benchmark.c	/^    int num_threads;$/;"	m	struct:config	typeref:typename:int	file:
number	deps/lua/src/lua_cjson.c	/^        double number;$/;"	m	union:__anona3a73c770408::__anona3a73c77050a	typeref:typename:double	file:
numclients	src/redis-benchmark.c	/^    int numclients;$/;"	m	struct:config	typeref:typename:int	file:
numele	src/rax.h	/^    uint64_t numele;$/;"	m	struct:rax	typeref:typename:uint64_t
numeric	src/config.c	/^    numericConfigData numeric;$/;"	m	union:typeData	typeref:typename:numericConfigData	file:
numericConfigData	src/config.c	/^typedef struct numericConfigData {$/;"	s	file:
numericConfigData	src/config.c	/^} numericConfigData;$/;"	t	typeref:struct:numericConfigData	file:
numericType	src/config.c	/^typedef enum numericType {$/;"	g	file:
numericType	src/config.c	/^} numericType;$/;"	t	typeref:enum:numericType	file:
numeric_type	src/config.c	/^    numericType numeric_type; \/* An enum indicating the type of this value *\/$/;"	m	struct:numericConfigData	typeref:typename:numericType	file:
numfieldsleft	src/module.c	/^            int64_t numfieldsleft; \/* Fields left to fetch for current entry. *\/$/;"	m	struct:RedisModuleKey::__anon967b4733010a::__anon967b47330308	typeref:typename:int64_t	file:
numints	deps/lua/src/ltable.c	/^#define numints	/;"	d	file:
numkeys	src/server.h	/^    int numkeys;                        \/* Number of key indices return *\/$/;"	m	struct:__anon3ef696e90708	typeref:typename:int
numlines	src/config.c	/^    int numlines;         \/* Number of lines in current config *\/$/;"	m	struct:configSetCommand::rewriteConfigState	typeref:typename:int	file:
numnodes	src/rax.h	/^    uint64_t numnodes;$/;"	m	struct:rax	typeref:typename:uint64_t
numops	src/server.h	/^    int numops;$/;"	m	struct:redisOpArray	typeref:typename:int
numparams	deps/lua/src/lobject.h	/^  lu_byte numparams;$/;"	m	struct:Proto	typeref:typename:lu_byte
numreplicas	src/server.h	/^    int numreplicas;        \/* Number of replicas we are waiting for ACK. *\/$/;"	m	struct:blockingState	typeref:typename:int
numslaves	src/cluster.h	/^    int numslaves;  \/* Number of slave nodes, if this is a master *\/$/;"	m	struct:clusterNode	typeref:typename:int
numslots	src/cluster.h	/^    int numslots;   \/* Number of slots handled by this node *\/$/;"	m	struct:clusterNode	typeref:typename:int
numusearray	deps/lua/src/ltable.c	/^static int numusearray (const Table *t, int *nums) {$/;"	f	typeref:typename:int	file:
numusehash	deps/lua/src/ltable.c	/^static int numusehash (const Table *t, int *nums, int *pnasize) {$/;"	f	typeref:typename:int	file:
nunpurged	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	size_t			nunpurged;$/;"	m	struct:arena_decay_s	typeref:typename:size_t
nupdates_mock	deps/jemalloc/test/unit/decay.c	/^static unsigned nupdates_mock;$/;"	v	typeref:typename:unsigned	file:
nups	deps/lua/src/lobject.h	/^  lu_byte nups;  \/* number of upvalues *\/$/;"	m	struct:Proto	typeref:typename:lu_byte
nups	deps/lua/src/lua.h	/^  int nups;		\/* (u) number of upvalues *\/$/;"	m	struct:lua_Debug	typeref:typename:int
nuse	deps/lua/src/lstate.h	/^  lu_int32 nuse;  \/* number of elements *\/$/;"	m	struct:stringtable	typeref:typename:lu_int32
nval	deps/lua/src/lparser.h	/^    lua_Number nval;$/;"	m	union:expdesc::__anon581f0db7020a	typeref:typename:lua_Number
nvalue	deps/lua/src/lobject.h	/^#define nvalue(/;"	d
o	deps/lua/src/Makefile	/^o:	$(ALL_O)$/;"	t
o	src/server.h	/^    unsigned char o[20];    \/* Ordered elements. *\/$/;"	m	struct:RedisModuleDigest	typeref:typename:unsigned char[20]
o2s	deps/jemalloc/src/malloc_io.c	/^o2s(uintmax_t x, bool alt_form, char *s, size_t *slen_p) {$/;"	f	typeref:typename:char *	file:
o_down_since_time	src/sentinel.c	/^    mstime_t o_down_since_time; \/* Objectively down since time. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:mstime_t	file:
obj	deps/hiredis/read.h	/^    void *obj; \/* holds user-generated value for a read task *\/$/;"	m	struct:redisReadTask	typeref:typename:void *
obj	src/server.h	/^    robj *obj;$/;"	m	struct:_redisSortObject	typeref:typename:robj *
obj2gco	deps/lua/src/lstate.h	/^#define obj2gco(/;"	d
object	src/acl.c	/^    sds object;         \/* The key name or command name. *\/$/;"	m	struct:ACLLogEntry	typeref:typename:sds	file:
objectCommand	src/object.c	/^void objectCommand(client *c) {$/;"	f	typeref:typename:void
objectCommandLookup	src/object.c	/^robj *objectCommandLookup(client *c, robj *key) {$/;"	f	typeref:typename:robj *
objectCommandLookupOrReply	src/object.c	/^robj *objectCommandLookupOrReply(client *c, robj *key, robj *reply) {$/;"	f	typeref:typename:robj *
objectComputeSize	src/object.c	/^size_t objectComputeSize(robj *o, size_t sample_size) {$/;"	f	typeref:typename:size_t
objectKeyHeapPointerValueDictType	src/server.c	/^dictType objectKeyHeapPointerValueDictType = {$/;"	v	typeref:typename:dictType
objectKeyPointerValueDictType	src/server.c	/^dictType objectKeyPointerValueDictType = {$/;"	v	typeref:typename:dictType
objectSetLRUOrLFU	src/object.c	/^int objectSetLRUOrLFU(robj *val, long long lfu_freq, long long lru_idle,$/;"	f	typeref:typename:int
objroot	deps/jemalloc/Makefile	/^objroot := $/;"	m
objroot	deps/jemalloc/Makefile.in	/^objroot := @objroot@$/;"	m
obuf	deps/hiredis/hiredis.h	/^    char *obuf; \/* Write buffer *\/$/;"	m	struct:redisContext	typeref:typename:char *
obuf	src/redis-benchmark.c	/^    sds obuf;$/;"	m	struct:_client	typeref:typename:sds	file:
obuf_soft_limit_reached_time	src/server.h	/^    time_t obuf_soft_limit_reached_time;$/;"	m	struct:client	typeref:typename:time_t
ofd	deps/linenoise/linenoise.c	/^    int ofd;            \/* Terminal stdout file descriptor. *\/$/;"	m	struct:linenoiseState	typeref:typename:int	file:
offset	src/bitops.c	/^    uint64_t offset;    \/* Bitfield offset. *\/$/;"	m	struct:bitfieldOp	typeref:typename:uint64_t	file:
offset	src/cluster.h	/^    uint64_t offset;    \/* Master replication offset if node is a master or$/;"	m	struct:__anon2cc7db540b08	typeref:typename:uint64_t
offset	src/quicklist.h	/^    int offset;$/;"	m	struct:quicklistEntry	typeref:typename:int
offset	src/quicklist.h	/^    long offset; \/* offset in current ziplist *\/$/;"	m	struct:quicklistIter	typeref:typename:long
offset_state	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	atomic_zu_t		offset_state;$/;"	m	struct:arena_s	typeref:typename:atomic_zu_t
offsetof	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	/^#  define offsetof(/;"	d
ok	src/intset.c	/^static void ok(void) {$/;"	f	typeref:typename:void	file:
ok	src/server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj **
oldpos	deps/linenoise/linenoise.c	/^    size_t oldpos;      \/* Previous refresh cursor position. *\/$/;"	m	struct:linenoiseState	typeref:typename:size_t	file:
onConnect	deps/hiredis/async.h	/^    redisConnectCallback *onConnect;$/;"	m	struct:redisAsyncContext	typeref:typename:redisConnectCallback *
onDisconnect	deps/hiredis/async.h	/^    redisDisconnectCallback *onDisconnect;$/;"	m	struct:redisAsyncContext	typeref:typename:redisDisconnectCallback *
on_close	deps/hiredis/adapters/libuv.h	/^static void on_close(uv_handle_t* handle) {$/;"	f	typeref:typename:void
one	deps/lua/etc/Makefile	/^one:$/;"	t
oom	src/rax.h	/^    int oom; \/* True if pushing into this stack failed for OOM at some point. *\/$/;"	m	struct:raxStack	typeref:typename:int
oom_score_adj	src/server.h	/^    int oom_score_adj;                            \/* If true, oom_score_adj is managed *\/$/;"	m	struct:redisServer	typeref:typename:int
oom_score_adj_base	src/server.h	/^    int oom_score_adj_base;         \/* Base oom_score_adj value, as observed on startup *\/$/;"	m	struct:redisServer	typeref:typename:int
oom_score_adj_enum	src/config.c	/^configEnum oom_score_adj_enum[] = {$/;"	v	typeref:typename:configEnum[]
oom_score_adj_values	src/server.h	/^    int oom_score_adj_values[CONFIG_OOM_COUNT];   \/* Linux oom_score_adj configuration *\/$/;"	m	struct:redisServer	typeref:typename:int[]
oom_string	deps/jemalloc/src/jemalloc.c	/^	const char *oom_string;$/;"	m	struct:static_opts_s	typeref:typename:const char *	file:
oomerr	src/server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
opaque	deps/jemalloc/include/jemalloc/internal/witness.h	/^	void			*opaque;$/;"	m	struct:witness_s	typeref:typename:void *
opcode	src/bitops.c	/^    int opcode;         \/* Operation id. *\/$/;"	m	struct:bitfieldOp	typeref:typename:int	file:
open	deps/jemalloc/include/jemalloc/internal/hooks.h	/^#define open /;"	d
openChildInfoPipe	src/childinfo.c	/^void openChildInfoPipe(void) {$/;"	f	typeref:typename:void
openDirectLogFiledes	src/debug.c	/^int openDirectLogFiledes(void) {$/;"	f	typeref:typename:int
open_func	deps/lua/src/lparser.c	/^static void open_func (LexState *ls, FuncState *fs) {$/;"	f	typeref:typename:void	file:
open_key_or_reply	tests/modules/misc.c	/^RedisModuleKey *open_key_or_reply(RedisModuleCtx *ctx, RedisModuleString *keyname, int mode) {$/;"	f	typeref:typename:RedisModuleKey *
opensslDoLock	deps/hiredis/ssl.c	/^static void opensslDoLock(int mode, int lkid, const char *f, int line) {$/;"	f	typeref:typename:void	file:
openssl_locks	src/tls.c	/^static pthread_mutex_t *openssl_locks;$/;"	v	typeref:typename:pthread_mutex_t *	file:
openupval	deps/lua/src/lstate.h	/^  GCObject *openupval;  \/* list of open upvalues in this stack *\/$/;"	m	struct:lua_State	typeref:typename:GCObject *
operator new	deps/jemalloc/src/jemalloc_cpp.cpp	/^operator new(std::size_t size) {$/;"	f	typeref:typename:void *
operator new	deps/jemalloc/src/jemalloc_cpp.cpp	/^operator new(std::size_t size, const std::nothrow_t &) noexcept {$/;"	f	typeref:typename:void *
operator new[]	deps/jemalloc/src/jemalloc_cpp.cpp	/^operator new[](std::size_t size) {$/;"	f	typeref:typename:void *
opmode	deps/lua/src/lopcodes.c	/^#define opmode(/;"	d	file:
ops	src/server.h	/^    redisOp *ops;$/;"	m	struct:redisOpArray	typeref:typename:redisOp *
opt_abort	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_abort /;"	d
opt_abort	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_abort /;"	d
opt_abort	deps/jemalloc/src/jemalloc.c	/^bool	opt_abort =$/;"	v	typeref:typename:bool
opt_abort_conf	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_abort_conf /;"	d
opt_abort_conf	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_abort_conf /;"	d
opt_abort_conf	deps/jemalloc/src/jemalloc.c	/^bool	opt_abort_conf =$/;"	v	typeref:typename:bool
opt_background_thread	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_background_thread /;"	d
opt_background_thread	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_background_thread /;"	d
opt_background_thread	deps/jemalloc/src/background_thread.c	/^bool opt_background_thread = BACKGROUND_THREAD_DEFAULT;$/;"	v	typeref:typename:bool
opt_dirty_decay_ms	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_dirty_decay_ms /;"	d
opt_dirty_decay_ms	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_dirty_decay_ms /;"	d
opt_dirty_decay_ms	deps/jemalloc/src/arena.c	/^ssize_t opt_dirty_decay_ms = DIRTY_DECAY_MS_DEFAULT;$/;"	v	typeref:typename:ssize_t
opt_dss	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_dss /;"	d
opt_dss	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_dss /;"	d
opt_dss	deps/jemalloc/src/extent_dss.c	/^const char	*opt_dss = DSS_DEFAULT;$/;"	v	typeref:typename:const char *
opt_junk	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_junk /;"	d
opt_junk	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_junk /;"	d
opt_junk	deps/jemalloc/src/jemalloc.c	/^const char	*opt_junk =$/;"	v	typeref:typename:const char *
opt_junk_alloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_junk_alloc /;"	d
opt_junk_alloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_junk_alloc /;"	d
opt_junk_alloc	deps/jemalloc/src/jemalloc.c	/^bool	opt_junk_alloc =$/;"	v	typeref:typename:bool
opt_junk_free	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_junk_free /;"	d
opt_junk_free	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_junk_free /;"	d
opt_junk_free	deps/jemalloc/src/jemalloc.c	/^bool	opt_junk_free =$/;"	v	typeref:typename:bool
opt_lg_extent_max_active_fit	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_lg_extent_max_active_fit /;"	d
opt_lg_extent_max_active_fit	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_lg_extent_max_active_fit /;"	d
opt_lg_extent_max_active_fit	deps/jemalloc/src/extent.c	/^size_t opt_lg_extent_max_active_fit = LG_EXTENT_MAX_ACTIVE_FIT_DEFAULT;$/;"	v	typeref:typename:size_t
opt_lg_prof_interval	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_lg_prof_interval /;"	d
opt_lg_prof_interval	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_lg_prof_interval /;"	d
opt_lg_prof_interval	deps/jemalloc/src/prof.c	/^ssize_t		opt_lg_prof_interval = LG_PROF_INTERVAL_DEFAULT;$/;"	v	typeref:typename:ssize_t
opt_lg_prof_sample	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_lg_prof_sample /;"	d
opt_lg_prof_sample	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_lg_prof_sample /;"	d
opt_lg_prof_sample	deps/jemalloc/src/prof.c	/^size_t		opt_lg_prof_sample = LG_PROF_SAMPLE_DEFAULT;$/;"	v	typeref:typename:size_t
opt_lg_tcache_max	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_lg_tcache_max /;"	d
opt_lg_tcache_max	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_lg_tcache_max /;"	d
opt_lg_tcache_max	deps/jemalloc/src/tcache.c	/^ssize_t	opt_lg_tcache_max = LG_TCACHE_MAXCLASS_DEFAULT;$/;"	v	typeref:typename:ssize_t
opt_max_background_threads	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_max_background_threads /;"	d
opt_max_background_threads	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_max_background_threads /;"	d
opt_max_background_threads	deps/jemalloc/src/background_thread.c	/^size_t opt_max_background_threads = MAX_BACKGROUND_THREAD_LIMIT;$/;"	v	typeref:typename:size_t
opt_metadata_thp	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_metadata_thp /;"	d
opt_metadata_thp	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_metadata_thp /;"	d
opt_metadata_thp	deps/jemalloc/src/base.c	/^metadata_thp_mode_t opt_metadata_thp = METADATA_THP_DEFAULT;$/;"	v	typeref:typename:metadata_thp_mode_t
opt_muzzy_decay_ms	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_muzzy_decay_ms /;"	d
opt_muzzy_decay_ms	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_muzzy_decay_ms /;"	d
opt_muzzy_decay_ms	deps/jemalloc/src/arena.c	/^ssize_t opt_muzzy_decay_ms = MUZZY_DECAY_MS_DEFAULT;$/;"	v	typeref:typename:ssize_t
opt_narenas	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_narenas /;"	d
opt_narenas	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_narenas /;"	d
opt_narenas	deps/jemalloc/src/jemalloc.c	/^unsigned	opt_narenas = 0;$/;"	v	typeref:typename:unsigned
opt_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t opt_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
opt_percpu_arena	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_percpu_arena /;"	d
opt_percpu_arena	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_percpu_arena /;"	d
opt_percpu_arena	deps/jemalloc/src/arena.c	/^percpu_arena_mode_t opt_percpu_arena = PERCPU_ARENA_DEFAULT;$/;"	v	typeref:typename:percpu_arena_mode_t
opt_prof	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_prof /;"	d
opt_prof	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_prof /;"	d
opt_prof	deps/jemalloc/src/prof.c	/^bool		opt_prof = false;$/;"	v	typeref:typename:bool
opt_prof_accum	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_prof_accum /;"	d
opt_prof_accum	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_prof_accum /;"	d
opt_prof_accum	deps/jemalloc/src/prof.c	/^bool		opt_prof_accum = false;$/;"	v	typeref:typename:bool
opt_prof_active	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_prof_active /;"	d
opt_prof_active	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_prof_active /;"	d
opt_prof_active	deps/jemalloc/src/prof.c	/^bool		opt_prof_active = true;$/;"	v	typeref:typename:bool
opt_prof_final	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_prof_final /;"	d
opt_prof_final	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_prof_final /;"	d
opt_prof_final	deps/jemalloc/src/prof.c	/^bool		opt_prof_final = false;$/;"	v	typeref:typename:bool
opt_prof_gdump	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_prof_gdump /;"	d
opt_prof_gdump	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_prof_gdump /;"	d
opt_prof_gdump	deps/jemalloc/src/prof.c	/^bool		opt_prof_gdump = false;$/;"	v	typeref:typename:bool
opt_prof_leak	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_prof_leak /;"	d
opt_prof_leak	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_prof_leak /;"	d
opt_prof_leak	deps/jemalloc/src/prof.c	/^bool		opt_prof_leak = false;$/;"	v	typeref:typename:bool
opt_prof_prefix	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_prof_prefix /;"	d
opt_prof_prefix	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_prof_prefix /;"	d
opt_prof_prefix	deps/jemalloc/src/prof.c	/^char		opt_prof_prefix[$/;"	v	typeref:typename:char[]
opt_prof_thread_active_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_prof_thread_active_init /;"	d
opt_prof_thread_active_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_prof_thread_active_init /;"	d
opt_prof_thread_active_init	deps/jemalloc/src/prof.c	/^bool		opt_prof_thread_active_init = true;$/;"	v	typeref:typename:bool
opt_retain	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_retain /;"	d
opt_retain	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_retain /;"	d
opt_retain	deps/jemalloc/src/extent_mmap.c	/^bool	opt_retain =$/;"	v	typeref:typename:bool
opt_stats_print	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_stats_print /;"	d
opt_stats_print	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_stats_print /;"	d
opt_stats_print	deps/jemalloc/src/stats.c	/^bool opt_stats_print = false;$/;"	v	typeref:typename:bool
opt_stats_print_opts	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_stats_print_opts /;"	d
opt_stats_print_opts	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_stats_print_opts /;"	d
opt_stats_print_opts	deps/jemalloc/src/stats.c	/^char opt_stats_print_opts[stats_print_tot_num_options+1] = "";$/;"	v	typeref:typename:char[]
opt_tcache	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_tcache /;"	d
opt_tcache	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_tcache /;"	d
opt_tcache	deps/jemalloc/src/tcache.c	/^bool	opt_tcache = true;$/;"	v	typeref:typename:bool
opt_thp	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_thp /;"	d
opt_thp	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_thp /;"	d
opt_thp	deps/jemalloc/src/pages.c	/^thp_mode_t opt_thp = THP_MODE_DEFAULT;$/;"	v	typeref:typename:thp_mode_t
opt_utrace	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_utrace /;"	d
opt_utrace	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_utrace /;"	d
opt_utrace	deps/jemalloc/src/jemalloc.c	/^bool	opt_utrace = false;$/;"	v	typeref:typename:bool
opt_xmalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_xmalloc /;"	d
opt_xmalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_xmalloc /;"	d
opt_xmalloc	deps/jemalloc/src/jemalloc.c	/^bool	opt_xmalloc = false;$/;"	v	typeref:typename:bool
opt_zero	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define opt_zero /;"	d
opt_zero	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define opt_zero /;"	d
opt_zero	deps/jemalloc/src/jemalloc.c	/^bool	opt_zero = false;$/;"	v	typeref:typename:bool
optimization_level	src/quicklist.c	/^static const size_t optimization_level[] = {4096, 8192, 16384, 32768, 65536};$/;"	v	typeref:typename:const size_t[]	file:
option_to_line	src/config.c	/^    dict *option_to_line; \/* Option -> list of config file lines map *\/$/;"	m	struct:configSetCommand::rewriteConfigState	typeref:typename:dict *	file:
options	deps/hiredis/hiredis.h	/^    int options;$/;"	m	struct:__anon7daed6b50108	typeref:typename:int
options	src/module.c	/^    int options;    \/* Module options and capabilities. *\/$/;"	m	struct:RedisModule	typeref:typename:int	file:
options	src/redis-cli.c	/^    char *options;$/;"	m	struct:clusterManagerCommandDef	typeref:typename:char *	file:
optsize	deps/lua/src/lua_struct.c	/^static size_t optsize (lua_State *L, char opt, const char **fmt) {$/;"	f	typeref:typename:size_t	file:
order	src/ziplist.c	/^        unsigned int order;$/;"	m	struct:ziplistRandomPairs::__anon4d39dfdc0108	typeref:typename:unsigned int	file:
org	src/redis-cli.c	/^    struct commandHelp *org;$/;"	m	struct:__anon6af24fe90108	typeref:struct:commandHelp *	file:
orig_commands	src/server.h	/^    dict *orig_commands;        \/* Command table before command renaming. *\/$/;"	m	struct:redisServer	typeref:typename:dict *
orig_termios	deps/linenoise/linenoise.c	/^static struct termios orig_termios; \/* In order to restore at exit.*\/$/;"	v	typeref:struct:termios	file:
original_argc	src/server.h	/^    int original_argc;      \/* Num of arguments of original command if arguments were rewritten/;"	m	struct:client	typeref:typename:int
original_argv	src/server.h	/^    robj **original_argv;   \/* Arguments of original command if arguments were rewritten. *\/$/;"	m	struct:client	typeref:typename:robj **
orphaned_time	src/cluster.h	/^    mstime_t orphaned_time;     \/* Starting time of orphaned master condition *\/$/;"	m	struct:clusterNode	typeref:typename:mstime_t
os_clock	deps/lua/src/loslib.c	/^static int os_clock (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_date	deps/lua/src/loslib.c	/^static int os_date (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_difftime	deps/lua/src/loslib.c	/^static int os_difftime (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_execute	deps/lua/src/loslib.c	/^static int os_execute (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_exit	deps/lua/src/loslib.c	/^static int os_exit (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_getenv	deps/lua/src/loslib.c	/^static int os_getenv (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_overcommits	deps/jemalloc/src/pages.c	/^static bool	os_overcommits;$/;"	v	typeref:typename:bool	file:
os_overcommits_proc	deps/jemalloc/src/pages.c	/^os_overcommits_proc(void) {$/;"	f	typeref:typename:bool	file:
os_overcommits_sysctl	deps/jemalloc/src/pages.c	/^os_overcommits_sysctl(void) {$/;"	f	typeref:typename:bool	file:
os_page	deps/jemalloc/src/pages.c	/^static size_t	os_page;$/;"	v	typeref:typename:size_t	file:
os_page_detect	deps/jemalloc/src/pages.c	/^os_page_detect(void) {$/;"	f	typeref:typename:size_t	file:
os_pages_map	deps/jemalloc/src/pages.c	/^os_pages_map(void *addr, size_t size, size_t alignment, bool *commit) {$/;"	f	typeref:typename:void *	file:
os_pages_trim	deps/jemalloc/src/pages.c	/^os_pages_trim(void *addr, size_t alloc_size, size_t leadsize, size_t size,$/;"	f	typeref:typename:void *	file:
os_pages_unmap	deps/jemalloc/src/pages.c	/^os_pages_unmap(void *addr, size_t size) {$/;"	f	typeref:typename:void	file:
os_pushresult	deps/lua/src/loslib.c	/^static int os_pushresult (lua_State *L, int i, const char *filename) {$/;"	f	typeref:typename:int	file:
os_remove	deps/lua/src/loslib.c	/^static int os_remove (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_rename	deps/lua/src/loslib.c	/^static int os_rename (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_setlocale	deps/lua/src/loslib.c	/^static int os_setlocale (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_time	deps/lua/src/loslib.c	/^static int os_time (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_tmpname	deps/lua/src/loslib.c	/^static int os_tmpname (lua_State *L) {$/;"	f	typeref:typename:int	file:
ossl_locks	deps/hiredis/ssl.c	/^static sslLockType* ossl_locks;$/;"	v	typeref:typename:sslLockType *	file:
ot	src/config.c	/^        off_t *ot;$/;"	m	union:numericConfigData::__anon722b8083020a	typeref:typename:off_t *	file:
otherwhite	deps/lua/src/lgc.h	/^#define otherwhite(/;"	d
outofrangeerr	src/server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *********** [4]* [4]* [4]* [4]******
output	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_output_t output;$/;"	m	struct:emitter_s	typeref:typename:emitter_output_t
output	deps/lua/src/luac.c	/^static const char* output=Output;	\/* actual output file name *\/$/;"	v	typeref:typename:const char *	file:
output	src/redis-cli.c	/^    int output; \/* output mode, see OUTPUT_* defines *\/$/;"	m	struct:config	typeref:typename:int	file:
overMaxmemoryAfterAlloc	src/evict.c	/^int overMaxmemoryAfterAlloc(size_t moremem) {$/;"	f	typeref:typename:int
overhead_ht_expires	src/server.h	/^        size_t overhead_ht_expires;$/;"	m	struct:redisMemOverhead::__anon3ef696e90508	typeref:typename:size_t
overhead_ht_main	src/server.h	/^        size_t overhead_ht_main;$/;"	m	struct:redisMemOverhead::__anon3ef696e90508	typeref:typename:size_t
overhead_total	src/server.h	/^    size_t overhead_total;$/;"	m	struct:redisMemOverhead	typeref:typename:size_t
owtype	src/bitops.c	/^    int owtype;         \/* Overflow type to use. *\/$/;"	m	struct:bitfieldOp	typeref:typename:int	file:
p	deps/jemalloc/src/jemalloc.c	/^	void	*p;	\/* Input pointer (as in realloc(p, s)). *\/$/;"	m	struct:__anon4e2331a50308	typeref:typename:void *	file:
p	deps/jemalloc/src/prof.c	/^			prof_tctx_t	*p;$/;"	m	union:prof_tdata_merge_iter::__anon7dcd3f75040a	typeref:typename:prof_tctx_t *	file:
p	deps/jemalloc/src/prof.c	/^		prof_bt_t	*p;$/;"	m	union:prof_lookup_global::__anon7dcd3f75020a	typeref:typename:prof_bt_t *	file:
p	deps/jemalloc/src/prof.c	/^		prof_gctx_t	*p;$/;"	m	union:prof_dump_prep::__anon7dcd3f75050a	typeref:typename:prof_gctx_t *	file:
p	deps/jemalloc/src/prof.c	/^		prof_gctx_t	*p;$/;"	m	union:prof_lookup_global::__anon7dcd3f75010a	typeref:typename:prof_gctx_t *	file:
p	deps/jemalloc/src/prof.c	/^		prof_tctx_t	*p;$/;"	m	union:prof_lookup::__anon7dcd3f75030a	typeref:typename:prof_tctx_t *	file:
p	deps/jemalloc/test/unit/ckh.c	/^			void *p;$/;"	m	union:TEST_BEGIN::__anon0ea0731b010a	typeref:typename:void *	file:
p	deps/jemalloc/test/unit/ckh.c	/^			void *p;$/;"	m	union:TEST_BEGIN::__anon0ea0731b020a	typeref:typename:void *	file:
p	deps/lua/src/lauxlib.h	/^  char *p;			\/* current position in buffer *\/$/;"	m	struct:luaL_Buffer	typeref:typename:char *
p	deps/lua/src/lobject.h	/^  struct Proto **p;  \/* functions defined inside the function *\/$/;"	m	struct:Proto	typeref:struct:Proto **
p	deps/lua/src/lobject.h	/^  struct Proto *p;$/;"	m	struct:LClosure	typeref:struct:Proto *
p	deps/lua/src/lobject.h	/^  void *p;$/;"	m	union:__anona52fc941010a	typeref:typename:void *
p	deps/lua/src/lstate.h	/^  struct Proto p;$/;"	m	union:GCObject	typeref:struct:Proto
p	deps/lua/src/lua_cmsgpack.c	/^    const unsigned char *p;$/;"	m	struct:mp_cur	typeref:typename:const unsigned char *	file:
p	deps/lua/src/lzio.h	/^  const char *p;		\/* current position in buffer *\/$/;"	m	struct:Zio	typeref:typename:const char *
p	src/ziplist.c	/^    unsigned char *p;            \/* Pointer to the very start of the entry, that$/;"	m	struct:zlentry	typeref:typename:unsigned char *	file:
p_test	deps/jemalloc/test/src/test.c	/^p_test(test_t *t, ...) {$/;"	f	typeref:typename:test_status_t
p_test_fail	deps/jemalloc/test/src/test.c	/^p_test_fail(const char *prefix, const char *message) {$/;"	f	typeref:typename:void
p_test_fini	deps/jemalloc/test/src/test.c	/^p_test_fini(void) {$/;"	f	typeref:typename:void
p_test_impl	deps/jemalloc/test/src/test.c	/^p_test_impl(bool do_malloc_init, bool do_reentrant, test_t *t, va_list ap) {$/;"	f	typeref:typename:test_status_t	file:
p_test_init	deps/jemalloc/test/src/test.c	/^p_test_init(const char *name) {$/;"	f	typeref:typename:void
p_test_no_malloc_init	deps/jemalloc/test/src/test.c	/^p_test_no_malloc_init(test_t *t, ...) {$/;"	f	typeref:typename:test_status_t
p_test_no_reentrancy	deps/jemalloc/test/src/test.c	/^p_test_no_reentrancy(test_t *t, ...) {$/;"	f	typeref:typename:test_status_t
pa_head	src/module.c	/^    struct RedisModulePoolAllocBlock *pa_head;$/;"	m	struct:RedisModuleCtx	typeref:struct:RedisModulePoolAllocBlock *	file:
pactive	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t pactive;$/;"	m	struct:ctl_arena_s	typeref:typename:size_t
pages_boot	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define pages_boot /;"	d
pages_boot	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define pages_boot /;"	d
pages_boot	deps/jemalloc/src/pages.c	/^pages_boot(void) {$/;"	f	typeref:typename:bool
pages_can_purge_forced	deps/jemalloc/include/jemalloc/internal/pages.h	/^static const bool pages_can_purge_forced =$/;"	v	typeref:typename:const bool
pages_can_purge_lazy	deps/jemalloc/include/jemalloc/internal/pages.h	/^static const bool pages_can_purge_lazy =$/;"	v	typeref:typename:const bool
pages_can_purge_lazy_runtime	deps/jemalloc/src/pages.c	/^static bool pages_can_purge_lazy_runtime = true;$/;"	v	typeref:typename:bool	file:
pages_commit	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define pages_commit /;"	d
pages_commit	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define pages_commit /;"	d
pages_commit	deps/jemalloc/src/pages.c	/^pages_commit(void *addr, size_t size) {$/;"	f	typeref:typename:bool
pages_commit_impl	deps/jemalloc/src/pages.c	/^pages_commit_impl(void *addr, size_t size, bool commit) {$/;"	f	typeref:typename:bool	file:
pages_decommit	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define pages_decommit /;"	d
pages_decommit	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define pages_decommit /;"	d
pages_decommit	deps/jemalloc/src/pages.c	/^pages_decommit(void *addr, size_t size) {$/;"	f	typeref:typename:bool
pages_dodump	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define pages_dodump /;"	d
pages_dodump	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define pages_dodump /;"	d
pages_dodump	deps/jemalloc/src/pages.c	/^pages_dodump(void *addr, size_t size) {$/;"	f	typeref:typename:bool
pages_dontdump	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define pages_dontdump /;"	d
pages_dontdump	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define pages_dontdump /;"	d
pages_dontdump	deps/jemalloc/src/pages.c	/^pages_dontdump(void *addr, size_t size) {$/;"	f	typeref:typename:bool
pages_huge	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define pages_huge /;"	d
pages_huge	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define pages_huge /;"	d
pages_huge	deps/jemalloc/src/pages.c	/^pages_huge(void *addr, size_t size) {$/;"	f	typeref:typename:bool
pages_huge_impl	deps/jemalloc/src/pages.c	/^pages_huge_impl(void *addr, size_t size, bool aligned) {$/;"	f	typeref:typename:bool	file:
pages_huge_unaligned	deps/jemalloc/src/pages.c	/^pages_huge_unaligned(void *addr, size_t size) {$/;"	f	typeref:typename:bool	file:
pages_map	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define pages_map /;"	d
pages_map	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define pages_map /;"	d
pages_map	deps/jemalloc/src/pages.c	/^pages_map(void *addr, size_t size, size_t alignment, bool *commit) {$/;"	f	typeref:typename:void *
pages_map_slow	deps/jemalloc/src/pages.c	/^pages_map_slow(size_t size, size_t alignment, bool *commit) {$/;"	f	typeref:typename:void *	file:
pages_nohuge	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define pages_nohuge /;"	d
pages_nohuge	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define pages_nohuge /;"	d
pages_nohuge	deps/jemalloc/src/pages.c	/^pages_nohuge(void *addr, size_t size) {$/;"	f	typeref:typename:bool
pages_nohuge_impl	deps/jemalloc/src/pages.c	/^pages_nohuge_impl(void *addr, size_t size, bool aligned) {$/;"	f	typeref:typename:bool	file:
pages_nohuge_unaligned	deps/jemalloc/src/pages.c	/^pages_nohuge_unaligned(void *addr, size_t size) {$/;"	f	typeref:typename:bool	file:
pages_purge_forced	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define pages_purge_forced /;"	d
pages_purge_forced	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define pages_purge_forced /;"	d
pages_purge_forced	deps/jemalloc/src/pages.c	/^pages_purge_forced(void *addr, size_t size) {$/;"	f	typeref:typename:bool
pages_purge_lazy	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define pages_purge_lazy /;"	d
pages_purge_lazy	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define pages_purge_lazy /;"	d
pages_purge_lazy	deps/jemalloc/src/pages.c	/^pages_purge_lazy(void *addr, size_t size) {$/;"	f	typeref:typename:bool
pages_set_thp_state	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define pages_set_thp_state /;"	d
pages_set_thp_state	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define pages_set_thp_state /;"	d
pages_set_thp_state	deps/jemalloc/src/pages.c	/^pages_set_thp_state (void *ptr, size_t size) {$/;"	f	typeref:typename:void
pages_unmap	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define pages_unmap /;"	d
pages_unmap	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define pages_unmap /;"	d
pages_unmap	deps/jemalloc/src/pages.c	/^pages_unmap(void *addr, size_t size) {$/;"	f	typeref:typename:void
panic	deps/lua/src/lauxlib.c	/^static int panic (lua_State *L) {$/;"	f	typeref:typename:int	file:
panic	deps/lua/src/lstate.h	/^  lua_CFunction panic;  \/* to be called in unprotected errors *\/$/;"	m	struct:global_State	typeref:typename:lua_CFunction
panic	src/redisassert.h	/^#define panic(/;"	d
panicAbort	deps/hiredis/examples/example-push.c	/^#define panicAbort(/;"	d	file:
parallel_syncs	src/sentinel.c	/^    int parallel_syncs; \/* How many slaves to reconfigure at same time. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:int	file:
params	src/help.h	/^  char *params;$/;"	m	struct:commandHelp	typeref:typename:char *
parent	deps/hiredis/read.h	/^    struct redisReadTask *parent; \/* parent task *\/$/;"	m	struct:redisReadTask	typeref:struct:redisReadTask *
parity	deps/jemalloc/test/src/SFMT.c	/^static uint32_t parity[4] = {PARITY1, PARITY2, PARITY3, PARITY4};$/;"	v	typeref:typename:uint32_t[4]	file:
parlist	deps/lua/src/lparser.c	/^static void parlist (LexState *ls) {$/;"	f	typeref:typename:void	file:
parseClusterNodeAddress	src/redis-cli.c	/^static int parseClusterNodeAddress(char *addr, char **ip_ptr, int *port_ptr,$/;"	f	typeref:typename:int	file:
parseEnv	src/redis-cli.c	/^static void parseEnv() {$/;"	f	typeref:typename:void	file:
parseExtendedStringArgumentsOrReply	src/t_string.c	/^int parseExtendedStringArgumentsOrReply(client *c, int *flags, int *unit, robj **expire, int com/;"	f	typeref:typename:int
parseOptions	src/redis-benchmark.c	/^int parseOptions(int argc, const char **argv) {$/;"	f	typeref:typename:int
parseOptions	src/redis-cli.c	/^static int parseOptions(int argc, char **argv) {$/;"	f	typeref:typename:int	file:
parseProtocolsConfig	src/tls.c	/^static int parseProtocolsConfig(const char *str) {$/;"	f	typeref:typename:int	file:
parseRedisUri	src/redis-cli.c	/^static void parseRedisUri(const char *uri) {$/;"	f	typeref:typename:void	file:
parseScanCursorOrReply	src/db.c	/^int parseScanCursorOrReply(client *c, robj *o, unsigned long *cursor) {$/;"	f	typeref:typename:int
parser	deps/jemalloc/test/unit/stats_print.c	/^	parser_t	*parser;$/;"	m	struct:__anonb5a306e00208	typeref:typename:parser_t *	file:
parser_append	deps/jemalloc/test/unit/stats_print.c	/^parser_append(parser_t *parser, const char *str) {$/;"	f	typeref:typename:bool	file:
parser_fini	deps/jemalloc/test/unit/stats_print.c	/^parser_fini(parser_t *parser) {$/;"	f	typeref:typename:void	file:
parser_init	deps/jemalloc/test/unit/stats_print.c	/^parser_init(parser_t *parser, bool verbose) {$/;"	f	typeref:typename:void	file:
parser_parse	deps/jemalloc/test/unit/stats_print.c	/^parser_parse(parser_t *parser) {$/;"	f	typeref:typename:bool	file:
parser_parse_array	deps/jemalloc/test/unit/stats_print.c	/^parser_parse_array(parser_t *parser) {$/;"	f	typeref:typename:bool	file:
parser_parse_object	deps/jemalloc/test/unit/stats_print.c	/^parser_parse_object(parser_t *parser) {$/;"	f	typeref:typename:bool	file:
parser_parse_pair	deps/jemalloc/test/unit/stats_print.c	/^parser_parse_pair(parser_t *parser) {$/;"	f	typeref:typename:bool	file:
parser_parse_pairs	deps/jemalloc/test/unit/stats_print.c	/^parser_parse_pairs(parser_t *parser) {$/;"	f	typeref:typename:bool	file:
parser_parse_value	deps/jemalloc/test/unit/stats_print.c	/^parser_parse_value(parser_t *parser) {$/;"	f	typeref:typename:bool	file:
parser_parse_values	deps/jemalloc/test/unit/stats_print.c	/^parser_parse_values(parser_t *parser) {$/;"	f	typeref:typename:bool	file:
parser_s	deps/jemalloc/test/unit/stats_print.c	/^struct parser_s {$/;"	s	file:
parser_t	deps/jemalloc/test/unit/stats_print.c	/^typedef struct parser_s parser_t;$/;"	t	typeref:struct:parser_s	file:
parser_tokenize	deps/jemalloc/test/unit/stats_print.c	/^parser_tokenize(parser_t *parser) {$/;"	f	typeref:typename:bool	file:
passwords	src/server.h	/^    list *passwords; \/* A list of SDS valid passwords for this user. *\/$/;"	m	struct:__anon3ef696e90408	typeref:typename:list *
patchlistaux	deps/lua/src/lcode.c	/^static void patchlistaux (FuncState *fs, int list, int vtarget, int reg,$/;"	f	typeref:typename:void	file:
patchtestreg	deps/lua/src/lcode.c	/^static int patchtestreg (FuncState *fs, int node, int reg) {$/;"	f	typeref:typename:int	file:
path	deps/hiredis/hiredis.h	/^        char *path;$/;"	m	struct:redisContext::__anon7daed6b50508	typeref:typename:char *
path	deps/hiredis/test.c	/^        const char *path;$/;"	m	struct:config::__anonab9ca1680208	typeref:typename:const char *	file:
path	src/server.h	/^    sds path;$/;"	m	struct:moduleLoadQueueEntry	typeref:typename:sds
pathIsBaseName	src/util.c	/^int pathIsBaseName(char *path) {$/;"	f	typeref:typename:int
pattern	src/redis-cli.c	/^    sds pattern;$/;"	m	struct:config	typeref:typename:sds	file:
pattern	src/server.h	/^    robj *pattern;$/;"	m	struct:_redisSortOperation	typeref:typename:robj *
patterns	deps/hiredis/async.h	/^        struct dict *patterns;$/;"	m	struct:redisAsyncContext::__anon89b0a8ab0208	typeref:struct:dict *
patterns	src/server.h	/^    list *patterns;  \/* A list of allowed key patterns. If this field is NULL$/;"	m	struct:__anon3ef696e90408	typeref:typename:list *
pauseClients	src/networking.c	/^void pauseClients(mstime_t end, pause_type type) {$/;"	f	typeref:typename:void
pause_type	src/server.h	/^} pause_type;$/;"	t	typeref:enum:__anon3ef696e90303
paused_clients	src/server.h	/^    list *paused_clients;       \/* List of pause clients *\/$/;"	m	struct:redisServer	typeref:typename:list *
paused_list_node	src/server.h	/^    listNode *paused_list_node; \/* list node within the pause list *\/$/;"	m	struct:client	typeref:typename:listNode *
pauserehash	src/dict.h	/^    int16_t pauserehash; \/* If >0 rehashing is paused (<0 indicates coding error) *\/$/;"	m	struct:dict	typeref:typename:int16_t
pc	deps/lua/src/lparser.h	/^  int pc;  \/* next position to code (equivalent to `ncode') *\/$/;"	m	struct:FuncState	typeref:typename:int
pc	src/sentinel.c	/^    redisAsyncContext *pc; \/* Hiredis context for Pub \/ Sub. *\/$/;"	m	struct:instanceLink	typeref:typename:redisAsyncContext *	file:
pcRel	deps/lua/src/ldebug.h	/^#define pcRel(/;"	d
pc_conn_time	src/sentinel.c	/^    mstime_t pc_conn_time; \/* pc connection time. *\/$/;"	m	struct:instanceLink	typeref:typename:mstime_t	file:
pc_last_activity	src/sentinel.c	/^    mstime_t pc_last_activity; \/* Last time we received any message. *\/$/;"	m	struct:instanceLink	typeref:typename:mstime_t	file:
pdirty	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t pdirty;$/;"	m	struct:ctl_arena_s	typeref:typename:size_t
peak_allocated	src/server.h	/^    size_t peak_allocated;$/;"	m	struct:redisMemOverhead	typeref:typename:size_t
peak_perc	src/server.h	/^    float peak_perc;$/;"	m	struct:redisMemOverhead	typeref:typename:float
pecho	deps/lua/Makefile	/^pecho:$/;"	t
peek_next_value_from_index	deps/hdr_histogram/hdr_histogram.c	/^static int64_t peek_next_value_from_index(struct hdr_iter* iter)$/;"	f	typeref:typename:int64_t	file:
peerid	src/server.h	/^    sds peerid;             \/* Cached peer ID. *\/$/;"	m	struct:client	typeref:typename:sds
peerid	src/slowlog.h	/^    sds peerid;         \/* Client network address. *\/$/;"	m	struct:slowlogEntry	typeref:typename:sds
pel	src/stream.h	/^    rax *pel;                   \/* Consumer specific pending entries list: all$/;"	m	struct:streamConsumer	typeref:typename:rax *
pel	src/stream.h	/^    rax *pel;               \/* Pending entries list. This is a radix tree that$/;"	m	struct:streamCG	typeref:typename:rax *
pending	src/redis-benchmark.c	/^    int pending;            \/* Number of pending requests (replies to consume) *\/$/;"	m	struct:_client	typeref:typename:int	file:
pendingWrite	deps/hiredis/ssl.c	/^    int pendingWrite;$/;"	m	struct:redisSSL	typeref:typename:int	file:
pending_commands	src/sentinel.c	/^    int pending_commands;  \/* Number of commands sent waiting for a reply. *\/$/;"	m	struct:instanceLink	typeref:typename:int	file:
pending_fds	src/ae_evport.c	/^    int     pending_fds[MAX_EVENT_BATCHSZ];     \/* pending fds *\/$/;"	m	struct:aeApiState	typeref:typename:int[]	file:
pending_list	src/tls.c	/^static list *pending_list = NULL;$/;"	v	typeref:typename:list *	file:
pending_list_node	src/tls.c	/^    listNode *pending_list_node;$/;"	m	struct:tls_connection	typeref:typename:listNode *	file:
pending_masks	src/ae_evport.c	/^    int     pending_masks[MAX_EVENT_BATCHSZ];   \/* pending fds' masks *\/$/;"	m	struct:aeApiState	typeref:typename:int[]	file:
pending_querybuf	src/server.h	/^    sds pending_querybuf;   \/* If this client is flagged as master, this buffer$/;"	m	struct:client	typeref:typename:sds
pending_subs	deps/hiredis/async.h	/^    int pending_subs;$/;"	m	struct:redisCallback	typeref:typename:int
per_phycpu_arena	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^	per_phycpu_arena               = 4  \/* Hyper threads share arena. *\/$/;"	e	enum:__anond596bd1c0103
per_phycpu_arena_uninit	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^	per_phycpu_arena_uninit        = 1,$/;"	e	enum:__anond596bd1c0103
percentDecode	src/redis-cli.c	/^static sds percentDecode(const char *pe, size_t len) {$/;"	f	typeref:typename:sds	file:
percentile	deps/hdr_histogram/hdr_histogram.h	/^    double percentile;$/;"	m	struct:hdr_iter_percentiles	typeref:typename:double
percentile_iter_next	deps/hdr_histogram/hdr_histogram.c	/^static bool percentile_iter_next(struct hdr_iter* iter)$/;"	f	typeref:typename:bool	file:
percentile_to_iterate_to	deps/hdr_histogram/hdr_histogram.h	/^    double percentile_to_iterate_to;$/;"	m	struct:hdr_iter_percentiles	typeref:typename:double
percentiles	deps/hdr_histogram/hdr_histogram.h	/^        struct hdr_iter_percentiles percentiles;$/;"	m	union:hdr_iter::__anon905d92fb010a	typeref:struct:hdr_iter_percentiles
percpu_arena	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^	percpu_arena                   = 3,$/;"	e	enum:__anond596bd1c0103
percpu_arena_as_initialized	deps/jemalloc/src/jemalloc.c	/^percpu_arena_as_initialized(percpu_arena_mode_t mode) {$/;"	f	typeref:typename:percpu_arena_mode_t	file:
percpu_arena_choose	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^percpu_arena_choose(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE unsigned
percpu_arena_disabled	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^	percpu_arena_disabled          = 2,$/;"	e	enum:__anond596bd1c0103
percpu_arena_ind_limit	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^percpu_arena_ind_limit(percpu_arena_mode_t mode) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE unsigned
percpu_arena_mode_enabled_base	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^	percpu_arena_mode_enabled_base = 3,$/;"	e	enum:__anond596bd1c0103
percpu_arena_mode_names	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define percpu_arena_mode_names /;"	d
percpu_arena_mode_names	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define percpu_arena_mode_names /;"	d
percpu_arena_mode_names	deps/jemalloc/src/arena.c	/^const char *percpu_arena_mode_names[] = {$/;"	v	typeref:typename:const char * []
percpu_arena_mode_names_base	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^	percpu_arena_mode_names_base   = 0, \/* Used for options processing. *\/$/;"	e	enum:__anond596bd1c0103
percpu_arena_mode_names_limit	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^	percpu_arena_mode_names_limit  = 3, \/* Used for options processing. *\/$/;"	e	enum:__anond596bd1c0103
percpu_arena_mode_t	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^} percpu_arena_mode_t;$/;"	t	typeref:enum:__anond596bd1c0103
percpu_arena_uninit	deps/jemalloc/include/jemalloc/internal/arena_types.h	/^	percpu_arena_uninit            = 0,$/;"	e	enum:__anond596bd1c0103
percpu_arena_update	deps/jemalloc/include/jemalloc/internal/arena_inlines_a.h	/^percpu_arena_update(tsd_t *tsd, unsigned cpu) {$/;"	f	typeref:typename:void
performEvictions	src/evict.c	/^int performEvictions(void) {$/;"	f	typeref:typename:int
period	src/latency.h	/^    time_t period;          \/* Number of seconds since first event and now. *\/$/;"	m	struct:latencyStats	typeref:typename:time_t
period_certification	deps/jemalloc/test/src/SFMT.c	/^static void period_certification(sfmt_t *ctx) {$/;"	f	typeref:typename:void	file:
persist	src/server.h	/^    *script, *replconf, *eval, *persist, *set, *pexpireat, *pexpire, $/;"	m	struct:sharedObjectsStruct
persist-settings	src/Makefile	/^persist-settings: distclean$/;"	t
persistCommand	src/expire.c	/^void persistCommand(client *c) {$/;"	f	typeref:typename:void
persistenceCallback	tests/modules/hooks.c	/^void persistenceCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f	typeref:typename:void
pexpire	src/server.h	/^    *script, *replconf, *eval, *persist, *set, *pexpireat, *pexpire, $/;"	m	struct:sharedObjectsStruct
pexpireCommand	src/expire.c	/^void pexpireCommand(client *c) {$/;"	f	typeref:typename:void
pexpireCommand	src/server.h	/^                        *expireCommand, *pexpireCommand, *xclaimCommand,$/;"	m	struct:redisServer	typeref:struct:redisCommand ***********
pexpireat	src/server.h	/^    *script, *replconf, *eval, *persist, *set, *pexpireat, *pexpire, $/;"	m	struct:sharedObjectsStruct
pexpireatCommand	src/expire.c	/^void pexpireatCommand(client *c) {$/;"	f	typeref:typename:void
pfaddCommand	src/hyperloglog.c	/^void pfaddCommand(client *c) {$/;"	f	typeref:typename:void
pfcountCommand	src/hyperloglog.c	/^void pfcountCommand(client *c) {$/;"	f	typeref:typename:void
pfdebugCommand	src/hyperloglog.c	/^void pfdebugCommand(client *c) {$/;"	f	typeref:typename:void
pfmergeCommand	src/hyperloglog.c	/^void pfmergeCommand(client *c) {$/;"	f	typeref:typename:void
pfselftestCommand	src/hyperloglog.c	/^void pfselftestCommand(client *c) {$/;"	f	typeref:typename:void
ph	deps/jemalloc/include/jemalloc/internal/ph.h	/^#define ph(/;"	d
ph_gen	deps/jemalloc/include/jemalloc/internal/ph.h	/^#define ph_gen(/;"	d
ph_merge_aux	deps/jemalloc/include/jemalloc/internal/ph.h	/^#define ph_merge_aux(/;"	d
ph_merge_children	deps/jemalloc/include/jemalloc/internal/ph.h	/^#define ph_merge_children(/;"	d
ph_merge_siblings	deps/jemalloc/include/jemalloc/internal/ph.h	/^#define ph_merge_siblings(/;"	d
ph_proto	deps/jemalloc/include/jemalloc/internal/ph.h	/^#define ph_proto(/;"	d
phn	deps/jemalloc/include/jemalloc/internal/ph.h	/^#define phn(/;"	d
phn_lchild_get	deps/jemalloc/include/jemalloc/internal/ph.h	/^#define phn_lchild_get(/;"	d
phn_lchild_set	deps/jemalloc/include/jemalloc/internal/ph.h	/^#define phn_lchild_set(/;"	d
phn_merge	deps/jemalloc/include/jemalloc/internal/ph.h	/^#define phn_merge(/;"	d
phn_merge_ordered	deps/jemalloc/include/jemalloc/internal/ph.h	/^#define phn_merge_ordered(/;"	d
phn_next_get	deps/jemalloc/include/jemalloc/internal/ph.h	/^#define phn_next_get(/;"	d
phn_next_set	deps/jemalloc/include/jemalloc/internal/ph.h	/^#define phn_next_set(/;"	d
phn_prev_get	deps/jemalloc/include/jemalloc/internal/ph.h	/^#define phn_prev_get(/;"	d
phn_prev_set	deps/jemalloc/include/jemalloc/internal/ph.h	/^#define phn_prev_set(/;"	d
pid	src/sentinel.c	/^    pid_t pid;              \/* Script execution pid. *\/$/;"	m	struct:sentinelScriptJob	typeref:typename:pid_t	file:
pid	src/server.h	/^    pid_t pid;                  \/* Main process pid. *\/$/;"	m	struct:redisServer	typeref:typename:pid_t
pidfile	src/server.h	/^    char *pidfile;              \/* PID file path *\/$/;"	m	struct:redisServer	typeref:typename:char *
pind_last	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	pszind_t	pind_last;$/;"	m	struct:base_s	typeref:typename:pszind_t
ping	src/cluster.h	/^    } ping;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon2cc7db540608
ping	src/server.h	/^    *lastid, *ping, *setid, *keepttl, *load, *createconsumer,$/;"	m	struct:sharedObjectsStruct
pingCommand	src/server.c	/^void pingCommand(client *c) {$/;"	f	typeref:typename:void
ping_command_name	tests/modules/commandfilter.c	/^static const char ping_command_name[] = "commandfilter.ping";$/;"	v	typeref:typename:const char[]	file:
ping_recv	src/redis-cli.c	/^    time_t ping_recv;$/;"	m	struct:clusterManagerNode	typeref:typename:time_t	file:
ping_sent	src/cluster.h	/^    mstime_t ping_sent;      \/* Unix time we sent latest ping *\/$/;"	m	struct:clusterNode	typeref:typename:mstime_t
ping_sent	src/cluster.h	/^    uint32_t ping_sent;$/;"	m	struct:__anon2cc7db540108	typeref:typename:uint32_t
ping_sent	src/redis-cli.c	/^    time_t ping_sent;$/;"	m	struct:clusterManagerNode	typeref:typename:time_t	file:
pipeMode	src/redis-cli.c	/^static void pipeMode(void) {$/;"	f	typeref:typename:void	file:
pipe_mode	src/redis-cli.c	/^    int pipe_mode;$/;"	m	struct:config	typeref:typename:int	file:
pipe_timeout	src/redis-cli.c	/^    int pipe_timeout;$/;"	m	struct:config	typeref:typename:int	file:
pipeline	src/redis-benchmark.c	/^    int pipeline;$/;"	m	struct:config	typeref:typename:int	file:
pipeline	src/redis-cli.c	/^    int pipeline;$/;"	m	struct:clusterManagerCommand	typeref:typename:int	file:
pixels	src/lolwut.h	/^    char *pixels;$/;"	m	struct:lwCanvas	typeref:typename:char *
pk_funcs	deps/lua/src/loadlib.c	/^static const luaL_Reg pk_funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
plen	deps/linenoise/linenoise.c	/^    size_t plen;        \/* Prompt length. *\/$/;"	m	struct:linenoiseState	typeref:typename:size_t	file:
plus	src/server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
pmain	deps/lua/src/lua.c	/^static int pmain (lua_State *L) {$/;"	f	typeref:typename:int	file:
pmain	deps/lua/src/luac.c	/^static int pmain(lua_State* L)$/;"	f	typeref:typename:int	file:
pmessagebulk	src/server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
pmuzzy	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t pmuzzy;$/;"	m	struct:ctl_arena_s	typeref:typename:size_t
pointer	src/server.h	/^    unsigned long pointer;$/;"	m	struct:redisFunctionSym	typeref:typename:unsigned long
poll	deps/hiredis/sockcompat.h	/^#define poll(/;"	d
poll_fd	deps/hiredis/adapters/glib.h	/^    GPollFD poll_fd;$/;"	m	struct:__anonad20ee0e0108	typeref:typename:GPollFD
pong	src/server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *******
pong_received	src/cluster.h	/^    mstime_t pong_received;  \/* Unix time we received the pong *\/$/;"	m	struct:clusterNode	typeref:typename:mstime_t
pong_received	src/cluster.h	/^    uint32_t pong_received;$/;"	m	struct:__anon2cc7db540108	typeref:typename:uint32_t
poolAllocRelease	src/module.c	/^void poolAllocRelease(RedisModuleCtx *ctx) {$/;"	f	typeref:typename:void
pop	src/ziplist.c	/^static unsigned char *pop(unsigned char *zl, int where) {$/;"	f	typeref:typename:unsigned char *	file:
popGenericCommand	src/t_list.c	/^void popGenericCommand(client *c, int where) {$/;"	f	typeref:typename:void
populateCommandTable	src/server.c	/^void populateCommandTable(void) {$/;"	f	typeref:typename:void
populateCommandTableParseFlags	src/server.c	/^int populateCommandTableParseFlags(struct redisCommand *c, char *strflags) {$/;"	f	typeref:typename:int
port	deps/hiredis/hiredis.h	/^            int port;$/;"	m	struct:__anon7daed6b50108::__anon7daed6b5020a::__anon7daed6b50308	typeref:typename:int
port	deps/hiredis/hiredis.h	/^        int port;$/;"	m	struct:redisContext::__anon7daed6b50408	typeref:typename:int
port	deps/hiredis/test.c	/^        int port;$/;"	m	struct:config::__anonab9ca1680108	typeref:typename:int	file:
port	deps/hiredis/test.c	/^        int port;$/;"	m	struct:config::__anonab9ca1680308	typeref:typename:int	file:
port	src/cluster.h	/^    int port;                   \/* Latest known clients port (TLS or plain). *\/$/;"	m	struct:clusterNode	typeref:typename:int
port	src/cluster.h	/^    uint16_t port;              \/* base port last time it was seen *\/$/;"	m	struct:__anon2cc7db540108	typeref:typename:uint16_t
port	src/cluster.h	/^    uint16_t port;      \/* TCP base port number. *\/$/;"	m	struct:__anon2cc7db540b08	typeref:typename:uint16_t
port	src/module.c	/^    int port;$/;"	m	struct:moduleClusterNodeInfo	typeref:typename:int	file:
port	src/redis-benchmark.c	/^    int port;$/;"	m	struct:clusterNode	typeref:typename:int	file:
port	src/redis-cli.c	/^    int port;$/;"	m	struct:clusterManagerNode	typeref:typename:int	file:
port	src/redismodule.h	/^    uint16_t port;          \/* TCP port. *\/$/;"	m	struct:RedisModuleClientInfo	typeref:typename:uint16_t
port	src/sentinel.c	/^    int port;$/;"	m	struct:sentinelAddr	typeref:typename:int	file:
port	src/server.h	/^    int port;                   \/* TCP listening port *\/$/;"	m	struct:redisServer	typeref:typename:int
portfd	src/ae_evport.c	/^    int     portfd;                             \/* event port *\/$/;"	m	struct:aeApiState	typeref:typename:int	file:
pos	deps/hiredis/read.h	/^    size_t pos; \/* Buffer cursor *\/$/;"	m	struct:redisReader	typeref:typename:size_t
pos	deps/jemalloc/test/unit/stats_print.c	/^	size_t		pos;$/;"	m	struct:__anonb5a306e00208	typeref:typename:size_t	file:
pos	deps/jemalloc/test/unit/stats_print.c	/^	size_t	pos;$/;"	m	struct:parser_s	typeref:typename:size_t	file:
pos	deps/linenoise/linenoise.c	/^    size_t pos;         \/* Current cursor position. *\/$/;"	m	struct:linenoiseState	typeref:typename:size_t	file:
pos	src/rio.h	/^            off_t pos;    \/* pos in buf that was returned *\/$/;"	m	struct:_rio::__anonb6066a3c010a::__anonb6066a3c0408	typeref:typename:off_t
pos	src/rio.h	/^            off_t pos;$/;"	m	struct:_rio::__anonb6066a3c010a::__anonb6066a3c0208	typeref:typename:off_t
pos	src/rio.h	/^            off_t pos;$/;"	m	struct:_rio::__anonb6066a3c010a::__anonb6066a3c0508	typeref:typename:off_t
posix	deps/lua/src/Makefile	/^posix:$/;"	t
posix_memalign	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define posix_memalign /;"	d
posix_memalign	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define posix_memalign /;"	d
posix_memalign	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define posix_memalign /;"	d
posrelat	deps/lua/src/lstrlib.c	/^static ptrdiff_t posrelat (ptrdiff_t pos, size_t len) {$/;"	f	typeref:typename:ptrdiff_t	file:
post_monitor_cfg	src/server.h	/^    list *post_monitor_cfg;$/;"	m	struct:sentinelConfig	typeref:typename:list *
post_reentrancy	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^post_reentrancy(tsd_t *tsd) {$/;"	f	typeref:typename:void
postponeClientRead	src/networking.c	/^int postponeClientRead(client *c) {$/;"	f	typeref:typename:int
postpone_init	deps/jemalloc/src/mutex.c	/^static bool		postpone_init = true;$/;"	v	typeref:typename:bool	file:
postponed_arrays	src/module.c	/^    void **postponed_arrays;        \/* To set with RM_ReplySetArrayLength(). *\/$/;"	m	struct:RedisModuleCtx	typeref:typename:void **	file:
postponed_arrays_count	src/module.c	/^    int postponed_arrays_count;     \/* Number of entries in postponed_arrays. *\/$/;"	m	struct:RedisModuleCtx	typeref:typename:int	file:
postponed_mutexes	deps/jemalloc/src/mutex.c	/^static malloc_mutex_t	*postponed_mutexes = NULL;$/;"	v	typeref:typename:malloc_mutex_t *	file:
postponed_next	deps/jemalloc/include/jemalloc/internal/mutex.h	/^			malloc_mutex_t		*postponed_next;$/;"	m	struct:malloc_mutex_s::__anon9c853d94020a::__anon9c853d940308	typeref:typename:malloc_mutex_t *
pow2_ceil_u32	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^pow2_ceil_u32(uint32_t x) {$/;"	f	typeref:typename:BIT_UTIL_INLINE uint32_t
pow2_ceil_u64	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^pow2_ceil_u64(uint64_t x) {$/;"	f	typeref:typename:BIT_UTIL_INLINE uint64_t
pow2_ceil_zu	deps/jemalloc/include/jemalloc/internal/bit_util.h	/^pow2_ceil_zu(size_t x) {$/;"	f	typeref:typename:BIT_UTIL_INLINE size_t
power	deps/hdr_histogram/hdr_histogram.c	/^static int64_t power(int64_t base, int64_t exp)$/;"	f	typeref:typename:int64_t	file:
powerLawRand	src/redis-cli.c	/^long long powerLawRand(long long min, long long max, double alpha) {$/;"	f	typeref:typename:long long
pport	src/cluster.h	/^    int pport;                  \/* Latest known clients plaintext port. Only used$/;"	m	struct:clusterNode	typeref:typename:int
pport	src/cluster.h	/^    uint16_t pport;             \/* plaintext-port, when base port is TLS *\/$/;"	m	struct:__anon2cc7db540108	typeref:typename:uint16_t
pport	src/cluster.h	/^    uint16_t pport;      \/* Sender TCP plaintext port, if base port is TLS *\/$/;"	m	struct:__anon2cc7db540b08	typeref:typename:uint16_t
pqsort	src/pqsort.c	/^pqsort(void *a, size_t n, size_t es,$/;"	f	typeref:typename:void
preMonitorCfgName	src/sentinel.c	/^const char *preMonitorCfgName[] = { $/;"	v	typeref:typename:const char * []
pre_monitor_cfg	src/server.h	/^    list *pre_monitor_cfg;$/;"	m	struct:sentinelConfig	typeref:typename:list *
pre_multi_dbnum	src/redis-cli.c	/^    int pre_multi_dbnum;$/;"	m	struct:config	typeref:typename:int	file:
pre_reentrancy	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^pre_reentrancy(tsd_t *tsd, arena_t *arena) {$/;"	f	typeref:typename:void
precheck	deps/lua/src/ldebug.c	/^static int precheck (const Proto *pt) {$/;"	f	typeref:typename:int	file:
precision	src/redis-benchmark.c	/^    int precision;$/;"	m	struct:config	typeref:typename:int	file:
pref	src/redis-cli.c	/^static struct pref {$/;"	s	file:
pref	src/redis-cli.c	/^} pref;$/;"	v	typeref:struct:pref
prefer_server_ciphers	src/server.h	/^    int prefer_server_ciphers;$/;"	m	struct:redisTLSContextConfig	typeref:typename:int
prefix_pending	src/redis-benchmark.c	/^    int prefix_pending;     \/* If non-zero, number of pending prefix commands. Commands$/;"	m	struct:_client	typeref:typename:int	file:
prefixexp	deps/lua/src/lparser.c	/^static void prefixexp (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
prefixlen	src/redis-benchmark.c	/^    int prefixlen;          \/* Size in bytes of the pending prefix commands *\/$/;"	m	struct:_client	typeref:typename:int	file:
preinit_state	deps/lua/src/lstate.c	/^static void preinit_state (lua_State *L, global_State *g) {$/;"	f	typeref:typename:void	file:
prepareClientToWrite	src/networking.c	/^int prepareClientToWrite(client *c) {$/;"	f	typeref:typename:int
prepareForShutdown	src/server.c	/^int prepareForShutdown(int flags) {$/;"	f	typeref:typename:int
prepareLuaClient	src/scripting.c	/^void prepareLuaClient(void) {$/;"	f	typeref:typename:void
prepared	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	bool			prepared;$/;"	m	struct:prof_tctx_s	typeref:typename:bool
pressure_relief	deps/jemalloc/src/zone.c	/^	size_t (*pressure_relief)(struct _malloc_zone_t *, size_t);$/;"	m	struct:_malloc_zone_t	typeref:typename:size_t (*)(struct _malloc_zone_t *,size_t)	file:
prev	deps/lua/src/lobject.h	/^      struct UpVal *prev;$/;"	m	struct:UpVal::__anona52fc941040a::__anona52fc9410508	typeref:struct:UpVal *
prev	deps/lua/src/lparser.c	/^  struct LHS_assign *prev;$/;"	m	struct:LHS_assign	typeref:struct:LHS_assign *	file:
prev	deps/lua/src/lparser.h	/^  struct FuncState *prev;  \/* enclosing function *\/$/;"	m	struct:FuncState	typeref:struct:FuncState *
prev	src/adlist.h	/^    struct listNode *prev;$/;"	m	struct:listNode	typeref:struct:listNode *
prev	src/ae.h	/^    struct aeTimeEvent *prev;$/;"	m	struct:aeTimeEvent	typeref:struct:aeTimeEvent *
prev	src/quicklist.h	/^    struct quicklistNode *prev;$/;"	m	struct:quicklistNode	typeref:struct:quicklistNode *
prev_owner	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	tsdn_t			*prev_owner;$/;"	m	struct:__anonb26b3fca0308	typeref:typename:tsdn_t *
preventCommandAOF	src/server.c	/^void preventCommandAOF(client *c) {$/;"	f	typeref:typename:void
preventCommandPropagation	src/server.c	/^void preventCommandPropagation(client *c) {$/;"	f	typeref:typename:void
preventCommandReplication	src/server.c	/^void preventCommandReplication(client *c) {$/;"	f	typeref:typename:void
previous	deps/lua/src/ldo.c	/^  struct lua_longjmp *previous;$/;"	m	struct:lua_longjmp	typeref:struct:lua_longjmp *	file:
previous	deps/lua/src/lparser.c	/^  struct BlockCnt *previous;  \/* chain *\/$/;"	m	struct:BlockCnt	typeref:struct:BlockCnt *	file:
previous_requests_finished	src/redis-benchmark.c	/^    redisAtomic int previous_requests_finished;$/;"	m	struct:config	typeref:typename:redisAtomic int	file:
previous_tick	src/redis-benchmark.c	/^    long long previous_tick;$/;"	m	struct:config	typeref:typename:long long	file:
previous_time	src/sentinel.c	/^    mstime_t previous_time;         \/* Last time we ran the time handler. *\/$/;"	m	struct:sentinelState	typeref:typename:mstime_t	file:
prevrawlen	src/ziplist.c	/^    unsigned int prevrawlen;     \/* Previous entry len. *\/$/;"	m	struct:zlentry	typeref:typename:unsigned int	file:
prevrawlensize	src/ziplist.c	/^    unsigned int prevrawlensize; \/* Bytes used to encode the previous entry len*\/$/;"	m	struct:zlentry	typeref:typename:unsigned int	file:
primaryexp	deps/lua/src/lparser.c	/^static void primaryexp (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
print	deps/jemalloc/src/zone.c	/^	void (*print)(malloc_zone_t *, boolean_t);$/;"	m	struct:malloc_introspection_t	typeref:typename:void (*)(malloc_zone_t *,boolean_t)	file:
print	deps/lua/etc/min.c	/^static int print(lua_State *L)$/;"	f	typeref:typename:int	file:
print.o	deps/lua/src/Makefile	/^print.o: print.c ldebug.h lstate.h lua.h luaconf.h lobject.h llimits.h \\$/;"	t
printBits	src/bitops.c	/^void printBits(unsigned char *p, unsigned long count) {$/;"	f	typeref:typename:void
printCrashReport	src/debug.c	/^void printCrashReport(void) {$/;"	f	typeref:typename:void
print_escaped	deps/jemalloc/test/unit/emitter.c	/^static bool print_escaped = false;$/;"	v	typeref:typename:bool	file:
print_filled_extents	deps/jemalloc/test/integration/xallocx.c	/^print_filled_extents(const void *p, uint8_t c, size_t len) {$/;"	f	typeref:typename:TEST_END void	file:
print_raw	deps/jemalloc/test/unit/emitter.c	/^static bool print_raw = false;$/;"	v	typeref:typename:bool	file:
print_usage	deps/lua/src/lua.c	/^static void print_usage (void) {$/;"	f	typeref:typename:void	file:
print_version	deps/lua/src/lua.c	/^static void print_version (void) {$/;"	f	typeref:typename:void	file:
priority	deps/lua/src/lparser.c	/^} priority[] = {  \/* ORDER OPR *\/$/;"	v	typeref:typename:const struct __anon581f0db20108[]
private_data	src/connection.h	/^    void *private_data;$/;"	m	struct:connection	typeref:typename:void *
privctx	deps/hiredis/hiredis.h	/^    void *privctx;$/;"	m	struct:redisContext	typeref:typename:void *
privdata	deps/hiredis/async.h	/^    void *privdata;$/;"	m	struct:redisCallback	typeref:typename:void *
privdata	deps/hiredis/dict.h	/^    void *privdata;$/;"	m	struct:dict	typeref:typename:void *
privdata	deps/hiredis/hiredis.h	/^    void *privdata;$/;"	m	struct:__anon7daed6b50108	typeref:typename:void *
privdata	deps/hiredis/hiredis.h	/^    void *privdata;$/;"	m	struct:redisContext	typeref:typename:void *
privdata	deps/hiredis/read.h	/^    void *privdata; \/* user-settable arbitrary field *\/$/;"	m	struct:redisReadTask	typeref:typename:void *
privdata	deps/hiredis/read.h	/^    void *privdata;$/;"	m	struct:redisReader	typeref:typename:void *
privdata	deps/hiredis/test.c	/^struct privdata {$/;"	s	file:
privdata	src/dict.h	/^    void *privdata;$/;"	m	struct:dict	typeref:typename:void *
privdata	src/module.c	/^    void *privdata;     \/* Module private data that may be used by the reply$/;"	m	struct:RedisModuleBlockedClient	typeref:typename:void *	file:
privdata_dtor	deps/hiredis/examples/example-push.c	/^void privdata_dtor(void *privdata) {$/;"	f	typeref:typename:void
prng_lg_range_u32	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_lg_range_u32(atomic_u32_t *state, unsigned lg_range, bool atomic) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE uint32_t
prng_lg_range_u64	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_lg_range_u64(uint64_t *state, unsigned lg_range) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE uint64_t
prng_lg_range_zu	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_lg_range_zu(atomic_zu_t *state, unsigned lg_range, bool atomic) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
prng_range_u32	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_range_u32(atomic_u32_t *state, uint32_t range, bool atomic) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE uint32_t
prng_range_u64	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_range_u64(uint64_t *state, uint64_t range) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE uint64_t
prng_range_zu	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_range_zu(atomic_zu_t *state, size_t range, bool atomic) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
prng_state	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	uint64_t prng_state;$/;"	m	struct:__anon25f7a4b70208	typeref:typename:uint64_t
prng_state	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t		prng_state;$/;"	m	struct:prof_tdata_s	typeref:typename:uint64_t
prng_state_next_u32	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_state_next_u32(uint32_t state) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE uint32_t
prng_state_next_u64	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_state_next_u64(uint64_t state) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE uint64_t
prng_state_next_zu	deps/jemalloc/include/jemalloc/internal/prng.h	/^prng_state_next_zu(size_t state) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
proc	src/redis-cli.c	/^    clusterManagerCommandProc *proc;$/;"	m	struct:clusterManagerCommandDef	typeref:typename:clusterManagerCommandProc *	file:
proc	src/server.c	/^    redisTestProc *proc;$/;"	m	struct:redisTest	typeref:typename:redisTestProc *	file:
proc	src/server.h	/^    redisCommandProc *proc;$/;"	m	struct:redisCommand	typeref:typename:redisCommandProc *
proc_title_template	src/server.h	/^    char *proc_title_template;      \/* Process title template format *\/$/;"	m	struct:redisServer	typeref:typename:char *
process	src/redis-check-aof.c	/^off_t process(FILE *fp) {$/;"	f	typeref:typename:off_t
processAggregateItem	deps/hiredis/read.c	/^static int processAggregateItem(redisReader *r) {$/;"	f	typeref:typename:int	file:
processBulkItem	deps/hiredis/read.c	/^static int processBulkItem(redisReader *r) {$/;"	f	typeref:typename:int	file:
processClientsWaitingReplicas	src/replication.c	/^void processClientsWaitingReplicas(void) {$/;"	f	typeref:typename:void
processCommand	src/server.c	/^int processCommand(client *c) {$/;"	f	typeref:typename:int
processCommandAndResetClient	src/networking.c	/^int processCommandAndResetClient(client *c) {$/;"	f	typeref:typename:int
processEventsWhileBlocked	src/networking.c	/^void processEventsWhileBlocked(void) {$/;"	f	typeref:typename:void
processGopherRequest	src/gopher.c	/^void processGopherRequest(client *c) {$/;"	f	typeref:typename:void
processInlineBuffer	src/networking.c	/^int processInlineBuffer(client *c) {$/;"	f	typeref:typename:int
processInputBuffer	src/networking.c	/^void processInputBuffer(client *c) {$/;"	f	typeref:typename:void
processItem	deps/hiredis/read.c	/^static int processItem(redisReader *r) {$/;"	f	typeref:typename:int	file:
processLineItem	deps/hiredis/read.c	/^static int processLineItem(redisReader *r) {$/;"	f	typeref:typename:int	file:
processModuleLoadingProgressEvent	src/module.c	/^void processModuleLoadingProgressEvent(int is_aof) {$/;"	f	typeref:typename:void
processMultibulkBuffer	src/networking.c	/^int processMultibulkBuffer(client *c) {$/;"	f	typeref:typename:int
processPendingCommandsAndResetClient	src/networking.c	/^int processPendingCommandsAndResetClient(client *c) {$/;"	f	typeref:typename:int
processTimeEvents	src/ae.c	/^static int processTimeEvents(aeEventLoop *eventLoop) {$/;"	f	typeref:typename:int	file:
processUnblockedClients	src/blocked.c	/^void processUnblockedClients(void) {$/;"	f	typeref:typename:void
process_rss	src/server.h	/^    size_t process_rss;$/;"	m	struct:malloc_stats	typeref:typename:size_t
processed_bytes	src/rio.h	/^    size_t processed_bytes;$/;"	m	struct:_rio	typeref:typename:size_t
prof_accum	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	prof_accum_t		prof_accum;$/;"	m	struct:arena_s	typeref:typename:prof_accum_t
prof_accum_add	deps/jemalloc/include/jemalloc/internal/prof_inlines_a.h	/^prof_accum_add(tsdn_t *tsdn, prof_accum_t *prof_accum, uint64_t accumbytes) {$/;"	f	typeref:typename:bool
prof_accum_cancel	deps/jemalloc/include/jemalloc/internal/prof_inlines_a.h	/^prof_accum_cancel(tsdn_t *tsdn, prof_accum_t *prof_accum, size_t usize) {$/;"	f	typeref:typename:void
prof_accum_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_accum_init /;"	d
prof_accum_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_accum_init /;"	d
prof_accum_init	deps/jemalloc/src/prof.c	/^prof_accum_init(tsdn_t *tsdn, prof_accum_t *prof_accum) {$/;"	f	typeref:typename:bool
prof_accum_s	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^struct prof_accum_s {$/;"	s
prof_accum_t	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^typedef struct prof_accum_s prof_accum_t;$/;"	t	typeref:struct:prof_accum_s
prof_accumbytes	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	uint64_t		prof_accumbytes;$/;"	m	struct:arena_s	typeref:typename:uint64_t
prof_accumbytes	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^	uint64_t	prof_accumbytes;$/;"	m	struct:tcache_s	typeref:typename:uint64_t
prof_active	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_active /;"	d
prof_active	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_active /;"	d
prof_active	deps/jemalloc/src/prof.c	/^bool			prof_active;$/;"	v	typeref:typename:bool
prof_active_ctl	deps/jemalloc/src/ctl.c	/^prof_active_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
prof_active_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_active_get /;"	d
prof_active_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_active_get /;"	d
prof_active_get	deps/jemalloc/src/prof.c	/^prof_active_get(tsdn_t *tsdn) {$/;"	f	typeref:typename:bool
prof_active_get_unlocked	deps/jemalloc/include/jemalloc/internal/prof_inlines_a.h	/^prof_active_get_unlocked(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
prof_active_mtx	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	prof_active_mtx;$/;"	v	typeref:typename:malloc_mutex_t	file:
prof_active_set	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_active_set /;"	d
prof_active_set	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_active_set /;"	d
prof_active_set	deps/jemalloc/src/prof.c	/^prof_active_set(tsdn_t *tsdn, bool active) {$/;"	f	typeref:typename:bool
prof_alloc_prep	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_alloc_prep(tsd_t *tsd, size_t usize, bool prof_active, bool update) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE prof_tctx_t *
prof_alloc_rollback	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_alloc_rollback /;"	d
prof_alloc_rollback	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_alloc_rollback /;"	d
prof_backtrace	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_backtrace /;"	d
prof_backtrace	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_backtrace /;"	d
prof_backtrace	deps/jemalloc/src/prof.c	/^prof_backtrace(prof_bt_t *bt) {$/;"	f	typeref:typename:void
prof_boot0	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_boot0 /;"	d
prof_boot0	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_boot0 /;"	d
prof_boot0	deps/jemalloc/src/prof.c	/^prof_boot0(void) {$/;"	f	typeref:typename:void
prof_boot1	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_boot1 /;"	d
prof_boot1	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_boot1 /;"	d
prof_boot1	deps/jemalloc/src/prof.c	/^prof_boot1(void) {$/;"	f	typeref:typename:void
prof_boot2	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_boot2 /;"	d
prof_boot2	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_boot2 /;"	d
prof_boot2	deps/jemalloc/src/prof.c	/^prof_boot2(tsd_t *tsd) {$/;"	f	typeref:typename:bool
prof_booted	deps/jemalloc/src/prof.c	/^static bool		prof_booted = false;$/;"	v	typeref:typename:bool	file:
prof_bt_count	deps/jemalloc/src/prof.c	/^prof_bt_count(void) {$/;"	f	typeref:typename:size_t
prof_bt_hash	deps/jemalloc/src/prof.c	/^prof_bt_hash(const void *key, size_t r_hash[2]) {$/;"	f	typeref:typename:void	file:
prof_bt_keycomp	deps/jemalloc/src/prof.c	/^prof_bt_keycomp(const void *k1, const void *k2) {$/;"	f	typeref:typename:bool	file:
prof_bt_s	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^struct prof_bt_s {$/;"	s
prof_bt_t	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^typedef struct prof_bt_s prof_bt_t;$/;"	t	typeref:struct:prof_bt_s
prof_cnt_all	deps/jemalloc/src/prof.c	/^prof_cnt_all(uint64_t *curobjs, uint64_t *curbytes, uint64_t *accumobjs,$/;"	f	typeref:typename:void
prof_cnt_s	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^struct prof_cnt_s {$/;"	s
prof_cnt_t	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^typedef struct prof_cnt_s prof_cnt_t;$/;"	t	typeref:struct:prof_cnt_s
prof_data	deps/jemalloc/include/jemalloc/internal/mutex.h	/^			mutex_prof_data_t	prof_data;$/;"	m	struct:malloc_mutex_s::__anon9c853d94020a::__anon9c853d940308	typeref:typename:mutex_prof_data_t
prof_dump	deps/jemalloc/src/prof.c	/^prof_dump(tsd_t *tsd, bool propagate_err, const char *filename,$/;"	f	typeref:typename:bool	file:
prof_dump_buf	deps/jemalloc/src/prof.c	/^static char		prof_dump_buf[$/;"	v	typeref:typename:char[]	file:
prof_dump_buf_end	deps/jemalloc/src/prof.c	/^static size_t		prof_dump_buf_end;$/;"	v	typeref:typename:size_t	file:
prof_dump_close	deps/jemalloc/src/prof.c	/^prof_dump_close(bool propagate_err) {$/;"	f	typeref:typename:bool	file:
prof_dump_ctl	deps/jemalloc/src/ctl.c	/^prof_dump_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
prof_dump_fd	deps/jemalloc/src/prof.c	/^static int		prof_dump_fd;$/;"	v	typeref:typename:int	file:
prof_dump_file	deps/jemalloc/src/prof.c	/^prof_dump_file(tsd_t *tsd, bool propagate_err, const char *filename,$/;"	f	typeref:typename:bool	file:
prof_dump_filename	deps/jemalloc/src/prof.c	/^prof_dump_filename(char *filename, char v, uint64_t vseq) {$/;"	f	typeref:typename:void	file:
prof_dump_flush	deps/jemalloc/src/prof.c	/^prof_dump_flush(bool propagate_err) {$/;"	f	typeref:typename:bool	file:
prof_dump_gctx	deps/jemalloc/src/prof.c	/^prof_dump_gctx(tsdn_t *tsdn, bool propagate_err, prof_gctx_t *gctx,$/;"	f	typeref:typename:bool	file:
prof_dump_gctx_prep	deps/jemalloc/src/prof.c	/^prof_dump_gctx_prep(tsdn_t *tsdn, prof_gctx_t *gctx, prof_gctx_tree_t *gctxs) {$/;"	f	typeref:typename:void	file:
prof_dump_header	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_dump_header /;"	d
prof_dump_header	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_dump_header /;"	d
prof_dump_header	deps/jemalloc/src/prof.c	/^prof_dump_header_t *JET_MUTABLE prof_dump_header = prof_dump_header_impl;$/;"	v	typeref:typename:prof_dump_header_t * JET_MUTABLE
prof_dump_header_impl	deps/jemalloc/src/prof.c	/^prof_dump_header_impl(tsdn_t *tsdn, bool propagate_err,$/;"	f	typeref:typename:bool	file:
prof_dump_header_intercept	deps/jemalloc/test/unit/prof_reset.c	/^prof_dump_header_intercept(tsdn_t *tsdn, bool propagate_err,$/;"	f	typeref:typename:bool	file:
prof_dump_header_intercepted	deps/jemalloc/test/unit/prof_reset.c	/^bool prof_dump_header_intercepted = false;$/;"	v	typeref:typename:TEST_END bool
prof_dump_header_t	deps/jemalloc/include/jemalloc/internal/prof_externs.h	/^typedef bool (prof_dump_header_t)(tsdn_t *, bool, const prof_cnt_t *);$/;"	t	typeref:typename:bool ()(tsdn_t *,bool,const prof_cnt_t *)
prof_dump_iseq	deps/jemalloc/src/prof.c	/^static uint64_t		prof_dump_iseq;$/;"	v	typeref:typename:uint64_t	file:
prof_dump_maps	deps/jemalloc/src/prof.c	/^prof_dump_maps(bool propagate_err) {$/;"	f	typeref:typename:bool	file:
prof_dump_mseq	deps/jemalloc/src/prof.c	/^static uint64_t		prof_dump_mseq;$/;"	v	typeref:typename:uint64_t	file:
prof_dump_mtx	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	prof_dump_mtx;$/;"	v	typeref:typename:malloc_mutex_t	file:
prof_dump_open	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_dump_open /;"	d
prof_dump_open	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_dump_open /;"	d
prof_dump_open	deps/jemalloc/src/prof.c	/^prof_dump_open_t *JET_MUTABLE prof_dump_open = prof_dump_open_impl;$/;"	v	typeref:typename:prof_dump_open_t * JET_MUTABLE
prof_dump_open_impl	deps/jemalloc/src/prof.c	/^prof_dump_open_impl(bool propagate_err, const char *filename) {$/;"	f	typeref:typename:int	file:
prof_dump_open_intercept	deps/jemalloc/test/unit/prof_accum.c	/^prof_dump_open_intercept(bool propagate_err, const char *filename) {$/;"	f	typeref:typename:int	file:
prof_dump_open_intercept	deps/jemalloc/test/unit/prof_gdump.c	/^prof_dump_open_intercept(bool propagate_err, const char *filename) {$/;"	f	typeref:typename:int	file:
prof_dump_open_intercept	deps/jemalloc/test/unit/prof_idump.c	/^prof_dump_open_intercept(bool propagate_err, const char *filename) {$/;"	f	typeref:typename:int	file:
prof_dump_open_intercept	deps/jemalloc/test/unit/prof_reset.c	/^prof_dump_open_intercept(bool propagate_err, const char *filename) {$/;"	f	typeref:typename:int	file:
prof_dump_open_t	deps/jemalloc/include/jemalloc/internal/prof_externs.h	/^typedef int (prof_dump_open_t)(bool, const char *);$/;"	t	typeref:typename:int ()(bool,const char *)
prof_dump_prep	deps/jemalloc/src/prof.c	/^prof_dump_prep(tsd_t *tsd, prof_tdata_t *tdata,$/;"	f	typeref:typename:void	file:
prof_dump_printf	deps/jemalloc/src/prof.c	/^prof_dump_printf(bool propagate_err, const char *format, ...) {$/;"	f	typeref:typename:JEMALLOC_FORMAT_PRINTF (2,3)bool	file:
prof_dump_seq	deps/jemalloc/src/prof.c	/^static uint64_t		prof_dump_seq;$/;"	v	typeref:typename:uint64_t	file:
prof_dump_seq_mtx	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	prof_dump_seq_mtx;$/;"	v	typeref:typename:malloc_mutex_t	file:
prof_dump_useq	deps/jemalloc/src/prof.c	/^static uint64_t		prof_dump_useq;$/;"	v	typeref:typename:uint64_t	file:
prof_dump_write	deps/jemalloc/src/prof.c	/^prof_dump_write(bool propagate_err, const char *s) {$/;"	f	typeref:typename:bool	file:
prof_enter	deps/jemalloc/src/prof.c	/^prof_enter(tsd_t *tsd, prof_tdata_t *tdata) {$/;"	f	typeref:typename:void	file:
prof_fdump	deps/jemalloc/src/prof.c	/^prof_fdump(void) {$/;"	f	typeref:typename:void	file:
prof_free	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_free(tsd_t *tsd, const void *ptr, size_t usize, alloc_ctx_t *alloc_ctx) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
prof_free_sampled_object	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_free_sampled_object /;"	d
prof_free_sampled_object	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_free_sampled_object /;"	d
prof_free_sampled_object	deps/jemalloc/src/prof.c	/^prof_free_sampled_object(tsd_t *tsd, size_t usize, prof_tctx_t *tctx) {$/;"	f	typeref:typename:void
prof_gctx_create	deps/jemalloc/src/prof.c	/^prof_gctx_create(tsdn_t *tsdn, prof_bt_t *bt) {$/;"	f	typeref:typename:prof_gctx_t *	file:
prof_gctx_dump_iter	deps/jemalloc/src/prof.c	/^prof_gctx_dump_iter(prof_gctx_tree_t *gctxs, prof_gctx_t *gctx, void *opaque) {$/;"	f	typeref:typename:prof_gctx_t *	file:
prof_gctx_dump_iter_arg_s	deps/jemalloc/src/prof.c	/^struct prof_gctx_dump_iter_arg_s {$/;"	s	file:
prof_gctx_finish	deps/jemalloc/src/prof.c	/^prof_gctx_finish(tsd_t *tsd, prof_gctx_tree_t *gctxs) {$/;"	f	typeref:typename:void	file:
prof_gctx_merge_iter	deps/jemalloc/src/prof.c	/^prof_gctx_merge_iter(prof_gctx_tree_t *gctxs, prof_gctx_t *gctx, void *opaque) {$/;"	f	typeref:typename:prof_gctx_t *	file:
prof_gctx_merge_iter_arg_s	deps/jemalloc/src/prof.c	/^struct prof_gctx_merge_iter_arg_s {$/;"	s	file:
prof_gctx_mutex_choose	deps/jemalloc/src/prof.c	/^prof_gctx_mutex_choose(void) {$/;"	f	typeref:typename:malloc_mutex_t *	file:
prof_gctx_s	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^struct prof_gctx_s {$/;"	s
prof_gctx_should_destroy	deps/jemalloc/src/prof.c	/^prof_gctx_should_destroy(prof_gctx_t *gctx) {$/;"	f	typeref:typename:bool	file:
prof_gctx_t	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^typedef struct prof_gctx_s prof_gctx_t;$/;"	t	typeref:struct:prof_gctx_s
prof_gctx_tree_t	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^typedef rb_tree(prof_gctx_t) prof_gctx_tree_t;$/;"	t
prof_gctx_try_destroy	deps/jemalloc/src/prof.c	/^prof_gctx_try_destroy(tsd_t *tsd, prof_tdata_t *tdata_self, prof_gctx_t *gctx,$/;"	f	typeref:typename:void	file:
prof_gdump	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_gdump /;"	d
prof_gdump	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_gdump /;"	d
prof_gdump	deps/jemalloc/src/prof.c	/^prof_gdump(tsdn_t *tsdn) {$/;"	f	typeref:typename:void
prof_gdump_ctl	deps/jemalloc/src/ctl.c	/^prof_gdump_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
prof_gdump_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_gdump_get /;"	d
prof_gdump_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_gdump_get /;"	d
prof_gdump_get	deps/jemalloc/src/prof.c	/^prof_gdump_get(tsdn_t *tsdn) {$/;"	f	typeref:typename:bool
prof_gdump_get_unlocked	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_gdump_get_unlocked(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
prof_gdump_mtx	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	prof_gdump_mtx;$/;"	v	typeref:typename:malloc_mutex_t	file:
prof_gdump_set	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_gdump_set /;"	d
prof_gdump_set	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_gdump_set /;"	d
prof_gdump_set	deps/jemalloc/src/prof.c	/^prof_gdump_set(tsdn_t *tsdn, bool gdump) {$/;"	f	typeref:typename:bool
prof_gdump_val	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_gdump_val /;"	d
prof_gdump_val	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_gdump_val /;"	d
prof_gdump_val	deps/jemalloc/src/prof.c	/^bool			prof_gdump_val;$/;"	v	typeref:typename:bool
prof_getpid	deps/jemalloc/src/prof.c	/^prof_getpid(void) {$/;"	f	typeref:typename:int	file:
prof_idump	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_idump /;"	d
prof_idump	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_idump /;"	d
prof_idump	deps/jemalloc/src/prof.c	/^prof_idump(tsdn_t *tsdn) {$/;"	f	typeref:typename:void
prof_interval	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_interval /;"	d
prof_interval	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_interval /;"	d
prof_interval	deps/jemalloc/src/prof.c	/^uint64_t	prof_interval = 0;$/;"	v	typeref:typename:uint64_t
prof_leakcheck	deps/jemalloc/src/prof.c	/^prof_leakcheck(const prof_cnt_t *cnt_all, size_t leak_ngctx,$/;"	f	typeref:typename:void	file:
prof_leave	deps/jemalloc/src/prof.c	/^prof_leave(tsd_t *tsd, prof_tdata_t *tdata) {$/;"	f	typeref:typename:void	file:
prof_lookup	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_lookup /;"	d
prof_lookup	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_lookup /;"	d
prof_lookup	deps/jemalloc/src/prof.c	/^prof_lookup(tsd_t *tsd, prof_bt_t *bt) {$/;"	f	typeref:typename:prof_tctx_t *
prof_lookup_global	deps/jemalloc/src/prof.c	/^prof_lookup_global(tsd_t *tsd, prof_bt_t *bt, prof_tdata_t *tdata,$/;"	f	typeref:typename:bool	file:
prof_malloc	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_malloc(tsdn_t *tsdn, const void *ptr, size_t usize, alloc_ctx_t *alloc_ctx,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
prof_malloc_sample_object	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_malloc_sample_object /;"	d
prof_malloc_sample_object	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_malloc_sample_object /;"	d
prof_malloc_sample_object	deps/jemalloc/src/prof.c	/^prof_malloc_sample_object(tsdn_t *tsdn, const void *ptr, size_t usize,$/;"	f	typeref:typename:void
prof_mdump	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_mdump /;"	d
prof_mdump	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_mdump /;"	d
prof_mdump	deps/jemalloc/src/prof.c	/^prof_mdump(tsd_t *tsd, const char *filename) {$/;"	f	typeref:typename:bool
prof_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t	prof_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
prof_open_maps	deps/jemalloc/src/prof.c	/^prof_open_maps(const char *format, ...) {$/;"	f	typeref:typename:JEMALLOC_FORMAT_PRINTF (1,2)int	file:
prof_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_postfork_child /;"	d
prof_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_postfork_child /;"	d
prof_postfork_child	deps/jemalloc/src/prof.c	/^prof_postfork_child(tsdn_t *tsdn) {$/;"	f	typeref:typename:void
prof_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_postfork_parent /;"	d
prof_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_postfork_parent /;"	d
prof_postfork_parent	deps/jemalloc/src/prof.c	/^prof_postfork_parent(tsdn_t *tsdn) {$/;"	f	typeref:typename:void
prof_prefork0	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_prefork0 /;"	d
prof_prefork0	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_prefork0 /;"	d
prof_prefork0	deps/jemalloc/src/prof.c	/^prof_prefork0(tsdn_t *tsdn) {$/;"	f	typeref:typename:void
prof_prefork1	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_prefork1 /;"	d
prof_prefork1	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_prefork1 /;"	d
prof_prefork1	deps/jemalloc/src/prof.c	/^prof_prefork1(tsdn_t *tsdn) {$/;"	f	typeref:typename:void
prof_realloc	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_realloc(tsd_t *tsd, const void *ptr, size_t usize, prof_tctx_t *tctx,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
prof_reset	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_reset /;"	d
prof_reset	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_reset /;"	d
prof_reset	deps/jemalloc/src/prof.c	/^prof_reset(tsd_t *tsd, size_t lg_sample) {$/;"	f	typeref:typename:void
prof_reset_ctl	deps/jemalloc/src/ctl.c	/^prof_reset_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
prof_sample_accum_update	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_sample_accum_update(tsd_t *tsd, size_t usize, bool update,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
prof_sample_threshold_update	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_sample_threshold_update /;"	d
prof_sample_threshold_update	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_sample_threshold_update /;"	d
prof_sample_threshold_update	deps/jemalloc/src/prof.c	/^prof_sample_threshold_update(prof_tdata_t *tdata) {$/;"	f	typeref:typename:void
prof_sampling_probe	deps/jemalloc/test/unit/prof_active.c	/^#define prof_sampling_probe(/;"	d	file:
prof_sampling_probe_impl	deps/jemalloc/test/unit/prof_active.c	/^prof_sampling_probe_impl(bool expect_sample, const char *func, int line) {$/;"	f	typeref:typename:void	file:
prof_tctx_comp	deps/jemalloc/src/prof.c	/^prof_tctx_comp(const prof_tctx_t *a, const prof_tctx_t *b) {$/;"	f	typeref:typename:int	file:
prof_tctx_destroy	deps/jemalloc/src/prof.c	/^prof_tctx_destroy(tsd_t *tsd, prof_tctx_t *tctx) {$/;"	f	typeref:typename:void	file:
prof_tctx_dump_iter	deps/jemalloc/src/prof.c	/^prof_tctx_dump_iter(prof_tctx_tree_t *tctxs, prof_tctx_t *tctx, void *opaque) {$/;"	f	typeref:typename:prof_tctx_t *	file:
prof_tctx_dump_iter_arg_s	deps/jemalloc/src/prof.c	/^struct prof_tctx_dump_iter_arg_s {$/;"	s	file:
prof_tctx_finish_iter	deps/jemalloc/src/prof.c	/^prof_tctx_finish_iter(prof_tctx_tree_t *tctxs, prof_tctx_t *tctx, void *arg) {$/;"	f	typeref:typename:prof_tctx_t *	file:
prof_tctx_get	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_tctx_get(tsdn_t *tsdn, const void *ptr, alloc_ctx_t *alloc_ctx) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE prof_tctx_t *
prof_tctx_merge_gctx	deps/jemalloc/src/prof.c	/^prof_tctx_merge_gctx(tsdn_t *tsdn, prof_tctx_t *tctx, prof_gctx_t *gctx) {$/;"	f	typeref:typename:void	file:
prof_tctx_merge_iter	deps/jemalloc/src/prof.c	/^prof_tctx_merge_iter(prof_tctx_tree_t *tctxs, prof_tctx_t *tctx, void *arg) {$/;"	f	typeref:typename:prof_tctx_t *	file:
prof_tctx_merge_tdata	deps/jemalloc/src/prof.c	/^prof_tctx_merge_tdata(tsdn_t *tsdn, prof_tctx_t *tctx, prof_tdata_t *tdata) {$/;"	f	typeref:typename:void	file:
prof_tctx_reset	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_tctx_reset(tsdn_t *tsdn, const void *ptr, prof_tctx_t *tctx) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
prof_tctx_s	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^struct prof_tctx_s {$/;"	s
prof_tctx_set	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_tctx_set(tsdn_t *tsdn, const void *ptr, size_t usize,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
prof_tctx_should_destroy	deps/jemalloc/src/prof.c	/^prof_tctx_should_destroy(tsdn_t *tsdn, prof_tctx_t *tctx) {$/;"	f	typeref:typename:bool	file:
prof_tctx_state_dumping	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_tctx_state_dumping,$/;"	e	enum:__anonc2210a4f0203
prof_tctx_state_initializing	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_tctx_state_initializing,$/;"	e	enum:__anonc2210a4f0203
prof_tctx_state_nominal	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_tctx_state_nominal,$/;"	e	enum:__anonc2210a4f0203
prof_tctx_state_purgatory	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_tctx_state_purgatory \/* Dumper must finish destroying. *\/$/;"	e	enum:__anonc2210a4f0203
prof_tctx_state_t	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^} prof_tctx_state_t;$/;"	t	typeref:enum:__anonc2210a4f0203
prof_tctx_t	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^typedef struct prof_tctx_s prof_tctx_t;$/;"	t	typeref:struct:prof_tctx_s
prof_tctx_tree_t	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^typedef rb_tree(prof_tctx_t) prof_tctx_tree_t;$/;"	t
prof_tdata_cleanup	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_tdata_cleanup /;"	d
prof_tdata_cleanup	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_tdata_cleanup /;"	d
prof_tdata_cleanup	deps/jemalloc/src/prof.c	/^prof_tdata_cleanup(tsd_t *tsd) {$/;"	f	typeref:typename:void
prof_tdata_count	deps/jemalloc/src/prof.c	/^prof_tdata_count(void) {$/;"	f	typeref:typename:size_t
prof_tdata_count_iter	deps/jemalloc/src/prof.c	/^prof_tdata_count_iter(prof_tdata_tree_t *tdatas, prof_tdata_t *tdata,$/;"	f	typeref:typename:prof_tdata_t *	file:
prof_tdata_destroy	deps/jemalloc/src/prof.c	/^prof_tdata_destroy(tsd_t *tsd, prof_tdata_t *tdata, bool even_if_attached) {$/;"	f	typeref:typename:void	file:
prof_tdata_destroy_locked	deps/jemalloc/src/prof.c	/^prof_tdata_destroy_locked(tsd_t *tsd, prof_tdata_t *tdata,$/;"	f	typeref:typename:void	file:
prof_tdata_detach	deps/jemalloc/src/prof.c	/^prof_tdata_detach(tsd_t *tsd, prof_tdata_t *tdata) {$/;"	f	typeref:typename:void	file:
prof_tdata_dump_iter	deps/jemalloc/src/prof.c	/^prof_tdata_dump_iter(prof_tdata_tree_t *tdatas, prof_tdata_t *tdata,$/;"	f	typeref:typename:prof_tdata_t *	file:
prof_tdata_expire	deps/jemalloc/src/prof.c	/^prof_tdata_expire(tsdn_t *tsdn, prof_tdata_t *tdata) {$/;"	f	typeref:typename:bool	file:
prof_tdata_get	deps/jemalloc/include/jemalloc/internal/prof_inlines_b.h	/^prof_tdata_get(tsd_t *tsd, bool create) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE prof_tdata_t *
prof_tdata_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_tdata_init /;"	d
prof_tdata_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_tdata_init /;"	d
prof_tdata_init	deps/jemalloc/src/prof.c	/^prof_tdata_init(tsd_t *tsd) {$/;"	f	typeref:typename:prof_tdata_t *
prof_tdata_init_impl	deps/jemalloc/src/prof.c	/^prof_tdata_init_impl(tsd_t *tsd, uint64_t thr_uid, uint64_t thr_discrim,$/;"	f	typeref:typename:prof_tdata_t *	file:
prof_tdata_merge_iter	deps/jemalloc/src/prof.c	/^prof_tdata_merge_iter(prof_tdata_tree_t *tdatas, prof_tdata_t *tdata,$/;"	f	typeref:typename:prof_tdata_t *	file:
prof_tdata_merge_iter_arg_s	deps/jemalloc/src/prof.c	/^struct prof_tdata_merge_iter_arg_s {$/;"	s	file:
prof_tdata_mutex_choose	deps/jemalloc/src/prof.c	/^prof_tdata_mutex_choose(uint64_t thr_uid) {$/;"	f	typeref:typename:malloc_mutex_t *	file:
prof_tdata_reinit	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_tdata_reinit /;"	d
prof_tdata_reinit	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_tdata_reinit /;"	d
prof_tdata_reinit	deps/jemalloc/src/prof.c	/^prof_tdata_reinit(tsd_t *tsd, prof_tdata_t *tdata) {$/;"	f	typeref:typename:prof_tdata_t *
prof_tdata_reset_iter	deps/jemalloc/src/prof.c	/^prof_tdata_reset_iter(prof_tdata_tree_t *tdatas, prof_tdata_t *tdata,$/;"	f	typeref:typename:prof_tdata_t *	file:
prof_tdata_s	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^struct prof_tdata_s {$/;"	s
prof_tdata_should_destroy	deps/jemalloc/src/prof.c	/^prof_tdata_should_destroy(tsdn_t *tsdn, prof_tdata_t *tdata,$/;"	f	typeref:typename:bool	file:
prof_tdata_should_destroy_unlocked	deps/jemalloc/src/prof.c	/^prof_tdata_should_destroy_unlocked(prof_tdata_t *tdata, bool even_if_attached) {$/;"	f	typeref:typename:bool	file:
prof_tdata_t	deps/jemalloc/include/jemalloc/internal/prof_types.h	/^typedef struct prof_tdata_s prof_tdata_t;$/;"	t	typeref:struct:prof_tdata_s
prof_tdata_tree_t	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^typedef rb_tree(prof_tdata_t) prof_tdata_tree_t;$/;"	t
prof_thr_uid_alloc	deps/jemalloc/src/prof.c	/^prof_thr_uid_alloc(tsdn_t *tsdn) {$/;"	f	typeref:typename:uint64_t	file:
prof_thread_active_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_thread_active_get /;"	d
prof_thread_active_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_thread_active_get /;"	d
prof_thread_active_get	deps/jemalloc/src/prof.c	/^prof_thread_active_get(tsd_t *tsd) {$/;"	f	typeref:typename:bool
prof_thread_active_init	deps/jemalloc/src/prof.c	/^static bool		prof_thread_active_init;$/;"	v	typeref:typename:bool	file:
prof_thread_active_init_ctl	deps/jemalloc/src/ctl.c	/^prof_thread_active_init_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	typeref:typename:int	file:
prof_thread_active_init_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_thread_active_init_get /;"	d
prof_thread_active_init_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_thread_active_init_get /;"	d
prof_thread_active_init_get	deps/jemalloc/src/prof.c	/^prof_thread_active_init_get(tsdn_t *tsdn) {$/;"	f	typeref:typename:bool
prof_thread_active_init_mtx	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	prof_thread_active_init_mtx;$/;"	v	typeref:typename:malloc_mutex_t	file:
prof_thread_active_init_set	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_thread_active_init_set /;"	d
prof_thread_active_init_set	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_thread_active_init_set /;"	d
prof_thread_active_init_set	deps/jemalloc/src/prof.c	/^prof_thread_active_init_set(tsdn_t *tsdn, bool active_init) {$/;"	f	typeref:typename:bool
prof_thread_active_set	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_thread_active_set /;"	d
prof_thread_active_set	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_thread_active_set /;"	d
prof_thread_active_set	deps/jemalloc/src/prof.c	/^prof_thread_active_set(tsd_t *tsd, bool active) {$/;"	f	typeref:typename:bool
prof_thread_name_alloc	deps/jemalloc/src/prof.c	/^prof_thread_name_alloc(tsdn_t *tsdn, const char *thread_name) {$/;"	f	typeref:typename:char *	file:
prof_thread_name_get	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_thread_name_get /;"	d
prof_thread_name_get	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_thread_name_get /;"	d
prof_thread_name_get	deps/jemalloc/src/prof.c	/^prof_thread_name_get(tsd_t *tsd) {$/;"	f	typeref:typename:const char *
prof_thread_name_set	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define prof_thread_name_set /;"	d
prof_thread_name_set	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define prof_thread_name_set /;"	d
prof_thread_name_set	deps/jemalloc/src/prof.c	/^prof_thread_name_set(tsd_t *tsd, const char *thread_name) {$/;"	f	typeref:typename:int
prof_unwind_callback	deps/jemalloc/src/prof.c	/^prof_unwind_callback(struct _Unwind_Context *context, void *arg) {$/;"	f	typeref:typename:_Unwind_Reason_Code	file:
prof_unwind_data_t	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^} prof_unwind_data_t;$/;"	t	typeref:struct:__anonc2210a4f0108
prof_unwind_init_callback	deps/jemalloc/src/prof.c	/^prof_unwind_init_callback(struct _Unwind_Context *context, void *arg) {$/;"	f	typeref:typename:_Unwind_Reason_Code	file:
progname	deps/lua/src/lua.c	/^static const char *progname = LUA_PROGNAME;$/;"	v	typeref:typename:const char *	file:
progname	deps/lua/src/luac.c	/^static const char* progname=PROGNAME;	\/* actual program name *\/$/;"	v	typeref:typename:const char *	file:
progress	src/childinfo.c	/^    double progress;$/;"	m	struct:__anonbbe6eb5d0108	typeref:typename:double	file:
progress	src/redismodule.h	/^    int32_t progress;       \/* Approximate progress between 0 and 1024, or -1$/;"	m	struct:RedisModuleLoadingProgressInfo	typeref:typename:int32_t
progress_full	src/memtest.c	/^size_t progress_full; \/* How many chars to write to fill the progress bar. *\/$/;"	v	typeref:typename:size_t
progress_printed	src/memtest.c	/^size_t progress_printed; \/* Printed chars in screen-wide progress bar. *\/$/;"	v	typeref:typename:size_t
promoted_slave	src/sentinel.c	/^    struct sentinelRedisInstance *promoted_slave; \/* Promoted slave instance. *\/$/;"	m	struct:sentinelRedisInstance	typeref:struct:sentinelRedisInstance *	file:
prompt	deps/linenoise/linenoise.c	/^    const char *prompt; \/* Prompt to display. *\/$/;"	m	struct:linenoiseState	typeref:typename:const char *	file:
prompt	src/redis-cli.c	/^    char prompt[128];$/;"	m	struct:config	typeref:typename:char[128]	file:
propagate	src/server.c	/^void propagate(struct redisCommand *cmd, int dbid, robj **argv, int argc,$/;"	f	typeref:typename:void
propagateExpire	src/db.c	/^void propagateExpire(redisDb *db, robj *key, int lazy) {$/;"	f	typeref:typename:void
propagateTestIncr	tests/modules/propagate.c	/^int propagateTestIncr(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
propagateTestMixedCommand	tests/modules/propagate.c	/^int propagateTestMixedCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
propagateTestNestedCommand	tests/modules/propagate.c	/^int propagateTestNestedCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
propagateTestSimpleCommand	tests/modules/propagate.c	/^int propagateTestSimpleCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
propagateTestThreadCommand	tests/modules/propagate.c	/^int propagateTestThreadCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
propagateTestTimerCommand	tests/modules/propagate.c	/^int propagateTestTimerCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
propagateTestTimerNestedCommand	tests/modules/propagate.c	/^int propagateTestTimerNestedCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
propagateTestTimerNestedReplCommand	tests/modules/propagate.c	/^int propagateTestTimerNestedReplCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
propagate_err	deps/jemalloc/src/prof.c	/^	bool	propagate_err;$/;"	m	struct:prof_gctx_dump_iter_arg_s	typeref:typename:bool	file:
propagate_err	deps/jemalloc/src/prof.c	/^	bool	propagate_err;$/;"	m	struct:prof_tctx_dump_iter_arg_s	typeref:typename:bool	file:
propagate_in_transaction	src/server.h	/^    int propagate_in_transaction;  \/* Make sure we don't propagate nested MULTI\/EXEC *\/$/;"	m	struct:redisServer	typeref:typename:int
propagateall	deps/lua/src/lgc.c	/^static size_t propagateall (global_State *g) {$/;"	f	typeref:typename:size_t	file:
propagatemark	deps/lua/src/lgc.c	/^static l_mem propagatemark (global_State *g) {$/;"	f	typeref:typename:l_mem	file:
protectClient	src/networking.c	/^void protectClient(client *c) {$/;"	f	typeref:typename:void
protected_mode	src/server.h	/^    int protected_mode;         \/* Don't accept external connections. *\/$/;"	m	struct:redisServer	typeref:typename:int
proto	src/module.c	/^    char *proto;    \/* Raw reply protocol. An SDS string at top-level object. *\/$/;"	m	struct:RedisModuleCallReply	typeref:typename:char *	file:
proto_max_bulk_len	src/server.h	/^    long long proto_max_bulk_len;   \/* Protocol bulk length maximum size. *\/$/;"	m	struct:redisServer	typeref:typename:long long
protocols	src/server.h	/^    char *protocols;$/;"	m	struct:redisTLSContextConfig	typeref:typename:char *
protolen	src/module.c	/^    size_t protolen;\/* Length of protocol. *\/$/;"	m	struct:RedisModuleCallReply	typeref:typename:size_t	file:
psetexCommand	src/t_string.c	/^void psetexCommand(client *c) {$/;"	f	typeref:typename:void
psubscribeCommand	src/pubsub.c	/^void psubscribeCommand(client *c) {$/;"	f	typeref:typename:void
psubscribebulk	src/server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *unlink,$/;"	m	struct:sharedObjectsStruct
psync_initial_offset	src/server.h	/^    long long psync_initial_offset; \/* FULLRESYNC reply offset other slaves$/;"	m	struct:client	typeref:typename:long long
pszind_t	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^typedef unsigned pszind_t;$/;"	t	typeref:typename:unsigned
pt_chi2	deps/jemalloc/test/include/test/math.h	/^pt_chi2(double p, double df, double ln_gamma_df_2) {$/;"	f	typeref:typename:double
pt_chi2_df	deps/jemalloc/test/unit/math.c	/^static const double pt_chi2_df[] = {0.1, 1.1, 10.1, 100.1, 1000.1};$/;"	v	typeref:typename:TEST_END const double[]	file:
pt_chi2_expected	deps/jemalloc/test/unit/math.c	/^static const double pt_chi2_expected[] = {$/;"	v	typeref:typename:const double[]	file:
pt_gamma	deps/jemalloc/test/include/test/math.h	/^pt_gamma(double p, double shape, double scale, double ln_gamma_shape) {$/;"	f	typeref:typename:double
pt_gamma_expected	deps/jemalloc/test/unit/math.c	/^static const double pt_gamma_expected[] = {$/;"	v	typeref:typename:const double[]	file:
pt_gamma_shape	deps/jemalloc/test/unit/math.c	/^static const double pt_gamma_shape[] = {0.5, 1.0, 1.5, 2.0, 2.5, 3.0};$/;"	v	typeref:typename:TEST_END const double[]	file:
pt_norm	deps/jemalloc/test/include/test/math.h	/^pt_norm(double p) {$/;"	f	typeref:typename:double
pt_norm_expected	deps/jemalloc/test/unit/math.c	/^static const double pt_norm_expected[] = {$/;"	v	typeref:typename:TEST_END const double[]	file:
pthread_create	deps/jemalloc/src/mutex.c	/^pthread_create(pthread_t *__restrict thread,$/;"	f	typeref:typename:JEMALLOC_EXPORT int
pthread_create_fptr	deps/jemalloc/src/background_thread.c	/^static int (*pthread_create_fptr)(pthread_t *__restrict, const pthread_attr_t *,$/;"	v	typeref:typename:int (*)(pthread_t * __restrict,const pthread_attr_t *,void * (*)(void *),void * __restrict)	file:
pthread_create_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define pthread_create_wrapper /;"	d
pthread_create_wrapper	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define pthread_create_wrapper /;"	d
pthread_create_wrapper	deps/jemalloc/src/background_thread.c	/^pthread_create_wrapper(pthread_t *__restrict thread, const pthread_attr_t *attr,$/;"	f	typeref:typename:int
pthread_create_wrapper_init	deps/jemalloc/src/background_thread.c	/^pthread_create_wrapper_init(void) {$/;"	f	typeref:typename:void	file:
ptr	deps/lua/src/lua_cjson.c	/^    const char *ptr;$/;"	m	struct:__anona3a73c770308	typeref:typename:const char *	file:
ptr	src/module.c	/^    void *ptr;$/;"	m	struct:AutoMemEntry	typeref:typename:void *	file:
ptr	src/rio.h	/^            sds ptr;$/;"	m	struct:_rio::__anonb6066a3c010a::__anonb6066a3c0208	typeref:typename:sds
ptr	src/server.h	/^    void *ptr;$/;"	m	struct:redisObject	typeref:typename:void *
pttlCommand	src/expire.c	/^void pttlCommand(client *c) {$/;"	f	typeref:typename:void
publish	src/cluster.h	/^    } publish;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon2cc7db540808
publishCommand	src/pubsub.c	/^void publishCommand(client *c) {$/;"	f	typeref:typename:void
pubsubCommand	src/pubsub.c	/^void pubsubCommand(client *c) {$/;"	f	typeref:typename:void
pubsubPublishMessage	src/pubsub.c	/^int pubsubPublishMessage(robj *channel, robj *message) {$/;"	f	typeref:typename:int
pubsubSubscribeChannel	src/pubsub.c	/^int pubsubSubscribeChannel(client *c, robj *channel) {$/;"	f	typeref:typename:int
pubsubSubscribePattern	src/pubsub.c	/^int pubsubSubscribePattern(client *c, robj *pattern) {$/;"	f	typeref:typename:int
pubsubUnsubscribeAllChannels	src/pubsub.c	/^int pubsubUnsubscribeAllChannels(client *c, int notify) {$/;"	f	typeref:typename:int
pubsubUnsubscribeAllPatterns	src/pubsub.c	/^int pubsubUnsubscribeAllPatterns(client *c, int notify) {$/;"	f	typeref:typename:int
pubsubUnsubscribeChannel	src/pubsub.c	/^int pubsubUnsubscribeChannel(client *c, robj *channel, int notify) {$/;"	f	typeref:typename:int
pubsubUnsubscribePattern	src/pubsub.c	/^int pubsubUnsubscribePattern(client *c, robj *pattern, int notify) {$/;"	f	typeref:typename:int
pubsub_channels	src/server.h	/^    dict *pubsub_channels;  \/* Map channels to list of subscribed clients *\/$/;"	m	struct:redisServer	typeref:typename:dict *
pubsub_channels	src/server.h	/^    dict *pubsub_channels;  \/* channels a client is interested in (SUBSCRIBE) *\/$/;"	m	struct:client	typeref:typename:dict *
pubsub_mode	src/redis-cli.c	/^    int pubsub_mode;$/;"	m	struct:config	typeref:typename:int	file:
pubsub_patterns	src/server.h	/^    dict *pubsub_patterns;  \/* A dict of pubsub_patterns *\/$/;"	m	struct:redisServer	typeref:typename:dict *
pubsub_patterns	src/server.h	/^    list *pubsub_patterns;  \/* patterns a client is interested in (SUBSCRIBE) *\/$/;"	m	struct:client	typeref:typename:list *
punsubscribeCommand	src/pubsub.c	/^void punsubscribeCommand(client *c) {$/;"	f	typeref:typename:void
punsubscribebulk	src/server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *unlink,$/;"	m	struct:sharedObjectsStruct
purge	deps/jemalloc/test/integration/aligned_alloc.c	/^purge(void) {$/;"	f	typeref:typename:void	file:
purge	deps/jemalloc/test/integration/mallocx.c	/^purge(void) {$/;"	f	typeref:typename:void	file:
purge	deps/jemalloc/test/integration/posix_memalign.c	/^purge(void) {$/;"	f	typeref:typename:void	file:
purge_forced	deps/jemalloc/include/jemalloc/jemalloc.h	/^	extent_purge_t		*purge_forced;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_purge_t *
purge_forced	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_purge_t		*purge_forced;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_purge_t *
purge_forced	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^	extent_purge_t		*purge_forced;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_purge_t *	file:
purge_lazy	deps/jemalloc/include/jemalloc/jemalloc.h	/^	extent_purge_t		*purge_lazy;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_purge_t *
purge_lazy	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_purge_t		*purge_lazy;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_purge_t *
purge_lazy	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^	extent_purge_t		*purge_lazy;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_purge_t *	file:
purgeable_zone	deps/jemalloc/src/zone.c	/^static malloc_zone_t *default_zone, *purgeable_zone;$/;"	v	typeref:typename:malloc_zone_t **	file:
purged	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	arena_stats_u64_t	purged;$/;"	m	struct:arena_stats_decay_s	typeref:typename:arena_stats_u64_t
purging	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	bool			purging;$/;"	m	struct:arena_decay_s	typeref:typename:bool
pushCounters	deps/hiredis/test.c	/^struct pushCounters {$/;"	s	file:
pushGenericCommand	src/t_list.c	/^void pushGenericCommand(client *c, int where, int xx) {$/;"	f	typeref:typename:void
pushReplyHandler	deps/hiredis/examples/example-push.c	/^void pushReplyHandler(void *privdata, void *r) {$/;"	f	typeref:typename:void
push_captures	deps/lua/src/lstrlib.c	/^static int push_captures (MatchState *ms, const char *s, const char *e) {$/;"	f	typeref:typename:int	file:
push_cb	deps/hiredis/async.h	/^    redisAsyncPushFn *push_cb;$/;"	m	struct:redisAsyncContext	typeref:typename:redisAsyncPushFn *
push_cb	deps/hiredis/hiredis.h	/^    redisPushFn *push_cb;$/;"	m	struct:__anon7daed6b50108	typeref:typename:redisPushFn *
push_cb	deps/hiredis/hiredis.h	/^    redisPushFn *push_cb;$/;"	m	struct:redisContext	typeref:typename:redisPushFn *
push_handler	deps/hiredis/test.c	/^void push_handler(void *privdata, void *r) {$/;"	f	typeref:typename:void
push_handler_async	deps/hiredis/test.c	/^void push_handler_async(redisAsyncContext *ac, void *reply) {$/;"	f	typeref:typename:void
push_onecapture	deps/lua/src/lstrlib.c	/^static void push_onecapture (MatchState *ms, int i, const char *s,$/;"	f	typeref:typename:void	file:
push_output	src/redis-cli.c	/^    int push_output; \/* Should we display spontaneous PUSH replies *\/$/;"	m	struct:config	typeref:typename:int	file:
pushclosure	deps/lua/src/lparser.c	/^static void pushclosure (LexState *ls, FuncState *func, expdesc *v) {$/;"	f	typeref:typename:void	file:
pusherror	deps/lua/src/loadlib.c	/^static void pusherror (lua_State *L) {$/;"	f	typeref:typename:void	file:
pushline	deps/lua/src/lua.c	/^static int pushline (lua_State *L, int firstline) {$/;"	f	typeref:typename:int	file:
pushnexttemplate	deps/lua/src/loadlib.c	/^static const char *pushnexttemplate (lua_State *L, const char *path) {$/;"	f	typeref:typename:const char *	file:
pushresult	deps/lua/src/liolib.c	/^static int pushresult (lua_State *L, int i, const char *filename) {$/;"	f	typeref:typename:int	file:
pushstr	deps/lua/src/lobject.c	/^static void pushstr (lua_State *L, const char *str) {$/;"	f	typeref:typename:void	file:
putSlaveOnline	src/replication.c	/^void putSlaveOnline(client *slave) {$/;"	f	typeref:typename:void
putinteger	deps/lua/src/lua_struct.c	/^static void putinteger (lua_State *L, luaL_Buffer *b, int arg, int endian,$/;"	f	typeref:typename:void	file:
pvalue	deps/lua/src/lobject.h	/^#define pvalue(/;"	d
px	src/server.h	/^    *time, *pxat, *px, *retrycount, *force, *justid, $/;"	m	struct:sharedObjectsStruct
pxat	src/server.h	/^    *time, *pxat, *px, *retrycount, *force, *justid, $/;"	m	struct:sharedObjectsStruct
qb_pos	src/server.h	/^    size_t qb_pos;          \/* The position we have read in querybuf. *\/$/;"	m	struct:client	typeref:typename:size_t
ql_after_insert	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_after_insert(/;"	d
ql_before_insert	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_before_insert(/;"	d
ql_elm	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_elm(/;"	d
ql_elm_new	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_elm_new(/;"	d
ql_first	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_first(/;"	d
ql_foreach	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_foreach(/;"	d
ql_head	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_head(/;"	d
ql_head_initializer	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_head_initializer(/;"	d
ql_head_insert	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_head_insert(/;"	d
ql_head_remove	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_head_remove(/;"	d
ql_info	src/quicklist.c	/^static void ql_info(quicklist *ql) {$/;"	f	typeref:typename:void	file:
ql_last	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_last(/;"	d
ql_new	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_new(/;"	d
ql_next	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_next(/;"	d
ql_prev	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_prev(/;"	d
ql_remove	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_remove(/;"	d
ql_reverse_foreach	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_reverse_foreach(/;"	d
ql_tail_insert	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_tail_insert(/;"	d
ql_tail_remove	deps/jemalloc/include/jemalloc/internal/ql.h	/^#define ql_tail_remove(/;"	d
ql_verify	src/quicklist.c	/^#define ql_verify(/;"	d	file:
qr	deps/jemalloc/include/jemalloc/internal/qr.h	/^#define qr(/;"	d
qr_after_insert	deps/jemalloc/include/jemalloc/internal/qr.h	/^#define qr_after_insert(/;"	d
qr_before_insert	deps/jemalloc/include/jemalloc/internal/qr.h	/^#define qr_before_insert(/;"	d
qr_foreach	deps/jemalloc/include/jemalloc/internal/qr.h	/^#define qr_foreach(/;"	d
qr_meld	deps/jemalloc/include/jemalloc/internal/qr.h	/^#define qr_meld(/;"	d
qr_new	deps/jemalloc/include/jemalloc/internal/qr.h	/^#define qr_new(/;"	d
qr_next	deps/jemalloc/include/jemalloc/internal/qr.h	/^#define qr_next(/;"	d
qr_prev	deps/jemalloc/include/jemalloc/internal/qr.h	/^#define qr_prev(/;"	d
qr_remove	deps/jemalloc/include/jemalloc/internal/qr.h	/^#define qr_remove(/;"	d
qr_reverse_foreach	deps/jemalloc/include/jemalloc/internal/qr.h	/^#define qr_reverse_foreach(/;"	d
qr_split	deps/jemalloc/include/jemalloc/internal/qr.h	/^#define qr_split(/;"	d
qsortCompareSetsByCardinality	src/t_set.c	/^int qsortCompareSetsByCardinality(const void *s1, const void *s2) {$/;"	f	typeref:typename:int
qsortCompareSetsByRevCardinality	src/t_set.c	/^int qsortCompareSetsByRevCardinality(const void *s1, const void *s2) {$/;"	f	typeref:typename:int
querybuf	src/server.h	/^    sds querybuf;           \/* Buffer we use to accumulate client queries. *\/$/;"	m	struct:client	typeref:typename:sds
querybuf_peak	src/server.h	/^    size_t querybuf_peak;   \/* Recent (100ms or more) peak of querybuf size. *\/$/;"	m	struct:client	typeref:typename:size_t
queueClientForReprocessing	src/blocked.c	/^void queueClientForReprocessing(client *c) {$/;"	f	typeref:typename:void
queueLoadModule	src/config.c	/^void queueLoadModule(sds path, sds *argv, int argc) {$/;"	f	typeref:typename:void
queueMultiCommand	src/multi.c	/^void queueMultiCommand(client *c) {$/;"	f	typeref:typename:void
queueSentinelConfig	src/sentinel.c	/^void queueSentinelConfig(sds *argv, int argc, int linenum, sds line) {$/;"	f	typeref:typename:void
queued	src/server.h	/^    *colon, *queued, *null[4], *nullarray[4], *emptymap[4], *emptyset[4],$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj **********
quicklist	src/quicklist.h	/^    const quicklist *quicklist;$/;"	m	struct:quicklistEntry	typeref:typename:const quicklist *
quicklist	src/quicklist.h	/^    const quicklist *quicklist;$/;"	m	struct:quicklistIter	typeref:typename:const quicklist *
quicklist	src/quicklist.h	/^typedef struct quicklist {$/;"	s
quicklist	src/quicklist.h	/^} quicklist;$/;"	t	typeref:struct:quicklist
quicklistAllowsCompression	src/quicklist.c	/^#define quicklistAllowsCompression(/;"	d	file:
quicklistAppendValuesFromZiplist	src/quicklist.c	/^quicklist *quicklistAppendValuesFromZiplist(quicklist *quicklist,$/;"	f	typeref:typename:quicklist *
quicklistAppendZiplist	src/quicklist.c	/^void quicklistAppendZiplist(quicklist *quicklist, unsigned char *zl) {$/;"	f	typeref:typename:void
quicklistBookmark	src/quicklist.h	/^typedef struct quicklistBookmark {$/;"	s
quicklistBookmark	src/quicklist.h	/^} quicklistBookmark;$/;"	t	typeref:struct:quicklistBookmark
quicklistBookmarkCreate	src/quicklist.c	/^int quicklistBookmarkCreate(quicklist **ql_ref, const char *name, quicklistNode *node) {$/;"	f	typeref:typename:int
quicklistBookmarkDelete	src/quicklist.c	/^int quicklistBookmarkDelete(quicklist *ql, const char *name) {$/;"	f	typeref:typename:int
quicklistBookmarkFind	src/quicklist.c	/^quicklistNode *quicklistBookmarkFind(quicklist *ql, const char *name) {$/;"	f	typeref:typename:quicklistNode *
quicklistBookmarksClear	src/quicklist.c	/^void quicklistBookmarksClear(quicklist *ql) {$/;"	f	typeref:typename:void
quicklistCompare	src/quicklist.c	/^int quicklistCompare(unsigned char *p1, unsigned char *p2, int p2_len) {$/;"	f	typeref:typename:int
quicklistCompress	src/quicklist.c	/^#define quicklistCompress(/;"	d	file:
quicklistCompressNode	src/quicklist.c	/^#define quicklistCompressNode(/;"	d	file:
quicklistCount	src/quicklist.c	/^unsigned long quicklistCount(const quicklist *ql) { return ql->count; }$/;"	f	typeref:typename:unsigned long
quicklistCreate	src/quicklist.c	/^quicklist *quicklistCreate(void) {$/;"	f	typeref:typename:quicklist *
quicklistCreateFromZiplist	src/quicklist.c	/^quicklist *quicklistCreateFromZiplist(int fill, int compress,$/;"	f	typeref:typename:quicklist *
quicklistCreateNode	src/quicklist.c	/^REDIS_STATIC quicklistNode *quicklistCreateNode(void) {$/;"	f	typeref:typename:REDIS_STATIC quicklistNode *
quicklistDecompressNode	src/quicklist.c	/^#define quicklistDecompressNode(/;"	d	file:
quicklistDecompressNodeForUse	src/quicklist.c	/^#define quicklistDecompressNodeForUse(/;"	d	file:
quicklistDelEntry	src/quicklist.c	/^void quicklistDelEntry(quicklistIter *iter, quicklistEntry *entry) {$/;"	f	typeref:typename:void
quicklistDelIndex	src/quicklist.c	/^REDIS_STATIC int quicklistDelIndex(quicklist *quicklist, quicklistNode *node,$/;"	f	typeref:typename:REDIS_STATIC int
quicklistDelRange	src/quicklist.c	/^int quicklistDelRange(quicklist *quicklist, const long start,$/;"	f	typeref:typename:int
quicklistDeleteIfEmpty	src/quicklist.c	/^#define quicklistDeleteIfEmpty(/;"	d	file:
quicklistDup	src/quicklist.c	/^quicklist *quicklistDup(quicklist *orig) {$/;"	f	typeref:typename:quicklist *
quicklistEntry	src/quicklist.h	/^typedef struct quicklistEntry {$/;"	s
quicklistEntry	src/quicklist.h	/^} quicklistEntry;$/;"	t	typeref:struct:quicklistEntry
quicklistGetIterator	src/quicklist.c	/^quicklistIter *quicklistGetIterator(const quicklist *quicklist, int direction) {$/;"	f	typeref:typename:quicklistIter *
quicklistGetIteratorAtIdx	src/quicklist.c	/^quicklistIter *quicklistGetIteratorAtIdx(const quicklist *quicklist,$/;"	f	typeref:typename:quicklistIter *
quicklistGetLzf	src/quicklist.c	/^size_t quicklistGetLzf(const quicklistNode *node, void **data) {$/;"	f	typeref:typename:size_t
quicklistIndex	src/quicklist.c	/^int quicklistIndex(const quicklist *quicklist, const long long idx,$/;"	f	typeref:typename:int
quicklistInsertAfter	src/quicklist.c	/^void quicklistInsertAfter(quicklist *quicklist, quicklistEntry *entry,$/;"	f	typeref:typename:void
quicklistInsertBefore	src/quicklist.c	/^void quicklistInsertBefore(quicklist *quicklist, quicklistEntry *entry,$/;"	f	typeref:typename:void
quicklistIter	src/quicklist.h	/^typedef struct quicklistIter {$/;"	s
quicklistIter	src/quicklist.h	/^} quicklistIter;$/;"	t	typeref:struct:quicklistIter
quicklistLZF	src/quicklist.h	/^typedef struct quicklistLZF {$/;"	s
quicklistLZF	src/quicklist.h	/^} quicklistLZF;$/;"	t	typeref:struct:quicklistLZF
quicklistNew	src/quicklist.c	/^quicklist *quicklistNew(int fill, int compress) {$/;"	f	typeref:typename:quicklist *
quicklistNext	src/quicklist.c	/^int quicklistNext(quicklistIter *iter, quicklistEntry *entry) {$/;"	f	typeref:typename:int
quicklistNode	src/quicklist.h	/^typedef struct quicklistNode {$/;"	s
quicklistNode	src/quicklist.h	/^} quicklistNode;$/;"	t	typeref:struct:quicklistNode
quicklistNodeIsCompressed	src/quicklist.h	/^#define quicklistNodeIsCompressed(/;"	d
quicklistNodeUpdateSz	src/quicklist.c	/^#define quicklistNodeUpdateSz(/;"	d	file:
quicklistPop	src/quicklist.c	/^int quicklistPop(quicklist *quicklist, int where, unsigned char **data,$/;"	f	typeref:typename:int
quicklistPopCustom	src/quicklist.c	/^int quicklistPopCustom(quicklist *quicklist, int where, unsigned char **data,$/;"	f	typeref:typename:int
quicklistPush	src/quicklist.c	/^void quicklistPush(quicklist *quicklist, void *value, const size_t sz,$/;"	f	typeref:typename:void
quicklistPushHead	src/quicklist.c	/^int quicklistPushHead(quicklist *quicklist, void *value, size_t sz) {$/;"	f	typeref:typename:int
quicklistPushTail	src/quicklist.c	/^int quicklistPushTail(quicklist *quicklist, void *value, size_t sz) {$/;"	f	typeref:typename:int
quicklistRecompressOnly	src/quicklist.c	/^#define quicklistRecompressOnly(/;"	d	file:
quicklistRelease	src/quicklist.c	/^void quicklistRelease(quicklist *quicklist) {$/;"	f	typeref:typename:void
quicklistReleaseIterator	src/quicklist.c	/^void quicklistReleaseIterator(quicklistIter *iter) {$/;"	f	typeref:typename:void
quicklistReplaceAtIndex	src/quicklist.c	/^int quicklistReplaceAtIndex(quicklist *quicklist, long index, void *data,$/;"	f	typeref:typename:int
quicklistRotate	src/quicklist.c	/^void quicklistRotate(quicklist *quicklist) {$/;"	f	typeref:typename:void
quicklistSetCompressDepth	src/quicklist.c	/^void quicklistSetCompressDepth(quicklist *quicklist, int compress) {$/;"	f	typeref:typename:void
quicklistSetFill	src/quicklist.c	/^void quicklistSetFill(quicklist *quicklist, int fill) {$/;"	f	typeref:typename:void
quicklistSetOptions	src/quicklist.c	/^void quicklistSetOptions(quicklist *quicklist, int fill, int depth) {$/;"	f	typeref:typename:void
quicklistTest	src/quicklist.c	/^int quicklistTest(int argc, char *argv[], int accurate) {$/;"	f	typeref:typename:int
quiet	src/redis-benchmark.c	/^    int quiet;$/;"	m	struct:config	typeref:typename:int	file:
quorum	src/sentinel.c	/^    unsigned int quorum;\/* Number of sentinels that need to agree on failure. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:unsigned int	file:
quoted_input	src/redis-cli.c	/^    int quoted_input;   \/* Force input args to be treated as quoted strings *\/$/;"	m	struct:config	typeref:typename:int	file:
r	deps/jemalloc/src/jemalloc.c	/^	void	*r;	\/* Result pointer. *\/$/;"	m	struct:__anon4e2331a50308	typeref:typename:void *	file:
r	deps/lua/src/llex.h	/^  lua_Number r;$/;"	m	union:__anon6e0980f3010a	typeref:typename:lua_Number
r	src/geohash.h	/^        } r;$/;"	m	union:__anona01652f10608::__anona01652f1070a	typeref:struct:__anona01652f10608::__anona01652f1070a::__anona01652f10808
rad_deg	src/geohash_helper.c	/^static inline double rad_deg(double ang) { return ang \/ D_R; }$/;"	f	typeref:typename:double	file:
radius	src/geohash.h	/^        double radius;$/;"	m	union:__anona01652f10608::__anona01652f1070a	typeref:typename:double
rallocx	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define rallocx /;"	d
rallocx	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define rallocx /;"	d
rallocx	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define rallocx /;"	d
rand_pick	src/ziplist.c	/^    } rand_pick;$/;"	t	function:ziplistRandomPairs	typeref:struct:ziplistRandomPairs::__anon4d39dfdc0108	file:
randfree	src/redis-benchmark.c	/^    size_t randfree;        \/* Number of unused pointers in client->randptr *\/$/;"	m	struct:_client	typeref:typename:size_t	file:
randlen	src/redis-benchmark.c	/^    size_t randlen;         \/* Number of pointers in client->randptr *\/$/;"	m	struct:_client	typeref:typename:size_t	file:
randomULong	src/dict.h	/^#define randomULong(/;"	d
randomizeClientKey	src/redis-benchmark.c	/^static void randomizeClientKey(client c) {$/;"	f	typeref:typename:void	file:
randomkeyCommand	src/db.c	/^void randomkeyCommand(client *c) {$/;"	f	typeref:typename:void
randomkeys	src/redis-benchmark.c	/^    int randomkeys;$/;"	m	struct:config	typeref:typename:int	file:
randomkeys_keyspacelen	src/redis-benchmark.c	/^    int randomkeys_keyspacelen;$/;"	m	struct:config	typeref:typename:int	file:
randptr	src/redis-benchmark.c	/^    char **randptr;         \/* Pointers to :rand: strings inside the command buf *\/$/;"	m	struct:_client	typeref:typename:char **	file:
randstring	src/ziplist.c	/^static int randstring(char *target, unsigned int min, unsigned int max) {$/;"	f	typeref:typename:int	file:
rank	deps/jemalloc/include/jemalloc/internal/witness.h	/^	witness_rank_t		rank;$/;"	m	struct:witness_s	typeref:typename:witness_rank_t
ranlib	deps/lua/Makefile	/^ranlib:$/;"	t
rasterLinkChangeCallback	tests/modules/hooks.c	/^void rasterLinkChangeCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f	typeref:typename:void
rawgco2ts	deps/lua/src/lstate.h	/^#define rawgco2ts(/;"	d
rawgco2u	deps/lua/src/lstate.h	/^#define rawgco2u(/;"	d
rawmode	deps/linenoise/linenoise.c	/^static int rawmode = 0; \/* For atexit() function to check if restore is needed*\/$/;"	v	typeref:typename:int	file:
rawtsvalue	deps/lua/src/lobject.h	/^#define rawtsvalue(/;"	d
rawuvalue	deps/lua/src/lobject.h	/^#define rawuvalue(/;"	d
rax	src/module.c	/^    rax *rax;                       \/* The radix tree. *\/$/;"	m	struct:RedisModuleDict	typeref:typename:rax *	file:
rax	src/module.c	/^    rax *rax;                       \/* parsed info data. *\/$/;"	m	struct:RedisModuleServerInfoData	typeref:typename:rax *	file:
rax	src/rax.h	/^typedef struct rax {$/;"	s
rax	src/rax.h	/^} rax;$/;"	t	typeref:struct:rax
rax	src/stream.h	/^    rax *rax;               \/* The radix tree holding the stream. *\/$/;"	m	struct:stream	typeref:typename:rax *
raxAddChild	src/rax.c	/^raxNode *raxAddChild(raxNode *n, unsigned char c, raxNode **childptr, raxNode ***parentlink) {$/;"	f	typeref:typename:raxNode *
raxCompare	src/rax.c	/^int raxCompare(raxIterator *iter, const char *op, unsigned char *key, size_t key_len) {$/;"	f	typeref:typename:int
raxCompressNode	src/rax.c	/^raxNode *raxCompressNode(raxNode *n, unsigned char *s, size_t len, raxNode **child) {$/;"	f	typeref:typename:raxNode *
raxDebugMsg	src/rax.c	/^static int raxDebugMsg = 1;$/;"	v	typeref:typename:int	file:
raxDebugShowNode	src/rax.c	/^void raxDebugShowNode(const char *msg, raxNode *n) {$/;"	f	typeref:typename:void
raxDefragFunction	src/defrag.c	/^typedef void *(raxDefragFunction)(raxIterator *ri, void *privdata, long *defragged);$/;"	t	typeref:typename:void * ()(raxIterator * ri,void * privdata,long * defragged)	file:
raxEOF	src/rax.c	/^int raxEOF(raxIterator *it) {$/;"	f	typeref:typename:int
raxFind	src/rax.c	/^void *raxFind(rax *rax, unsigned char *s, size_t len) {$/;"	f	typeref:typename:void *
raxFindParentLink	src/rax.c	/^raxNode **raxFindParentLink(raxNode *parent, raxNode *child) {$/;"	f	typeref:typename:raxNode **
raxFree	src/rax.c	/^void raxFree(rax *rax) {$/;"	f	typeref:typename:void
raxFreeWithCallback	src/rax.c	/^void raxFreeWithCallback(rax *rax, void (*free_callback)(void*)) {$/;"	f	typeref:typename:void
raxGenericInsert	src/rax.c	/^int raxGenericInsert(rax *rax, unsigned char *s, size_t len, void *data, void **old, int overwri/;"	f	typeref:typename:int
raxGetData	src/rax.c	/^void *raxGetData(raxNode *n) {$/;"	f	typeref:typename:void *
raxInsert	src/rax.c	/^int raxInsert(rax *rax, unsigned char *s, size_t len, void *data, void **old) {$/;"	f	typeref:typename:int
raxIterator	src/rax.h	/^typedef struct raxIterator {$/;"	s
raxIterator	src/rax.h	/^} raxIterator;$/;"	t	typeref:struct:raxIterator
raxIteratorAddChars	src/rax.c	/^int raxIteratorAddChars(raxIterator *it, unsigned char *s, size_t len) {$/;"	f	typeref:typename:int
raxIteratorDelChars	src/rax.c	/^void raxIteratorDelChars(raxIterator *it, size_t count) {$/;"	f	typeref:typename:void
raxIteratorNextStep	src/rax.c	/^int raxIteratorNextStep(raxIterator *it, int noup) {$/;"	f	typeref:typename:int
raxIteratorPrevStep	src/rax.c	/^int raxIteratorPrevStep(raxIterator *it, int noup) {$/;"	f	typeref:typename:int
raxLowWalk	src/rax.c	/^static inline size_t raxLowWalk(rax *rax, unsigned char *s, size_t len, raxNode **stopnode, raxN/;"	f	typeref:typename:size_t	file:
raxNew	src/rax.c	/^rax *raxNew(void) {$/;"	f	typeref:typename:rax *
raxNewNode	src/rax.c	/^raxNode *raxNewNode(size_t children, int datafield) {$/;"	f	typeref:typename:raxNode *
raxNext	src/rax.c	/^int raxNext(raxIterator *it) {$/;"	f	typeref:typename:int
raxNode	src/rax.h	/^typedef struct raxNode {$/;"	s
raxNode	src/rax.h	/^} raxNode;$/;"	t	typeref:struct:raxNode
raxNodeCallback	src/rax.h	/^typedef int (*raxNodeCallback)(raxNode **noderef);$/;"	t	typeref:typename:int (*)(raxNode ** noderef)
raxNodeCurrentLength	src/rax.c	/^#define raxNodeCurrentLength(/;"	d	file:
raxNodeFirstChildPtr	src/rax.c	/^#define raxNodeFirstChildPtr(/;"	d	file:
raxNodeLastChildPtr	src/rax.c	/^#define raxNodeLastChildPtr(/;"	d	file:
raxNotFound	src/rax.c	/^void *raxNotFound = (void*)"rax-not-found-pointer";$/;"	v	typeref:typename:void *
raxPadding	src/rax.c	/^#define raxPadding(/;"	d	file:
raxPrev	src/rax.c	/^int raxPrev(raxIterator *it) {$/;"	f	typeref:typename:int
raxRandomWalk	src/rax.c	/^int raxRandomWalk(raxIterator *it, size_t steps) {$/;"	f	typeref:typename:int
raxReallocForData	src/rax.c	/^raxNode *raxReallocForData(raxNode *n, void *data) {$/;"	f	typeref:typename:raxNode *
raxRecursiveFree	src/rax.c	/^void raxRecursiveFree(rax *rax, raxNode *n, void (*free_callback)(void*)) {$/;"	f	typeref:typename:void
raxRecursiveShow	src/rax.c	/^void raxRecursiveShow(int level, int lpad, raxNode *n) {$/;"	f	typeref:typename:void
raxRemove	src/rax.c	/^int raxRemove(rax *rax, unsigned char *s, size_t len, void **old) {$/;"	f	typeref:typename:int
raxRemoveChild	src/rax.c	/^raxNode *raxRemoveChild(raxNode *parent, raxNode *child) {$/;"	f	typeref:typename:raxNode *
raxSeek	src/rax.c	/^int raxSeek(raxIterator *it, const char *op, unsigned char *ele, size_t len) {$/;"	f	typeref:typename:int
raxSeekGreatest	src/rax.c	/^int raxSeekGreatest(raxIterator *it) {$/;"	f	typeref:typename:int
raxSetData	src/rax.c	/^void raxSetData(raxNode *n, void *data) {$/;"	f	typeref:typename:void
raxSetDebugMsg	src/rax.c	/^void raxSetDebugMsg(int onoff) {$/;"	f	typeref:typename:void
raxShow	src/rax.c	/^void raxShow(rax *rax) {$/;"	f	typeref:typename:void
raxSize	src/rax.c	/^uint64_t raxSize(rax *rax) {$/;"	f	typeref:typename:uint64_t
raxStack	src/rax.h	/^typedef struct raxStack {$/;"	s
raxStack	src/rax.h	/^} raxStack;$/;"	t	typeref:struct:raxStack
raxStackFree	src/rax.c	/^static inline void raxStackFree(raxStack *ts) {$/;"	f	typeref:typename:void	file:
raxStackInit	src/rax.c	/^static inline void raxStackInit(raxStack *ts) {$/;"	f	typeref:typename:void	file:
raxStackPeek	src/rax.c	/^static inline void *raxStackPeek(raxStack *ts) {$/;"	f	typeref:typename:void *	file:
raxStackPop	src/rax.c	/^static inline void *raxStackPop(raxStack *ts) {$/;"	f	typeref:typename:void *	file:
raxStackPush	src/rax.c	/^static inline int raxStackPush(raxStack *ts, void *ptr) {$/;"	f	typeref:typename:int	file:
raxStart	src/rax.c	/^void raxStart(raxIterator *it, rax *rt) {$/;"	f	typeref:typename:void
raxStop	src/rax.c	/^void raxStop(raxIterator *it) {$/;"	f	typeref:typename:void
raxTouch	src/rax.c	/^unsigned long raxTouch(raxNode *n) {$/;"	f	typeref:typename:unsigned long
raxTryInsert	src/rax.c	/^int raxTryInsert(rax *rax, unsigned char *s, size_t len, void *data, void **old) {$/;"	f	typeref:typename:int
rax_free	src/rax_malloc.h	/^#define rax_free /;"	d
rax_malloc	src/rax_malloc.h	/^#define rax_malloc /;"	d
rax_realloc	src/rax_malloc.h	/^#define rax_realloc /;"	d
rb_gen	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rb_gen(/;"	d
rb_gen	deps/jemalloc/src/prof.c	/^rb_gen(static UNUSED, gctx_tree_, prof_gctx_tree_t, prof_gctx_t, dump_link,$/;"	f	file:
rb_gen	deps/jemalloc/src/prof.c	/^rb_gen(static UNUSED, tctx_tree_, prof_tctx_tree_t, prof_tctx_t,$/;"	f	file:
rb_gen	deps/jemalloc/src/prof.c	/^rb_gen(static UNUSED, tdata_tree_, prof_tdata_tree_t, prof_tdata_t, tdata_link,$/;"	f
rb_new	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rb_new(/;"	d
rb_node	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rb_node(/;"	d
rb_proto	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rb_proto(/;"	d
rb_tree	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rb_tree(/;"	d
rbt_node_new	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rbt_node_new(/;"	d
rbtn_black_height	deps/jemalloc/test/unit/rb.c	/^#define rbtn_black_height(/;"	d	file:
rbtn_black_set	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rbtn_black_set(/;"	d
rbtn_color_set	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rbtn_color_set(/;"	d
rbtn_first	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rbtn_first(/;"	d
rbtn_last	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rbtn_last(/;"	d
rbtn_left_get	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rbtn_left_get(/;"	d
rbtn_left_set	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rbtn_left_set(/;"	d
rbtn_red_get	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rbtn_red_get(/;"	d
rbtn_red_set	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rbtn_red_set(/;"	d
rbtn_right_get	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rbtn_right_get(/;"	d
rbtn_right_set	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rbtn_right_set(/;"	d
rbtn_rotate_left	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rbtn_rotate_left(/;"	d
rbtn_rotate_right	deps/jemalloc/include/jemalloc/internal/rb.h	/^#define rbtn_rotate_right(/;"	d
rcvbuf	src/cluster.h	/^    char *rcvbuf;               \/* Packet reception buffer *\/$/;"	m	struct:clusterLink	typeref:typename:char *
rcvbuf_alloc	src/cluster.h	/^    size_t rcvbuf_alloc;        \/* Allocated size of rcvbuf *\/$/;"	m	struct:clusterLink	typeref:typename:size_t
rcvbuf_len	src/cluster.h	/^    size_t rcvbuf_len;          \/* Used size of rcvbuf *\/$/;"	m	struct:clusterLink	typeref:typename:size_t
rdbCheckError	src/redis-check-rdb.c	/^void rdbCheckError(const char *fmt, ...) {$/;"	f	typeref:typename:void
rdbCheckHandleCrash	src/redis-check-rdb.c	/^void rdbCheckHandleCrash(int sig, siginfo_t *info, void *secret) {$/;"	f	typeref:typename:void
rdbCheckInfo	src/redis-check-rdb.c	/^void rdbCheckInfo(const char *fmt, ...) {$/;"	f	typeref:typename:void
rdbCheckMode	src/redis-check-rdb.c	/^int rdbCheckMode = 0;$/;"	v	typeref:typename:int
rdbCheckSetError	src/redis-check-rdb.c	/^void rdbCheckSetError(const char *fmt, ...) {$/;"	f	typeref:typename:void
rdbCheckSetupSignals	src/redis-check-rdb.c	/^void rdbCheckSetupSignals(void) {$/;"	f	typeref:typename:void
rdbEncodeInteger	src/rdb.c	/^int rdbEncodeInteger(long long value, unsigned char *enc) {$/;"	f	typeref:typename:int
rdbFileBeingLoaded	src/rdb.c	/^char* rdbFileBeingLoaded = NULL; \/* used for rdb checking on read error *\/$/;"	v	typeref:typename:char *
rdbGenericLoadStringObject	src/rdb.c	/^void *rdbGenericLoadStringObject(rio *rdb, int flags, size_t *lenptr) {$/;"	f	typeref:typename:void *
rdbIsObjectType	src/rdb.h	/^#define rdbIsObjectType(/;"	d
rdbLoad	src/rdb.c	/^int rdbLoad(char *filename, rdbSaveInfo *rsi, int rdbflags) {$/;"	f	typeref:typename:int
rdbLoadBinaryDoubleValue	src/rdb.c	/^int rdbLoadBinaryDoubleValue(rio *rdb, double *val) {$/;"	f	typeref:typename:int
rdbLoadBinaryFloatValue	src/rdb.c	/^int rdbLoadBinaryFloatValue(rio *rdb, float *val) {$/;"	f	typeref:typename:int
rdbLoadCheckModuleValue	src/rdb.c	/^robj *rdbLoadCheckModuleValue(rio *rdb, char *modulename) {$/;"	f	typeref:typename:robj *
rdbLoadDoubleValue	src/rdb.c	/^int rdbLoadDoubleValue(rio *rdb, double *val) {$/;"	f	typeref:typename:int
rdbLoadEncodedStringObject	src/rdb.c	/^robj *rdbLoadEncodedStringObject(rio *rdb) {$/;"	f	typeref:typename:robj *
rdbLoadIntegerObject	src/rdb.c	/^void *rdbLoadIntegerObject(rio *rdb, int enctype, int flags, size_t *lenptr) {$/;"	f	typeref:typename:void *
rdbLoadLen	src/rdb.c	/^uint64_t rdbLoadLen(rio *rdb, int *isencoded) {$/;"	f	typeref:typename:uint64_t
rdbLoadLenByRef	src/rdb.c	/^int rdbLoadLenByRef(rio *rdb, int *isencoded, uint64_t *lenptr) {$/;"	f	typeref:typename:int
rdbLoadLzfStringObject	src/rdb.c	/^void *rdbLoadLzfStringObject(rio *rdb, int flags, size_t *lenptr) {$/;"	f	typeref:typename:void *
rdbLoadMillisecondTime	src/rdb.c	/^long long rdbLoadMillisecondTime(rio *rdb, int rdbver) {$/;"	f	typeref:typename:long long
rdbLoadObject	src/rdb.c	/^robj *rdbLoadObject(int rdbtype, rio *rdb, sds key, int *error) {$/;"	f	typeref:typename:robj *
rdbLoadObjectType	src/rdb.c	/^int rdbLoadObjectType(rio *rdb) {$/;"	f	typeref:typename:int
rdbLoadProgressCallback	src/rdb.c	/^void rdbLoadProgressCallback(rio *r, const void *buf, size_t len) {$/;"	f	typeref:typename:void
rdbLoadRio	src/rdb.c	/^int rdbLoadRio(rio *rdb, int rdbflags, rdbSaveInfo *rsi) {$/;"	f	typeref:typename:int
rdbLoadStringObject	src/rdb.c	/^robj *rdbLoadStringObject(rio *rdb) {$/;"	f	typeref:typename:robj *
rdbLoadTime	src/rdb.c	/^time_t rdbLoadTime(rio *rdb) {$/;"	f	typeref:typename:time_t
rdbLoadType	src/rdb.c	/^int rdbLoadType(rio *rdb) {$/;"	f	typeref:typename:int
rdbPipeReadHandler	src/replication.c	/^void rdbPipeReadHandler(struct aeEventLoop *eventLoop, int fd, void *clientData, int mask) {$/;"	f	typeref:typename:void
rdbPipeWriteHandler	src/replication.c	/^void rdbPipeWriteHandler(struct connection *conn) {$/;"	f	typeref:typename:void
rdbPipeWriteHandlerConnRemoved	src/replication.c	/^void rdbPipeWriteHandlerConnRemoved(struct connection *conn) {$/;"	f	typeref:typename:void
rdbPopulateSaveInfo	src/rdb.c	/^rdbSaveInfo *rdbPopulateSaveInfo(rdbSaveInfo *rsi) {$/;"	f	typeref:typename:rdbSaveInfo *
rdbRemoveTempFile	src/rdb.c	/^void rdbRemoveTempFile(pid_t childpid, int from_signal) {$/;"	f	typeref:typename:void
rdbReportCorruptRDB	src/rdb.c	/^#define rdbReportCorruptRDB(/;"	d	file:
rdbReportError	src/rdb.c	/^void rdbReportError(int corruption_error, int linenum, char *reason, ...) {$/;"	f	typeref:typename:void
rdbReportReadError	src/rdb.c	/^#define rdbReportReadError(/;"	d	file:
rdbSave	src/rdb.c	/^int rdbSave(char *filename, rdbSaveInfo *rsi) {$/;"	f	typeref:typename:int
rdbSaveAuxField	src/rdb.c	/^ssize_t rdbSaveAuxField(rio *rdb, void *key, size_t keylen, void *val, size_t vallen) {$/;"	f	typeref:typename:ssize_t
rdbSaveAuxFieldStrInt	src/rdb.c	/^ssize_t rdbSaveAuxFieldStrInt(rio *rdb, char *key, long long val) {$/;"	f	typeref:typename:ssize_t
rdbSaveAuxFieldStrStr	src/rdb.c	/^ssize_t rdbSaveAuxFieldStrStr(rio *rdb, char *key, char *val) {$/;"	f	typeref:typename:ssize_t
rdbSaveBackground	src/rdb.c	/^int rdbSaveBackground(char *filename, rdbSaveInfo *rsi) {$/;"	f	typeref:typename:int
rdbSaveBinaryDoubleValue	src/rdb.c	/^int rdbSaveBinaryDoubleValue(rio *rdb, double val) {$/;"	f	typeref:typename:int
rdbSaveBinaryFloatValue	src/rdb.c	/^int rdbSaveBinaryFloatValue(rio *rdb, float val) {$/;"	f	typeref:typename:int
rdbSaveDoubleValue	src/rdb.c	/^int rdbSaveDoubleValue(rio *rdb, double val) {$/;"	f	typeref:typename:int
rdbSaveInfo	src/server.h	/^typedef struct rdbSaveInfo {$/;"	s
rdbSaveInfo	src/server.h	/^} rdbSaveInfo;$/;"	t	typeref:struct:rdbSaveInfo
rdbSaveInfoAuxFields	src/rdb.c	/^int rdbSaveInfoAuxFields(rio *rdb, int rdbflags, rdbSaveInfo *rsi) {$/;"	f	typeref:typename:int
rdbSaveKeyValuePair	src/rdb.c	/^int rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val, long long expiretime) {$/;"	f	typeref:typename:int
rdbSaveLen	src/rdb.c	/^int rdbSaveLen(rio *rdb, uint64_t len) {$/;"	f	typeref:typename:int
rdbSaveLongLongAsStringObject	src/rdb.c	/^ssize_t rdbSaveLongLongAsStringObject(rio *rdb, long long value) {$/;"	f	typeref:typename:ssize_t
rdbSaveLzfBlob	src/rdb.c	/^ssize_t rdbSaveLzfBlob(rio *rdb, void *data, size_t compress_len,$/;"	f	typeref:typename:ssize_t
rdbSaveLzfStringObject	src/rdb.c	/^ssize_t rdbSaveLzfStringObject(rio *rdb, unsigned char *s, size_t len) {$/;"	f	typeref:typename:ssize_t
rdbSaveMillisecondTime	src/rdb.c	/^int rdbSaveMillisecondTime(rio *rdb, long long t) {$/;"	f	typeref:typename:int
rdbSaveModulesAux	src/module.c	/^ssize_t rdbSaveModulesAux(rio *rdb, int when) {$/;"	f	typeref:typename:ssize_t
rdbSaveObject	src/rdb.c	/^ssize_t rdbSaveObject(rio *rdb, robj *o, robj *key) {$/;"	f	typeref:typename:ssize_t
rdbSaveObjectType	src/rdb.c	/^int rdbSaveObjectType(rio *rdb, robj *o) {$/;"	f	typeref:typename:int
rdbSaveRawString	src/rdb.c	/^ssize_t rdbSaveRawString(rio *rdb, unsigned char *s, size_t len) {$/;"	f	typeref:typename:ssize_t
rdbSaveRio	src/rdb.c	/^int rdbSaveRio(rio *rdb, int *error, int rdbflags, rdbSaveInfo *rsi) {$/;"	f	typeref:typename:int
rdbSaveRioWithEOFMark	src/rdb.c	/^int rdbSaveRioWithEOFMark(rio *rdb, int *error, rdbSaveInfo *rsi) {$/;"	f	typeref:typename:int
rdbSaveSingleModuleAux	src/rdb.c	/^ssize_t rdbSaveSingleModuleAux(rio *rdb, int when, moduleType *mt) {$/;"	f	typeref:typename:ssize_t
rdbSaveStreamConsumers	src/rdb.c	/^size_t rdbSaveStreamConsumers(rio *rdb, streamCG *cg) {$/;"	f	typeref:typename:size_t
rdbSaveStreamPEL	src/rdb.c	/^ssize_t rdbSaveStreamPEL(rio *rdb, rax *pel, int nacks) {$/;"	f	typeref:typename:ssize_t
rdbSaveStringObject	src/rdb.c	/^ssize_t rdbSaveStringObject(rio *rdb, robj *obj) {$/;"	f	typeref:typename:ssize_t
rdbSaveToSlavesSockets	src/rdb.c	/^int rdbSaveToSlavesSockets(rdbSaveInfo *rsi) {$/;"	f	typeref:typename:int
rdbSaveType	src/rdb.c	/^int rdbSaveType(rio *rdb, unsigned char type) {$/;"	f	typeref:typename:int
rdbSavedObjectLen	src/rdb.c	/^size_t rdbSavedObjectLen(robj *o, robj *key) {$/;"	f	typeref:typename:size_t
rdbShowGenericInfo	src/redis-check-rdb.c	/^void rdbShowGenericInfo(void) {$/;"	f	typeref:typename:void
rdbTryIntegerEncoding	src/rdb.c	/^int rdbTryIntegerEncoding(char *s, size_t len, unsigned char *enc) {$/;"	f	typeref:typename:int
rdbWriteRaw	src/rdb.c	/^static ssize_t rdbWriteRaw(rio *rdb, void *p, size_t len) {$/;"	f	typeref:typename:ssize_t	file:
rdb_bgsave_scheduled	src/server.h	/^    int rdb_bgsave_scheduled;       \/* BGSAVE when possible if true. *\/$/;"	m	struct:redisServer	typeref:typename:int
rdb_check_doing_string	src/redis-check-rdb.c	/^char *rdb_check_doing_string[] = {$/;"	v	typeref:typename:char * []
rdb_checksum	src/server.h	/^    int rdb_checksum;               \/* Use RDB checksum? *\/$/;"	m	struct:redisServer	typeref:typename:int
rdb_child_exit_pipe	src/server.h	/^    int rdb_child_exit_pipe;        \/* Used by the diskless parent allow child exit. *\/$/;"	m	struct:redisServer	typeref:typename:int
rdb_child_type	src/server.h	/^    int rdb_child_type;             \/* Type of save by active child. *\/$/;"	m	struct:redisServer	typeref:typename:int
rdb_compression	src/server.h	/^    int rdb_compression;            \/* Use compression in RDB? *\/$/;"	m	struct:redisServer	typeref:typename:int
rdb_del_sync_files	src/server.h	/^    int rdb_del_sync_files;         \/* Remove RDB files used only for SYNC if$/;"	m	struct:redisServer	typeref:typename:int
rdb_filename	src/redis-cli.c	/^    char *rdb_filename;$/;"	m	struct:config	typeref:typename:char *	file:
rdb_filename	src/server.h	/^    char *rdb_filename;             \/* Name of RDB file *\/$/;"	m	struct:redisServer	typeref:typename:char *
rdb_fsync_range	src/config.h	/^#define rdb_fsync_range(/;"	d
rdb_key_save_delay	src/server.h	/^    int rdb_key_save_delay;         \/* Delay in microseconds between keys while$/;"	m	struct:redisServer	typeref:typename:int
rdb_load	src/module.c	/^        moduleTypeLoadFunc rdb_load;$/;"	m	struct:RM_CreateDataType::typemethods	typeref:typename:moduleTypeLoadFunc	file:
rdb_load	src/redismodule.h	/^    RedisModuleTypeLoadFunc rdb_load;$/;"	m	struct:RedisModuleTypeMethods	typeref:typename:RedisModuleTypeLoadFunc
rdb_load	src/server.h	/^    moduleTypeLoadFunc rdb_load;$/;"	m	struct:RedisModuleType	typeref:typename:moduleTypeLoadFunc
rdb_pipe_buff	src/server.h	/^    char *rdb_pipe_buff;            \/* In diskless replication, this buffer holds data *\/$/;"	m	struct:redisServer	typeref:typename:char *
rdb_pipe_bufflen	src/server.h	/^    int rdb_pipe_bufflen;           \/* that was read from the the rdb pipe. *\/$/;"	m	struct:redisServer	typeref:typename:int
rdb_pipe_conns	src/server.h	/^    connection **rdb_pipe_conns;    \/* Connections which are currently the *\/$/;"	m	struct:redisServer	typeref:typename:connection **
rdb_pipe_numconns	src/server.h	/^    int rdb_pipe_numconns;          \/* target of diskless rdb fork child. *\/$/;"	m	struct:redisServer	typeref:typename:int
rdb_pipe_numconns_writing	src/server.h	/^    int rdb_pipe_numconns_writing;  \/* Number of rdb conns with pending writes. *\/$/;"	m	struct:redisServer	typeref:typename:int
rdb_pipe_read	src/server.h	/^    int rdb_pipe_read;              \/* RDB pipe used to transfer the rdb data *\/$/;"	m	struct:redisServer	typeref:typename:int
rdb_save	src/module.c	/^        moduleTypeSaveFunc rdb_save;$/;"	m	struct:RM_CreateDataType::typemethods	typeref:typename:moduleTypeSaveFunc	file:
rdb_save	src/redismodule.h	/^    RedisModuleTypeSaveFunc rdb_save;$/;"	m	struct:RedisModuleTypeMethods	typeref:typename:RedisModuleTypeSaveFunc
rdb_save	src/server.h	/^    moduleTypeSaveFunc rdb_save;$/;"	m	struct:RedisModuleType	typeref:typename:moduleTypeSaveFunc
rdb_save_incremental_fsync	src/server.h	/^    int rdb_save_incremental_fsync;   \/* fsync incrementally while rdb saving? *\/$/;"	m	struct:redisServer	typeref:typename:int
rdb_save_time_last	src/server.h	/^    time_t rdb_save_time_last;      \/* Time used by last RDB save run. *\/$/;"	m	struct:redisServer	typeref:typename:time_t
rdb_save_time_start	src/server.h	/^    time_t rdb_save_time_start;     \/* Current RDB save start time. *\/$/;"	m	struct:redisServer	typeref:typename:time_t
rdb_type_string	src/redis-check-rdb.c	/^char *rdb_type_string[] = {$/;"	v	typeref:typename:char * []
rdbstate	src/redis-check-rdb.c	/^} rdbstate;$/;"	v	typeref:struct:__anon818955940108
read	deps/hiredis/adapters/qt.h	/^        void read() { redisAsyncHandleRead(m_ctx); }$/;"	f	class:RedisQtAdapter	typeref:typename:void
read	deps/hiredis/hiredis.h	/^    ssize_t (*read)(struct redisContext *, char *, size_t);$/;"	m	struct:redisContextFuncs	typeref:typename:ssize_t (*)(struct redisContext *,char *,size_t)
read	deps/jemalloc/include/jemalloc/internal/hooks.h	/^#define read /;"	d
read	src/connection.h	/^    int (*read)(struct connection *conn, void *buf, size_t buf_len);$/;"	m	struct:ConnectionType	typeref:typename:int (*)(struct connection * conn,void * buf,size_t buf_len)
read	src/rio.h	/^    size_t (*read)(struct _rio *, void *buf, size_t len);$/;"	m	struct:_rio	typeref:typename:size_t (*)(struct _rio *,void * buf,size_t len)
read.o	deps/hiredis/Makefile	/^read.o: read.c fmacros.h alloc.h read.h sds.h win32.h$/;"	t
readArgFromStdin	src/redis-cli.c	/^static sds readArgFromStdin(void) {$/;"	f	typeref:typename:sds	file:
readArgc	src/redis-check-aof.c	/^int readArgc(FILE *fp, long *target) {$/;"	f	typeref:typename:int
readBytes	deps/hiredis/read.c	/^static char *readBytes(redisReader *r, unsigned int bytes) {$/;"	f	typeref:typename:char *	file:
readBytes	src/redis-check-aof.c	/^int readBytes(FILE *fp, char *target, long length) {$/;"	f	typeref:typename:int
readChildInfo	src/childinfo.c	/^int readChildInfo(childInfoType *information_type, size_t *cow, monotime *cow_updated, size_t *k/;"	f	typeref:typename:int
readConn	src/redis-cli.c	/^static ssize_t readConn(redisContext *c, char *buf, size_t len)$/;"	f	typeref:typename:ssize_t	file:
readHandler	src/redis-benchmark.c	/^static void readHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	typeref:typename:void	file:
readLine	deps/hiredis/read.c	/^static char *readLine(redisReader *r, int *_len) {$/;"	f	typeref:typename:char *	file:
readLong	src/redis-check-aof.c	/^int readLong(FILE *fp, char prefix, long *target) {$/;"	f	typeref:typename:int
readOOMScoreAdj	src/server.c	/^static void readOOMScoreAdj(void) {$/;"	f	typeref:typename:void	file:
readQueryFromClient	src/networking.c	/^void readQueryFromClient(connection *conn) {$/;"	f	typeref:typename:void
readString	src/redis-check-aof.c	/^int readString(FILE *fp, char** target) {$/;"	f	typeref:typename:int
readSyncBulkPayload	src/replication.c	/^void readSyncBulkPayload(connection *conn) {$/;"	f	typeref:typename:void
read_chars	deps/lua/src/liolib.c	/^static int read_chars (lua_State *L, FILE *f, size_t n) {$/;"	f	typeref:typename:int	file:
read_handler	src/connection.h	/^    ConnectionCallbackFunc read_handler;$/;"	m	struct:connection	typeref:typename:ConnectionCallbackFunc
read_limit	src/rio.h	/^            size_t read_limit;  \/* don't allow to buffer\/read more than that *\/$/;"	m	struct:_rio::__anonb6066a3c010a::__anonb6066a3c0408	typeref:typename:size_t
read_line	deps/lua/src/liolib.c	/^static int read_line (lua_State *L, FILE *f) {$/;"	f	typeref:typename:int	file:
read_long_string	deps/lua/src/llex.c	/^static void read_long_string (LexState *ls, SemInfo *seminfo, int sep) {$/;"	f	typeref:typename:void	file:
read_number	deps/lua/src/liolib.c	/^static int read_number (lua_State *L, FILE *f) {$/;"	f	typeref:typename:int	file:
read_numeral	deps/lua/src/llex.c	/^static void read_numeral (LexState *ls, SemInfo *seminfo) {$/;"	f	typeref:typename:void	file:
read_reploff	src/server.h	/^    long long read_reploff; \/* Read replication offset if this is a master. *\/$/;"	m	struct:client	typeref:typename:long long
read_so_far	src/rio.h	/^            size_t read_so_far; \/* amount of data read from the rio (not buffered) *\/$/;"	m	struct:_rio::__anonb6066a3c010a::__anonb6066a3c0408	typeref:typename:size_t
read_string	deps/lua/src/llex.c	/^static void read_string (LexState *ls, int del, SemInfo *seminfo) {$/;"	f	typeref:typename:void	file:
readable	deps/lua/src/loadlib.c	/^static int readable (const char *filename) {$/;"	f	typeref:typename:int	file:
reader	deps/hiredis/hiredis.h	/^    redisReader *reader; \/* Protocol reader *\/$/;"	m	struct:redisContext	typeref:typename:redisReader *
reader	deps/lua/src/lzio.h	/^  lua_Reader reader;$/;"	m	struct:Zio	typeref:typename:lua_Reader
reading	deps/hiredis/adapters/ae.h	/^    int reading, writing;$/;"	m	struct:redisAeEvents	typeref:typename:int
reading	deps/hiredis/adapters/libev.h	/^    int reading, writing;$/;"	m	struct:redisLibevEvents	typeref:typename:int
reading	src/sentinel.c	/^    int reading, writing;$/;"	m	struct:redisAeEvents	typeref:typename:int	file:
readlink	deps/jemalloc/include/jemalloc/internal/hooks.h	/^#define readlink /;"	d
readonlyCommand	src/cluster.c	/^void readonlyCommand(client *c) {$/;"	f	typeref:typename:void
readwriteCommand	src/cluster.c	/^void readwriteCommand(client *c) {$/;"	f	typeref:typename:void
readyList	src/server.h	/^typedef struct readyList {$/;"	s
readyList	src/server.h	/^} readyList;$/;"	t	typeref:struct:readyList
ready_keys	src/server.h	/^    dict *ready_keys;           \/* Blocked keys that received a PUSH *\/$/;"	m	struct:redisDb	typeref:typename:dict *
ready_keys	src/server.h	/^    list *ready_keys;        \/* List of readyList structures for BLPOP & co *\/$/;"	m	struct:redisServer	typeref:typename:list *
realloc	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define realloc /;"	d
realloc	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define realloc /;"	d
realloc	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define realloc /;"	d
realloc	deps/jemalloc/src/zone.c	/^	void *(*realloc)(struct _malloc_zone_t *, void *, size_t);$/;"	m	struct:_malloc_zone_t	typeref:typename:void * (*)(struct _malloc_zone_t *,void *,size_t)	file:
realloc	src/zmalloc.c	/^#define realloc(/;"	d	file:
reallocFn	deps/hiredis/alloc.h	/^    void *(*reallocFn)(void*,size_t);$/;"	m	struct:hiredisAllocFuncs	typeref:typename:void * (*)(void *,size_t)
reallocs	deps/lua/src/strbuf.h	/^    int reallocs;$/;"	m	struct:__anon10f823b40108	typeref:typename:int
reallymarkobject	deps/lua/src/lgc.c	/^static void reallymarkobject (global_State *g, GCObject *o) {$/;"	f	typeref:typename:void	file:
reason	src/acl.c	/^    int reason;         \/* Reason for denying the command. ACL_DENIED_*. *\/$/;"	m	struct:ACLLogEntry	typeref:typename:int	file:
receiveChildInfo	src/childinfo.c	/^void receiveChildInfo(void) {$/;"	f	typeref:typename:void
receiveSynchronousResponse	src/replication.c	/^char *receiveSynchronousResponse(connection *conn) {$/;"	f	typeref:typename:char *
recfield	deps/lua/src/lparser.c	/^static void recfield (LexState *ls, struct ConsControl *cc) {$/;"	f	typeref:typename:void	file:
recompress	src/quicklist.h	/^    unsigned int recompress : 1; \/* was this node previous compressed? *\/$/;"	m	struct:quicklistNode	typeref:typename:unsigned int:1
reconnectingRedisCommand	src/redis-cli.c	/^static redisReply *reconnectingRedisCommand(redisContext *c, const char *fmt, ...) {$/;"	f	typeref:typename:redisReply *	file:
recorded	deps/hdr_histogram/hdr_histogram.h	/^        struct hdr_iter_recorded recorded;$/;"	m	union:hdr_iter::__anon905d92fb010a	typeref:struct:hdr_iter_recorded
recorded_iter_next	deps/hdr_histogram/hdr_histogram.c	/^static bool recorded_iter_next(struct hdr_iter* iter)$/;"	f	typeref:typename:bool	file:
recv	deps/hiredis/sockcompat.h	/^#define recv(/;"	d
redactClientCommandArgument	src/networking.c	/^void redactClientCommandArgument(client *c, int argc) {$/;"	f	typeref:typename:void
redacted	src/server.h	/^    *getack, *special_asterick, *special_equals, *default_username, *redacted,$/;"	m	struct:sharedObjectsStruct
redisAeAddRead	deps/hiredis/adapters/ae.h	/^static void redisAeAddRead(void *privdata) {$/;"	f	typeref:typename:void
redisAeAddRead	src/sentinel.c	/^static void redisAeAddRead(void *privdata) {$/;"	f	typeref:typename:void	file:
redisAeAddWrite	deps/hiredis/adapters/ae.h	/^static void redisAeAddWrite(void *privdata) {$/;"	f	typeref:typename:void
redisAeAddWrite	src/sentinel.c	/^static void redisAeAddWrite(void *privdata) {$/;"	f	typeref:typename:void	file:
redisAeAttach	deps/hiredis/adapters/ae.h	/^static int redisAeAttach(aeEventLoop *loop, redisAsyncContext *ac) {$/;"	f	typeref:typename:int
redisAeAttach	src/sentinel.c	/^static int redisAeAttach(aeEventLoop *loop, redisAsyncContext *ac) {$/;"	f	typeref:typename:int	file:
redisAeCleanup	deps/hiredis/adapters/ae.h	/^static void redisAeCleanup(void *privdata) {$/;"	f	typeref:typename:void
redisAeCleanup	src/sentinel.c	/^static void redisAeCleanup(void *privdata) {$/;"	f	typeref:typename:void	file:
redisAeDelRead	deps/hiredis/adapters/ae.h	/^static void redisAeDelRead(void *privdata) {$/;"	f	typeref:typename:void
redisAeDelRead	src/sentinel.c	/^static void redisAeDelRead(void *privdata) {$/;"	f	typeref:typename:void	file:
redisAeDelWrite	deps/hiredis/adapters/ae.h	/^static void redisAeDelWrite(void *privdata) {$/;"	f	typeref:typename:void
redisAeDelWrite	src/sentinel.c	/^static void redisAeDelWrite(void *privdata) {$/;"	f	typeref:typename:void	file:
redisAeEvents	deps/hiredis/adapters/ae.h	/^typedef struct redisAeEvents {$/;"	s
redisAeEvents	deps/hiredis/adapters/ae.h	/^} redisAeEvents;$/;"	t	typeref:struct:redisAeEvents
redisAeEvents	src/sentinel.c	/^typedef struct redisAeEvents {$/;"	s	file:
redisAeEvents	src/sentinel.c	/^} redisAeEvents;$/;"	t	typeref:struct:redisAeEvents	file:
redisAeReadEvent	deps/hiredis/adapters/ae.h	/^static void redisAeReadEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	typeref:typename:void
redisAeReadEvent	src/sentinel.c	/^static void redisAeReadEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	typeref:typename:void	file:
redisAeWriteEvent	deps/hiredis/adapters/ae.h	/^static void redisAeWriteEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	typeref:typename:void
redisAeWriteEvent	src/sentinel.c	/^static void redisAeWriteEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	typeref:typename:void	file:
redisAppendCommand	deps/hiredis/hiredis.c	/^int redisAppendCommand(redisContext *c, const char *format, ...) {$/;"	f	typeref:typename:int
redisAppendCommandArgv	deps/hiredis/hiredis.c	/^int redisAppendCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen) /;"	f	typeref:typename:int
redisAppendFormattedCommand	deps/hiredis/hiredis.c	/^int redisAppendFormattedCommand(redisContext *c, const char *cmd, size_t len) {$/;"	f	typeref:typename:int
redisAsciiArt	src/server.c	/^void redisAsciiArt(void) {$/;"	f	typeref:typename:void
redisAsyncCommand	deps/hiredis/async.c	/^int redisAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *fo/;"	f	typeref:typename:int
redisAsyncCommandArgv	deps/hiredis/async.c	/^int redisAsyncCommandArgv(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, int argc, /;"	f	typeref:typename:int
redisAsyncConnect	deps/hiredis/async.c	/^redisAsyncContext *redisAsyncConnect(const char *ip, int port) {$/;"	f	typeref:typename:redisAsyncContext *
redisAsyncConnectBind	deps/hiredis/async.c	/^redisAsyncContext *redisAsyncConnectBind(const char *ip, int port,$/;"	f	typeref:typename:redisAsyncContext *
redisAsyncConnectBindWithReuse	deps/hiredis/async.c	/^redisAsyncContext *redisAsyncConnectBindWithReuse(const char *ip, int port,$/;"	f	typeref:typename:redisAsyncContext *
redisAsyncConnectUnix	deps/hiredis/async.c	/^redisAsyncContext *redisAsyncConnectUnix(const char *path) {$/;"	f	typeref:typename:redisAsyncContext *
redisAsyncConnectWithOptions	deps/hiredis/async.c	/^redisAsyncContext *redisAsyncConnectWithOptions(const redisOptions *options) {$/;"	f	typeref:typename:redisAsyncContext *
redisAsyncContext	deps/hiredis/async.h	/^typedef struct redisAsyncContext {$/;"	s
redisAsyncContext	deps/hiredis/async.h	/^} redisAsyncContext;$/;"	t	typeref:struct:redisAsyncContext
redisAsyncDisconnect	deps/hiredis/async.c	/^void redisAsyncDisconnect(redisAsyncContext *ac) {$/;"	f	typeref:typename:void
redisAsyncFormattedCommand	deps/hiredis/async.c	/^int redisAsyncFormattedCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const/;"	f	typeref:typename:int
redisAsyncFree	deps/hiredis/async.c	/^void redisAsyncFree(redisAsyncContext *ac) {$/;"	f	typeref:typename:void
redisAsyncHandleRead	deps/hiredis/async.c	/^void redisAsyncHandleRead(redisAsyncContext *ac) {$/;"	f	typeref:typename:void
redisAsyncHandleTimeout	deps/hiredis/async.c	/^void redisAsyncHandleTimeout(redisAsyncContext *ac) {$/;"	f	typeref:typename:void
redisAsyncHandleWrite	deps/hiredis/async.c	/^void redisAsyncHandleWrite(redisAsyncContext *ac) {$/;"	f	typeref:typename:void
redisAsyncInitialize	deps/hiredis/async.c	/^static redisAsyncContext *redisAsyncInitialize(redisContext *c) {$/;"	f	typeref:typename:redisAsyncContext *	file:
redisAsyncPushFn	deps/hiredis/hiredis.h	/^typedef void (redisAsyncPushFn)(struct redisAsyncContext *, void *);$/;"	t	typeref:typename:void ()(struct redisAsyncContext *,void *)
redisAsyncRead	deps/hiredis/async.c	/^void redisAsyncRead(redisAsyncContext *ac) {$/;"	f	typeref:typename:void
redisAsyncSetConnectCallback	deps/hiredis/async.c	/^int redisAsyncSetConnectCallback(redisAsyncContext *ac, redisConnectCallback *fn) {$/;"	f	typeref:typename:int
redisAsyncSetDisconnectCallback	deps/hiredis/async.c	/^int redisAsyncSetDisconnectCallback(redisAsyncContext *ac, redisDisconnectCallback *fn) {$/;"	f	typeref:typename:int
redisAsyncSetPushCallback	deps/hiredis/async.c	/^redisAsyncPushFn *redisAsyncSetPushCallback(redisAsyncContext *ac, redisAsyncPushFn *fn) {$/;"	f	typeref:typename:redisAsyncPushFn *
redisAsyncSetTimeout	deps/hiredis/async.c	/^int redisAsyncSetTimeout(redisAsyncContext *ac, struct timeval tv) {$/;"	f	typeref:typename:int
redisAsyncWrite	deps/hiredis/async.c	/^void redisAsyncWrite(redisAsyncContext *ac) {$/;"	f	typeref:typename:void
redisAtomic	src/atomicvar.h	/^#define redisAtomic /;"	d
redisAtomic	src/atomicvar.h	/^#define redisAtomic$/;"	d
redisBitpos	src/bitops.c	/^long long redisBitpos(void *s, unsigned long count, int bit) {$/;"	f	typeref:typename:long long
redisBufferRead	deps/hiredis/hiredis.c	/^int redisBufferRead(redisContext *c) {$/;"	f	typeref:typename:int
redisBufferWrite	deps/hiredis/hiredis.c	/^int redisBufferWrite(redisContext *c, int *done) {$/;"	f	typeref:typename:int
redisBuildId	src/release.c	/^uint64_t redisBuildId(void) {$/;"	f	typeref:typename:uint64_t
redisBuildIdString	src/release.c	/^char *redisBuildIdString(void) {$/;"	f	typeref:typename:char *
redisCallback	deps/hiredis/async.h	/^typedef struct redisCallback {$/;"	s
redisCallback	deps/hiredis/async.h	/^} redisCallback;$/;"	t	typeref:struct:redisCallback
redisCallbackFn	deps/hiredis/async.h	/^typedef void (redisCallbackFn)(struct redisAsyncContext*, void*, void*);$/;"	t	typeref:typename:void ()(struct redisAsyncContext *,void *,void *)
redisCallbackList	deps/hiredis/async.h	/^typedef struct redisCallbackList {$/;"	s
redisCallbackList	deps/hiredis/async.h	/^} redisCallbackList;$/;"	t	typeref:struct:redisCallbackList
redisCheckConnectDone	deps/hiredis/net.c	/^int redisCheckConnectDone(redisContext *c, int *completed) {$/;"	f	typeref:typename:int
redisCheckSocketError	deps/hiredis/net.c	/^int redisCheckSocketError(redisContext *c) {$/;"	f	typeref:typename:int
redisCommand	deps/hiredis/hiredis.c	/^void *redisCommand(redisContext *c, const char *format, ...) {$/;"	f	typeref:typename:void *
redisCommand	src/server.h	/^struct redisCommand {$/;"	s
redisCommandArgv	deps/hiredis/hiredis.c	/^void *redisCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen) {$/;"	f	typeref:typename:void *
redisCommandTable	src/server.c	/^struct redisCommand redisCommandTable[] = {$/;"	v	typeref:struct:redisCommand[]
redisCommunicateSystemd	src/server.c	/^int redisCommunicateSystemd(const char *sd_notify_msg) {$/;"	f	typeref:typename:int
redisConfig	src/redis-benchmark.c	/^typedef struct redisConfig {$/;"	s	file:
redisConfig	src/redis-benchmark.c	/^} redisConfig;$/;"	t	typeref:struct:redisConfig	file:
redisConnect	deps/hiredis/hiredis.c	/^redisContext *redisConnect(const char *ip, int port) {$/;"	f	typeref:typename:redisContext *
redisConnectBindNonBlock	deps/hiredis/hiredis.c	/^redisContext *redisConnectBindNonBlock(const char *ip, int port,$/;"	f	typeref:typename:redisContext *
redisConnectBindNonBlockWithReuse	deps/hiredis/hiredis.c	/^redisContext *redisConnectBindNonBlockWithReuse(const char *ip, int port,$/;"	f	typeref:typename:redisContext *
redisConnectCallback	deps/hiredis/async.h	/^typedef void (redisConnectCallback)(const struct redisAsyncContext*, int status);$/;"	t	typeref:typename:void ()(const struct redisAsyncContext *,int status)
redisConnectFd	deps/hiredis/hiredis.c	/^redisContext *redisConnectFd(redisFD fd) {$/;"	f	typeref:typename:redisContext *
redisConnectNonBlock	deps/hiredis/hiredis.c	/^redisContext *redisConnectNonBlock(const char *ip, int port) {$/;"	f	typeref:typename:redisContext *
redisConnectUnix	deps/hiredis/hiredis.c	/^redisContext *redisConnectUnix(const char *path) {$/;"	f	typeref:typename:redisContext *
redisConnectUnixNonBlock	deps/hiredis/hiredis.c	/^redisContext *redisConnectUnixNonBlock(const char *path) {$/;"	f	typeref:typename:redisContext *
redisConnectUnixWithTimeout	deps/hiredis/hiredis.c	/^redisContext *redisConnectUnixWithTimeout(const char *path, const struct timeval tv) {$/;"	f	typeref:typename:redisContext *
redisConnectWithOptions	deps/hiredis/hiredis.c	/^redisContext *redisConnectWithOptions(const redisOptions *options) {$/;"	f	typeref:typename:redisContext *
redisConnectWithTimeout	deps/hiredis/hiredis.c	/^redisContext *redisConnectWithTimeout(const char *ip, int port, const struct timeval tv) {$/;"	f	typeref:typename:redisContext *
redisConnectionType	deps/hiredis/hiredis.h	/^enum redisConnectionType {$/;"	g
redisContext	deps/hiredis/hiredis.h	/^typedef struct redisContext {$/;"	s
redisContext	deps/hiredis/hiredis.h	/^} redisContext;$/;"	t	typeref:struct:redisContext
redisContextConnectBindTcp	deps/hiredis/net.c	/^int redisContextConnectBindTcp(redisContext *c, const char *addr, int port,$/;"	f	typeref:typename:int
redisContextConnectTcp	deps/hiredis/net.c	/^int redisContextConnectTcp(redisContext *c, const char *addr, int port,$/;"	f	typeref:typename:int
redisContextConnectUnix	deps/hiredis/net.c	/^int redisContextConnectUnix(redisContext *c, const char *path, const struct timeval *timeout) {$/;"	f	typeref:typename:int
redisContextDefaultFuncs	deps/hiredis/hiredis.c	/^static redisContextFuncs redisContextDefaultFuncs = {$/;"	v	typeref:typename:redisContextFuncs	file:
redisContextFuncs	deps/hiredis/hiredis.h	/^typedef struct redisContextFuncs {$/;"	s
redisContextFuncs	deps/hiredis/hiredis.h	/^} redisContextFuncs;$/;"	t	typeref:struct:redisContextFuncs
redisContextInit	deps/hiredis/hiredis.c	/^static redisContext *redisContextInit(void) {$/;"	f	typeref:typename:redisContext *	file:
redisContextSSLFuncs	deps/hiredis/ssl.c	/^redisContextFuncs redisContextSSLFuncs = {$/;"	v	typeref:typename:redisContextFuncs
redisContextSSLFuncs	deps/hiredis/ssl.c	/^redisContextFuncs redisContextSSLFuncs;$/;"	v	typeref:typename:redisContextFuncs
redisContextSetTimeout	deps/hiredis/net.c	/^int redisContextSetTimeout(redisContext *c, const struct timeval tv) {$/;"	f	typeref:typename:int
redisContextTimeoutMsec	deps/hiredis/net.c	/^static int redisContextTimeoutMsec(redisContext *c, long *result)$/;"	f	typeref:typename:int	file:
redisContextUpdateCommandTimeout	deps/hiredis/net.c	/^int redisContextUpdateCommandTimeout(redisContext *c, const struct timeval *timeout) {$/;"	f	typeref:typename:int
redisContextUpdateConnectTimeout	deps/hiredis/net.c	/^int redisContextUpdateConnectTimeout(redisContext *c, const struct timeval *timeout) {$/;"	f	typeref:typename:int
redisContextWaitReady	deps/hiredis/net.c	/^static int redisContextWaitReady(redisContext *c, long msec) {$/;"	f	typeref:typename:int	file:
redisCreateSSLContext	deps/hiredis/ssl.c	/^redisSSLContext *redisCreateSSLContext(const char *cacert_filename, const char *capath,$/;"	f	typeref:typename:redisSSLContext *
redisCreateSocket	deps/hiredis/net.c	/^static int redisCreateSocket(redisContext *c, int type) {$/;"	f	typeref:typename:int	file:
redisDb	src/server.h	/^typedef struct redisDb {$/;"	s
redisDb	src/server.h	/^} redisDb;$/;"	t	typeref:struct:redisDb
redisDebug	src/server.h	/^#define redisDebug(/;"	d
redisDebugMark	src/server.h	/^#define redisDebugMark(/;"	d
redisDisconnectCallback	deps/hiredis/async.h	/^typedef void (redisDisconnectCallback)(const struct redisAsyncContext*, int status);$/;"	t	typeref:typename:void ()(const struct redisAsyncContext *,int status)
redisEnableKeepAlive	deps/hiredis/hiredis.c	/^int redisEnableKeepAlive(redisContext *c) {$/;"	f	typeref:typename:int
redisError	src/server.h	/^struct redisError {$/;"	s
redisFD	deps/hiredis/hiredis.h	/^typedef int redisFD;$/;"	t	typeref:typename:int
redisFD	deps/hiredis/hiredis.h	/^typedef unsigned long long redisFD; \/* SOCKET = 64-bit UINT_PTR *\/$/;"	t	typeref:typename:unsigned long long
redisFD	deps/hiredis/hiredis.h	/^typedef unsigned long redisFD;      \/* SOCKET = 32-bit UINT_PTR *\/$/;"	t	typeref:typename:unsigned long
redisFork	src/server.c	/^int redisFork(int purpose) {$/;"	f	typeref:typename:int
redisFormatCommand	deps/hiredis/hiredis.c	/^int redisFormatCommand(char **target, const char *format, ...) {$/;"	f	typeref:typename:int
redisFormatCommandArgv	deps/hiredis/hiredis.c	/^int redisFormatCommandArgv(char **target, int argc, const char **argv, const size_t *argvlen) {$/;"	f	typeref:typename:int
redisFormatSdsCommandArgv	deps/hiredis/hiredis.c	/^int redisFormatSdsCommandArgv(hisds *target, int argc, const char **argv,$/;"	f	typeref:typename:int
redisFree	deps/hiredis/hiredis.c	/^void redisFree(redisContext *c) {$/;"	f	typeref:typename:void
redisFreeCommand	deps/hiredis/hiredis.c	/^void redisFreeCommand(char *cmd) {$/;"	f	typeref:typename:void
redisFreeKeepFd	deps/hiredis/hiredis.c	/^redisFD redisFreeKeepFd(redisContext *c) {$/;"	f	typeref:typename:redisFD
redisFreeSSLContext	deps/hiredis/ssl.c	/^void redisFreeSSLContext(redisSSLContext *ctx)$/;"	f	typeref:typename:void
redisFreeSdsCommand	deps/hiredis/hiredis.c	/^void redisFreeSdsCommand(hisds cmd) {$/;"	f	typeref:typename:void
redisFunctionSym	src/server.h	/^struct redisFunctionSym {$/;"	s
redisGetReply	deps/hiredis/hiredis.c	/^int redisGetReply(redisContext *c, void **reply) {$/;"	f	typeref:typename:int
redisGetReplyFromReader	deps/hiredis/hiredis.c	/^int redisGetReplyFromReader(redisContext *c, void **reply) {$/;"	f	typeref:typename:int
redisGitDirty	src/release.c	/^char *redisGitDirty(void) {$/;"	f	typeref:typename:char *
redisGitSHA1	src/release.c	/^char *redisGitSHA1(void) {$/;"	f	typeref:typename:char *
redisHandledPushReply	deps/hiredis/hiredis.c	/^static int redisHandledPushReply(redisContext *c, void *reply) {$/;"	f	typeref:typename:int	file:
redisInitOpenSSL	deps/hiredis/ssl.c	/^int redisInitOpenSSL(void)$/;"	f	typeref:typename:int
redisInitiateSSL	deps/hiredis/ssl.c	/^int redisInitiateSSL(redisContext *c, SSL *ssl) {$/;"	f	typeref:typename:int
redisInitiateSSLWithContext	deps/hiredis/ssl.c	/^int redisInitiateSSLWithContext(redisContext *c, redisSSLContext *redis_ssl_ctx)$/;"	f	typeref:typename:int
redisIsPushReply	deps/hiredis/hiredis.h	/^#define redisIsPushReply(/;"	d
redisIsSpontaneousPushReply	deps/hiredis/async.c	/^#define redisIsSpontaneousPushReply(/;"	d	file:
redisIsSubscribeReply	deps/hiredis/async.c	/^static int redisIsSubscribeReply(redisReply *reply) {$/;"	f	typeref:typename:int	file:
redisIsSupervised	src/server.c	/^int redisIsSupervised(int mode) {$/;"	f	typeref:typename:int
redisIvykisAddRead	deps/hiredis/adapters/ivykis.h	/^static void redisIvykisAddRead(void *privdata) {$/;"	f	typeref:typename:void
redisIvykisAddWrite	deps/hiredis/adapters/ivykis.h	/^static void redisIvykisAddWrite(void *privdata) {$/;"	f	typeref:typename:void
redisIvykisAttach	deps/hiredis/adapters/ivykis.h	/^static int redisIvykisAttach(redisAsyncContext *ac) {$/;"	f	typeref:typename:int
redisIvykisCleanup	deps/hiredis/adapters/ivykis.h	/^static void redisIvykisCleanup(void *privdata) {$/;"	f	typeref:typename:void
redisIvykisDelRead	deps/hiredis/adapters/ivykis.h	/^static void redisIvykisDelRead(void *privdata) {$/;"	f	typeref:typename:void
redisIvykisDelWrite	deps/hiredis/adapters/ivykis.h	/^static void redisIvykisDelWrite(void *privdata) {$/;"	f	typeref:typename:void
redisIvykisEvents	deps/hiredis/adapters/ivykis.h	/^typedef struct redisIvykisEvents {$/;"	s
redisIvykisEvents	deps/hiredis/adapters/ivykis.h	/^} redisIvykisEvents;$/;"	t	typeref:struct:redisIvykisEvents
redisIvykisReadEvent	deps/hiredis/adapters/ivykis.h	/^static void redisIvykisReadEvent(void *arg) {$/;"	f	typeref:typename:void
redisIvykisWriteEvent	deps/hiredis/adapters/ivykis.h	/^static void redisIvykisWriteEvent(void *arg) {$/;"	f	typeref:typename:void
redisKeepAlive	deps/hiredis/net.c	/^int redisKeepAlive(redisContext *c, int interval) {$/;"	f	typeref:typename:int
redisLibevAddRead	deps/hiredis/adapters/libev.h	/^static void redisLibevAddRead(void *privdata) {$/;"	f	typeref:typename:void
redisLibevAddWrite	deps/hiredis/adapters/libev.h	/^static void redisLibevAddWrite(void *privdata) {$/;"	f	typeref:typename:void
redisLibevAttach	deps/hiredis/adapters/libev.h	/^static int redisLibevAttach(EV_P_ redisAsyncContext *ac) {$/;"	f	typeref:typename:int
redisLibevCleanup	deps/hiredis/adapters/libev.h	/^static void redisLibevCleanup(void *privdata) {$/;"	f	typeref:typename:void
redisLibevDelRead	deps/hiredis/adapters/libev.h	/^static void redisLibevDelRead(void *privdata) {$/;"	f	typeref:typename:void
redisLibevDelWrite	deps/hiredis/adapters/libev.h	/^static void redisLibevDelWrite(void *privdata) {$/;"	f	typeref:typename:void
redisLibevEvents	deps/hiredis/adapters/libev.h	/^typedef struct redisLibevEvents {$/;"	s
redisLibevEvents	deps/hiredis/adapters/libev.h	/^} redisLibevEvents;$/;"	t	typeref:struct:redisLibevEvents
redisLibevReadEvent	deps/hiredis/adapters/libev.h	/^static void redisLibevReadEvent(EV_P_ ev_io *watcher, int revents) {$/;"	f	typeref:typename:void
redisLibevSetTimeout	deps/hiredis/adapters/libev.h	/^static void redisLibevSetTimeout(void *privdata, struct timeval tv) {$/;"	f	typeref:typename:void
redisLibevStopTimer	deps/hiredis/adapters/libev.h	/^static void redisLibevStopTimer(void *privdata) {$/;"	f	typeref:typename:void
redisLibevTimeout	deps/hiredis/adapters/libev.h	/^static void redisLibevTimeout(EV_P_ ev_timer *timer, int revents) {$/;"	f	typeref:typename:void
redisLibevWriteEvent	deps/hiredis/adapters/libev.h	/^static void redisLibevWriteEvent(EV_P_ ev_io *watcher, int revents) {$/;"	f	typeref:typename:void
redisLibeventAddRead	deps/hiredis/adapters/libevent.h	/^static void redisLibeventAddRead(void *privdata) {$/;"	f	typeref:typename:void
redisLibeventAddWrite	deps/hiredis/adapters/libevent.h	/^static void redisLibeventAddWrite(void *privdata) {$/;"	f	typeref:typename:void
redisLibeventAttach	deps/hiredis/adapters/libevent.h	/^static int redisLibeventAttach(redisAsyncContext *ac, struct event_base *base) {$/;"	f	typeref:typename:int
redisLibeventCleanup	deps/hiredis/adapters/libevent.h	/^static void redisLibeventCleanup(void *privdata) {$/;"	f	typeref:typename:void
redisLibeventDelRead	deps/hiredis/adapters/libevent.h	/^static void redisLibeventDelRead(void *privdata) {$/;"	f	typeref:typename:void
redisLibeventDelWrite	deps/hiredis/adapters/libevent.h	/^static void redisLibeventDelWrite(void *privdata) {$/;"	f	typeref:typename:void
redisLibeventDestroy	deps/hiredis/adapters/libevent.h	/^static void redisLibeventDestroy(redisLibeventEvents *e) {$/;"	f	typeref:typename:void
redisLibeventEvents	deps/hiredis/adapters/libevent.h	/^typedef struct redisLibeventEvents {$/;"	s
redisLibeventEvents	deps/hiredis/adapters/libevent.h	/^} redisLibeventEvents;$/;"	t	typeref:struct:redisLibeventEvents
redisLibeventHandler	deps/hiredis/adapters/libevent.h	/^static void redisLibeventHandler(int fd, short event, void *arg) {$/;"	f	typeref:typename:void
redisLibeventSetTimeout	deps/hiredis/adapters/libevent.h	/^static void redisLibeventSetTimeout(void *privdata, struct timeval tv) {$/;"	f	typeref:typename:void
redisLibeventUpdate	deps/hiredis/adapters/libevent.h	/^static void redisLibeventUpdate(void *privdata, short flag, int isRemove) {$/;"	f	typeref:typename:void
redisLibuvAddRead	deps/hiredis/adapters/libuv.h	/^static void redisLibuvAddRead(void *privdata) {$/;"	f	typeref:typename:void
redisLibuvAddWrite	deps/hiredis/adapters/libuv.h	/^static void redisLibuvAddWrite(void *privdata) {$/;"	f	typeref:typename:void
redisLibuvAttach	deps/hiredis/adapters/libuv.h	/^static int redisLibuvAttach(redisAsyncContext* ac, uv_loop_t* loop) {$/;"	f	typeref:typename:int
redisLibuvCleanup	deps/hiredis/adapters/libuv.h	/^static void redisLibuvCleanup(void *privdata) {$/;"	f	typeref:typename:void
redisLibuvDelRead	deps/hiredis/adapters/libuv.h	/^static void redisLibuvDelRead(void *privdata) {$/;"	f	typeref:typename:void
redisLibuvDelWrite	deps/hiredis/adapters/libuv.h	/^static void redisLibuvDelWrite(void *privdata) {$/;"	f	typeref:typename:void
redisLibuvEvents	deps/hiredis/adapters/libuv.h	/^typedef struct redisLibuvEvents {$/;"	s
redisLibuvEvents	deps/hiredis/adapters/libuv.h	/^} redisLibuvEvents;$/;"	t	typeref:struct:redisLibuvEvents
redisLibuvPoll	deps/hiredis/adapters/libuv.h	/^static void redisLibuvPoll(uv_poll_t* handle, int status, int events) {$/;"	f	typeref:typename:void
redisLrand48	src/rand.c	/^int32_t redisLrand48() {$/;"	f	typeref:typename:int32_t
redisMacOSAddRead	deps/hiredis/adapters/macosx.h	/^static void redisMacOSAddRead(void *privdata) {$/;"	f	typeref:typename:void
redisMacOSAddWrite	deps/hiredis/adapters/macosx.h	/^static void redisMacOSAddWrite(void *privdata) {$/;"	f	typeref:typename:void
redisMacOSAsyncCallback	deps/hiredis/adapters/macosx.h	/^static void redisMacOSAsyncCallback(CFSocketRef __unused s, CFSocketCallBackType callbackType, C/;"	f	typeref:typename:void
redisMacOSAttach	deps/hiredis/adapters/macosx.h	/^static int redisMacOSAttach(redisAsyncContext *redisAsyncCtx, CFRunLoopRef runLoop) {$/;"	f	typeref:typename:int
redisMacOSCleanup	deps/hiredis/adapters/macosx.h	/^static void redisMacOSCleanup(void *privdata) {$/;"	f	typeref:typename:void
redisMacOSDelRead	deps/hiredis/adapters/macosx.h	/^static void redisMacOSDelRead(void *privdata) {$/;"	f	typeref:typename:void
redisMacOSDelWrite	deps/hiredis/adapters/macosx.h	/^static void redisMacOSDelWrite(void *privdata) {$/;"	f	typeref:typename:void
redisMemOverhead	src/server.h	/^struct redisMemOverhead {$/;"	s
redisNetClose	deps/hiredis/net.c	/^void redisNetClose(redisContext *c) {$/;"	f	typeref:typename:void
redisNetRead	deps/hiredis/net.c	/^ssize_t redisNetRead(redisContext *c, char *buf, size_t bufcap) {$/;"	f	typeref:typename:ssize_t
redisNetWrite	deps/hiredis/net.c	/^ssize_t redisNetWrite(redisContext *c) {$/;"	f	typeref:typename:ssize_t
redisNodeFlags	src/cluster.c	/^struct redisNodeFlags {$/;"	s	file:
redisNodeFlagsTable	src/cluster.c	/^static struct redisNodeFlags redisNodeFlagsTable[] = {$/;"	v	typeref:struct:redisNodeFlags[]	file:
redisObject	src/server.h	/^typedef struct redisObject {$/;"	s
redisOp	src/server.h	/^typedef struct redisOp {$/;"	s
redisOp	src/server.h	/^} redisOp;$/;"	t	typeref:struct:redisOp
redisOpArray	src/server.h	/^typedef struct redisOpArray {$/;"	s
redisOpArray	src/server.h	/^} redisOpArray;$/;"	t	typeref:struct:redisOpArray
redisOpArrayAppend	src/server.c	/^int redisOpArrayAppend(redisOpArray *oa, struct redisCommand *cmd, int dbid,$/;"	f	typeref:typename:int
redisOpArrayFree	src/server.c	/^void redisOpArrayFree(redisOpArray *oa) {$/;"	f	typeref:typename:void
redisOpArrayInit	src/server.c	/^void redisOpArrayInit(redisOpArray *oa) {$/;"	f	typeref:typename:void
redisOptions	deps/hiredis/hiredis.h	/^} redisOptions;$/;"	t	typeref:struct:__anon7daed6b50108
redisOutOfMemoryHandler	src/server.c	/^void redisOutOfMemoryHandler(size_t allocation_size) {$/;"	f	typeref:typename:void
redisPopcount	src/bitops.c	/^long long redisPopcount(void *s, long count) {$/;"	f	typeref:typename:long long
redisProcTitleGetVariable	src/server.c	/^static sds redisProcTitleGetVariable(const sds varname, void *arg)$/;"	f	typeref:typename:sds	file:
redisProcessCallbacks	deps/hiredis/async.c	/^void redisProcessCallbacks(redisAsyncContext *ac) {$/;"	f	typeref:typename:void
redisProtocolToLuaType	src/scripting.c	/^char *redisProtocolToLuaType(lua_State *lua, char* reply) {$/;"	f	typeref:typename:char *
redisProtocolToLuaType_Aggregate	src/scripting.c	/^char *redisProtocolToLuaType_Aggregate(lua_State *lua, char *reply, int atype) {$/;"	f	typeref:typename:char *
redisProtocolToLuaType_Bool	src/scripting.c	/^char *redisProtocolToLuaType_Bool(lua_State *lua, char *reply, int tf) {$/;"	f	typeref:typename:char *
redisProtocolToLuaType_Bulk	src/scripting.c	/^char *redisProtocolToLuaType_Bulk(lua_State *lua, char *reply) {$/;"	f	typeref:typename:char *
redisProtocolToLuaType_Double	src/scripting.c	/^char *redisProtocolToLuaType_Double(lua_State *lua, char *reply) {$/;"	f	typeref:typename:char *
redisProtocolToLuaType_Error	src/scripting.c	/^char *redisProtocolToLuaType_Error(lua_State *lua, char *reply) {$/;"	f	typeref:typename:char *
redisProtocolToLuaType_Int	src/scripting.c	/^char *redisProtocolToLuaType_Int(lua_State *lua, char *reply) {$/;"	f	typeref:typename:char *
redisProtocolToLuaType_Null	src/scripting.c	/^char *redisProtocolToLuaType_Null(lua_State *lua, char *reply) {$/;"	f	typeref:typename:char *
redisProtocolToLuaType_Status	src/scripting.c	/^char *redisProtocolToLuaType_Status(lua_State *lua, char *reply) {$/;"	f	typeref:typename:char *
redisPushAutoFree	deps/hiredis/hiredis.c	/^static void redisPushAutoFree(void *privdata, void *reply) {$/;"	f	typeref:typename:void	file:
redisPushFn	deps/hiredis/hiredis.h	/^typedef void (redisPushFn)(void *, void *);$/;"	t	typeref:typename:void ()(void *,void *)
redisReadTask	deps/hiredis/read.h	/^typedef struct redisReadTask {$/;"	s
redisReadTask	deps/hiredis/read.h	/^} redisReadTask;$/;"	t	typeref:struct:redisReadTask
redisReader	deps/hiredis/read.h	/^typedef struct redisReader {$/;"	s
redisReader	deps/hiredis/read.h	/^} redisReader;$/;"	t	typeref:struct:redisReader
redisReaderCreate	deps/hiredis/hiredis.c	/^redisReader *redisReaderCreate(void) {$/;"	f	typeref:typename:redisReader *
redisReaderCreateWithFunctions	deps/hiredis/read.c	/^redisReader *redisReaderCreateWithFunctions(redisReplyObjectFunctions *fn) {$/;"	f	typeref:typename:redisReader *
redisReaderFeed	deps/hiredis/read.c	/^int redisReaderFeed(redisReader *r, const char *buf, size_t len) {$/;"	f	typeref:typename:int
redisReaderFree	deps/hiredis/read.c	/^void redisReaderFree(redisReader *r) {$/;"	f	typeref:typename:void
redisReaderGetError	deps/hiredis/read.h	/^#define redisReaderGetError(/;"	d
redisReaderGetObject	deps/hiredis/read.h	/^#define redisReaderGetObject(/;"	d
redisReaderGetReply	deps/hiredis/read.c	/^int redisReaderGetReply(redisReader *r, void **reply) {$/;"	f	typeref:typename:int
redisReaderGrow	deps/hiredis/read.c	/^static int redisReaderGrow(redisReader *r) {$/;"	f	typeref:typename:int	file:
redisReaderSetPrivdata	deps/hiredis/read.h	/^#define redisReaderSetPrivdata(/;"	d
redisReconnect	deps/hiredis/hiredis.c	/^int redisReconnect(redisContext *c) {$/;"	f	typeref:typename:int
redisReply	deps/hiredis/hiredis.h	/^typedef struct redisReply {$/;"	s
redisReply	deps/hiredis/hiredis.h	/^} redisReply;$/;"	t	typeref:struct:redisReply
redisReplyObjectFunctions	deps/hiredis/read.h	/^typedef struct redisReplyObjectFunctions {$/;"	s
redisReplyObjectFunctions	deps/hiredis/read.h	/^} redisReplyObjectFunctions;$/;"	t	typeref:struct:redisReplyObjectFunctions
redisSSL	deps/hiredis/ssl.c	/^typedef struct redisSSL {$/;"	s	file:
redisSSL	deps/hiredis/ssl.c	/^} redisSSL;$/;"	t	typeref:struct:redisSSL	file:
redisSSLAsyncRead	deps/hiredis/ssl.c	/^static void redisSSLAsyncRead(redisAsyncContext *ac) {$/;"	f	typeref:typename:void	file:
redisSSLAsyncWrite	deps/hiredis/ssl.c	/^static void redisSSLAsyncWrite(redisAsyncContext *ac) {$/;"	f	typeref:typename:void	file:
redisSSLConnect	deps/hiredis/ssl.c	/^static int redisSSLConnect(redisContext *c, SSL *ssl) {$/;"	f	typeref:typename:int	file:
redisSSLContext	deps/hiredis/hiredis_ssl.h	/^typedef struct redisSSLContext redisSSLContext;$/;"	t	typeref:struct:redisSSLContext
redisSSLContext	deps/hiredis/ssl.c	/^struct redisSSLContext {$/;"	s	file:
redisSSLContextError	deps/hiredis/hiredis_ssl.h	/^} redisSSLContextError;$/;"	t	typeref:enum:__anon4549dee60103
redisSSLContextGetError	deps/hiredis/ssl.c	/^const char *redisSSLContextGetError(redisSSLContextError error)$/;"	f	typeref:typename:const char *
redisSSLFree	deps/hiredis/ssl.c	/^static void redisSSLFree(void *privctx){$/;"	f	typeref:typename:void	file:
redisSSLRead	deps/hiredis/ssl.c	/^static ssize_t redisSSLRead(redisContext *c, char *buf, size_t bufcap) {$/;"	f	typeref:typename:ssize_t	file:
redisSSLWrite	deps/hiredis/ssl.c	/^static ssize_t redisSSLWrite(redisContext *c) {$/;"	f	typeref:typename:ssize_t	file:
redisServer	src/server.h	/^struct redisServer {$/;"	s
redisSetBlocking	deps/hiredis/net.c	/^static int redisSetBlocking(redisContext *c, int blocking) {$/;"	f	typeref:typename:int	file:
redisSetCpuAffinity	src/server.c	/^void redisSetCpuAffinity(const char *cpulist) {$/;"	f	typeref:typename:void
redisSetProcTitle	src/server.c	/^int redisSetProcTitle(char *title) {$/;"	f	typeref:typename:int
redisSetPushCallback	deps/hiredis/hiredis.c	/^redisPushFn *redisSetPushCallback(redisContext *c, redisPushFn *fn) {$/;"	f	typeref:typename:redisPushFn *
redisSetReuseAddr	deps/hiredis/net.c	/^static int redisSetReuseAddr(redisContext *c) {$/;"	f	typeref:typename:int	file:
redisSetTcpNoDelay	deps/hiredis/net.c	/^int redisSetTcpNoDelay(redisContext *c) {$/;"	f	typeref:typename:int
redisSetTimeout	deps/hiredis/hiredis.c	/^int redisSetTimeout(redisContext *c, const struct timeval tv) {$/;"	f	typeref:typename:int
redisSortObject	src/server.h	/^} redisSortObject;$/;"	t	typeref:struct:_redisSortObject
redisSortOperation	src/server.h	/^} redisSortOperation;$/;"	t	typeref:struct:_redisSortOperation
redisSrand48	src/rand.c	/^void redisSrand48(int32_t seedval) {$/;"	f	typeref:typename:void
redisSupervisedSystemd	src/server.c	/^static int redisSupervisedSystemd(void) {$/;"	f	typeref:typename:int	file:
redisSupervisedUpstart	src/server.c	/^static int redisSupervisedUpstart(void) {$/;"	f	typeref:typename:int	file:
redisTLSContextConfig	src/server.h	/^typedef struct redisTLSContextConfig {$/;"	s
redisTLSContextConfig	src/server.h	/^} redisTLSContextConfig;$/;"	t	typeref:struct:redisTLSContextConfig
redisTest	src/server.c	/^struct redisTest {$/;"	s	file:
redisTests	src/server.c	/^} redisTests[] = {$/;"	v	typeref:struct:redisTest[]
redisTimerCallback	deps/hiredis/async.h	/^typedef void(redisTimerCallback)(void *timer, void *privdata);$/;"	t	typeref:typename:void ()(void * timer,void * privdata)
redis_check_aof_main	src/redis-check-aof.c	/^int redis_check_aof_main(int argc, char **argv) {$/;"	f	typeref:typename:int
redis_check_rdb	src/redis-check-rdb.c	/^int redis_check_rdb(char *rdbfilename, FILE *fp) {$/;"	f	typeref:typename:int
redis_check_rdb_main	src/redis-check-rdb.c	/^int redis_check_rdb_main(int argc, char **argv, FILE *fp) {$/;"	f	typeref:typename:int
redis_config	src/redis-benchmark.c	/^    struct redisConfig *redis_config;$/;"	m	struct:clusterNode	typeref:struct:redisConfig *	file:
redis_config	src/redis-benchmark.c	/^    struct redisConfig *redis_config;$/;"	m	struct:config	typeref:struct:redisConfig *	file:
redis_fstat	src/config.h	/^#define redis_fstat /;"	d
redis_fsync	src/config.h	/^#define redis_fsync /;"	d
redis_math_random	src/scripting.c	/^int redis_math_random (lua_State *L) {$/;"	f	typeref:typename:int
redis_math_randomseed	src/scripting.c	/^int redis_math_randomseed (lua_State *L) {$/;"	f	typeref:typename:int
redis_set_thread_title	src/config.h	/^#define redis_set_thread_title(/;"	d
redis_source_add_read	deps/hiredis/adapters/glib.h	/^redis_source_add_read (gpointer data)$/;"	f	typeref:typename:void
redis_source_add_write	deps/hiredis/adapters/glib.h	/^redis_source_add_write (gpointer data)$/;"	f	typeref:typename:void
redis_source_check	deps/hiredis/adapters/glib.h	/^redis_source_check (GSource *source)$/;"	f	typeref:typename:gboolean
redis_source_cleanup	deps/hiredis/adapters/glib.h	/^redis_source_cleanup (gpointer data)$/;"	f	typeref:typename:void
redis_source_del_read	deps/hiredis/adapters/glib.h	/^redis_source_del_read (gpointer data)$/;"	f	typeref:typename:void
redis_source_del_write	deps/hiredis/adapters/glib.h	/^redis_source_del_write (gpointer data)$/;"	f	typeref:typename:void
redis_source_dispatch	deps/hiredis/adapters/glib.h	/^redis_source_dispatch (GSource      *source,$/;"	f	typeref:typename:gboolean
redis_source_finalize	deps/hiredis/adapters/glib.h	/^redis_source_finalize (GSource *source)$/;"	f	typeref:typename:void
redis_source_new	deps/hiredis/adapters/glib.h	/^redis_source_new (redisAsyncContext *ac)$/;"	f	typeref:typename:GSource *
redis_source_prepare	deps/hiredis/adapters/glib.h	/^redis_source_prepare (GSource *source,$/;"	f	typeref:typename:gboolean
redis_stat	src/config.h	/^#define redis_stat /;"	d
redis_tls_client_ctx	src/tls.c	/^SSL_CTX *redis_tls_client_ctx = NULL;$/;"	v	typeref:typename:SSL_CTX *
redis_tls_ctx	src/tls.c	/^SSL_CTX *redis_tls_ctx = NULL;$/;"	v	typeref:typename:SSL_CTX *
redis_unreachable	src/config.h	/^#define redis_unreachable /;"	d
rediscmd	src/module.c	/^    struct redisCommand *rediscmd;$/;"	m	struct:RedisModuleCommandProxy	typeref:struct:redisCommand *	file:
redisvAppendCommand	deps/hiredis/hiredis.c	/^int redisvAppendCommand(redisContext *c, const char *format, va_list ap) {$/;"	f	typeref:typename:int
redisvAsyncCommand	deps/hiredis/async.c	/^int redisvAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *f/;"	f	typeref:typename:int
redisvCommand	deps/hiredis/hiredis.c	/^void *redisvCommand(redisContext *c, const char *format, va_list ap) {$/;"	f	typeref:typename:void *
redisvFormatCommand	deps/hiredis/hiredis.c	/^int redisvFormatCommand(char **target, const char *format, va_list ap) {$/;"	f	typeref:typename:int
reentrancy	deps/jemalloc/test/src/test.c	/^static reentrancy_t reentrancy;$/;"	v	typeref:typename:reentrancy_t	file:
reentrancy_t	deps/jemalloc/test/src/test.c	/^} reentrancy_t;$/;"	t	typeref:enum:__anon309c720d0103	file:
reentrancy_t_str	deps/jemalloc/test/src/test.c	/^reentrancy_t_str(reentrancy_t r) {$/;"	f	typeref:typename:const char *	file:
refcount	src/ae.h	/^    int refcount; \/* refcount to prevent timer events from being$/;"	m	struct:aeTimeEvent	typeref:typename:int
refcount	src/sentinel.c	/^    int refcount;          \/* Number of sentinelRedisInstance owners. *\/$/;"	m	struct:instanceLink	typeref:typename:int	file:
refcount	src/server.h	/^    int refcount;$/;"	m	struct:redisObject	typeref:typename:int
refreshGoodSlavesCount	src/replication.c	/^void refreshGoodSlavesCount(void) {$/;"	f	typeref:typename:void
refreshLine	deps/linenoise/linenoise.c	/^static void refreshLine(struct linenoiseState *l) {$/;"	f	typeref:typename:void	file:
refreshMultiLine	deps/linenoise/linenoise.c	/^static void refreshMultiLine(struct linenoiseState *l) {$/;"	f	typeref:typename:void	file:
refreshShowHints	deps/linenoise/linenoise.c	/^void refreshShowHints(struct abuf *ab, struct linenoiseState *l, int plen) {$/;"	f	typeref:typename:void
refreshSingleLine	deps/linenoise/linenoise.c	/^static void refreshSingleLine(struct linenoiseState *l) {$/;"	f	typeref:typename:void	file:
refreshTimeout	deps/hiredis/async_private.h	/^static inline void refreshTimeout(redisAsyncContext *ctx) {$/;"	f	typeref:typename:void
refs	src/connection.h	/^    short int refs;$/;"	m	struct:connection	typeref:typename:short int
reg_size	deps/jemalloc/include/jemalloc/internal/bin.h	/^	size_t			reg_size;$/;"	m	struct:bin_info_s	typeref:typename:size_t
registerSSLEvent	src/tls.c	/^void registerSSLEvent(tls_connection *conn, WantIOType want) {$/;"	f	typeref:typename:void
registerlocalvar	deps/lua/src/lparser.c	/^static int registerlocalvar (LexState *ls, TString *varname) {$/;"	f	typeref:typename:int	file:
registers	src/hyperloglog.c	/^    uint8_t registers[]; \/* Data bytes. *\/$/;"	m	struct:hllhdr	typeref:typename:uint8_t[]	file:
registry	deps/lua/src/lstate.h	/^#define registry(/;"	d
rehash	deps/lua/src/ltable.c	/^static void rehash (lua_State *L, Table *t, const TValue *ek) {$/;"	f	typeref:typename:void	file:
rehashidx	src/dict.h	/^    long rehashidx; \/* rehashing not in progress if rehashidx == -1 *\/$/;"	m	struct:dict	typeref:typename:long
reinit_lock	deps/jemalloc/src/zone.c	/^	void (*reinit_lock)(malloc_zone_t *);$/;"	m	struct:malloc_introspection_t	typeref:typename:void (*)(malloc_zone_t *)	file:
rejectCommand	src/server.c	/^void rejectCommand(client *c, robj *reply) {$/;"	f	typeref:typename:void
rejectCommandFormat	src/server.c	/^void rejectCommandFormat(client *c, const char *fmt, ...) {$/;"	f	typeref:typename:void
rejected_calls	src/server.h	/^    long long microseconds, calls, rejected_calls, failed_calls;$/;"	m	struct:redisCommand	typeref:typename:long long
relclean	deps/jemalloc/Makefile	/^relclean: distclean$/;"	t
relclean	deps/jemalloc/Makefile.in	/^relclean: distclean$/;"	t
releaseInstanceLink	src/sentinel.c	/^instanceLink *releaseInstanceLink(instanceLink *link, sentinelRedisInstance *ri)$/;"	f	typeref:typename:instanceLink *
releaseSentinelAddr	src/sentinel.c	/^void releaseSentinelAddr(sentinelAddr *sa) {$/;"	f	typeref:typename:void
releaseSentinelRedisInstance	src/sentinel.c	/^void releaseSentinelRedisInstance(sentinelRedisInstance *ri) {$/;"	f	typeref:typename:void
release_hdr	src/Makefile	/^release_hdr := $(shell sh -c '.\/mkreleasehdr.sh')$/;"	m
remarkupvals	deps/lua/src/lgc.c	/^static void remarkupvals (global_State *g) {$/;"	f	typeref:typename:void	file:
rememberSlaveKeyWithExpire	src/expire.c	/^void rememberSlaveKeyWithExpire(redisDb *db, robj *key) {$/;"	f	typeref:typename:void
removeClientFromTimeoutTable	src/timeout.c	/^void removeClientFromTimeoutTable(client *c) {$/;"	f	typeref:typename:void
removeExpire	src/db.c	/^int removeExpire(redisDb *db, robj *key) {$/;"	f	typeref:typename:int
removeMatchingSentinelFromMaster	src/sentinel.c	/^int removeMatchingSentinelFromMaster(sentinelRedisInstance *master, char *runid) {$/;"	f	typeref:typename:int
removeRDBUsedToSyncReplicas	src/replication.c	/^void removeRDBUsedToSyncReplicas(void) {$/;"	f	typeref:typename:void
removeSignalHandlers	src/server.c	/^void removeSignalHandlers(void) {$/;"	f	typeref:typename:void
remove_iterate_cb	deps/jemalloc/test/unit/rb.c	/^remove_iterate_cb(tree_t *tree, node_t *node, void *data) {$/;"	f	typeref:typename:node_t *	file:
remove_reverse_iterate_cb	deps/jemalloc/test/unit/rb.c	/^remove_reverse_iterate_cb(tree_t *tree, node_t *node, void *data) {$/;"	f	typeref:typename:node_t *	file:
removeentry	deps/lua/src/lgc.c	/^static void removeentry (Node *n) {$/;"	f	typeref:typename:void	file:
removevalues	deps/lua/src/lcode.c	/^static void removevalues (FuncState *fs, int list) {$/;"	f	typeref:typename:void	file:
removevars	deps/lua/src/lparser.c	/^static void removevars (LexState *ls, int tolevel) {$/;"	f	typeref:typename:void	file:
renameCommand	src/db.c	/^void renameCommand(client *c) {$/;"	f	typeref:typename:void
renameGenericCommand	src/db.c	/^void renameGenericCommand(client *c, int nx) {$/;"	f	typeref:typename:void
renamedCommandsDictType	src/sentinel.c	/^dictType renamedCommandsDictType = {$/;"	v	typeref:typename:dictType
renamed_commands	src/sentinel.c	/^    dict *renamed_commands;     \/* Commands renamed in this instance:$/;"	m	struct:sentinelRedisInstance	typeref:typename:dict *	file:
renamenxCommand	src/db.c	/^void renamenxCommand(client *c) {$/;"	f	typeref:typename:void
renderCanvas	src/lolwut5.c	/^static sds renderCanvas(lwCanvas *canvas) {$/;"	f	typeref:typename:sds	file:
renderCanvas	src/lolwut6.c	/^static sds renderCanvas(lwCanvas *canvas) {$/;"	f	typeref:typename:sds	file:
repeat	src/redis-cli.c	/^    long repeat;$/;"	m	struct:config	typeref:typename:long	file:
repeatstat	deps/lua/src/lparser.c	/^static void repeatstat (LexState *ls, int line) {$/;"	f	typeref:typename:void	file:
repl	src/redis-cli.c	/^static void repl(void) {$/;"	f	typeref:typename:void	file:
repl1_offset	src/redismodule.h	/^    uint64_t repl1_offset;  \/* Main replication offset *\/$/;"	m	struct:RedisModuleReplicationInfo	typeref:typename:uint64_t
repl2_offset	src/redismodule.h	/^    uint64_t repl2_offset;  \/* Offset of replid2 validity *\/$/;"	m	struct:RedisModuleReplicationInfo	typeref:typename:uint64_t
replBackupCallback	tests/modules/testrdb.c	/^void replBackupCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f	typeref:typename:void
replScriptCacheDictType	src/server.c	/^dictType replScriptCacheDictType = {$/;"	v	typeref:typename:dictType
repl_ack_off	src/server.h	/^    long long repl_ack_off; \/* Replication ack offset, if this is a slave. *\/$/;"	m	struct:client	typeref:typename:long long
repl_ack_time	src/server.h	/^    long long repl_ack_time;\/* Replication ack time, if this is a slave. *\/$/;"	m	struct:client	typeref:typename:long long
repl_backlog	src/server.h	/^    char *repl_backlog;             \/* Replication backlog for partial syncs *\/$/;"	m	struct:redisServer	typeref:typename:char *
repl_backlog	src/server.h	/^    size_t repl_backlog;$/;"	m	struct:redisMemOverhead	typeref:typename:size_t
repl_backlog_histlen	src/server.h	/^    long long repl_backlog_histlen; \/* Backlog actual data length *\/$/;"	m	struct:redisServer	typeref:typename:long long
repl_backlog_idx	src/server.h	/^    long long repl_backlog_idx;     \/* Backlog circular buffer current offset,$/;"	m	struct:redisServer	typeref:typename:long long
repl_backlog_off	src/server.h	/^    long long repl_backlog_off;     \/* Replication "master offset" of first$/;"	m	struct:redisServer	typeref:typename:long long
repl_backlog_size	src/server.h	/^    long long repl_backlog_size;    \/* Backlog circular buffer size *\/$/;"	m	struct:redisServer	typeref:typename:long long
repl_backlog_time_limit	src/server.h	/^    time_t repl_backlog_time_limit; \/* Time without slaves after the backlog$/;"	m	struct:redisServer	typeref:typename:time_t
repl_disable_tcp_nodelay	src/server.h	/^    int repl_disable_tcp_nodelay;   \/* Disable TCP_NODELAY after SYNC? *\/$/;"	m	struct:redisServer	typeref:typename:int
repl_diskless_load	src/server.h	/^    int repl_diskless_load;         \/* Slave parse RDB directly from the socket.$/;"	m	struct:redisServer	typeref:typename:int
repl_diskless_load_enum	src/config.c	/^configEnum repl_diskless_load_enum[] = {$/;"	v	typeref:typename:configEnum[]
repl_diskless_sync	src/server.h	/^    int repl_diskless_sync;         \/* Master send RDB to slaves sockets directly. *\/$/;"	m	struct:redisServer	typeref:typename:int
repl_diskless_sync_delay	src/server.h	/^    int repl_diskless_sync_delay;   \/* Delay to start a diskless repl BGSAVE. *\/$/;"	m	struct:redisServer	typeref:typename:int
repl_down_since	src/server.h	/^    time_t repl_down_since; \/* Unix time at which link with master went down *\/$/;"	m	struct:redisServer	typeref:typename:time_t
repl_good_slaves_count	src/server.h	/^    int repl_good_slaves_count;     \/* Number of slaves with lag <= max_lag. *\/$/;"	m	struct:redisServer	typeref:typename:int
repl_id	src/server.h	/^    char repl_id[CONFIG_RUN_ID_SIZE+1];     \/* Replication ID. *\/$/;"	m	struct:rdbSaveInfo	typeref:typename:char[]
repl_id_is_set	src/server.h	/^    int repl_id_is_set;  \/* True if repl_id field is set. *\/$/;"	m	struct:rdbSaveInfo	typeref:typename:int
repl_last_partial_write	src/server.h	/^    long long repl_last_partial_write; \/* The last time the server did a partial write from the/;"	m	struct:client	typeref:typename:long long
repl_min_slaves_max_lag	src/server.h	/^    int repl_min_slaves_max_lag;    \/* Max lag of <count> slaves to write. *\/$/;"	m	struct:redisServer	typeref:typename:int
repl_min_slaves_to_write	src/server.h	/^    int repl_min_slaves_to_write;   \/* Min number of slaves to write. *\/$/;"	m	struct:redisServer	typeref:typename:int
repl_no_slaves_since	src/server.h	/^    time_t repl_no_slaves_since;    \/* We have no slaves since that time.$/;"	m	struct:redisServer	typeref:typename:time_t
repl_offset	src/cluster.h	/^    long long repl_offset;      \/* Last known repl offset for this node. *\/$/;"	m	struct:clusterNode	typeref:typename:long long
repl_offset	src/server.h	/^    long long repl_offset;                  \/* Replication offset. *\/$/;"	m	struct:rdbSaveInfo	typeref:typename:long long
repl_offset_time	src/cluster.h	/^    mstime_t repl_offset_time;  \/* Unix time we received offset for this node *\/$/;"	m	struct:clusterNode	typeref:typename:mstime_t
repl_ping_slave_period	src/server.h	/^    int repl_ping_slave_period;     \/* Master pings the slave every N seconds *\/$/;"	m	struct:redisServer	typeref:typename:int
repl_put_online_on_ack	src/server.h	/^    int repl_put_online_on_ack; \/* Install slave write handler on first ACK. *\/$/;"	m	struct:client	typeref:typename:int
repl_scriptcache_dict	src/server.h	/^    dict *repl_scriptcache_dict;        \/* SHA1 all slaves are aware of. *\/$/;"	m	struct:redisServer	typeref:typename:dict *
repl_scriptcache_fifo	src/server.h	/^    list *repl_scriptcache_fifo;        \/* First in, first out LRU eviction. *\/$/;"	m	struct:redisServer	typeref:typename:list *
repl_scriptcache_size	src/server.h	/^    unsigned int repl_scriptcache_size; \/* Max number of elements. *\/$/;"	m	struct:redisServer	typeref:typename:unsigned int
repl_serve_stale_data	src/server.h	/^    int repl_serve_stale_data; \/* Serve stale data when link is down? *\/$/;"	m	struct:redisServer	typeref:typename:int
repl_slave_ignore_maxmemory	src/server.h	/^    int repl_slave_ignore_maxmemory;    \/* If true slaves do not evict. *\/$/;"	m	struct:redisServer	typeref:typename:int
repl_slave_lazy_flush	src/server.h	/^    int repl_slave_lazy_flush;          \/* Lazy FLUSHALL before loading DB? *\/$/;"	m	struct:redisServer	typeref:typename:int
repl_slave_ro	src/server.h	/^    int repl_slave_ro;          \/* Slave is read only? *\/$/;"	m	struct:redisServer	typeref:typename:int
repl_state	src/server.h	/^    int repl_state;          \/* Replication status if the instance is a slave *\/$/;"	m	struct:redisServer	typeref:typename:int
repl_state	src/server.h	/^} repl_state;$/;"	t	typeref:enum:__anon3ef696e90103
repl_stream_db	src/server.h	/^    int repl_stream_db;  \/* DB to select in server.master client. *\/$/;"	m	struct:rdbSaveInfo	typeref:typename:int
repl_syncio_timeout	src/server.h	/^    int repl_syncio_timeout; \/* Timeout for synchronous I\/O calls *\/$/;"	m	struct:redisServer	typeref:typename:int
repl_timeout	src/server.h	/^    int repl_timeout;               \/* Timeout after N seconds of master idle *\/$/;"	m	struct:redisServer	typeref:typename:int
repl_transfer_fd	src/server.h	/^    int repl_transfer_fd;    \/* Slave -> Master SYNC temp file descriptor *\/$/;"	m	struct:redisServer	typeref:typename:int
repl_transfer_last_fsync_off	src/server.h	/^    off_t repl_transfer_last_fsync_off; \/* Offset when we fsync-ed last time. *\/$/;"	m	struct:redisServer	typeref:typename:off_t
repl_transfer_lastio	src/server.h	/^    time_t repl_transfer_lastio; \/* Unix time of the latest read, for timeout *\/$/;"	m	struct:redisServer	typeref:typename:time_t
repl_transfer_read	src/server.h	/^    off_t repl_transfer_read; \/* Amount of RDB read from master during sync. *\/$/;"	m	struct:redisServer	typeref:typename:off_t
repl_transfer_s	src/server.h	/^    connection *repl_transfer_s;     \/* Slave -> Master SYNC connection *\/$/;"	m	struct:redisServer	typeref:typename:connection *
repl_transfer_size	src/server.h	/^    off_t repl_transfer_size; \/* Size of RDB to read from master during sync. *\/$/;"	m	struct:redisServer	typeref:typename:off_t
repl_transfer_tmpfile	src/server.h	/^    char *repl_transfer_tmpfile; \/* Slave-> master SYNC temp file name *\/$/;"	m	struct:redisServer	typeref:typename:char *
replaceClientCommandVector	src/networking.c	/^void replaceClientCommandVector(client *c, int argc, robj **argv) {$/;"	f	typeref:typename:void
replaceSatelliteDictKeyPtrAndOrDefragDictEntry	src/defrag.c	/^dictEntry* replaceSatelliteDictKeyPtrAndOrDefragDictEntry(dict *d, sds oldkey, sds newkey, uint6/;"	f	typeref:typename:dictEntry *
replconf	src/server.h	/^    *script, *replconf, *eval, *persist, *set, *pexpireat, *pexpire, $/;"	m	struct:sharedObjectsStruct
replconfCommand	src/replication.c	/^void replconfCommand(client *c) {$/;"	f	typeref:typename:void
repldbfd	src/server.h	/^    int repldbfd;           \/* Replication DB file descriptor. *\/$/;"	m	struct:client	typeref:typename:int
repldboff	src/server.h	/^    off_t repldboff;        \/* Replication DB file offset. *\/$/;"	m	struct:client	typeref:typename:off_t
repldbsize	src/server.h	/^    off_t repldbsize;       \/* Replication DB file size. *\/$/;"	m	struct:client	typeref:typename:off_t
replica_announced	src/sentinel.c	/^    int replica_announced; \/* Replica announcing according to its INFO output. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:int	file:
replica_announced	src/server.h	/^    int replica_announced;          \/* If true, replica is announced by Sentinel *\/$/;"	m	struct:redisServer	typeref:typename:int
replicaofCommand	src/replication.c	/^void replicaofCommand(client *c) {$/;"	f	typeref:typename:void
replicas	src/redis-cli.c	/^    int replicas;$/;"	m	struct:clusterManagerCommand	typeref:typename:int	file:
replicas_count	src/redis-benchmark.c	/^    int replicas_count;$/;"	m	struct:clusterNode	typeref:typename:int	file:
replicas_count	src/redis-cli.c	/^    int replicas_count;$/;"	m	struct:clusterManagerNode	typeref:typename:int	file:
replicate	src/redis-benchmark.c	/^    sds replicate;  \/* Master ID if node is a slave *\/$/;"	m	struct:clusterNode	typeref:typename:sds	file:
replicate	src/redis-cli.c	/^    sds replicate;  \/* Master ID if node is a slave *\/$/;"	m	struct:clusterManagerNode	typeref:typename:sds	file:
replicationAbortSyncTransfer	src/replication.c	/^void replicationAbortSyncTransfer(void) {$/;"	f	typeref:typename:void
replicationCacheMaster	src/replication.c	/^void replicationCacheMaster(client *c) {$/;"	f	typeref:typename:void
replicationCacheMasterUsingMyself	src/replication.c	/^void replicationCacheMasterUsingMyself(void) {$/;"	f	typeref:typename:void
replicationChangeCallback	tests/modules/hooks.c	/^void replicationChangeCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data/;"	f	typeref:typename:void
replicationCountAcksByOffset	src/replication.c	/^int replicationCountAcksByOffset(long long offset) {$/;"	f	typeref:typename:int
replicationCreateMasterClient	src/replication.c	/^void replicationCreateMasterClient(connection *conn, int dbid) {$/;"	f	typeref:typename:void
replicationCron	src/replication.c	/^void replicationCron(void) {$/;"	f	typeref:typename:void
replicationDiscardCachedMaster	src/replication.c	/^void replicationDiscardCachedMaster(void) {$/;"	f	typeref:typename:void
replicationEmptyDbCallback	src/replication.c	/^void replicationEmptyDbCallback(void *privdata) {$/;"	f	typeref:typename:void
replicationFeedMonitors	src/replication.c	/^void replicationFeedMonitors(client *c, list *monitors, int dictid, robj **argv, int argc) {$/;"	f	typeref:typename:void
replicationFeedSlaves	src/replication.c	/^void replicationFeedSlaves(list *slaves, int dictid, robj **argv, int argc) {$/;"	f	typeref:typename:void
replicationFeedSlavesFromMasterStream	src/replication.c	/^void replicationFeedSlavesFromMasterStream(list *slaves, char *buf, size_t buflen) {$/;"	f	typeref:typename:void
replicationGetSlaveName	src/replication.c	/^char *replicationGetSlaveName(client *c) {$/;"	f	typeref:typename:char *
replicationGetSlaveOffset	src/replication.c	/^long long replicationGetSlaveOffset(void) {$/;"	f	typeref:typename:long long
replicationHandleMasterDisconnection	src/replication.c	/^void replicationHandleMasterDisconnection(void) {$/;"	f	typeref:typename:void
replicationRequestAckFromSlaves	src/replication.c	/^void replicationRequestAckFromSlaves(void) {$/;"	f	typeref:typename:void
replicationResurrectCachedMaster	src/replication.c	/^void replicationResurrectCachedMaster(connection *conn) {$/;"	f	typeref:typename:void
replicationScriptCacheAdd	src/replication.c	/^void replicationScriptCacheAdd(sds sha1) {$/;"	f	typeref:typename:void
replicationScriptCacheExists	src/replication.c	/^int replicationScriptCacheExists(sds sha1) {$/;"	f	typeref:typename:int
replicationScriptCacheFlush	src/replication.c	/^void replicationScriptCacheFlush(void) {$/;"	f	typeref:typename:void
replicationScriptCacheInit	src/replication.c	/^void replicationScriptCacheInit(void) {$/;"	f	typeref:typename:void
replicationSendAck	src/replication.c	/^void replicationSendAck(void) {$/;"	f	typeref:typename:void
replicationSendNewlineToMaster	src/replication.c	/^void replicationSendNewlineToMaster(void) {$/;"	f	typeref:typename:void
replicationSetMaster	src/replication.c	/^void replicationSetMaster(char *ip, int port) {$/;"	f	typeref:typename:void
replicationSetupSlaveForFullResync	src/replication.c	/^int replicationSetupSlaveForFullResync(client *slave, long long offset) {$/;"	f	typeref:typename:int
replicationStartPendingFork	src/replication.c	/^void replicationStartPendingFork(void) {$/;"	f	typeref:typename:void
replicationUnsetMaster	src/replication.c	/^void replicationUnsetMaster(void) {$/;"	f	typeref:typename:void
replication_allowed	src/server.h	/^    int replication_allowed;        \/* Are we allowed to replicate? *\/$/;"	m	struct:redisServer	typeref:typename:int
replid	src/server.h	/^    char replid[CONFIG_RUN_ID_SIZE+1];  \/* My current replication ID. *\/$/;"	m	struct:redisServer	typeref:typename:char[]
replid	src/server.h	/^    char replid[CONFIG_RUN_ID_SIZE+1]; \/* Master replication ID (if master). *\/$/;"	m	struct:client	typeref:typename:char[]
replid1	src/redismodule.h	/^    char *replid1;          \/* Main replication ID *\/$/;"	m	struct:RedisModuleReplicationInfo	typeref:typename:char *
replid2	src/redismodule.h	/^    char *replid2;          \/* Secondary replication ID *\/$/;"	m	struct:RedisModuleReplicationInfo	typeref:typename:char *
replid2	src/server.h	/^    char replid2[CONFIG_RUN_ID_SIZE+1]; \/* replid inherited from master*\/$/;"	m	struct:redisServer	typeref:typename:char[]
replies	deps/hiredis/async.h	/^    redisCallbackList replies;$/;"	m	struct:redisAsyncContext	typeref:typename:redisCallbackList
reploff	src/server.h	/^    long long reploff;      \/* Applied replication offset if this is a master. *\/$/;"	m	struct:client	typeref:typename:long long
reploffset	src/server.h	/^    long long reploffset;   \/* Replication offset to reach. *\/$/;"	m	struct:blockingState	typeref:typename:long long
replpreamble	src/server.h	/^    sds replpreamble;       \/* Replication DB preamble. *\/$/;"	m	struct:client	typeref:typename:sds
replstate	src/server.h	/^    int replstate;          \/* Replication state if this is a slave. *\/$/;"	m	struct:client	typeref:typename:int
reply	deps/hiredis/read.h	/^    void *reply; \/* Temporary reply pointer *\/$/;"	m	struct:redisReader	typeref:typename:void *
reply	src/server.h	/^    list *reply;            \/* List of reply objects to send to the client. *\/$/;"	m	struct:client	typeref:typename:list *
replyToBlockedClientTimedOut	src/blocked.c	/^void replyToBlockedClientTimedOut(client *c) {$/;"	f	typeref:typename:void
reply_bytes	src/server.h	/^    unsigned long long reply_bytes; \/* Tot bytes of objects in reply list. *\/$/;"	m	struct:client	typeref:typename:unsigned long long
reply_callback	src/module.c	/^    RedisModuleCmdFunc reply_callback; \/* Reply callback on normal completion.*\/$/;"	m	struct:RedisModuleBlockedClient	typeref:typename:RedisModuleCmdFunc	file:
reply_client	src/module.c	/^    client *reply_client;           \/* Fake client used to accumulate replies$/;"	m	struct:RedisModuleBlockedClient	typeref:typename:client *	file:
report	deps/lua/src/lua.c	/^static int report (lua_State *L, int status) {$/;"	f	typeref:typename:int	file:
representClusterNodeFlags	src/cluster.c	/^sds representClusterNodeFlags(sds ci, uint16_t flags) {$/;"	f	typeref:typename:sds
reqtype	src/server.h	/^    int reqtype;            \/* Request protocol type: PROTO_REQ_* *\/$/;"	m	struct:client	typeref:typename:int
requested_section	src/module.c	/^    const char *requested_section;$/;"	m	struct:RedisModuleInfoCtx	typeref:typename:const char *	file:
requests	src/redis-benchmark.c	/^    int requests;$/;"	m	struct:config	typeref:typename:int	file:
requests_finished	src/redis-benchmark.c	/^    redisAtomic int requests_finished;$/;"	m	struct:config	typeref:typename:redisAtomic int	file:
requests_issued	src/redis-benchmark.c	/^    redisAtomic int requests_issued;$/;"	m	struct:config	typeref:typename:redisAtomic int	file:
requirepass	src/server.h	/^    sds requirepass;              \/* Remember the cleartext password set with$/;"	m	struct:redisServer	typeref:typename:sds
reserved	deps/lua/src/lobject.h	/^    lu_byte reserved;$/;"	m	struct:TString::__anona52fc9410208	typeref:typename:lu_byte
reserved1	deps/jemalloc/src/zone.c	/^	void *reserved1;$/;"	m	struct:_malloc_zone_t	typeref:typename:void *	file:
reserved2	deps/jemalloc/src/zone.c	/^	void *reserved2;$/;"	m	struct:_malloc_zone_t	typeref:typename:void *	file:
reset	src/setproctitle.c	/^	_Bool reset;$/;"	m	struct:__anon6a58858f0108	typeref:typename:_Bool	file:
reset2bits	deps/lua/src/lgc.h	/^#define reset2bits(/;"	d
resetChildState	src/server.c	/^void resetChildState() {$/;"	f	typeref:typename:void
resetClient	src/networking.c	/^void resetClient(client *c) {$/;"	f	typeref:typename:void
resetClient	src/redis-benchmark.c	/^static void resetClient(client c) {$/;"	f	typeref:typename:void	file:
resetCommand	src/networking.c	/^void resetCommand(client *c) {$/;"	f	typeref:typename:void
resetCommandTableStats	src/server.c	/^void resetCommandTableStats(void) {$/;"	f	typeref:typename:void
resetErrorTableStats	src/server.c	/^void resetErrorTableStats(void) {$/;"	f	typeref:typename:void
resetEventMask	src/ae_kqueue.c	/^static inline void resetEventMask(char *eventsMask, int fd) {$/;"	f	typeref:typename:void	file:
resetLuaClient	src/scripting.c	/^void resetLuaClient(void) {$/;"	f	typeref:typename:void
resetManualFailover	src/cluster.c	/^void resetManualFailover(void) {$/;"	f	typeref:typename:void
resetServerSaveParams	src/config.c	/^void resetServerSaveParams(void) {$/;"	f	typeref:typename:void
resetServerStats	src/server.c	/^void resetServerStats(void) {$/;"	f	typeref:typename:void
resetbit	deps/lua/src/lgc.h	/^#define resetbit(/;"	d
resetbits	deps/lua/src/lgc.h	/^#define resetbits(/;"	d
resethookcount	deps/lua/src/ldebug.h	/^#define resethookcount(/;"	d
resetstack	deps/lua/src/ldo.c	/^static void resetstack (lua_State *L, int status) {$/;"	f	typeref:typename:void	file:
resident	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	atomic_zu_t		resident; \/* Derived. *\/$/;"	m	struct:arena_stats_s	typeref:typename:atomic_zu_t
resident	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	size_t		resident;$/;"	m	struct:base_s	typeref:typename:size_t
resident	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t resident;$/;"	m	struct:ctl_stats_s	typeref:typename:size_t
resize	deps/lua/src/ltable.c	/^static void resize (lua_State *L, Table *t, int nasize, int nhsize) {$/;"	f	typeref:typename:void	file:
resizeReplicationBacklog	src/replication.c	/^void resizeReplicationBacklog(long long newsize) {$/;"	f	typeref:typename:void
reslabs	deps/jemalloc/include/jemalloc/internal/bin_stats.h	/^	uint64_t	reslabs;$/;"	m	struct:bin_stats_s	typeref:typename:uint64_t
resolve_hostnames	src/sentinel.c	/^    int resolve_hostnames;       \/* Support use of hostnames, assuming DNS is well configured. /;"	m	struct:sentinelState	typeref:typename:int	file:
resp	src/server.h	/^    int resp;               \/* RESP protocol version. Can be 2 or 3. *\/$/;"	m	struct:client	typeref:typename:int
resp3	src/redis-cli.c	/^    int resp3;$/;"	m	struct:config	typeref:typename:int	file:
restartAOFAfterSYNC	src/replication.c	/^void restartAOFAfterSYNC() {$/;"	f	typeref:typename:void
restartServer	src/server.c	/^int restartServer(int flags, mstime_t delay) {$/;"	f	typeref:typename:int
restoreCommand	src/cluster.c	/^void restoreCommand(client *c) {$/;"	f	typeref:typename:void
restoreDbBackup	src/db.c	/^void restoreDbBackup(dbBackup *buckup) {$/;"	f	typeref:typename:void
restore_stack_limit	deps/lua/src/ldo.c	/^static void restore_stack_limit (lua_State *L) {$/;"	f	typeref:typename:void	file:
restoreci	deps/lua/src/ldo.h	/^#define restoreci(/;"	d
restorestack	deps/lua/src/ldo.h	/^#define restorestack(/;"	d
restrict	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	/^#    define restrict /;"	d
restrict	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_macros.h	/^#  define restrict$/;"	d
result	deps/jemalloc/src/jemalloc.c	/^	void **result;$/;"	m	struct:dynamic_opts_s	typeref:typename:void **	file:
result	src/server.h	/^typedef int redisGetKeysProc(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *res/;"	t	typeref:typename:int redisGetKeysProc (struct redisCommand * cmd,robj ** argv,int argc,getKeysResult *)
resume	deps/lua/src/ldo.c	/^static void resume (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
resume_error	deps/lua/src/ldo.c	/^static int resume_error (lua_State *L, const char *msg) {$/;"	f	typeref:typename:int	file:
ret	deps/jemalloc/src/jemalloc.c	/^	int ret;$/;"	v	typeref:typename:int
retainOriginalCommandVector	src/networking.c	/^static void retainOriginalCommandVector(client *c) {$/;"	f	typeref:typename:void	file:
retain_grow_limit	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	pszind_t		retain_grow_limit;$/;"	m	struct:arena_s	typeref:typename:pszind_t
retained	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	atomic_zu_t		retained; \/* Derived. *\/$/;"	m	struct:arena_stats_s	typeref:typename:atomic_zu_t
retained	deps/jemalloc/include/jemalloc/internal/ctl.h	/^	size_t retained;$/;"	m	struct:ctl_stats_s	typeref:typename:size_t
retry_num	src/sentinel.c	/^    int retry_num;          \/* Number of times we tried to execute it. *\/$/;"	m	struct:sentinelScriptJob	typeref:typename:int	file:
retrycount	src/server.h	/^    *time, *pxat, *px, *retrycount, *force, *justid, $/;"	m	struct:sharedObjectsStruct
retstat	deps/lua/src/lparser.c	/^static void retstat (LexState *ls) {$/;"	f	typeref:typename:void	file:
rev	deps/hiredis/adapters/libev.h	/^    ev_io rev, wev;$/;"	m	struct:redisLibevEvents	typeref:typename:ev_io
rev	src/dict.c	/^static unsigned long rev(unsigned long v) {$/;"	f	typeref:typename:unsigned long	file:
rev	src/stream.h	/^    int rev;                \/* True if iterating end to start (reverse). *\/$/;"	m	struct:streamIterator	typeref:typename:int
rev8	src/crcspeed.c	/^static inline uint64_t rev8(uint64_t a) {$/;"	f	typeref:typename:uint64_t	file:
revokeClientAuthentication	src/module.c	/^void revokeClientAuthentication(client *c) {$/;"	f	typeref:typename:void
rewrite	src/config.c	/^    void (*rewrite)(typeData data, const char *name, struct rewriteConfigState *state);$/;"	m	struct:typeInterface	typeref:typename:void (*)(typeData data,const char * name,struct rewriteConfigState * state)	file:
rewriteAppendOnlyFile	src/aof.c	/^int rewriteAppendOnlyFile(char *filename) {$/;"	f	typeref:typename:int
rewriteAppendOnlyFileBackground	src/aof.c	/^int rewriteAppendOnlyFileBackground(void) {$/;"	f	typeref:typename:int
rewriteAppendOnlyFileRio	src/aof.c	/^int rewriteAppendOnlyFileRio(rio *aof) {$/;"	f	typeref:typename:int
rewriteClientCommandArgument	src/networking.c	/^void rewriteClientCommandArgument(client *c, int i, robj *newval) {$/;"	f	typeref:typename:void
rewriteClientCommandVector	src/networking.c	/^void rewriteClientCommandVector(client *c, int argc, ...) {$/;"	f	typeref:typename:void
rewriteConfigSentinelOption	src/sentinel.c	/^void rewriteConfigSentinelOption(struct rewriteConfigState *state) {$/;"	f	typeref:typename:void
rewriteConfigState	src/config.c	/^struct rewriteConfigState {$/;"	s	function:configSetCommand	file:
rewriteHashObject	src/aof.c	/^int rewriteHashObject(rio *r, robj *key, robj *o) {$/;"	f	typeref:typename:int
rewriteListObject	src/aof.c	/^int rewriteListObject(rio *r, robj *key, robj *o) {$/;"	f	typeref:typename:int
rewriteModuleObject	src/aof.c	/^int rewriteModuleObject(rio *r, robj *key, robj *o) {$/;"	f	typeref:typename:int
rewriteSetObject	src/aof.c	/^int rewriteSetObject(rio *r, robj *key, robj *o) {$/;"	f	typeref:typename:int
rewriteSortedSetObject	src/aof.c	/^int rewriteSortedSetObject(rio *r, robj *key, robj *o) {$/;"	f	typeref:typename:int
rewriteStreamObject	src/aof.c	/^int rewriteStreamObject(rio *r, robj *key, robj *o) {$/;"	f	typeref:typename:int
rewritten	src/config.c	/^    dict *rewritten;      \/* Dictionary of already processed options *\/$/;"	m	struct:configSetCommand::rewriteConfigState	typeref:typename:dict *	file:
rfds	src/ae_select.c	/^    fd_set rfds, wfds;$/;"	m	struct:aeApiState	typeref:typename:fd_set	file:
rfileProc	src/ae.h	/^    aeFileProc *rfileProc;$/;"	m	struct:aeFileEvent	typeref:typename:aeFileProc *
ri	src/module.c	/^    raxIterator ri;$/;"	m	struct:RedisModuleDictIter	typeref:typename:raxIterator	file:
ri	src/stream.h	/^    raxIterator ri;         \/* Rax iterator. *\/$/;"	m	struct:streamIterator	typeref:typename:raxIterator
ridx	deps/hiredis/read.h	/^    int ridx; \/* Index of current read task *\/$/;"	m	struct:redisReader	typeref:typename:int
right	deps/lua/src/lparser.c	/^  lu_byte right; \/* right priority *\/$/;"	m	struct:__anon581f0db20108	typeref:typename:lu_byte	file:
right	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
ring_s	deps/jemalloc/test/unit/qr.c	/^struct ring_s {$/;"	s	file:
ring_t	deps/jemalloc/test/unit/qr.c	/^typedef struct ring_s ring_t;$/;"	t	typeref:struct:ring_s	file:
rio	src/redis-check-rdb.c	/^    rio *rio;$/;"	m	struct:__anon818955940108	typeref:typename:rio *	file:
rio	src/rio.h	/^typedef struct _rio rio;$/;"	t	typeref:struct:_rio
rio	src/server.h	/^    rio *rio;           \/* Rio stream. *\/$/;"	m	struct:RedisModuleIO	typeref:typename:rio *
rioBufferFlush	src/rio.c	/^static int rioBufferFlush(rio *r) {$/;"	f	typeref:typename:int	file:
rioBufferIO	src/rio.c	/^static const rio rioBufferIO = {$/;"	v	typeref:typename:const rio	file:
rioBufferRead	src/rio.c	/^static size_t rioBufferRead(rio *r, void *buf, size_t len) {$/;"	f	typeref:typename:size_t	file:
rioBufferTell	src/rio.c	/^static off_t rioBufferTell(rio *r) {$/;"	f	typeref:typename:off_t	file:
rioBufferWrite	src/rio.c	/^static size_t rioBufferWrite(rio *r, const void *buf, size_t len) {$/;"	f	typeref:typename:size_t	file:
rioClearErrors	src/rio.h	/^static inline void rioClearErrors(rio *r) {$/;"	f	typeref:typename:void
rioConnFlush	src/rio.c	/^static int rioConnFlush(rio *r) {$/;"	f	typeref:typename:int	file:
rioConnIO	src/rio.c	/^static const rio rioConnIO = {$/;"	v	typeref:typename:const rio	file:
rioConnRead	src/rio.c	/^static size_t rioConnRead(rio *r, void *buf, size_t len) {$/;"	f	typeref:typename:size_t	file:
rioConnTell	src/rio.c	/^static off_t rioConnTell(rio *r) {$/;"	f	typeref:typename:off_t	file:
rioConnWrite	src/rio.c	/^static size_t rioConnWrite(rio *r, const void *buf, size_t len) {$/;"	f	typeref:typename:size_t	file:
rioFdFlush	src/rio.c	/^static int rioFdFlush(rio *r) {$/;"	f	typeref:typename:int	file:
rioFdIO	src/rio.c	/^static const rio rioFdIO = {$/;"	v	typeref:typename:const rio	file:
rioFdRead	src/rio.c	/^static size_t rioFdRead(rio *r, void *buf, size_t len) {$/;"	f	typeref:typename:size_t	file:
rioFdTell	src/rio.c	/^static off_t rioFdTell(rio *r) {$/;"	f	typeref:typename:off_t	file:
rioFdWrite	src/rio.c	/^static size_t rioFdWrite(rio *r, const void *buf, size_t len) {$/;"	f	typeref:typename:size_t	file:
rioFileFlush	src/rio.c	/^static int rioFileFlush(rio *r) {$/;"	f	typeref:typename:int	file:
rioFileIO	src/rio.c	/^static const rio rioFileIO = {$/;"	v	typeref:typename:const rio	file:
rioFileRead	src/rio.c	/^static size_t rioFileRead(rio *r, void *buf, size_t len) {$/;"	f	typeref:typename:size_t	file:
rioFileTell	src/rio.c	/^static off_t rioFileTell(rio *r) {$/;"	f	typeref:typename:off_t	file:
rioFileWrite	src/rio.c	/^static size_t rioFileWrite(rio *r, const void *buf, size_t len) {$/;"	f	typeref:typename:size_t	file:
rioFlush	src/rio.h	/^static inline int rioFlush(rio *r) {$/;"	f	typeref:typename:int
rioFreeConn	src/rio.c	/^void rioFreeConn(rio *r, sds *remaining) {$/;"	f	typeref:typename:void
rioFreeFd	src/rio.c	/^void rioFreeFd(rio *r) {$/;"	f	typeref:typename:void
rioGenericUpdateChecksum	src/rio.c	/^void rioGenericUpdateChecksum(rio *r, const void *buf, size_t len) {$/;"	f	typeref:typename:void
rioGetReadError	src/rio.h	/^static inline int rioGetReadError(rio *r) {$/;"	f	typeref:typename:int
rioGetWriteError	src/rio.h	/^static inline int rioGetWriteError(rio *r) {$/;"	f	typeref:typename:int
rioInitWithBuffer	src/rio.c	/^void rioInitWithBuffer(rio *r, sds s) {$/;"	f	typeref:typename:void
rioInitWithConn	src/rio.c	/^void rioInitWithConn(rio *r, connection *conn, size_t read_limit) {$/;"	f	typeref:typename:void
rioInitWithFd	src/rio.c	/^void rioInitWithFd(rio *r, int fd) {$/;"	f	typeref:typename:void
rioInitWithFile	src/rio.c	/^void rioInitWithFile(rio *r, FILE *fp) {$/;"	f	typeref:typename:void
rioRead	src/rio.h	/^static inline size_t rioRead(rio *r, void *buf, size_t len) {$/;"	f	typeref:typename:size_t
rioSetAutoSync	src/rio.c	/^void rioSetAutoSync(rio *r, off_t bytes) {$/;"	f	typeref:typename:void
rioTell	src/rio.h	/^static inline off_t rioTell(rio *r) {$/;"	f	typeref:typename:off_t
rioWrite	src/rio.h	/^static inline size_t rioWrite(rio *r, const void *buf, size_t len) {$/;"	f	typeref:typename:size_t
rioWriteBulkCount	src/rio.c	/^size_t rioWriteBulkCount(rio *r, char prefix, long count) {$/;"	f	typeref:typename:size_t
rioWriteBulkDouble	src/rio.c	/^size_t rioWriteBulkDouble(rio *r, double d) {$/;"	f	typeref:typename:size_t
rioWriteBulkLongLong	src/rio.c	/^size_t rioWriteBulkLongLong(rio *r, long long l) {$/;"	f	typeref:typename:size_t
rioWriteBulkObject	src/aof.c	/^int rioWriteBulkObject(rio *r, robj *obj) {$/;"	f	typeref:typename:int
rioWriteBulkStreamID	src/aof.c	/^int rioWriteBulkStreamID(rio *r,streamID *id) {$/;"	f	typeref:typename:int
rioWriteBulkString	src/rio.c	/^size_t rioWriteBulkString(rio *r, const char *buf, size_t len) {$/;"	f	typeref:typename:size_t
rioWriteHashIteratorCursor	src/aof.c	/^static int rioWriteHashIteratorCursor(rio *r, hashTypeIterator *hi, int what) {$/;"	f	typeref:typename:int	file:
rioWriteStreamEmptyConsumer	src/aof.c	/^int rioWriteStreamEmptyConsumer(rio *r, robj *key, const char *groupname, size_t groupname_len, /;"	f	typeref:typename:int
rioWriteStreamPendingEntry	src/aof.c	/^int rioWriteStreamPendingEntry(rio *r, robj *key, const char *groupname, size_t groupname_len, s/;"	f	typeref:typename:int
robj	src/server.h	/^} robj;$/;"	t	typeref:struct:redisObject
rol	src/sha1.c	/^#define rol(/;"	d	file:
roleChangeCallback	tests/modules/hooks.c	/^void roleChangeCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f	typeref:typename:void
roleCommand	src/replication.c	/^void roleCommand(client *c) {$/;"	f	typeref:typename:void
role_reported	src/sentinel.c	/^    int role_reported;$/;"	m	struct:sentinelRedisInstance	typeref:typename:int	file:
role_reported_time	src/sentinel.c	/^    mstime_t role_reported_time;$/;"	m	struct:sentinelRedisInstance	typeref:typename:mstime_t	file:
root	deps/jemalloc/include/jemalloc/internal/rtree.h	/^	rtree_leaf_elm_t	root[1U << (RTREE_NSB\/RTREE_HEIGHT)];$/;"	m	struct:rtree_s	typeref:typename:rtree_leaf_elm_t[]
root	deps/jemalloc/include/jemalloc/internal/rtree.h	/^	rtree_node_elm_t	root[1U << (RTREE_NSB\/RTREE_HEIGHT)];$/;"	m	struct:rtree_s	typeref:typename:rtree_node_elm_t[]
root_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t	root_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
rootgc	deps/lua/src/lstate.h	/^  GCObject *rootgc;  \/* list of all collectable objects *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
roslaveerr	src/server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
rpop	src/server.h	/^    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,$/;"	m	struct:sharedObjectsStruct
rpopCommand	src/server.h	/^                        *lpopCommand, *rpopCommand, *zpopminCommand,$/;"	m	struct:redisServer	typeref:struct:redisCommand *****
rpopCommand	src/t_list.c	/^void rpopCommand(client *c) {$/;"	f	typeref:typename:void
rpoplpush	src/server.h	/^    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,$/;"	m	struct:sharedObjectsStruct
rpoplpushCommand	src/server.h	/^                        *xgroupCommand, *rpoplpushCommand, *lmoveCommand;$/;"	m	struct:redisServer	typeref:struct:redisCommand **************
rpoplpushCommand	src/t_list.c	/^void rpoplpushCommand(client *c) {$/;"	f	typeref:typename:void
rpushCommand	src/t_list.c	/^void rpushCommand(client *c) {$/;"	f	typeref:typename:void
rpushxCommand	src/t_list.c	/^void rpushxCommand(client *c) {$/;"	f	typeref:typename:void
rs	src/module.c	/^            zrangespec rs;         \/* Score range. *\/$/;"	m	struct:RedisModuleKey::__anon967b4733010a::__anon967b47330208	typeref:typename:zrangespec	file:
rshift128	deps/jemalloc/test/src/SFMT.c	/^static inline void rshift128(w128_t *out, w128_t const *in, int shift) {$/;"	f	typeref:typename:void	file:
rss_extra	src/server.h	/^    float rss_extra;$/;"	m	struct:redisMemOverhead	typeref:typename:float
rss_extra_bytes	src/server.h	/^    size_t rss_extra_bytes;$/;"	m	struct:redisMemOverhead	typeref:typename:size_t
rt	src/rax.h	/^    rax *rt;                \/* Radix tree we are iterating. *\/$/;"	m	struct:raxIterator	typeref:typename:rax *
rtree_cache_direct_map	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_cache_direct_map(uintptr_t key) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
rtree_child_leaf_read	deps/jemalloc/src/rtree.c	/^rtree_child_leaf_read(tsdn_t *tsdn, rtree_t *rtree, rtree_node_elm_t *elm,$/;"	f	typeref:typename:rtree_leaf_elm_t *	file:
rtree_child_leaf_tryread	deps/jemalloc/src/rtree.c	/^rtree_child_leaf_tryread(rtree_node_elm_t *elm, bool dependent) {$/;"	f	typeref:typename:rtree_leaf_elm_t *	file:
rtree_child_node_read	deps/jemalloc/src/rtree.c	/^rtree_child_node_read(tsdn_t *tsdn, rtree_t *rtree, rtree_node_elm_t *elm,$/;"	f	typeref:typename:rtree_node_elm_t *	file:
rtree_child_node_tryread	deps/jemalloc/src/rtree.c	/^rtree_child_node_tryread(rtree_node_elm_t *elm, bool dependent) {$/;"	f	typeref:typename:rtree_node_elm_t *	file:
rtree_clear	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_clear(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,$/;"	f	typeref:typename:void
rtree_ctx_cache_elm_s	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^struct rtree_ctx_cache_elm_s {$/;"	s
rtree_ctx_cache_elm_t	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^typedef struct rtree_ctx_cache_elm_s rtree_ctx_cache_elm_t;$/;"	t	typeref:struct:rtree_ctx_cache_elm_s
rtree_ctx_data_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define rtree_ctx_data_init /;"	d
rtree_ctx_data_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define rtree_ctx_data_init /;"	d
rtree_ctx_data_init	deps/jemalloc/src/rtree.c	/^rtree_ctx_data_init(rtree_ctx_t *ctx) {$/;"	f	typeref:typename:void
rtree_ctx_s	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^struct rtree_ctx_s {$/;"	s
rtree_ctx_t	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^typedef struct rtree_ctx_s rtree_ctx_t;$/;"	t	typeref:struct:rtree_ctx_s
rtree_delete	deps/jemalloc/src/rtree.c	/^rtree_delete(tsdn_t *tsdn, rtree_t *rtree) {$/;"	f	typeref:typename:void
rtree_delete_subtree	deps/jemalloc/src/rtree.c	/^rtree_delete_subtree(tsdn_t *tsdn, rtree_t *rtree, rtree_node_elm_t *subtree,$/;"	f	typeref:typename:void	file:
rtree_extent_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_extent_read(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE extent_t *
rtree_extent_szind_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_extent_szind_read(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
rtree_leaf_alloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define rtree_leaf_alloc /;"	d
rtree_leaf_alloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define rtree_leaf_alloc /;"	d
rtree_leaf_alloc	deps/jemalloc/src/rtree.c	/^rtree_leaf_alloc_t *JET_MUTABLE rtree_leaf_alloc = rtree_leaf_alloc_impl;$/;"	v	typeref:typename:rtree_leaf_alloc_t * JET_MUTABLE
rtree_leaf_alloc_impl	deps/jemalloc/src/rtree.c	/^rtree_leaf_alloc_impl(tsdn_t *tsdn, rtree_t *rtree, size_t nelms) {$/;"	f	typeref:typename:rtree_leaf_elm_t *	file:
rtree_leaf_alloc_intercept	deps/jemalloc/test/unit/rtree.c	/^rtree_leaf_alloc_intercept(tsdn_t *tsdn, rtree_t *rtree, size_t nelms) {$/;"	f	typeref:typename:rtree_leaf_elm_t *	file:
rtree_leaf_alloc_orig	deps/jemalloc/test/unit/rtree.c	/^rtree_leaf_alloc_t *rtree_leaf_alloc_orig;$/;"	v	typeref:typename:rtree_leaf_alloc_t *
rtree_leaf_alloc_t	deps/jemalloc/include/jemalloc/internal/rtree.h	/^typedef rtree_leaf_elm_t *(rtree_leaf_alloc_t)(tsdn_t *, rtree_t *, size_t);$/;"	t	typeref:typename:rtree_leaf_elm_t * ()(tsdn_t *,rtree_t *,size_t)
rtree_leaf_dalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define rtree_leaf_dalloc /;"	d
rtree_leaf_dalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define rtree_leaf_dalloc /;"	d
rtree_leaf_dalloc	deps/jemalloc/src/rtree.c	/^UNUSED rtree_leaf_dalloc_t *JET_MUTABLE rtree_leaf_dalloc =$/;"	v	typeref:typename:UNUSED rtree_leaf_dalloc_t * JET_MUTABLE
rtree_leaf_dalloc_impl	deps/jemalloc/src/rtree.c	/^rtree_leaf_dalloc_impl(tsdn_t *tsdn, rtree_t *rtree, rtree_leaf_elm_t *leaf) {$/;"	f	typeref:typename:void	file:
rtree_leaf_dalloc_intercept	deps/jemalloc/test/unit/rtree.c	/^rtree_leaf_dalloc_intercept(tsdn_t *tsdn, rtree_t *rtree,$/;"	f	typeref:typename:void	file:
rtree_leaf_dalloc_orig	deps/jemalloc/test/unit/rtree.c	/^rtree_leaf_dalloc_t *rtree_leaf_dalloc_orig;$/;"	v	typeref:typename:rtree_leaf_dalloc_t *
rtree_leaf_dalloc_t	deps/jemalloc/include/jemalloc/internal/rtree.h	/^typedef void (rtree_leaf_dalloc_t)(tsdn_t *, rtree_t *, rtree_leaf_elm_t *);$/;"	t	typeref:typename:void ()(tsdn_t *,rtree_t *,rtree_leaf_elm_t *)
rtree_leaf_elm_bits_extent_get	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_bits_extent_get(uintptr_t bits) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE extent_t *
rtree_leaf_elm_bits_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_bits_read(tsdn_t *tsdn, rtree_t *rtree, rtree_leaf_elm_t *elm,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE uintptr_t
rtree_leaf_elm_bits_slab_get	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_bits_slab_get(uintptr_t bits) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
rtree_leaf_elm_bits_szind_get	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_bits_szind_get(uintptr_t bits) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE szind_t
rtree_leaf_elm_extent_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_extent_read(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE extent_t *
rtree_leaf_elm_extent_write	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_extent_write(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,$/;"	f	typeref:typename:void
rtree_leaf_elm_lookup	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_lookup(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE rtree_leaf_elm_t *
rtree_leaf_elm_lookup_hard	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define rtree_leaf_elm_lookup_hard /;"	d
rtree_leaf_elm_lookup_hard	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define rtree_leaf_elm_lookup_hard /;"	d
rtree_leaf_elm_lookup_hard	deps/jemalloc/src/rtree.c	/^rtree_leaf_elm_lookup_hard(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,$/;"	f	typeref:typename:rtree_leaf_elm_t *
rtree_leaf_elm_s	deps/jemalloc/include/jemalloc/internal/rtree.h	/^struct rtree_leaf_elm_s {$/;"	s
rtree_leaf_elm_slab_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_slab_read(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
rtree_leaf_elm_slab_write	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_slab_write(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,$/;"	f	typeref:typename:void
rtree_leaf_elm_szind_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_szind_read(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE szind_t
rtree_leaf_elm_szind_slab_update	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_szind_slab_update(tsdn_t *tsdn, rtree_t *rtree,$/;"	f	typeref:typename:void
rtree_leaf_elm_szind_write	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_szind_write(UNUSED tsdn_t *tsdn, UNUSED rtree_t *rtree,$/;"	f	typeref:typename:void
rtree_leaf_elm_t	deps/jemalloc/include/jemalloc/internal/rtree_tsd.h	/^typedef struct rtree_leaf_elm_s rtree_leaf_elm_t;$/;"	t	typeref:struct:rtree_leaf_elm_s
rtree_leaf_elm_write	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leaf_elm_write(tsdn_t *tsdn, rtree_t *rtree, rtree_leaf_elm_t *elm,$/;"	f	typeref:typename:void
rtree_leaf_init	deps/jemalloc/src/rtree.c	/^rtree_leaf_init(tsdn_t *tsdn, rtree_t *rtree, atomic_p_t *elmp) {$/;"	f	typeref:typename:rtree_leaf_elm_t *	file:
rtree_leaf_valid	deps/jemalloc/src/rtree.c	/^rtree_leaf_valid(rtree_leaf_elm_t *leaf) {$/;"	f	typeref:typename:bool	file:
rtree_leafkey	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_leafkey(uintptr_t key) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE uintptr_t
rtree_level_s	deps/jemalloc/include/jemalloc/internal/rtree.h	/^struct rtree_level_s {$/;"	s
rtree_level_t	deps/jemalloc/include/jemalloc/internal/rtree.h	/^typedef struct rtree_level_s rtree_level_t;$/;"	t	typeref:struct:rtree_level_s
rtree_levels	deps/jemalloc/include/jemalloc/internal/rtree.h	/^static const rtree_level_t rtree_levels[] = {$/;"	v	typeref:typename:const rtree_level_t[]
rtree_new	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define rtree_new /;"	d
rtree_new	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define rtree_new /;"	d
rtree_new	deps/jemalloc/src/rtree.c	/^rtree_new(rtree_t *rtree, bool zeroed) {$/;"	f	typeref:typename:bool
rtree_node_alloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define rtree_node_alloc /;"	d
rtree_node_alloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define rtree_node_alloc /;"	d
rtree_node_alloc	deps/jemalloc/src/rtree.c	/^rtree_node_alloc_t *JET_MUTABLE rtree_node_alloc = rtree_node_alloc_impl;$/;"	v	typeref:typename:rtree_node_alloc_t * JET_MUTABLE
rtree_node_alloc_impl	deps/jemalloc/src/rtree.c	/^rtree_node_alloc_impl(tsdn_t *tsdn, rtree_t *rtree, size_t nelms) {$/;"	f	typeref:typename:rtree_node_elm_t *	file:
rtree_node_alloc_intercept	deps/jemalloc/test/unit/rtree.c	/^rtree_node_alloc_intercept(tsdn_t *tsdn, rtree_t *rtree, size_t nelms) {$/;"	f	typeref:typename:rtree_node_elm_t *	file:
rtree_node_alloc_orig	deps/jemalloc/test/unit/rtree.c	/^rtree_node_alloc_t *rtree_node_alloc_orig;$/;"	v	typeref:typename:rtree_node_alloc_t *
rtree_node_alloc_t	deps/jemalloc/include/jemalloc/internal/rtree.h	/^typedef rtree_node_elm_t *(rtree_node_alloc_t)(tsdn_t *, rtree_t *, size_t);$/;"	t	typeref:typename:rtree_node_elm_t * ()(tsdn_t *,rtree_t *,size_t)
rtree_node_dalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define rtree_node_dalloc /;"	d
rtree_node_dalloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define rtree_node_dalloc /;"	d
rtree_node_dalloc	deps/jemalloc/src/rtree.c	/^UNUSED rtree_node_dalloc_t *JET_MUTABLE rtree_node_dalloc =$/;"	v	typeref:typename:UNUSED rtree_node_dalloc_t * JET_MUTABLE
rtree_node_dalloc_impl	deps/jemalloc/src/rtree.c	/^rtree_node_dalloc_impl(tsdn_t *tsdn, rtree_t *rtree, rtree_node_elm_t *node) {$/;"	f	typeref:typename:void	file:
rtree_node_dalloc_intercept	deps/jemalloc/test/unit/rtree.c	/^rtree_node_dalloc_intercept(tsdn_t *tsdn, rtree_t *rtree,$/;"	f	typeref:typename:void	file:
rtree_node_dalloc_orig	deps/jemalloc/test/unit/rtree.c	/^rtree_node_dalloc_t *rtree_node_dalloc_orig;$/;"	v	typeref:typename:rtree_node_dalloc_t *
rtree_node_dalloc_t	deps/jemalloc/include/jemalloc/internal/rtree.h	/^typedef void (rtree_node_dalloc_t)(tsdn_t *, rtree_t *, rtree_node_elm_t *);$/;"	t	typeref:typename:void ()(tsdn_t *,rtree_t *,rtree_node_elm_t *)
rtree_node_elm_s	deps/jemalloc/include/jemalloc/internal/rtree.h	/^struct rtree_node_elm_s {$/;"	s
rtree_node_elm_t	deps/jemalloc/include/jemalloc/internal/rtree.h	/^typedef struct rtree_node_elm_s rtree_node_elm_t;$/;"	t	typeref:struct:rtree_node_elm_s
rtree_node_init	deps/jemalloc/src/rtree.c	/^rtree_node_init(tsdn_t *tsdn, rtree_t *rtree, unsigned level,$/;"	f	typeref:typename:rtree_node_elm_t *	file:
rtree_node_valid	deps/jemalloc/src/rtree.c	/^rtree_node_valid(rtree_node_elm_t *node) {$/;"	f	typeref:typename:bool	file:
rtree_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_read(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx, uintptr_t key,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE rtree_leaf_elm_t *
rtree_s	deps/jemalloc/include/jemalloc/internal/rtree.h	/^struct rtree_s {$/;"	s
rtree_subkey	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_subkey(uintptr_t key, unsigned level) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE uintptr_t
rtree_szind_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_szind_read(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE szind_t
rtree_szind_slab_read	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_szind_slab_read(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
rtree_szind_slab_update	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_szind_slab_update(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx,$/;"	f	typeref:typename:void
rtree_t	deps/jemalloc/include/jemalloc/internal/rtree.h	/^typedef struct rtree_s rtree_t;$/;"	t	typeref:struct:rtree_s
rtree_write	deps/jemalloc/include/jemalloc/internal/rtree.h	/^rtree_write(tsdn_t *tsdn, rtree_t *rtree, rtree_ctx_t *rtree_ctx, uintptr_t key,$/;"	f	typeref:typename:bool
run	deps/hiredis/examples/example-qt.cpp	/^void ExampleQt::run() {$/;"	f	class:ExampleQt	typeref:typename:void
run_interval	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	nstime_t run_interval;$/;"	m	struct:background_thread_stats_s	typeref:typename:nstime_t
run_with_period	src/server.h	/^#define run_with_period(/;"	d
runargs	deps/lua/src/lua.c	/^static int runargs (lua_State *L, char **argv, int n) {$/;"	f	typeref:typename:int	file:
runid	src/sentinel.c	/^    char *runid;    \/* Run ID of this instance, or unique ID if is a Sentinel.*\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:char *	file:
runid	src/sentinel.c	/^    char *runid;$/;"	m	struct:sentinelLeader	typeref:typename:char *	file:
runid	src/server.h	/^    char runid[CONFIG_RUN_ID_SIZE+1];  \/* ID always different at every exec. *\/$/;"	m	struct:redisServer	typeref:typename:char[]
running_scripts	src/sentinel.c	/^    int running_scripts;    \/* Number of scripts in execution right now. *\/$/;"	m	struct:sentinelState	typeref:typename:int	file:
runtime_check	deps/lua/src/lvm.c	/^#define runtime_check(/;"	d	file:
s	deps/jemalloc/src/jemalloc.c	/^	size_t	s;	\/* Request size. *\/$/;"	m	struct:__anon4e2331a50308	typeref:typename:size_t	file:
s	deps/jemalloc/test/src/SFMT.c	/^    vector unsigned int s;$/;"	m	union:W128_T	typeref:typename:vector unsigned int	file:
s	deps/jemalloc/test/unit/ckh.c	/^			const char *s;$/;"	m	union:TEST_BEGIN::__anon0ea0731b010a	typeref:typename:const char *	file:
s	deps/jemalloc/test/unit/ckh.c	/^			const char *s;$/;"	m	union:TEST_BEGIN::__anon0ea0731b020a	typeref:typename:const char *	file:
s	deps/lua/src/lauxlib.c	/^  const char *s;$/;"	m	struct:LoadS	typeref:typename:const char *	file:
s	deps/lua/src/lparser.h	/^    struct { int info, aux; } s;$/;"	m	union:expdesc::__anon581f0db7020a	typeref:struct:expdesc::__anon581f0db7020a::__anon581f0db70308
s64	src/dict.h	/^        int64_t s64;$/;"	m	union:dictEntry::__anon56260716010a	typeref:typename:int64_t
s_down_since_time	src/sentinel.c	/^    mstime_t s_down_since_time; \/* Subjectively down since time. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:mstime_t	file:
s_free	src/sdsalloc.h	/^#define s_free /;"	d
s_free_usable	src/sdsalloc.h	/^#define s_free_usable /;"	d
s_malloc	src/sdsalloc.h	/^#define s_malloc /;"	d
s_malloc_usable	src/sdsalloc.h	/^#define s_malloc_usable /;"	d
s_realloc	src/sdsalloc.h	/^#define s_realloc /;"	d
s_realloc_usable	src/sdsalloc.h	/^#define s_realloc_usable /;"	d
s_trymalloc	src/sdsalloc.h	/^#define s_trymalloc /;"	d
s_trymalloc_usable	src/sdsalloc.h	/^#define s_trymalloc_usable /;"	d
s_tryrealloc	src/sdsalloc.h	/^#define s_tryrealloc /;"	d
s_tryrealloc_usable	src/sdsalloc.h	/^#define s_tryrealloc_usable /;"	d
saddCommand	src/t_set.c	/^void saddCommand(client *c) {$/;"	f	typeref:typename:void
saddr	deps/hiredis/async.h	/^    struct sockaddr *saddr;$/;"	m	struct:redisAsyncContext	typeref:struct:sockaddr *
saddr	deps/hiredis/hiredis.h	/^    struct sockadr *saddr;$/;"	m	struct:redisContext	typeref:struct:sockadr *
safe	src/dict.h	/^    int table, safe;$/;"	m	struct:dictIterator	typeref:typename:int
sallocx	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define sallocx /;"	d
sallocx	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define sallocx /;"	d
sallocx	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define sallocx /;"	d
sameobjecterr	src/server.h	/^    *emptyarray, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *********** [4]* [4]* [4]* [4]*****
sample	src/sparkline.h	/^struct sample {$/;"	s
samples	src/latency.h	/^    struct latencySample samples[LATENCY_TS_LEN]; \/* Latest history. *\/$/;"	m	struct:latencyTimeSeries	typeref:struct:latencySample[]
samples	src/latency.h	/^    uint32_t samples;       \/* Number of non-zero samples. *\/$/;"	m	struct:latencyStats	typeref:typename:uint32_t
samples	src/server.h	/^        long long samples[STATS_METRIC_SAMPLES];$/;"	m	struct:redisServer::__anon3ef696e90608	typeref:typename:long long[]
samples	src/sparkline.h	/^    struct sample *samples;$/;"	m	struct:sequence	typeref:struct:sample *
sanitize_dump_payload	src/server.h	/^    int sanitize_dump_payload;      \/* Enables deep sanitization for ziplist and listpack in RD/;"	m	struct:redisServer	typeref:typename:int
sanitize_dump_payload_enum	src/config.c	/^configEnum sanitize_dump_payload_enum[] = {$/;"	v	typeref:typename:configEnum[]
save	deps/lua/src/llex.c	/^static void save (LexState *ls, int c) {$/;"	f	typeref:typename:void	file:
save	src/redis-benchmark.c	/^    sds save;$/;"	m	struct:redisConfig	typeref:typename:sds	file:
saveCommand	src/rdb.c	/^void saveCommand(client *c) {$/;"	f	typeref:typename:void
save_and_next	deps/lua/src/llex.c	/^#define save_and_next(/;"	d	file:
saveci	deps/lua/src/ldo.h	/^#define saveci(/;"	d
saved_oparray	src/module.c	/^    redisOpArray saved_oparray;    \/* When propagating commands in a callback$/;"	m	struct:RedisModuleCtx	typeref:typename:redisOpArray	file:
savedpc	deps/lua/src/lstate.h	/^  const Instruction *savedpc;  \/* `savedpc' of current function *\/$/;"	m	struct:lua_State	typeref:typename:const Instruction *
savedpc	deps/lua/src/lstate.h	/^  const Instruction *savedpc;$/;"	m	struct:CallInfo	typeref:typename:const Instruction *
saveparam	src/server.h	/^struct saveparam {$/;"	s
saveparams	src/server.h	/^    struct saveparam *saveparams;   \/* Save points array for RDB *\/$/;"	m	struct:redisServer	typeref:struct:saveparam *
saveparamslen	src/server.h	/^    int saveparamslen;              \/* Number of saving points *\/$/;"	m	struct:redisServer	typeref:typename:int
savestack	deps/lua/src/ldo.h	/^#define savestack(/;"	d
saw_depth_error	deps/jemalloc/test/unit/witness.c	/^static bool saw_depth_error;$/;"	v	typeref:typename:bool	file:
saw_junking	deps/jemalloc/test/unit/junk.c	/^static bool saw_junking;$/;"	v	typeref:typename:bool	file:
saw_lock_error	deps/jemalloc/test/unit/witness.c	/^static bool saw_lock_error;$/;"	v	typeref:typename:bool	file:
saw_not_owner_error	deps/jemalloc/test/unit/witness.c	/^static bool saw_not_owner_error;$/;"	v	typeref:typename:bool	file:
saw_owner_error	deps/jemalloc/test/unit/witness.c	/^static bool saw_owner_error;$/;"	v	typeref:typename:bool	file:
scanCallback	src/db.c	/^void scanCallback(void *privdata, const dictEntry *de) {$/;"	f	typeref:typename:void
scanCommand	src/db.c	/^void scanCommand(client *c) {$/;"	f	typeref:typename:void
scanDatabaseForReadyLists	src/db.c	/^void scanDatabaseForReadyLists(redisDb *db) {$/;"	f	typeref:typename:void
scanGenericCommand	src/db.c	/^void scanGenericCommand(client *c, robj *o, unsigned long cursor) {$/;"	f	typeref:typename:void
scanLaterHash	src/defrag.c	/^long scanLaterHash(robj *ob, unsigned long *cursor) {$/;"	f	typeref:typename:long
scanLaterHashCallback	src/defrag.c	/^void scanLaterHashCallback(void *privdata, const dictEntry *_de) {$/;"	f	typeref:typename:void
scanLaterList	src/defrag.c	/^long scanLaterList(robj *ob, unsigned long *cursor, long long endtime, long long *defragged) {$/;"	f	typeref:typename:long
scanLaterSet	src/defrag.c	/^long scanLaterSet(robj *ob, unsigned long *cursor) {$/;"	f	typeref:typename:long
scanLaterSetCallback	src/defrag.c	/^void scanLaterSetCallback(void *privdata, const dictEntry *_de) {$/;"	f	typeref:typename:void
scanLaterStreamListpacks	src/defrag.c	/^int scanLaterStreamListpacks(robj *ob, unsigned long *cursor, long long endtime, long long *defr/;"	f	typeref:typename:int
scanLaterZset	src/defrag.c	/^long scanLaterZset(robj *ob, unsigned long *cursor) {$/;"	f	typeref:typename:long
scanLaterZsetCallback	src/defrag.c	/^void scanLaterZsetCallback(void *privdata, const dictEntry *_de) {$/;"	f	typeref:typename:void
scanLaterZsetData	src/defrag.c	/^} scanLaterZsetData;$/;"	t	typeref:struct:__anon4ad273d60108	file:
scanMode	src/redis-cli.c	/^static void scanMode(void) {$/;"	f	typeref:typename:void	file:
scan_entry	utils/lru/lfu-simulation.c	/^uint8_t scan_entry(struct entry *e) {$/;"	f	typeref:typename:uint8_t
scan_key	tests/modules/scan.c	/^int scan_key(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
scan_key_callback	tests/modules/scan.c	/^void scan_key_callback(RedisModuleKey *key, RedisModuleString* field, RedisModuleString* value, /;"	f	typeref:typename:void
scan_key_pd	tests/modules/scan.c	/^} scan_key_pd;$/;"	t	typeref:struct:__anon99e813050208	file:
scan_mode	src/redis-cli.c	/^    int scan_mode;$/;"	m	struct:config	typeref:typename:int	file:
scan_strings	tests/modules/scan.c	/^int scan_strings(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
scan_strings_callback	tests/modules/scan.c	/^void scan_strings_callback(RedisModuleCtx *ctx, RedisModuleString* keyname, RedisModuleKey* key,/;"	f	typeref:typename:void
scan_strings_pd	tests/modules/scan.c	/^} scan_strings_pd;$/;"	t	typeref:struct:__anon99e813050108	file:
scanformat	deps/lua/src/lstrlib.c	/^static const char *scanformat (lua_State *L, const char *strfrmt, char *form) {$/;"	f	typeref:typename:const char *	file:
scardCommand	src/t_set.c	/^void scardCommand(client *c) {$/;"	f	typeref:typename:void
scheduleTimer	deps/hiredis/async.h	/^        void (*scheduleTimer)(void *privdata, struct timeval tv);$/;"	m	struct:redisAsyncContext::__anon89b0a8ab0108	typeref:typename:void (*)(void * privdata,struct timeval tv)
score	src/geo.h	/^    double score;$/;"	m	struct:geoPoint	typeref:typename:double
score	src/server.h	/^        double score;$/;"	m	union:_redisSortObject::__anon3ef696e9080a	typeref:typename:double
score	src/server.h	/^    double score;$/;"	m	struct:zskiplistNode	typeref:typename:double
score	src/t_zset.c	/^    double score;$/;"	m	struct:__anon6fce03460a08	typeref:typename:double	file:
scoresOfGeoHashBox	src/geo.c	/^void scoresOfGeoHashBox(GeoHashBits hash, GeoHashFix52Bits *min, GeoHashFix52Bits *max) {$/;"	f	typeref:typename:void
script	src/server.h	/^    *script, *replconf, *eval, *persist, *set, *pexpireat, *pexpire, $/;"	m	struct:sharedObjectsStruct
scriptCommand	src/scripting.c	/^void scriptCommand(client *c) {$/;"	f	typeref:typename:void
scriptingEnableGlobalsProtection	src/scripting.c	/^void scriptingEnableGlobalsProtection(lua_State *lua) {$/;"	f	typeref:typename:void
scriptingInit	src/scripting.c	/^void scriptingInit(int setup) {$/;"	f	typeref:typename:void
scriptingRelease	src/scripting.c	/^void scriptingRelease(int async) {$/;"	f	typeref:typename:void
scriptingReset	src/scripting.c	/^void scriptingReset(int async) {$/;"	f	typeref:typename:void
scripts_queue	src/sentinel.c	/^    list *scripts_queue;            \/* Queue of user scripts to execute. *\/$/;"	m	struct:sentinelState	typeref:typename:list *	file:
sdallocx	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define sdallocx /;"	d
sdallocx	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define sdallocx /;"	d
sdallocx	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define sdallocx /;"	d
sdiffCommand	src/t_set.c	/^void sdiffCommand(client *c) {$/;"	f	typeref:typename:void
sdiffstoreCommand	src/t_set.c	/^void sdiffstoreCommand(client *c) {$/;"	f	typeref:typename:void
sdigits10	src/util.c	/^uint32_t sdigits10(int64_t v) {$/;"	f	typeref:typename:uint32_t
sds	deps/hiredis/sdscompat.h	/^#define sds /;"	d
sds	src/config.c	/^    sdsConfigData sds;$/;"	m	union:typeData	typeref:typename:sdsConfigData	file:
sds	src/sds.h	/^typedef char *sds;$/;"	t	typeref:typename:char *
sds.o	deps/hiredis/Makefile	/^sds.o: sds.c sds.h sdsalloc.h alloc.h$/;"	t
sdsAllocPtr	deps/hiredis/sdscompat.h	/^#define sdsAllocPtr /;"	d
sdsAllocPtr	src/sds.c	/^void *sdsAllocPtr(sds s) {$/;"	f	typeref:typename:void *
sdsAllocSize	deps/hiredis/sdscompat.h	/^#define sdsAllocSize /;"	d
sdsAllocSize	src/sds.c	/^size_t sdsAllocSize(sds s) {$/;"	f	typeref:typename:size_t
sdsCatColorizedLdbReply	src/redis-cli.c	/^sds sdsCatColorizedLdbReply(sds o, char *s, size_t len) {$/;"	f	typeref:typename:sds
sdsConfigData	src/config.c	/^typedef struct sdsConfigData {$/;"	s	file:
sdsConfigData	src/config.c	/^} sdsConfigData;$/;"	t	typeref:struct:sdsConfigData	file:
sdsEncodedObject	src/server.h	/^#define sdsEncodedObject(/;"	d
sdsHdrSize	src/sds.c	/^static inline int sdsHdrSize(char type) {$/;"	f	typeref:typename:int	file:
sdsIncrLen	deps/hiredis/sdscompat.h	/^#define sdsIncrLen /;"	d
sdsIncrLen	src/sds.c	/^void sdsIncrLen(sds s, ssize_t incr) {$/;"	f	typeref:typename:void
sdsMakeRoomFor	deps/hiredis/sdscompat.h	/^#define sdsMakeRoomFor /;"	d
sdsMakeRoomFor	src/sds.c	/^sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f	typeref:typename:sds
sdsRemoveFreeSpace	deps/hiredis/sdscompat.h	/^#define sdsRemoveFreeSpace /;"	d
sdsRemoveFreeSpace	src/sds.c	/^sds sdsRemoveFreeSpace(sds s) {$/;"	f	typeref:typename:sds
sdsReplyDictType	src/server.c	/^dictType sdsReplyDictType = {$/;"	v	typeref:typename:dictType
sdsReqType	src/sds.c	/^static inline char sdsReqType(size_t string_size) {$/;"	f	typeref:typename:char	file:
sdsTest	src/sds.c	/^int sdsTest(int argc, char **argv, int accurate) {$/;"	f	typeref:typename:int
sdsTestTemplateCallback	src/sds.c	/^static sds sdsTestTemplateCallback(sds varname, void *arg) {$/;"	f	typeref:typename:sds	file:
sdsTypeMaxSize	src/sds.c	/^static inline size_t sdsTypeMaxSize(char type) {$/;"	f	typeref:typename:size_t	file:
sdsZmallocSize	src/networking.c	/^size_t sdsZmallocSize(sds s) {$/;"	f	typeref:typename:size_t
sds_free	deps/hiredis/sdscompat.h	/^#define sds_free /;"	d
sds_free	src/sds.c	/^void sds_free(void *ptr) { s_free(ptr); }$/;"	f	typeref:typename:void
sds_malloc	deps/hiredis/sdscompat.h	/^#define sds_malloc /;"	d
sds_malloc	src/sds.c	/^void *sds_malloc(size_t size) { return s_malloc(size); }$/;"	f	typeref:typename:void *
sds_realloc	deps/hiredis/sdscompat.h	/^#define sds_realloc /;"	d
sds_realloc	src/sds.c	/^void *sds_realloc(void *ptr, size_t size) { return s_realloc(ptr,size); }$/;"	f	typeref:typename:void *
sdsalloc	deps/hiredis/sdscompat.h	/^#define sdsalloc /;"	d
sdsalloc	src/sds.h	/^static inline size_t sdsalloc(const sds s) {$/;"	f	typeref:typename:size_t
sdsavail	deps/hiredis/sdscompat.h	/^#define sdsavail /;"	d
sdsavail	src/sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f	typeref:typename:size_t
sdscat	deps/hiredis/sdscompat.h	/^#define sdscat /;"	d
sdscat	src/sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f	typeref:typename:sds
sdscatcolor	src/redis-cli.c	/^sds sdscatcolor(sds o, char *s, size_t len, char *color) {$/;"	f	typeref:typename:sds
sdscatfmt	deps/hiredis/sdscompat.h	/^#define sdscatfmt /;"	d
sdscatfmt	src/sds.c	/^sds sdscatfmt(sds s, char const *fmt, ...) {$/;"	f	typeref:typename:sds
sdscatlen	deps/hiredis/sdscompat.h	/^#define sdscatlen /;"	d
sdscatlen	src/sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f	typeref:typename:sds
sdscatprintf	deps/hiredis/sdscompat.h	/^#define sdscatprintf /;"	d
sdscatprintf	src/sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f	typeref:typename:sds
sdscatrepr	deps/hiredis/sdscompat.h	/^#define sdscatrepr /;"	d
sdscatrepr	src/sds.c	/^sds sdscatrepr(sds s, const char *p, size_t len) {$/;"	f	typeref:typename:sds
sdscatsds	deps/hiredis/sdscompat.h	/^#define sdscatsds /;"	d
sdscatsds	src/sds.c	/^sds sdscatsds(sds s, const sds t) {$/;"	f	typeref:typename:sds
sdscatvprintf	deps/hiredis/sdscompat.h	/^#define sdscatvprintf /;"	d
sdscatvprintf	src/sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f	typeref:typename:sds
sdsclear	deps/hiredis/sdscompat.h	/^#define sdsclear /;"	d
sdsclear	src/sds.c	/^void sdsclear(sds s) {$/;"	f	typeref:typename:void
sdscmp	deps/hiredis/sdscompat.h	/^#define sdscmp /;"	d
sdscmp	src/sds.c	/^int sdscmp(const sds s1, const sds s2) {$/;"	f	typeref:typename:int
sdscmplex	src/t_zset.c	/^int sdscmplex(sds a, sds b) {$/;"	f	typeref:typename:int
sdscpy	deps/hiredis/sdscompat.h	/^#define sdscpy /;"	d
sdscpy	src/sds.c	/^sds sdscpy(sds s, const char *t) {$/;"	f	typeref:typename:sds
sdscpylen	deps/hiredis/sdscompat.h	/^#define sdscpylen /;"	d
sdscpylen	src/sds.c	/^sds sdscpylen(sds s, const char *t, size_t len) {$/;"	f	typeref:typename:sds
sdsdup	deps/hiredis/sdscompat.h	/^#define sdsdup /;"	d
sdsdup	src/sds.c	/^sds sdsdup(const sds s) {$/;"	f	typeref:typename:sds
sdsempty	deps/hiredis/sdscompat.h	/^#define sdsempty /;"	d
sdsempty	src/sds.c	/^sds sdsempty(void) {$/;"	f	typeref:typename:sds
sdsfree	deps/hiredis/sdscompat.h	/^#define sdsfree /;"	d
sdsfree	src/sds.c	/^void sdsfree(sds s) {$/;"	f	typeref:typename:void
sdsfreesplitres	deps/hiredis/sdscompat.h	/^#define sdsfreesplitres /;"	d
sdsfreesplitres	src/sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f	typeref:typename:void
sdsfromlonglong	deps/hiredis/sdscompat.h	/^#define sdsfromlonglong /;"	d
sdsfromlonglong	src/sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f	typeref:typename:sds
sdsgrowzero	deps/hiredis/sdscompat.h	/^#define sdsgrowzero /;"	d
sdsgrowzero	src/sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f	typeref:typename:sds
sdshdr16	src/sds.h	/^struct __attribute__ ((__packed__)) sdshdr16 {$/;"	s
sdshdr32	src/sds.h	/^struct __attribute__ ((__packed__)) sdshdr32 {$/;"	s
sdshdr5	src/sds.h	/^struct __attribute__ ((__packed__)) sdshdr5 {$/;"	s
sdshdr64	src/sds.h	/^struct __attribute__ ((__packed__)) sdshdr64 {$/;"	s
sdshdr8	src/sds.h	/^struct __attribute__ ((__packed__)) sdshdr8 {$/;"	s
sdsinclen	deps/hiredis/sdscompat.h	/^#define sdsinclen /;"	d
sdsinclen	src/sds.h	/^static inline void sdsinclen(sds s, size_t inc) {$/;"	f	typeref:typename:void
sdsjoin	deps/hiredis/sdscompat.h	/^#define sdsjoin /;"	d
sdsjoin	src/sds.c	/^sds sdsjoin(char **argv, int argc, char *sep) {$/;"	f	typeref:typename:sds
sdsjoinsds	deps/hiredis/sdscompat.h	/^#define sdsjoinsds /;"	d
sdsjoinsds	src/sds.c	/^sds sdsjoinsds(sds *argv, int argc, const char *sep, size_t seplen) {$/;"	f	typeref:typename:sds
sdslen	deps/hiredis/sdscompat.h	/^#define sdslen /;"	d
sdslen	src/sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f	typeref:typename:size_t
sdsll2str	deps/hiredis/sdscompat.h	/^#define sdsll2str /;"	d
sdsll2str	src/sds.c	/^int sdsll2str(char *s, long long value) {$/;"	f	typeref:typename:int
sdsmapchars	deps/hiredis/sdscompat.h	/^#define sdsmapchars /;"	d
sdsmapchars	src/sds.c	/^sds sdsmapchars(sds s, const char *from, const char *to, size_t setlen) {$/;"	f	typeref:typename:sds
sdsnew	deps/hiredis/sdscompat.h	/^#define sdsnew /;"	d
sdsnew	src/sds.c	/^sds sdsnew(const char *init) {$/;"	f	typeref:typename:sds
sdsnewlen	deps/hiredis/sdscompat.h	/^#define sdsnewlen /;"	d
sdsnewlen	src/sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f	typeref:typename:sds
sdsrange	deps/hiredis/sdscompat.h	/^#define sdsrange /;"	d
sdsrange	src/sds.c	/^void sdsrange(sds s, ssize_t start, ssize_t end) {$/;"	f	typeref:typename:void
sdssetalloc	deps/hiredis/sdscompat.h	/^#define sdssetalloc /;"	d
sdssetalloc	src/sds.h	/^static inline void sdssetalloc(sds s, size_t newlen) {$/;"	f	typeref:typename:void
sdssetlen	deps/hiredis/sdscompat.h	/^#define sdssetlen /;"	d
sdssetlen	src/sds.h	/^static inline void sdssetlen(sds s, size_t newlen) {$/;"	f	typeref:typename:void
sdssplitargs	deps/hiredis/sdscompat.h	/^#define sdssplitargs /;"	d
sdssplitargs	src/sds.c	/^sds *sdssplitargs(const char *line, int *argc) {$/;"	f	typeref:typename:sds *
sdssplitlen	deps/hiredis/sdscompat.h	/^#define sdssplitlen /;"	d
sdssplitlen	src/sds.c	/^sds *sdssplitlen(const char *s, ssize_t len, const char *sep, int seplen, int *count) {$/;"	f	typeref:typename:sds *
sdssubstr	src/sds.c	/^void sdssubstr(sds s, size_t start, size_t len) {$/;"	f	typeref:typename:void
sdstemplate	src/sds.c	/^sds sdstemplate(const char *template, sdstemplate_callback_t cb_func, void *cb_arg)$/;"	f	typeref:typename:sds
sdstemplate_callback_t	src/sds.h	/^typedef sds (*sdstemplate_callback_t)(const sds variable, void *arg);$/;"	t	typeref:typename:sds (*)(const sds variable,void * arg)
sdstolower	deps/hiredis/sdscompat.h	/^#define sdstolower /;"	d
sdstolower	src/sds.c	/^void sdstolower(sds s) {$/;"	f	typeref:typename:void
sdstoupper	deps/hiredis/sdscompat.h	/^#define sdstoupper /;"	d
sdstoupper	src/sds.c	/^void sdstoupper(sds s) {$/;"	f	typeref:typename:void
sdstrim	deps/hiredis/sdscompat.h	/^#define sdstrim /;"	d
sdstrim	src/sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f	typeref:typename:sds
sdstrynewlen	src/sds.c	/^sds sdstrynewlen(const void *init, size_t initlen) {$/;"	f	typeref:typename:sds
sdsull2str	deps/hiredis/sdscompat.h	/^#define sdsull2str /;"	d
sdsull2str	src/sds.c	/^int sdsull2str(char *s, unsigned long long v) {$/;"	f	typeref:typename:int
sdsupdatelen	deps/hiredis/sdscompat.h	/^#define sdsupdatelen /;"	d
sdsupdatelen	src/sds.c	/^void sdsupdatelen(sds s) {$/;"	f	typeref:typename:void
searchPreMonitorCfgName	src/sentinel.c	/^int searchPreMonitorCfgName(const char *name) {$/;"	f	typeref:typename:int
searchvar	deps/lua/src/lparser.c	/^static int searchvar (FuncState *fs, TString *n) {$/;"	f	typeref:typename:int	file:
second_replid_offset	src/server.h	/^    long long second_replid_offset; \/* Accept offsets up to this for replid2. *\/$/;"	m	struct:redisServer	typeref:typename:long long
seconds	src/server.h	/^    time_t seconds;$/;"	m	struct:saveparam	typeref:typename:time_t
sections	src/module.c	/^    int sections;       \/* number of sections we collected so far *\/$/;"	m	struct:RedisModuleInfoCtx	typeref:typename:int	file:
secure_getenv	deps/jemalloc/include/jemalloc/internal/hooks.h	/^#define secure_getenv /;"	d
securityWarningCommand	src/networking.c	/^void securityWarningCommand(client *c) {$/;"	f	typeref:typename:void
seekNewline	deps/hiredis/read.c	/^static char *seekNewline(char *s, size_t len) {$/;"	f	typeref:typename:char *	file:
seen_last_value	deps/hdr_histogram/hdr_histogram.h	/^    bool seen_last_value;$/;"	m	struct:hdr_iter_percentiles	typeref:typename:bool
seen_time	src/stream.h	/^    mstime_t seen_time;         \/* Last time this consumer was active. *\/$/;"	m	struct:streamConsumer	typeref:typename:mstime_t
select	src/server.h	/^    *select[PROTO_SHARED_SELECT_CMDS],$/;"	m	struct:sharedObjectsStruct
selectCommand	src/db.c	/^void selectCommand(client *c) {$/;"	f	typeref:typename:void
selectDb	src/db.c	/^int selectDb(client *c, int id) {$/;"	f	typeref:typename:int
select_database	deps/hiredis/test.c	/^static redisContext *select_database(redisContext *c) {$/;"	f	typeref:typename:redisContext *	file:
seminfo	deps/lua/src/llex.h	/^  SemInfo seminfo;$/;"	m	struct:Token	typeref:typename:SemInfo
send	deps/hiredis/sockcompat.h	/^#define send(/;"	d
sendBulkToSlave	src/replication.c	/^void sendBulkToSlave(connection *conn) {$/;"	f	typeref:typename:void
sendCapa	src/redis-cli.c	/^void sendCapa() {$/;"	f	typeref:typename:void
sendChildCowInfo	src/server.c	/^void sendChildCowInfo(childInfoType info_type, char *pname) {$/;"	f	typeref:typename:void
sendChildInfo	src/server.c	/^void sendChildInfo(childInfoType info_type, size_t keys, char *pname) {$/;"	f	typeref:typename:void
sendChildInfoGeneric	src/childinfo.c	/^void sendChildInfoGeneric(childInfoType info_type, size_t keys, double progress, char *pname) {$/;"	f	typeref:typename:void
sendCommand	src/replication.c	/^char *sendCommand(connection *conn, ...) {$/;"	f	typeref:typename:char *
sendCommandArgv	src/replication.c	/^char *sendCommandArgv(connection *conn, int argc, char **argv, size_t *argv_lens) {$/;"	f	typeref:typename:char *
sendCommandRaw	src/replication.c	/^char* sendCommandRaw(connection *conn, sds cmd) {$/;"	f	typeref:typename:char *
sendRdbOnly	src/redis-cli.c	/^void sendRdbOnly(void) {$/;"	f	typeref:typename:void
sendReplconf	src/redis-cli.c	/^void sendReplconf(const char* arg1, const char* arg2) {$/;"	f	typeref:typename:void
sendReplyToClient	src/networking.c	/^void sendReplyToClient(connection *conn) {$/;"	f	typeref:typename:void
sendScan	src/redis-cli.c	/^static redisReply *sendScan(unsigned long long *it) {$/;"	f	typeref:typename:redisReply *	file:
sendSync	src/redis-cli.c	/^unsigned long long sendSync(redisContext *c, char *out_eof) {$/;"	f	typeref:typename:unsigned long long
sendTrackingMessage	src/tracking.c	/^void sendTrackingMessage(client *c, char *keyname, size_t keylen, int proto) {$/;"	f	typeref:typename:void
send_client_tracking	deps/hiredis/test.c	/^static void send_client_tracking(redisContext *c, const char *str) {$/;"	f	typeref:typename:void	file:
send_hello	deps/hiredis/test.c	/^static void send_hello(redisContext *c, int version) {$/;"	f	typeref:typename:void	file:
sender	src/cluster.h	/^    char sender[CLUSTER_NAMELEN]; \/* Name of the sender node *\/$/;"	m	struct:__anon2cc7db540b08	typeref:typename:char[]
sentinel	deps/lua/src/loadlib.c	/^#define sentinel	/;"	d	file:
sentinel	src/sentinel.c	/^} sentinel;$/;"	v	typeref:struct:sentinelState
sentinelAbortFailover	src/sentinel.c	/^void sentinelAbortFailover(sentinelRedisInstance *ri) {$/;"	f	typeref:typename:void
sentinelAddFlagsToDictOfRedisInstances	src/sentinel.c	/^void sentinelAddFlagsToDictOfRedisInstances(dict *instances, int flags) {$/;"	f	typeref:typename:void
sentinelAddr	src/sentinel.c	/^typedef struct sentinelAddr {$/;"	s	file:
sentinelAddr	src/sentinel.c	/^} sentinelAddr;$/;"	t	typeref:struct:sentinelAddr	file:
sentinelAddrEqualsHostname	src/sentinel.c	/^int sentinelAddrEqualsHostname(sentinelAddr *a, char *hostname) {$/;"	f	typeref:typename:int
sentinelAddrIsEqual	src/sentinel.c	/^int sentinelAddrIsEqual(sentinelAddr *a, sentinelAddr *b) {$/;"	f	typeref:typename:int
sentinelAskMasterStateToOtherSentinels	src/sentinel.c	/^void sentinelAskMasterStateToOtherSentinels(sentinelRedisInstance *master, int flags) {$/;"	f	typeref:typename:void
sentinelCallClientReconfScript	src/sentinel.c	/^void sentinelCallClientReconfScript(sentinelRedisInstance *master, int role, char *state, sentin/;"	f	typeref:typename:void
sentinelCheckConfigFile	src/sentinel.c	/^void sentinelCheckConfigFile(void) {$/;"	f	typeref:typename:void
sentinelCheckCreateInstanceErrors	src/sentinel.c	/^const char *sentinelCheckCreateInstanceErrors(int role) {$/;"	f	typeref:typename:const char *
sentinelCheckObjectivelyDown	src/sentinel.c	/^void sentinelCheckObjectivelyDown(sentinelRedisInstance *master) {$/;"	f	typeref:typename:void
sentinelCheckSubjectivelyDown	src/sentinel.c	/^void sentinelCheckSubjectivelyDown(sentinelRedisInstance *ri) {$/;"	f	typeref:typename:void
sentinelCheckTiltCondition	src/sentinel.c	/^void sentinelCheckTiltCondition(void) {$/;"	f	typeref:typename:void
sentinelCollectTerminatedScripts	src/sentinel.c	/^void sentinelCollectTerminatedScripts(void) {$/;"	f	typeref:typename:void
sentinelCommand	src/sentinel.c	/^void sentinelCommand(client *c) {$/;"	f	typeref:typename:void
sentinelConfig	src/server.h	/^struct sentinelConfig {$/;"	s
sentinelConfigGetCommand	src/sentinel.c	/^void sentinelConfigGetCommand(client *c) {$/;"	f	typeref:typename:void
sentinelConfigSetCommand	src/sentinel.c	/^void sentinelConfigSetCommand(client *c) {$/;"	f	typeref:typename:void
sentinelDelFlagsToDictOfRedisInstances	src/sentinel.c	/^void sentinelDelFlagsToDictOfRedisInstances(dict *instances, int flags) {$/;"	f	typeref:typename:void
sentinelDiscardReplyCallback	src/sentinel.c	/^void sentinelDiscardReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f	typeref:typename:void
sentinelDisconnectCallback	src/sentinel.c	/^void sentinelDisconnectCallback(const redisAsyncContext *c, int status) {$/;"	f	typeref:typename:void
sentinelDropConnections	src/sentinel.c	/^int sentinelDropConnections(void) {$/;"	f	typeref:typename:int
sentinelEvent	src/sentinel.c	/^void sentinelEvent(int level, char *type, sentinelRedisInstance *ri,$/;"	f	typeref:typename:void
sentinelFailoverDetectEnd	src/sentinel.c	/^void sentinelFailoverDetectEnd(sentinelRedisInstance *master) {$/;"	f	typeref:typename:void
sentinelFailoverReconfNextSlave	src/sentinel.c	/^void sentinelFailoverReconfNextSlave(sentinelRedisInstance *master) {$/;"	f	typeref:typename:void
sentinelFailoverSelectSlave	src/sentinel.c	/^void sentinelFailoverSelectSlave(sentinelRedisInstance *ri) {$/;"	f	typeref:typename:void
sentinelFailoverSendSlaveOfNoOne	src/sentinel.c	/^void sentinelFailoverSendSlaveOfNoOne(sentinelRedisInstance *ri) {$/;"	f	typeref:typename:void
sentinelFailoverStateMachine	src/sentinel.c	/^void sentinelFailoverStateMachine(sentinelRedisInstance *ri) {$/;"	f	typeref:typename:void
sentinelFailoverStateStr	src/sentinel.c	/^const char *sentinelFailoverStateStr(int state) {$/;"	f	typeref:typename:const char *
sentinelFailoverSwitchToPromotedSlave	src/sentinel.c	/^void sentinelFailoverSwitchToPromotedSlave(sentinelRedisInstance *master) {$/;"	f	typeref:typename:void
sentinelFailoverWaitPromotion	src/sentinel.c	/^void sentinelFailoverWaitPromotion(sentinelRedisInstance *ri) {$/;"	f	typeref:typename:void
sentinelFailoverWaitStart	src/sentinel.c	/^void sentinelFailoverWaitStart(sentinelRedisInstance *ri) {$/;"	f	typeref:typename:void
sentinelFlushConfig	src/sentinel.c	/^void sentinelFlushConfig(void) {$/;"	f	typeref:typename:void
sentinelForceHelloUpdateDictOfRedisInstances	src/sentinel.c	/^void sentinelForceHelloUpdateDictOfRedisInstances(dict *instances) {$/;"	f	typeref:typename:void
sentinelForceHelloUpdateForMaster	src/sentinel.c	/^int sentinelForceHelloUpdateForMaster(sentinelRedisInstance *master) {$/;"	f	typeref:typename:int
sentinelGenerateInitialMonitorEvents	src/sentinel.c	/^void sentinelGenerateInitialMonitorEvents(void) {$/;"	f	typeref:typename:void
sentinelGetCurrentMasterAddress	src/sentinel.c	/^sentinelAddr *sentinelGetCurrentMasterAddress(sentinelRedisInstance *master) {$/;"	f	typeref:typename:sentinelAddr *
sentinelGetLeader	src/sentinel.c	/^char *sentinelGetLeader(sentinelRedisInstance *master, uint64_t epoch) {$/;"	f	typeref:typename:char *
sentinelGetMasterByName	src/sentinel.c	/^sentinelRedisInstance *sentinelGetMasterByName(char *name) {$/;"	f	typeref:typename:sentinelRedisInstance *
sentinelGetMasterByNameOrReplyError	src/sentinel.c	/^sentinelRedisInstance *sentinelGetMasterByNameOrReplyError(client *c,$/;"	f	typeref:typename:sentinelRedisInstance *
sentinelGetScriptListNodeByPid	src/sentinel.c	/^listNode *sentinelGetScriptListNodeByPid(pid_t pid) {$/;"	f	typeref:typename:listNode *
sentinelHandleConfiguration	src/sentinel.c	/^const char *sentinelHandleConfiguration(char **argv, int argc) {$/;"	f	typeref:typename:const char *
sentinelHandleDictOfRedisInstances	src/sentinel.c	/^void sentinelHandleDictOfRedisInstances(dict *instances) {$/;"	f	typeref:typename:void
sentinelHandleRedisInstance	src/sentinel.c	/^void sentinelHandleRedisInstance(sentinelRedisInstance *ri) {$/;"	f	typeref:typename:void
sentinelInfoCommand	src/sentinel.c	/^void sentinelInfoCommand(client *c) {$/;"	f	typeref:typename:void
sentinelInfoReplyCallback	src/sentinel.c	/^void sentinelInfoReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f	typeref:typename:void
sentinelInstanceMapCommand	src/sentinel.c	/^char *sentinelInstanceMapCommand(sentinelRedisInstance *ri, char *command) {$/;"	f	typeref:typename:char *
sentinelIsQuorumReachable	src/sentinel.c	/^int sentinelIsQuorumReachable(sentinelRedisInstance *master, int *usableptr) {$/;"	f	typeref:typename:int
sentinelIsRunning	src/sentinel.c	/^void sentinelIsRunning(void) {$/;"	f	typeref:typename:void
sentinelKillTimedoutScripts	src/sentinel.c	/^void sentinelKillTimedoutScripts(void) {$/;"	f	typeref:typename:void
sentinelLeader	src/sentinel.c	/^struct sentinelLeader {$/;"	s	file:
sentinelLeaderIncr	src/sentinel.c	/^int sentinelLeaderIncr(dict *counters, char *runid) {$/;"	f	typeref:typename:int
sentinelLinkEstablishedCallback	src/sentinel.c	/^void sentinelLinkEstablishedCallback(const redisAsyncContext *c, int status) {$/;"	f	typeref:typename:void
sentinelLoadQueueEntry	src/server.h	/^struct sentinelLoadQueueEntry {$/;"	s
sentinelMasterLooksSane	src/sentinel.c	/^int sentinelMasterLooksSane(sentinelRedisInstance *master) {$/;"	f	typeref:typename:int
sentinelPendingScriptsCommand	src/sentinel.c	/^void sentinelPendingScriptsCommand(client *c) {$/;"	f	typeref:typename:void
sentinelPingReplyCallback	src/sentinel.c	/^void sentinelPingReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f	typeref:typename:void
sentinelProcessHelloMessage	src/sentinel.c	/^void sentinelProcessHelloMessage(char *hello, int hello_len) {$/;"	f	typeref:typename:void
sentinelPropagateDownAfterPeriod	src/sentinel.c	/^void sentinelPropagateDownAfterPeriod(sentinelRedisInstance *master) {$/;"	f	typeref:typename:void
sentinelPublishCommand	src/sentinel.c	/^void sentinelPublishCommand(client *c) {$/;"	f	typeref:typename:void
sentinelPublishReplyCallback	src/sentinel.c	/^void sentinelPublishReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f	typeref:typename:void
sentinelReceiveHelloMessages	src/sentinel.c	/^void sentinelReceiveHelloMessages(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f	typeref:typename:void
sentinelReceiveIsMasterDownReply	src/sentinel.c	/^void sentinelReceiveIsMasterDownReply(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f	typeref:typename:void
sentinelReconnectInstance	src/sentinel.c	/^void sentinelReconnectInstance(sentinelRedisInstance *ri) {$/;"	f	typeref:typename:void
sentinelRedisInstance	src/sentinel.c	/^typedef struct sentinelRedisInstance {$/;"	s	file:
sentinelRedisInstance	src/sentinel.c	/^} sentinelRedisInstance;$/;"	t	typeref:struct:sentinelRedisInstance	file:
sentinelRedisInstanceLookupSlave	src/sentinel.c	/^sentinelRedisInstance *sentinelRedisInstanceLookupSlave($/;"	f	typeref:typename:sentinelRedisInstance *
sentinelRedisInstanceNoDownFor	src/sentinel.c	/^int sentinelRedisInstanceNoDownFor(sentinelRedisInstance *ri, mstime_t ms) {$/;"	f	typeref:typename:int
sentinelRedisInstanceTypeStr	src/sentinel.c	/^const char *sentinelRedisInstanceTypeStr(sentinelRedisInstance *ri) {$/;"	f	typeref:typename:const char *
sentinelRefreshInstanceInfo	src/sentinel.c	/^void sentinelRefreshInstanceInfo(sentinelRedisInstance *ri, const char *info) {$/;"	f	typeref:typename:void
sentinelReleaseScriptJob	src/sentinel.c	/^void sentinelReleaseScriptJob(sentinelScriptJob *sj) {$/;"	f	typeref:typename:void
sentinelResetMaster	src/sentinel.c	/^void sentinelResetMaster(sentinelRedisInstance *ri, int flags) {$/;"	f	typeref:typename:void
sentinelResetMasterAndChangeAddress	src/sentinel.c	/^int sentinelResetMasterAndChangeAddress(sentinelRedisInstance *master, char *hostname, int port)/;"	f	typeref:typename:int
sentinelResetMastersByPattern	src/sentinel.c	/^int sentinelResetMastersByPattern(char *pattern, int flags) {$/;"	f	typeref:typename:int
sentinelRoleCommand	src/sentinel.c	/^void sentinelRoleCommand(client *c) {$/;"	f	typeref:typename:void
sentinelRunPendingScripts	src/sentinel.c	/^void sentinelRunPendingScripts(void) {$/;"	f	typeref:typename:void
sentinelScheduleScriptExecution	src/sentinel.c	/^void sentinelScheduleScriptExecution(char *path, ...) {$/;"	f	typeref:typename:void
sentinelScriptJob	src/sentinel.c	/^typedef struct sentinelScriptJob {$/;"	s	file:
sentinelScriptJob	src/sentinel.c	/^} sentinelScriptJob;$/;"	t	typeref:struct:sentinelScriptJob	file:
sentinelScriptRetryDelay	src/sentinel.c	/^mstime_t sentinelScriptRetryDelay(int retry_num) {$/;"	f	typeref:typename:mstime_t
sentinelSelectSlave	src/sentinel.c	/^sentinelRedisInstance *sentinelSelectSlave(sentinelRedisInstance *master) {$/;"	f	typeref:typename:sentinelRedisInstance *
sentinelSendAuthIfNeeded	src/sentinel.c	/^void sentinelSendAuthIfNeeded(sentinelRedisInstance *ri, redisAsyncContext *c) {$/;"	f	typeref:typename:void
sentinelSendHello	src/sentinel.c	/^int sentinelSendHello(sentinelRedisInstance *ri) {$/;"	f	typeref:typename:int
sentinelSendPeriodicCommands	src/sentinel.c	/^void sentinelSendPeriodicCommands(sentinelRedisInstance *ri) {$/;"	f	typeref:typename:void
sentinelSendPing	src/sentinel.c	/^int sentinelSendPing(sentinelRedisInstance *ri) {$/;"	f	typeref:typename:int
sentinelSendSlaveOf	src/sentinel.c	/^int sentinelSendSlaveOf(sentinelRedisInstance *ri, const sentinelAddr *addr) {$/;"	f	typeref:typename:int
sentinelSetClientName	src/sentinel.c	/^void sentinelSetClientName(sentinelRedisInstance *ri, redisAsyncContext *c, char *type) {$/;"	f	typeref:typename:void
sentinelSetCommand	src/sentinel.c	/^void sentinelSetCommand(client *c) {$/;"	f	typeref:typename:void
sentinelSimFailureCrash	src/sentinel.c	/^void sentinelSimFailureCrash(void) {$/;"	f	typeref:typename:void
sentinelStartFailover	src/sentinel.c	/^void sentinelStartFailover(sentinelRedisInstance *master) {$/;"	f	typeref:typename:void
sentinelStartFailoverIfNeeded	src/sentinel.c	/^int sentinelStartFailoverIfNeeded(sentinelRedisInstance *master) {$/;"	f	typeref:typename:int
sentinelState	src/sentinel.c	/^struct sentinelState {$/;"	s	file:
sentinelTimer	src/sentinel.c	/^void sentinelTimer(void) {$/;"	f	typeref:typename:void
sentinelTryConnectionSharing	src/sentinel.c	/^int sentinelTryConnectionSharing(sentinelRedisInstance *ri) {$/;"	f	typeref:typename:int
sentinelUpdateSentinelAddressInAllMasters	src/sentinel.c	/^int sentinelUpdateSentinelAddressInAllMasters(sentinelRedisInstance *ri) {$/;"	f	typeref:typename:int
sentinelVoteLeader	src/sentinel.c	/^char *sentinelVoteLeader(sentinelRedisInstance *master, uint64_t req_epoch, char *req_runid, uin/;"	f	typeref:typename:char *
sentinel_	deps/lua/src/loadlib.c	/^static const int sentinel_ = 0;$/;"	v	typeref:typename:const int	file:
sentinel_auth_pass	src/sentinel.c	/^    char *sentinel_auth_pass;    \/* Password to use for AUTH against other sentinel *\/$/;"	m	struct:sentinelState	typeref:typename:char *	file:
sentinel_auth_user	src/sentinel.c	/^    char *sentinel_auth_user;    \/* Username for ACLs AUTH against other sentinel. *\/$/;"	m	struct:sentinelState	typeref:typename:char *	file:
sentinel_config	src/server.h	/^    struct sentinelConfig *sentinel_config; \/* sentinel config to load at startup time. *\/$/;"	m	struct:redisServer	typeref:struct:sentinelConfig *
sentinel_mode	src/server.h	/^    int sentinel_mode;          \/* True if this instance is a Sentinel. *\/$/;"	m	struct:redisServer	typeref:typename:int
sentinelcmds	src/sentinel.c	/^struct redisCommand sentinelcmds[] = {$/;"	v	typeref:struct:redisCommand[]
sentinels	src/sentinel.c	/^    dict *sentinels;    \/* Other sentinels monitoring the same master. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:dict *	file:
sentlen	src/server.h	/^    size_t sentlen;         \/* Amount of bytes already sent in the current$/;"	m	struct:client	typeref:typename:size_t
seq	src/redismodule.h	/^    uint64_t seq;$/;"	m	struct:RedisModuleStreamID	typeref:typename:uint64_t
seq	src/stream.h	/^    uint64_t seq;       \/* Sequence number. *\/$/;"	m	struct:streamID	typeref:typename:uint64_t
sequence	src/sparkline.h	/^struct sequence {$/;"	s
serveClientBlockedOnList	src/t_list.c	/^int serveClientBlockedOnList(client *receiver, robj *key, robj *dstkey, redisDb *db, robj *value/;"	f	typeref:typename:int
serveClientsBlockedOnKeyByModule	src/blocked.c	/^void serveClientsBlockedOnKeyByModule(readyList *rl) {$/;"	f	typeref:typename:void
serveClientsBlockedOnListKey	src/blocked.c	/^void serveClientsBlockedOnListKey(robj *o, readyList *rl) {$/;"	f	typeref:typename:void
serveClientsBlockedOnSortedSetKey	src/blocked.c	/^void serveClientsBlockedOnSortedSetKey(robj *o, readyList *rl) {$/;"	f	typeref:typename:void
serveClientsBlockedOnStreamKey	src/blocked.c	/^void serveClientsBlockedOnStreamKey(robj *o, readyList *rl) {$/;"	f	typeref:typename:void
server	src/server.c	/^struct redisServer server; \/* Server global state *\/$/;"	v	typeref:struct:redisServer
serverAssert	src/server.h	/^#define serverAssert(/;"	d
serverAssertWithInfo	src/server.h	/^#define serverAssertWithInfo(/;"	d
serverCron	src/server.c	/^int serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {$/;"	f	typeref:typename:int
serverLog	src/server.h	/^#define serverLog(/;"	d
serverLogFromHandler	src/server.c	/^void serverLogFromHandler(int level, const char *msg) {$/;"	f	typeref:typename:void
serverLogHexDump	src/debug.c	/^void serverLogHexDump(int level, char *descr, void *value, size_t len) {$/;"	f	typeref:typename:void
serverLogObjectDebugInfo	src/debug.c	/^void serverLogObjectDebugInfo(const robj *o) {$/;"	f	typeref:typename:void
serverLogRaw	src/server.c	/^void serverLogRaw(int level, const char *msg) {$/;"	f	typeref:typename:void
serverPanic	src/server.h	/^#define serverPanic(/;"	d
server_cpulist	src/server.h	/^    char *server_cpulist; \/* cpu affinity list of redis server main\/io thread. *\/$/;"	m	struct:redisServer	typeref:typename:char *
server_name	deps/hiredis/ssl.c	/^    char *server_name;$/;"	m	struct:redisSSLContext	typeref:typename:char *	file:
session_cache_size	src/server.h	/^    int session_cache_size;$/;"	m	struct:redisTLSContextConfig	typeref:typename:int
session_cache_timeout	src/server.h	/^    int session_cache_timeout;$/;"	m	struct:redisTLSContextConfig	typeref:typename:int
session_caching	src/server.h	/^    int session_caching;$/;"	m	struct:redisTLSContextConfig	typeref:typename:int
set	src/config.c	/^    int (*set)(typeData data, sds value, int update, const char **err);$/;"	m	struct:typeInterface	typeref:typename:int (*)(typeData data,sds value,int update,const char ** err)	file:
set	src/server.h	/^    *script, *replconf, *eval, *persist, *set, *pexpireat, *pexpire, $/;"	m	struct:sharedObjectsStruct
set	src/t_zset.c	/^        } set;$/;"	m	union:__anon6fce03460408::__anon6fce0346050a	typeref:union:__anon6fce03460408::__anon6fce0346050a::_iterset	file:
set2	deps/lua/src/ltablib.c	/^static void set2 (lua_State *L, int i, int j) {$/;"	f	typeref:typename:void	file:
set2bits	deps/lua/src/lgc.h	/^#define set2bits(/;"	d
setAccumulatorDictType	src/t_zset.c	/^dictType setAccumulatorDictType = {$/;"	v	typeref:typename:dictType
setBlockingTimeout	src/tls.c	/^static void setBlockingTimeout(tls_connection *conn, long long timeout) {$/;"	f	typeref:typename:void	file:
setClusterKeyHashTag	src/redis-benchmark.c	/^static void setClusterKeyHashTag(client c) {$/;"	f	typeref:typename:void	file:
setCommand	src/t_string.c	/^void setCommand(client *c) {$/;"	f	typeref:typename:void
setContext	deps/hiredis/adapters/qt.h	/^        int setContext(redisAsyncContext * ac) {$/;"	f	class:RedisQtAdapter	typeref:typename:int
setDeferredAggregateLen	src/networking.c	/^void setDeferredAggregateLen(client *c, void *node, long length, char prefix) {$/;"	f	typeref:typename:void
setDeferredArrayLen	src/networking.c	/^void setDeferredArrayLen(client *c, void *node, long length) {$/;"	f	typeref:typename:void
setDeferredAttributeLen	src/networking.c	/^void setDeferredAttributeLen(client *c, void *node, long length) {$/;"	f	typeref:typename:void
setDeferredMapLen	src/networking.c	/^void setDeferredMapLen(client *c, void *node, long length) {$/;"	f	typeref:typename:void
setDeferredPushLen	src/networking.c	/^void setDeferredPushLen(client *c, void *node, long length) {$/;"	f	typeref:typename:void
setDeferredReply	src/networking.c	/^void setDeferredReply(client *c, void *node, const char *s, size_t length) {$/;"	f	typeref:typename:void
setDeferredReplyBulkSds	src/networking.c	/^void setDeferredReplyBulkSds(client *c, void *node, sds s) {$/;"	f	typeref:typename:void
setDeferredReplyStreamID	src/t_stream.c	/^void setDeferredReplyStreamID(client *c, void *dr, streamID *id) {$/;"	f	typeref:typename:void
setDeferredSetLen	src/networking.c	/^void setDeferredSetLen(client *c, void *node, long length) {$/;"	f	typeref:typename:void
setDictType	src/server.c	/^dictType setDictType = {$/;"	v	typeref:typename:dictType
setExpire	src/db.c	/^void setExpire(client *c, redisDb *db, robj *key, long long when) {$/;"	f	typeref:typename:void
setGenericCommand	src/t_string.c	/^void setGenericCommand(client *c, int flags, robj *key, robj *val, robj *expire, int unit, robj /;"	f	typeref:typename:void
setIOPendingCount	src/networking.c	/^static inline void setIOPendingCount(int i, unsigned long count) {$/;"	f	typeref:typename:void	file:
setKey	src/db.c	/^void setKey(client *c, redisDb *db, robj *key, robj *val) {$/;"	f	typeref:typename:void
setOOMScoreAdj	src/server.c	/^int setOOMScoreAdj(int process_class) {$/;"	f	typeref:typename:int
setProtocolError	src/networking.c	/^static void setProtocolError(const char *errstr, client *c) {$/;"	f	typeref:typename:void	file:
setSignedBitfield	src/bitops.c	/^void setSignedBitfield(unsigned char *p, uint64_t offset, uint64_t bits, int64_t value) {$/;"	f	typeref:typename:void
setTypeAdd	src/t_set.c	/^int setTypeAdd(robj *subject, sds value) {$/;"	f	typeref:typename:int
setTypeConvert	src/t_set.c	/^void setTypeConvert(robj *setobj, int enc) {$/;"	f	typeref:typename:void
setTypeCreate	src/t_set.c	/^robj *setTypeCreate(sds value) {$/;"	f	typeref:typename:robj *
setTypeDup	src/t_set.c	/^robj *setTypeDup(robj *o) {$/;"	f	typeref:typename:robj *
setTypeInitIterator	src/t_set.c	/^setTypeIterator *setTypeInitIterator(robj *subject) {$/;"	f	typeref:typename:setTypeIterator *
setTypeIsMember	src/t_set.c	/^int setTypeIsMember(robj *subject, sds value) {$/;"	f	typeref:typename:int
setTypeIterator	src/server.h	/^} setTypeIterator;$/;"	t	typeref:struct:__anon3ef696e90b08
setTypeNext	src/t_set.c	/^int setTypeNext(setTypeIterator *si, sds *sdsele, int64_t *llele) {$/;"	f	typeref:typename:int
setTypeNextObject	src/t_set.c	/^sds setTypeNextObject(setTypeIterator *si) {$/;"	f	typeref:typename:sds
setTypeRandomElement	src/t_set.c	/^int setTypeRandomElement(robj *setobj, sds *sdsele, int64_t *llele) {$/;"	f	typeref:typename:int
setTypeReleaseIterator	src/t_set.c	/^void setTypeReleaseIterator(setTypeIterator *si) {$/;"	f	typeref:typename:void
setTypeRemove	src/t_set.c	/^int setTypeRemove(robj *setobj, sds value) {$/;"	f	typeref:typename:int
setTypeSize	src/t_set.c	/^unsigned long setTypeSize(const robj *subject) {$/;"	f	typeref:typename:unsigned long
setUnsignedBitfield	src/bitops.c	/^void setUnsignedBitfield(unsigned char *p, uint64_t offset, uint64_t bits, uint64_t value) {$/;"	f	typeref:typename:void
set_errcode	src/redis-cli.c	/^    int set_errcode;$/;"	m	struct:config	typeref:typename:int	file:
set_errno	deps/jemalloc/include/jemalloc/internal/util.h	/^set_errno(int errnum) {$/;"	f	typeref:typename:UTIL_INLINE void
set_errno_on_error	deps/jemalloc/src/jemalloc.c	/^	bool set_errno_on_error;$/;"	m	struct:static_opts_s	typeref:typename:bool	file:
set_jemalloc_bg_thread	src/zmalloc.c	/^void set_jemalloc_bg_thread(int enable) {$/;"	f	typeref:typename:void
set_max_intset_entries	src/server.h	/^    size_t set_max_intset_entries;$/;"	m	struct:redisServer	typeref:typename:size_t
set_number_format	deps/lua/src/fpconv.c	/^static void set_number_format(char *fmt, int precision)$/;"	f	typeref:typename:void	file:
set_proc_title	src/server.h	/^    int set_proc_title;             \/* True if change proc title *\/$/;"	m	struct:redisServer	typeref:typename:int
set_prof_active	deps/jemalloc/test/unit/prof_reset.c	/^set_prof_active(bool active) {$/;"	f	typeref:typename:void	file:
set_read_handler	src/connection.h	/^    int (*set_read_handler)(struct connection *conn, ConnectionCallbackFunc handler);$/;"	m	struct:ConnectionType	typeref:typename:int (*)(struct connection * conn,ConnectionCallbackFunc handler)
set_write_handler	src/connection.h	/^    int (*set_write_handler)(struct connection *conn, ConnectionCallbackFunc handler, int barrie/;"	m	struct:ConnectionType	typeref:typename:int (*)(struct connection * conn,ConnectionCallbackFunc handler,int barrier)
setarrayvector	deps/lua/src/ltable.c	/^static void setarrayvector (lua_State *L, Table *t, int size) {$/;"	f	typeref:typename:void	file:
setbitCommand	src/bitops.c	/^void setbitCommand(client *c) {$/;"	f	typeref:typename:void
setbits	deps/lua/src/lgc.h	/^#define setbits(/;"	d
setboolfield	deps/lua/src/loslib.c	/^static void setboolfield (lua_State *L, const char *key, int value) {$/;"	f	typeref:typename:void	file:
setbvalue	deps/lua/src/lobject.h	/^#define setbvalue(/;"	d
setclvalue	deps/lua/src/lobject.h	/^#define setclvalue(/;"	d
setcpuaffinity	src/setcpuaffinity.c	/^void setcpuaffinity(const char *cpulist) {$/;"	f	typeref:typename:void
setexCommand	src/t_string.c	/^void setexCommand(client *c) {$/;"	f	typeref:typename:void
setfenv	deps/lua/src/loadlib.c	/^static void setfenv (lua_State *L) {$/;"	f	typeref:typename:void	file:
setfield	deps/lua/src/loslib.c	/^static void setfield (lua_State *L, const char *key, int value) {$/;"	f	typeref:typename:void	file:
sethvalue	deps/lua/src/lobject.h	/^#define sethvalue(/;"	d
sethvalue2s	deps/lua/src/lobject.h	/^#define sethvalue2s	/;"	d
setid	src/server.h	/^    *lastid, *ping, *setid, *keepttl, *load, *createconsumer,$/;"	m	struct:sharedObjectsStruct
setn	deps/lua/src/ltablib.c	/^static int setn (lua_State *L) {$/;"	f	typeref:typename:int	file:
setnilvalue	deps/lua/src/lobject.h	/^#define setnilvalue(/;"	d
setnodevector	deps/lua/src/ltable.c	/^static void setnodevector (lua_State *L, Table *t, int size) {$/;"	f	typeref:typename:void	file:
setnvalue	deps/lua/src/lobject.h	/^#define setnvalue(/;"	d
setnxCommand	src/t_string.c	/^void setnxCommand(client *c) {$/;"	f	typeref:typename:void
setobj	deps/lua/src/lobject.h	/^#define setobj(/;"	d
setobj2n	deps/lua/src/lobject.h	/^#define setobj2n	/;"	d
setobj2s	deps/lua/src/lobject.h	/^#define setobj2s	/;"	d
setobj2t	deps/lua/src/lobject.h	/^#define setobj2t	/;"	d
setobjs2s	deps/lua/src/lobject.h	/^#define setobjs2s	/;"	d
setobjt2t	deps/lua/src/lobject.h	/^#define setobjt2t	/;"	d
setpath	deps/lua/src/loadlib.c	/^static void setpath (lua_State *L, const char *fieldname, const char *envname,$/;"	f	typeref:typename:void	file:
setproctitle	src/setproctitle.c	/^void setproctitle(const char *fmt, ...) {$/;"	f	typeref:typename:void
setprogdir	deps/lua/src/loadlib.c	/^#define setprogdir(/;"	d	file:
setprogdir	deps/lua/src/loadlib.c	/^static void setprogdir (lua_State *L) {$/;"	f	typeref:typename:void	file:
setptvalue	deps/lua/src/lobject.h	/^#define setptvalue(/;"	d
setptvalue2s	deps/lua/src/lobject.h	/^#define setptvalue2s	/;"	d
setpvalue	deps/lua/src/lobject.h	/^#define setpvalue(/;"	d
setrangeCommand	src/t_string.c	/^void setrangeCommand(client *c) {$/;"	f	typeref:typename:void
setsize	src/ae.h	/^    int setsize; \/* max number of file descriptors tracked *\/$/;"	m	struct:aeEventLoop	typeref:typename:int
setsockopt	deps/hiredis/sockcompat.h	/^#define setsockopt(/;"	d
setsvalue	deps/lua/src/lobject.h	/^#define setsvalue(/;"	d
setsvalue2n	deps/lua/src/lobject.h	/^#define setsvalue2n	/;"	d
setsvalue2s	deps/lua/src/lobject.h	/^#define setsvalue2s	/;"	d
settabsi	deps/lua/src/ldblib.c	/^static void settabsi (lua_State *L, const char *i, int v) {$/;"	f	typeref:typename:void	file:
settabss	deps/lua/src/ldblib.c	/^static void settabss (lua_State *L, const char *i, const char *v) {$/;"	f	typeref:typename:void	file:
setthreshold	deps/lua/src/lgc.c	/^#define setthreshold(/;"	d	file:
setthvalue	deps/lua/src/lobject.h	/^#define setthvalue(/;"	d
setttype	deps/lua/src/lobject.h	/^#define setttype(/;"	d
setupChildSignalHandlers	src/server.c	/^void setupChildSignalHandlers(void) {$/;"	f	typeref:typename:void
setupSignalHandlers	src/server.c	/^void setupSignalHandlers(void) {$/;"	f	typeref:typename:void
setuvalue	deps/lua/src/lobject.h	/^#define setuvalue(/;"	d
sflags	src/server.h	/^    char *sflags;   \/* Flags as string representation, one char per flag. *\/$/;"	m	struct:redisCommand	typeref:typename:char *
sfmt	deps/jemalloc/test/src/SFMT.c	/^    w128_t sfmt[N];$/;"	m	struct:sfmt_s	typeref:typename:w128_t[]	file:
sfmt_s	deps/jemalloc/test/src/SFMT.c	/^struct sfmt_s {$/;"	s	file:
sfmt_t	deps/jemalloc/test/include/test/SFMT.h	/^typedef struct sfmt_s sfmt_t;$/;"	t	typeref:struct:sfmt_s
sha1Hash	utils/tracking_collisions.c	/^uint64_t sha1Hash(char *key, size_t len) {$/;"	f	typeref:typename:uint64_t
sha1Test	src/sha1.c	/^int sha1Test(int argc, char **argv, int accurate)$/;"	f	typeref:typename:int
sha1hex	src/scripting.c	/^void sha1hex(char *digest, char *script, size_t len) {$/;"	f	typeref:typename:void
sha256_final	src/sha256.c	/^void sha256_final(SHA256_CTX *ctx, BYTE hash[])$/;"	f	typeref:typename:void
sha256_init	src/sha256.c	/^void sha256_init(SHA256_CTX *ctx)$/;"	f	typeref:typename:void
sha256_transform	src/sha256.c	/^void sha256_transform(SHA256_CTX *ctx, const BYTE data[])$/;"	f	typeref:typename:void
sha256_update	src/sha256.c	/^void sha256_update(SHA256_CTX *ctx, const BYTE data[], size_t len)$/;"	f	typeref:typename:void
shaScriptObjectDictType	src/server.c	/^dictType shaScriptObjectDictType = {$/;"	v	typeref:typename:dictType
shared	src/server.c	/^struct sharedObjectsStruct shared;$/;"	v	typeref:struct:sharedObjectsStruct
sharedObjectsStruct	src/server.h	/^struct sharedObjectsStruct {$/;"	s
sharedapi	src/server.h	/^    dict *sharedapi;            \/* Like moduleapi but containing the APIs that$/;"	m	struct:redisServer	typeref:typename:dict *
shiftReplicationId	src/replication.c	/^void shiftReplicationId(void) {$/;"	f	typeref:typename:void
short_src	deps/lua/src/lua.h	/^  char short_src[LUA_IDSIZE]; \/* (S) *\/$/;"	m	struct:lua_Debug	typeref:typename:char[]
should_emit_array_length	src/t_zset.c	/^    int                                  should_emit_array_length;$/;"	m	struct:zrange_result_handler	typeref:typename:int	file:
show	utils/hashtable/rehashing.c	/^void show(dict *d) {$/;"	f	typeref:typename:void
showBuckets	utils/hashtable/rehashing.c	/^void showBuckets(dictht ht) {$/;"	f	typeref:typename:void
showLatencyDistLegend	src/redis-cli.c	/^void showLatencyDistLegend(void) {$/;"	f	typeref:typename:void
showLatencyDistSamples	src/redis-cli.c	/^void showLatencyDistSamples(struct distsamples *samples, long long tot) {$/;"	f	typeref:typename:void
showLatencyReport	src/redis-benchmark.c	/^static void showLatencyReport(void) {$/;"	f	typeref:typename:void	file:
showLatestBacklog	src/replication.c	/^void showLatestBacklog(void) {$/;"	f	typeref:typename:void
showThroughput	src/redis-benchmark.c	/^int showThroughput(struct aeEventLoop *eventLoop, long long id, void *clientData) {$/;"	f	typeref:typename:int
show_entry	utils/lru/lfu-simulation.c	/^void show_entry(long pos, struct entry *e) {$/;"	f	typeref:typename:void
shutdown	src/redis-cli.c	/^    int shutdown;$/;"	m	struct:config	typeref:typename:int	file:
shutdownCallback	tests/modules/hooks.c	/^void shutdownCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f	typeref:typename:void
shutdownCommand	src/db.c	/^void shutdownCommand(client *c) {$/;"	f	typeref:typename:void
shutdown_asap	src/server.h	/^    volatile sig_atomic_t shutdown_asap; \/* SHUTDOWN needed ASAP *\/$/;"	m	struct:redisServer	typeref:typename:volatile sig_atomic_t
si	deps/jemalloc/test/src/SFMT.c	/^    __m128i si;$/;"	m	union:W128_T	typeref:typename:__m128i	file:
sig	src/cluster.h	/^    char sig[4];        \/* Signature "RCmb" (Redis Cluster message bus). *\/$/;"	m	struct:__anon2cc7db540b08	typeref:typename:char[4]
sigKillChildHandler	src/server.c	/^static void sigKillChildHandler(int sig) {$/;"	f	typeref:typename:void	file:
sigShutdownHandler	src/server.c	/^static void sigShutdownHandler(int sig) {$/;"	f	typeref:typename:void	file:
sigcontext_t	src/debug.c	/^typedef ucontext_t sigcontext_t;$/;"	t	typeref:typename:ucontext_t	file:
sign	src/bitops.c	/^    int sign;           \/* True if signed, otherwise unsigned op. *\/$/;"	m	struct:bitfieldOp	typeref:typename:int	file:
signalFlushedDb	src/db.c	/^void signalFlushedDb(int dbid, int async) {$/;"	f	typeref:typename:void
signalKeyAsReady	src/blocked.c	/^void signalKeyAsReady(redisDb *db, robj *key, int type) {$/;"	f	typeref:typename:void
signalModifiedKey	src/db.c	/^void signalModifiedKey(client *c, redisDb *db, robj *key) {$/;"	f	typeref:typename:void
signalready	src/module.c	/^            int signalready;       \/* Flag that signalKeyAsReady() is needed. *\/$/;"	m	struct:RedisModuleKey::__anon967b4733010a::__anon967b47330308	typeref:typename:int	file:
significant_figures	deps/hdr_histogram/hdr_histogram.h	/^    int32_t significant_figures;$/;"	m	struct:hdr_histogram	typeref:typename:int32_t
significant_figures	deps/hdr_histogram/hdr_histogram.h	/^    int64_t significant_figures;$/;"	m	struct:hdr_histogram_bucket_config	typeref:typename:int64_t
sigsegvHandler	src/debug.c	/^void sigsegvHandler(int sig, siginfo_t *info, void *secret) {$/;"	f	typeref:typename:void
simfailure_flags	src/sentinel.c	/^    unsigned long simfailure_flags; \/* Failures simulation. *\/$/;"	m	struct:sentinelState	typeref:typename:unsigned long	file:
simpleexp	deps/lua/src/lparser.c	/^static void simpleexp (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
since	src/help.h	/^  char *since;$/;"	m	struct:commandHelp	typeref:typename:char *
singlematch	deps/lua/src/lstrlib.c	/^static int singlematch (int c, const char *p, const char *ep) {$/;"	f	typeref:typename:int	file:
singlestep	deps/lua/src/lgc.c	/^static l_mem singlestep (lua_State *L) {$/;"	f	typeref:typename:l_mem	file:
singlevar	deps/lua/src/lparser.c	/^static void singlevar (LexState *ls, expdesc *var) {$/;"	f	typeref:typename:void	file:
singlevaraux	deps/lua/src/lparser.c	/^static int singlevaraux (FuncState *fs, TString *n, expdesc *var, int base) {$/;"	f	typeref:typename:int	file:
sinterCommand	src/t_set.c	/^void sinterCommand(client *c) {$/;"	f	typeref:typename:void
sinterGenericCommand	src/t_set.c	/^void sinterGenericCommand(client *c, robj **setkeys,$/;"	f	typeref:typename:void
sinterstoreCommand	src/t_set.c	/^void sinterstoreCommand(client *c) {$/;"	f	typeref:typename:void
siphash	src/siphash.c	/^uint64_t siphash(const uint8_t *in, const size_t inlen, const uint8_t *k) {$/;"	f	typeref:typename:uint64_t
siphash_nocase	src/siphash.c	/^uint64_t siphash_nocase(const uint8_t *in, const size_t inlen, const uint8_t *k)$/;"	f	typeref:typename:uint64_t
siphash_test	src/siphash.c	/^int siphash_test(void) {$/;"	f	typeref:typename:int
siptlw	src/siphash.c	/^int siptlw(int c) {$/;"	f	typeref:typename:int
sismemberCommand	src/t_set.c	/^void sismemberCommand(client *c) {$/;"	f	typeref:typename:void
size	deps/hiredis/dict.h	/^    unsigned long size;$/;"	m	struct:dict	typeref:typename:unsigned long
size	deps/jemalloc/include/jemalloc/internal/base_structs.h	/^	size_t		size;$/;"	m	struct:base_block_s	typeref:typename:size_t
size	deps/jemalloc/src/zone.c	/^	size_t (*size)(struct _malloc_zone_t *, const void *);$/;"	m	struct:_malloc_zone_t	typeref:typename:size_t (*)(struct _malloc_zone_t *,const void *)	file:
size	deps/jemalloc/src/zone.c	/^	vm_size_t size;$/;"	m	struct:__anon94e9fb9a0108	typeref:typename:vm_size_t	file:
size	deps/lua/src/lauxlib.c	/^  size_t size;$/;"	m	struct:LoadS	typeref:typename:size_t	file:
size	deps/lua/src/lstate.h	/^  int size;$/;"	m	struct:stringtable	typeref:typename:int
size	deps/lua/src/strbuf.h	/^    int size;$/;"	m	struct:__anon10f823b40108	typeref:typename:int
size	src/cluster.h	/^    int size;             \/* Num of master nodes with at least one slot *\/$/;"	m	struct:clusterState	typeref:typename:int
size	src/dict.h	/^    unsigned long size;$/;"	m	struct:dictht	typeref:typename:unsigned long
size	src/module.c	/^    uint32_t size;$/;"	m	struct:RedisModulePoolAllocBlock	typeref:typename:uint32_t	file:
size	src/rax.h	/^    uint32_t size:29;     \/* Number of children, or compressed string len. *\/$/;"	m	struct:raxNode	typeref:typename:uint32_t:29
size	src/server.h	/^    int size;                           \/* Available array size *\/$/;"	m	struct:__anon3ef696e90708	typeref:typename:int
size	src/server.h	/^    size_t size, used;$/;"	m	struct:clientReplyBlock	typeref:typename:size_t
sizeCclosure	deps/lua/src/lfunc.h	/^#define sizeCclosure(/;"	d
sizeLclosure	deps/lua/src/lfunc.h	/^#define sizeLclosure(/;"	d
sizeMeetsSafetyLimit	src/quicklist.c	/^#define sizeMeetsSafetyLimit(/;"	d	file:
size_allocated	deps/jemalloc/src/zone.c	/^	size_t size_allocated;$/;"	m	struct:malloc_statistics_t	typeref:typename:size_t	file:
size_ci	deps/lua/src/lstate.h	/^  int size_ci;  \/* size of array `base_ci' *\/$/;"	m	struct:lua_State	typeref:typename:int
size_in_use	deps/jemalloc/src/zone.c	/^	size_t size_in_use;$/;"	m	struct:malloc_statistics_t	typeref:typename:size_t	file:
size_t	deps/jemalloc/include/jemalloc/internal/ckh.h	/^typedef void ckh_hash_t (const void *, size_t[2]);$/;"	t	typeref:typename:void ckh_hash_t (const void *,[2])
size_val	deps/jemalloc/include/jemalloc/internal/emitter.h	/^		size_t size_val;$/;"	m	union:emitter_col_s::__anona0eb805b010a	typeref:typename:size_t
sizearray	deps/lua/src/lobject.h	/^  int sizearray;  \/* size of `array' array *\/$/;"	m	struct:Table	typeref:typename:int
sizecmd	src/redis-cli.c	/^    char *sizecmd;$/;"	m	struct:__anon6af24fe90208	typeref:typename:char *	file:
sizecode	deps/lua/src/lobject.h	/^  int sizecode;$/;"	m	struct:Proto	typeref:typename:int
sizek	deps/lua/src/lobject.h	/^  int sizek;  \/* size of `k' *\/$/;"	m	struct:Proto	typeref:typename:int
sizelineinfo	deps/lua/src/lobject.h	/^  int sizelineinfo;$/;"	m	struct:Proto	typeref:typename:int
sizelocvars	deps/lua/src/lobject.h	/^  int sizelocvars;$/;"	m	struct:Proto	typeref:typename:int
sizemask	deps/hiredis/dict.h	/^    unsigned long sizemask;$/;"	m	struct:dict	typeref:typename:unsigned long
sizemask	src/dict.h	/^    unsigned long sizemask;$/;"	m	struct:dictht	typeref:typename:unsigned long
sizenode	deps/lua/src/lobject.h	/^#define sizenode(/;"	d
sizep	deps/lua/src/lobject.h	/^  int sizep;  \/* size of `p' *\/$/;"	m	struct:Proto	typeref:typename:int
sizestring	deps/lua/src/lstring.h	/^#define sizestring(/;"	d
sizeudata	deps/lua/src/lstring.h	/^#define sizeudata(/;"	d
sizeunit	src/redis-cli.c	/^    char *sizeunit;$/;"	m	struct:__anon6af24fe90208	typeref:typename:char *	file:
sizeupvalues	deps/lua/src/lobject.h	/^  int sizeupvalues;$/;"	m	struct:Proto	typeref:typename:int
skip	src/db.c	/^        int skip;$/;"	m	struct:sortGetKeys::__anoncf2eac130108	typeref:typename:int	file:
skip_cert_verify	src/cli_common.h	/^    int skip_cert_verify;$/;"	m	struct:cliSSLconfig	typeref:typename:int
skip_checksum_validation	src/server.h	/^    int skip_checksum_validation;   \/* Disables checksum validateion for RDB and RESTORE payloa/;"	m	struct:redisServer	typeref:typename:int
skip_sep	deps/lua/src/llex.c	/^static int skip_sep (LexState *ls) {$/;"	f	typeref:typename:int	file:
skips	deps/hiredis/test.c	/^static int tests = 0, fails = 0, skips = 0;$/;"	v	typeref:typename:int	file:
skyscraper	src/lolwut6.c	/^struct skyscraper {$/;"	s	file:
sl	src/t_zset.c	/^            } sl;$/;"	m	union:__anon6fce03460408::__anon6fce0346050a::_iterzset	typeref:struct:__anon6fce03460408::__anon6fce0346050a::_iterzset::__anon6fce03460908	file:
slab	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	bool slab;$/;"	m	struct:alloc_ctx_s	typeref:typename:bool
slab_size	deps/jemalloc/include/jemalloc/internal/bin.h	/^	size_t			slab_size;$/;"	m	struct:bin_info_s	typeref:typename:size_t
slabcur	deps/jemalloc/include/jemalloc/internal/bin.h	/^	extent_t		*slabcur;$/;"	m	struct:bin_s	typeref:typename:extent_t *
slabs_full	deps/jemalloc/include/jemalloc/internal/bin.h	/^	extent_list_t		slabs_full;$/;"	m	struct:bin_s	typeref:typename:extent_list_t
slabs_nonfull	deps/jemalloc/include/jemalloc/internal/bin.h	/^	extent_heap_t		slabs_nonfull;$/;"	m	struct:bin_s	typeref:typename:extent_heap_t
slaveIsInHandshakeState	src/replication.c	/^int slaveIsInHandshakeState(void) {$/;"	f	typeref:typename:int
slaveKeysWithExpire	src/expire.c	/^dict *slaveKeysWithExpire = NULL;$/;"	v	typeref:typename:dict *
slaveMode	src/redis-cli.c	/^static void slaveMode(void) {$/;"	f	typeref:typename:void	file:
slaveTryPartialResynchronization	src/replication.c	/^int slaveTryPartialResynchronization(connection *conn, int read_reply) {$/;"	f	typeref:typename:int
slave_addr	src/server.h	/^    char *slave_addr;       \/* Optionally given by REPLCONF ip-address *\/$/;"	m	struct:client	typeref:typename:char *
slave_announce_ip	src/server.h	/^    char *slave_announce_ip;        \/* Give the master this ip address. *\/$/;"	m	struct:redisServer	typeref:typename:char *
slave_announce_port	src/server.h	/^    int slave_announce_port;        \/* Give the master this listening port. *\/$/;"	m	struct:redisServer	typeref:typename:int
slave_capa	src/server.h	/^    int slave_capa;         \/* Slave capabilities: SLAVE_CAPA_* bitwise OR. *\/$/;"	m	struct:client	typeref:typename:int
slave_conf_change_time	src/sentinel.c	/^    mstime_t slave_conf_change_time; \/* Last time slave master addr changed. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:mstime_t	file:
slave_listening_port	src/server.h	/^    int slave_listening_port; \/* As configured with: REPLCONF listening-port *\/$/;"	m	struct:client	typeref:typename:int
slave_master_host	src/sentinel.c	/^    char *slave_master_host;    \/* Master host as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:char *	file:
slave_master_link_status	src/sentinel.c	/^    int slave_master_link_status; \/* Master link status as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:int	file:
slave_master_port	src/sentinel.c	/^    int slave_master_port;      \/* Master port as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:int	file:
slave_mode	src/redis-cli.c	/^    int slave_mode;$/;"	m	struct:config	typeref:typename:int	file:
slave_priority	src/sentinel.c	/^    int slave_priority; \/* Slave priority according to its INFO output. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:int	file:
slave_priority	src/server.h	/^    int slave_priority;             \/* Reported in INFO and used by Sentinel. *\/$/;"	m	struct:redisServer	typeref:typename:int
slave_reconf_sent_time	src/sentinel.c	/^    mstime_t slave_reconf_sent_time; \/* Time at which we sent SLAVE OF <new> *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:mstime_t	file:
slave_repl_offset	src/sentinel.c	/^    unsigned long long slave_repl_offset; \/* Slave replication offset. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:unsigned long long	file:
slaveof	src/cluster.h	/^    char slaveof[CLUSTER_NAMELEN];$/;"	m	struct:__anon2cc7db540b08	typeref:typename:char[]
slaveof	src/cluster.h	/^    struct clusterNode *slaveof; \/* pointer to the master node. Note that it$/;"	m	struct:clusterNode	typeref:struct:clusterNode *
slaves	src/cluster.h	/^    struct clusterNode **slaves; \/* pointers to slave nodes *\/$/;"	m	struct:clusterNode	typeref:struct:clusterNode **
slaves	src/sentinel.c	/^    dict *slaves;       \/* Slaves for this master instance. *\/$/;"	m	struct:sentinelRedisInstance	typeref:typename:dict *	file:
slaves	src/server.h	/^    list *slaves, *monitors;    \/* List of slaves and MONITORs *\/$/;"	m	struct:redisServer	typeref:typename:list *
slaveseldb	src/server.h	/^    int slaveseldb;                 \/* Last SELECTed DB in replication output *\/$/;"	m	struct:redisServer	typeref:typename:int
slen	src/ziplist.h	/^    unsigned int slen;$/;"	m	struct:__anon4d39dfe10108	typeref:typename:unsigned int
slot	src/redis-cli.c	/^    int slot;$/;"	m	struct:clusterManagerReshardTableItem	typeref:typename:int	file:
slotToKeyAdd	src/db.c	/^void slotToKeyAdd(sds key) {$/;"	f	typeref:typename:void
slotToKeyDel	src/db.c	/^void slotToKeyDel(sds key) {$/;"	f	typeref:typename:void
slotToKeyFlush	src/db.c	/^void slotToKeyFlush(int async) {$/;"	f	typeref:typename:void
slotToKeyUpdateKey	src/db.c	/^void slotToKeyUpdateKey(sds key, int add) {$/;"	f	typeref:typename:void
slots	src/cluster.h	/^    clusterNode *slots[CLUSTER_SLOTS];$/;"	m	struct:clusterState	typeref:typename:clusterNode * []
slots	src/cluster.h	/^    unsigned char slots[CLUSTER_SLOTS\/8]; \/* Slots bitmap. *\/$/;"	m	struct:__anon2cc7db540408	typeref:typename:unsigned char[]
slots	src/cluster.h	/^    unsigned char slots[CLUSTER_SLOTS\/8]; \/* slots handled by this node *\/$/;"	m	struct:clusterNode	typeref:typename:unsigned char[]
slots	src/redis-benchmark.c	/^    int *slots;$/;"	m	struct:clusterNode	typeref:typename:int *	file:
slots	src/redis-cli.c	/^    int slots;$/;"	m	struct:clusterManagerCommand	typeref:typename:int	file:
slots	src/redis-cli.c	/^    uint8_t slots[CLUSTER_MANAGER_SLOTS];$/;"	m	struct:clusterManagerNode	typeref:typename:uint8_t[]	file:
slots_count	src/redis-benchmark.c	/^    int slots_count;$/;"	m	struct:clusterNode	typeref:typename:int	file:
slots_count	src/redis-cli.c	/^    int slots_count;$/;"	m	struct:clusterManagerNode	typeref:typename:int	file:
slots_info	src/cluster.h	/^    sds slots_info; \/* Slots info represented by string. *\/$/;"	m	struct:clusterNode	typeref:typename:sds
slots_keys_count	src/cluster.h	/^    uint64_t slots_keys_count[CLUSTER_SLOTS];$/;"	m	struct:clusterState	typeref:typename:uint64_t[]
slots_keys_count	src/db.c	/^    uint64_t slots_keys_count[CLUSTER_SLOTS];$/;"	m	struct:dbBackup	typeref:typename:uint64_t[]	file:
slots_last_update	src/redis-benchmark.c	/^    int slots_last_update;$/;"	m	struct:_client	typeref:typename:int	file:
slots_last_update	src/redis-benchmark.c	/^    redisAtomic int slots_last_update;$/;"	m	struct:config	typeref:typename:redisAtomic int	file:
slots_to_keys	src/cluster.h	/^    rax *slots_to_keys;$/;"	m	struct:clusterState	typeref:typename:rax *
slots_to_keys	src/db.c	/^    rax *slots_to_keys;$/;"	m	struct:dbBackup	typeref:typename:rax *	file:
slow	deps/jemalloc/src/jemalloc.c	/^	bool slow;$/;"	m	struct:static_opts_s	typeref:typename:bool	file:
slowlog	src/server.h	/^    list *slowlog;                  \/* SLOWLOG list of commands *\/$/;"	m	struct:redisServer	typeref:typename:list *
slowlogCommand	src/slowlog.c	/^void slowlogCommand(client *c) {$/;"	f	typeref:typename:void
slowlogCreateEntry	src/slowlog.c	/^slowlogEntry *slowlogCreateEntry(client *c, robj **argv, int argc, long long duration) {$/;"	f	typeref:typename:slowlogEntry *
slowlogEntry	src/slowlog.h	/^typedef struct slowlogEntry {$/;"	s
slowlogEntry	src/slowlog.h	/^} slowlogEntry;$/;"	t	typeref:struct:slowlogEntry
slowlogFreeEntry	src/slowlog.c	/^void slowlogFreeEntry(void *septr) {$/;"	f	typeref:typename:void
slowlogInit	src/slowlog.c	/^void slowlogInit(void) {$/;"	f	typeref:typename:void
slowlogPushCurrentCommand	src/server.c	/^void slowlogPushCurrentCommand(client *c, struct redisCommand *cmd, ustime_t duration) {$/;"	f	typeref:typename:void
slowlogPushEntryIfNeeded	src/slowlog.c	/^void slowlogPushEntryIfNeeded(client *c, robj **argv, int argc, long long duration) {$/;"	f	typeref:typename:void
slowlogReset	src/slowlog.c	/^void slowlogReset(void) {$/;"	f	typeref:typename:void
slowlog_entry_id	src/server.h	/^    long long slowlog_entry_id;     \/* SLOWLOG current entry ID *\/$/;"	m	struct:redisServer	typeref:typename:long long
slowlog_log_slower_than	src/server.h	/^    long long slowlog_log_slower_than; \/* SLOWLOG time limit (to get logged) *\/$/;"	m	struct:redisServer	typeref:typename:long long
slowlog_max_len	src/server.h	/^    unsigned long slowlog_max_len;     \/* SLOWLOG max number of items logged *\/$/;"	m	struct:redisServer	typeref:typename:unsigned long
slowscripterr	src/server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *********** [4]* [4]* [4]* [4]*********
smapsGetSharedDirty	src/server.c	/^static int smapsGetSharedDirty(unsigned long addr) {$/;"	f	typeref:typename:int	file:
smismemberCommand	src/t_set.c	/^void smismemberCommand(client *c) {$/;"	f	typeref:typename:void
smoothstep_tab	deps/jemalloc/test/unit/smoothstep.c	/^static const uint64_t smoothstep_tab[] = {$/;"	v	typeref:typename:const uint64_t[]	file:
smoveCommand	src/t_set.c	/^void smoveCommand(client *c) {$/;"	f	typeref:typename:void
sndbuf	src/cluster.h	/^    sds sndbuf;                 \/* Packet send buffer *\/$/;"	m	struct:clusterLink	typeref:typename:sds
sni	src/cli_common.h	/^    char *sni;$/;"	m	struct:cliSSLconfig	typeref:typename:char *
snprintf	deps/hdr_histogram/hdr_histogram.c	/^#define snprintf /;"	d	file:
snprintf	deps/hiredis/win32.h	/^#define snprintf /;"	d
sockcompat.o	deps/hiredis/Makefile	/^sockcompat.o: sockcompat.c sockcompat.h$/;"	t
socket	deps/hiredis/sockcompat.h	/^#define socket(/;"	d
socketFds	src/server.h	/^typedef struct socketFds {$/;"	s
socketFds	src/server.h	/^} socketFds;$/;"	t	typeref:struct:socketFds
socketRef	deps/hiredis/adapters/macosx.h	/^    CFSocketRef socketRef;$/;"	m	struct:__anona6f175db0108	typeref:typename:CFSocketRef
sockname	src/server.h	/^    sds sockname;           \/* Cached connection target address. *\/$/;"	m	struct:client	typeref:typename:sds
sofd	src/server.h	/^    int sofd;                   \/* Unix socket file descriptor *\/$/;"	m	struct:redisServer	typeref:typename:int
soft_limit_bytes	src/server.h	/^    unsigned long long soft_limit_bytes;$/;"	m	struct:clientBufferLimitsConfig	typeref:typename:unsigned long long
soft_limit_seconds	src/server.h	/^    time_t soft_limit_seconds;$/;"	m	struct:clientBufferLimitsConfig	typeref:typename:time_t
solaris	deps/lua/src/Makefile	/^solaris:$/;"	t
sopts	deps/jemalloc/src/jemalloc.c	/^	static_opts_t sopts;$/;"	v	typeref:typename:static_opts_t
sort	deps/lua/src/ltablib.c	/^static int sort (lua_State *L) {$/;"	f	typeref:typename:int	file:
sortCommand	src/sort.c	/^void sortCommand(client *c) {$/;"	f	typeref:typename:void
sortCompare	src/sort.c	/^int sortCompare(const void *s1, const void *s2) {$/;"	f	typeref:typename:int
sortGetKeys	src/db.c	/^int sortGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f	typeref:typename:int
sortPointers	utils/hashtable/rehashing.c	/^int sortPointers(const void *a, const void *b) {$/;"	f	typeref:typename:int
sort_alpha	src/server.h	/^    int sort_alpha;$/;"	m	struct:redisServer	typeref:typename:int
sort_bypattern	src/server.h	/^    int sort_bypattern;$/;"	m	struct:redisServer	typeref:typename:int
sort_comp	deps/lua/src/ltablib.c	/^static int sort_comp (lua_State *L, int a, int b) {$/;"	f	typeref:typename:int	file:
sort_desc	src/server.h	/^    int sort_desc;$/;"	m	struct:redisServer	typeref:typename:int
sort_gp_asc	src/geo.c	/^static int sort_gp_asc(const void *a, const void *b) {$/;"	f	typeref:typename:int	file:
sort_gp_desc	src/geo.c	/^static int sort_gp_desc(const void *a, const void *b) {$/;"	f	typeref:typename:int	file:
sort_store	src/server.h	/^    int sort_store;$/;"	m	struct:redisServer	typeref:typename:int
source	deps/hiredis/adapters/glib.h	/^    GSource source;$/;"	m	struct:__anonad20ee0e0108	typeref:typename:GSource
source	deps/lua/src/llex.h	/^  TString *source;  \/* current source name *\/$/;"	m	struct:LexState	typeref:typename:TString *
source	deps/lua/src/lobject.h	/^  TString  *source;$/;"	m	struct:Proto	typeref:typename:TString *
source	deps/lua/src/lua.h	/^  const char *source;	\/* (S) *\/$/;"	m	struct:lua_Debug	typeref:typename:const char *
source	src/redis-cli.c	/^    clusterManagerNode *source;$/;"	m	struct:clusterManagerReshardTableItem	typeref:typename:clusterManagerNode *	file:
sourceRef	deps/hiredis/adapters/macosx.h	/^    CFRunLoopSourceRef sourceRef;$/;"	m	struct:__anona6f175db0108	typeref:typename:CFRunLoopSourceRef
source_addr	deps/hiredis/hiredis.h	/^            const char *source_addr;$/;"	m	struct:__anon7daed6b50108::__anon7daed6b5020a::__anon7daed6b50308	typeref:typename:const char *
source_addr	deps/hiredis/hiredis.h	/^        char *source_addr;$/;"	m	struct:redisContext::__anon7daed6b50408	typeref:typename:char *
south	src/geohash.h	/^    GeoHashBits south;$/;"	m	struct:__anona01652f10508	typeref:typename:GeoHashBits
south_east	src/geohash.h	/^    GeoHashBits south_east;$/;"	m	struct:__anona01652f10508	typeref:typename:GeoHashBits
south_west	src/geohash.h	/^    GeoHashBits south_west;$/;"	m	struct:__anona01652f10508	typeref:typename:GeoHashBits
space	src/server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj ********
span	src/server.h	/^        unsigned long span;$/;"	m	struct:zskiplistNode::zskiplistLevel	typeref:typename:unsigned long
sparklineRender	src/sparkline.c	/^sds sparklineRender(sds output, struct sequence *seq, int columns, int rows, int flags) {$/;"	f	typeref:typename:sds
sparklineRenderRange	src/sparkline.c	/^sds sparklineRenderRange(sds output, struct sequence *seq, int rows, int offset, int len, int fl/;"	f	typeref:typename:sds
sparklineSequenceAddSample	src/sparkline.c	/^void sparklineSequenceAddSample(struct sequence *seq, double value, char *label) {$/;"	f	typeref:typename:void
special_asterick	src/server.h	/^    *getack, *special_asterick, *special_equals, *default_username, *redacted,$/;"	m	struct:sharedObjectsStruct
special_equals	src/server.h	/^    *getack, *special_asterick, *special_equals, *default_username, *redacted,$/;"	m	struct:sharedObjectsStruct
specifics	deps/hdr_histogram/hdr_histogram.h	/^    } specifics;$/;"	m	struct:hdr_iter	typeref:union:hdr_iter::__anon905d92fb010a
spectrum_palette	src/redis-cli.c	/^int *spectrum_palette;$/;"	v	typeref:typename:int *
spectrum_palette_color	src/redis-cli.c	/^int spectrum_palette_color[] = {0,233,234,235,237,239,241,243,245,247,144,143,142,184,226,214,20/;"	v	typeref:typename:int[]
spectrum_palette_color_size	src/redis-cli.c	/^int spectrum_palette_color_size = 19;$/;"	v	typeref:typename:int
spectrum_palette_mono	src/redis-cli.c	/^int spectrum_palette_mono[] = {0,233,234,235,237,239,241,243,245,247,249,251,253};$/;"	v	typeref:typename:int[]
spectrum_palette_mono_size	src/redis-cli.c	/^int spectrum_palette_mono_size = 13;$/;"	v	typeref:typename:int
spectrum_palette_size	src/redis-cli.c	/^int spectrum_palette_size;$/;"	v	typeref:typename:int
spin_adaptive	deps/jemalloc/include/jemalloc/internal/spin.h	/^spin_adaptive(spin_t *spin) {$/;"	f	typeref:typename:void
spin_cpu_spinwait	deps/jemalloc/include/jemalloc/internal/spin.h	/^spin_cpu_spinwait() {$/;"	f	typeref:typename:void
spin_t	deps/jemalloc/include/jemalloc/internal/spin.h	/^} spin_t;$/;"	t	typeref:struct:__anon0a9ad5bb0108
split	deps/jemalloc/include/jemalloc/jemalloc.h	/^	extent_split_t		*split;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_split_t *
split	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h	/^	extent_split_t		*split;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_split_t *
split	deps/jemalloc/include/jemalloc/jemalloc_typedefs.h.in	/^	extent_split_t		*split;$/;"	m	struct:extent_hooks_s	typeref:typename:extent_split_t *	file:
spopCommand	src/t_set.c	/^void spopCommand(client *c) {$/;"	f	typeref:typename:void
spopWithCountCommand	src/t_set.c	/^void spopWithCountCommand(client *c) {$/;"	f	typeref:typename:void
spt_clearenv	src/setproctitle.c	/^int spt_clearenv(void) {$/;"	f	typeref:typename:int
spt_copyargs	src/setproctitle.c	/^static int spt_copyargs(int argc, char *argv[]) {$/;"	f	typeref:typename:int	file:
spt_copyenv	src/setproctitle.c	/^static int spt_copyenv(int envc, char *oldenv[]) {$/;"	f	typeref:typename:int	file:
spt_init	src/setproctitle.c	/^void spt_init(int argc, char *argv[]) {$/;"	f	typeref:typename:void
spt_min	src/setproctitle.c	/^static inline size_t spt_min(size_t a, size_t b) {$/;"	f	typeref:typename:size_t	file:
sptr	src/t_zset.c	/^                unsigned char *eptr, *sptr;$/;"	m	struct:__anon6fce03460408::__anon6fce0346050a::_iterzset::__anon6fce03460808	typeref:typename:unsigned char **	file:
srandmemberCommand	src/t_set.c	/^void srandmemberCommand(client *c) {$/;"	f	typeref:typename:void
srandmemberWithCountCommand	src/t_set.c	/^void srandmemberWithCountCommand(client *c) {$/;"	f	typeref:typename:void
src	src/scripting.c	/^    sds *src;   \/* Lua script source code split by line. *\/$/;"	m	struct:ldbState	typeref:typename:sds *	file:
src/help.h	src/Makefile	/^src\/help.h:$/;"	t
src_end	deps/lua/src/lstrlib.c	/^  const char *src_end;  \/* end (`\\0') of source string *\/$/;"	m	struct:MatchState	typeref:typename:const char *	file:
src_init	deps/lua/src/lstrlib.c	/^  const char *src_init;  \/* init of source string *\/$/;"	m	struct:MatchState	typeref:typename:const char *	file:
srcroot	deps/jemalloc/Makefile	/^srcroot := $/;"	m
srcroot	deps/jemalloc/Makefile.in	/^srcroot := @srcroot@$/;"	m
srem	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
sremCommand	src/server.h	/^                        *zpopmaxCommand, *sremCommand, *execCommand,$/;"	m	struct:redisServer	typeref:struct:redisCommand ********
sremCommand	src/t_set.c	/^void sremCommand(client *c) {$/;"	f	typeref:typename:void
sscanCommand	src/t_set.c	/^void sscanCommand(client *c) {$/;"	f	typeref:typename:void
ssize_t	deps/hiredis/hiredis.h	/^typedef long long ssize_t;$/;"	t	typeref:typename:long long
ssize_t	deps/hiredis/sds.h	/^typedef long long ssize_t;$/;"	t	typeref:typename:long long
ssize_t	deps/hiredis/sockcompat.h	/^typedef long long ssize_t;$/;"	t	typeref:typename:long long
ssize_t	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_decls.h	/^typedef intptr_t ssize_t;$/;"	t	typeref:typename:intptr_t
ssize_val	deps/jemalloc/include/jemalloc/internal/emitter.h	/^		ssize_t ssize_val;$/;"	m	union:emitter_col_s::__anona0eb805b010a	typeref:typename:ssize_t
ssl	deps/hiredis/ssl.c	/^    SSL *ssl;$/;"	m	struct:redisSSL	typeref:typename:SSL *	file:
ssl	deps/hiredis/test.c	/^    } ssl;$/;"	m	struct:config	typeref:struct:config::__anonab9ca1680308	file:
ssl	src/tls.c	/^    SSL *ssl;$/;"	m	struct:tls_connection	typeref:typename:SSL *	file:
ssl.o	deps/hiredis/Makefile	/^ssl.o: ssl.c hiredis.h read.h sds.h alloc.h async.h win32.h async_private.h$/;"	t
sslLockAcquire	deps/hiredis/ssl.c	/^static void sslLockAcquire(sslLockType *l) {$/;"	f	typeref:typename:void	file:
sslLockAcquire	deps/hiredis/ssl.c	/^static void sslLockAcquire(sslLockType* l) {$/;"	f	typeref:typename:void	file:
sslLockInit	deps/hiredis/ssl.c	/^static void sslLockInit(sslLockType *l) {$/;"	f	typeref:typename:void	file:
sslLockInit	deps/hiredis/ssl.c	/^static void sslLockInit(sslLockType* l) {$/;"	f	typeref:typename:void	file:
sslLockRelease	deps/hiredis/ssl.c	/^static void sslLockRelease(sslLockType *l) {$/;"	f	typeref:typename:void	file:
sslLockRelease	deps/hiredis/ssl.c	/^static void sslLockRelease(sslLockType* l) {$/;"	f	typeref:typename:void	file:
sslLockType	deps/hiredis/ssl.c	/^typedef CRITICAL_SECTION sslLockType;$/;"	t	typeref:typename:CRITICAL_SECTION	file:
sslLockType	deps/hiredis/ssl.c	/^typedef pthread_mutex_t sslLockType;$/;"	t	typeref:typename:pthread_mutex_t	file:
sslLockingCallback	src/tls.c	/^static void sslLockingCallback(int mode, int lock_id, const char *f, int line) {$/;"	f	typeref:typename:void	file:
ssl_ctx	deps/hiredis/ssl.c	/^    SSL_CTX *ssl_ctx;$/;"	m	struct:redisSSLContext	typeref:typename:SSL_CTX *	file:
ssl_error	src/tls.c	/^    char *ssl_error;$/;"	m	struct:tls_connection	typeref:typename:char *	file:
sslconfig	src/redis-benchmark.c	/^    struct cliSSLconfig sslconfig;$/;"	m	struct:config	typeref:struct:cliSSLconfig	file:
sslconfig	src/redis-cli.c	/^    cliSSLconfig sslconfig;$/;"	m	struct:config	typeref:typename:cliSSLconfig	file:
sst	src/config.c	/^        ssize_t *sst;$/;"	m	union:numericConfigData::__anon722b8083020a	typeref:typename:ssize_t *	file:
st	src/config.c	/^        size_t *st;$/;"	m	union:numericConfigData::__anon722b8083020a	typeref:typename:size_t *	file:
stack	deps/lua/src/lstate.h	/^  StkId stack;  \/* stack base *\/$/;"	m	struct:lua_State	typeref:typename:StkId
stack	src/rax.h	/^    raxStack stack;         \/* Stack used for unsafe iteration. *\/$/;"	m	struct:raxIterator	typeref:typename:raxStack
stack	src/rax.h	/^    void **stack; \/* Points to static_items or an heap allocated array. *\/$/;"	m	struct:raxStack	typeref:typename:void **
stack_init	deps/lua/src/lstate.c	/^static void stack_init (lua_State *L1, lua_State *L) {$/;"	f	typeref:typename:void	file:
stack_last	deps/lua/src/lstate.h	/^  StkId stack_last;  \/* last free slot in the stack *\/$/;"	m	struct:lua_State	typeref:typename:StkId
stack_nelms	deps/jemalloc/src/tcache.c	/^static unsigned		stack_nelms; \/* Total stack elms per tcache. *\/$/;"	v	typeref:typename:unsigned	file:
stacksize	deps/lua/src/lstate.h	/^  int stacksize;$/;"	m	struct:lua_State	typeref:typename:int
stagfree	src/redis-benchmark.c	/^    size_t stagfree;        \/* Number of unused pointers in client->stagptr *\/$/;"	m	struct:_client	typeref:typename:size_t	file:
staglen	src/redis-benchmark.c	/^    size_t staglen;         \/* Number of pointers in client->stagptr *\/$/;"	m	struct:_client	typeref:typename:size_t	file:
stagptr	src/redis-benchmark.c	/^    char **stagptr;         \/* Pointers to slot hashtags (cluster mode only) *\/$/;"	m	struct:_client	typeref:typename:char **	file:
standardConfig	src/config.c	/^typedef struct standardConfig {$/;"	s	file:
standardConfig	src/config.c	/^} standardConfig;$/;"	t	typeref:struct:standardConfig	file:
start	src/module.c	/^            uint32_t start;        \/* Start pos for positional ranges. *\/$/;"	m	struct:RedisModuleKey::__anon967b4733010a::__anon967b47330208	typeref:typename:uint32_t	file:
start	src/redis-benchmark.c	/^    long long start;        \/* Start time of a request *\/$/;"	m	struct:_client	typeref:typename:long long	file:
start	src/redis-benchmark.c	/^    long long start;$/;"	m	struct:config	typeref:typename:long long	file:
startAppendOnly	src/aof.c	/^int startAppendOnly(void) {$/;"	f	typeref:typename:int
startBenchmarkThreads	src/redis-benchmark.c	/^static void startBenchmarkThreads() {$/;"	f	typeref:typename:void	file:
startBgsaveForReplication	src/replication.c	/^int startBgsaveForReplication(int mincapa) {$/;"	f	typeref:typename:int
startLoading	src/rdb.c	/^void startLoading(size_t size, int rdbflags) {$/;"	f	typeref:typename:void
startLoadingFile	src/rdb.c	/^void startLoadingFile(FILE *fp, char* filename, int rdbflags) {$/;"	f	typeref:typename:void
startSaving	src/rdb.c	/^void startSaving(int rdbflags) {$/;"	f	typeref:typename:void
startThreadedIO	src/networking.c	/^void startThreadedIO(void) {$/;"	f	typeref:typename:void
start_benchmark	src/dict.c	/^#define start_benchmark(/;"	d	file:
start_capture	deps/lua/src/lstrlib.c	/^static const char *start_capture (MatchState *ms, const char *s,$/;"	f	typeref:typename:const char *	file:
start_key	src/stream.h	/^    uint64_t start_key[2];  \/* Start key as 128 bit big endian. *\/$/;"	m	struct:streamIterator	typeref:typename:uint64_t[2]
start_time	src/sentinel.c	/^    mstime_t start_time;    \/* Script execution time if the script is running,$/;"	m	struct:sentinelScriptJob	typeref:typename:mstime_t	file:
startpc	deps/lua/src/lobject.h	/^  int startpc;  \/* first point where variable is active *\/$/;"	m	struct:LocVar	typeref:typename:int
startup_allocated	src/server.h	/^    size_t startup_allocated;$/;"	m	struct:redisMemOverhead	typeref:typename:size_t
statMode	src/redis-cli.c	/^static void statMode(void) {$/;"	f	typeref:typename:void	file:
stat_active_defrag_hits	src/server.h	/^    long long stat_active_defrag_hits;      \/* number of allocations moved *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_active_defrag_key_hits	src/server.h	/^    long long stat_active_defrag_key_hits;  \/* number of keys with moved allocations *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_active_defrag_key_misses	src/server.h	/^    long long stat_active_defrag_key_misses;\/* number of keys scanned and not moved *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_active_defrag_misses	src/server.h	/^    long long stat_active_defrag_misses;    \/* number of allocations scanned but not moved *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_active_defrag_scanned	src/server.h	/^    long long stat_active_defrag_scanned;   \/* number of dictEntries scanned *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_aof_cow_bytes	src/server.h	/^    size_t stat_aof_cow_bytes;      \/* Copy on write bytes during AOF rewrite. *\/$/;"	m	struct:redisServer	typeref:typename:size_t
stat_clients_type_memory	src/server.h	/^    uint64_t stat_clients_type_memory[CLIENT_TYPE_COUNT];\/* Mem usage by type *\/$/;"	m	struct:redisServer	typeref:typename:uint64_t[]
stat_current_cow_bytes	src/server.h	/^    size_t stat_current_cow_bytes;  \/* Copy on write bytes while child is active. *\/$/;"	m	struct:redisServer	typeref:typename:size_t
stat_current_cow_updated	src/server.h	/^    monotime stat_current_cow_updated;  \/* Last update time of stat_current_cow_bytes *\/$/;"	m	struct:redisServer	typeref:typename:monotime
stat_current_save_keys_processed	src/server.h	/^    size_t stat_current_save_keys_processed;  \/* Processed keys while child is active. *\/$/;"	m	struct:redisServer	typeref:typename:size_t
stat_current_save_keys_total	src/server.h	/^    size_t stat_current_save_keys_total;  \/* Number of keys when child started. *\/$/;"	m	struct:redisServer	typeref:typename:size_t
stat_dump_payload_sanitizations	src/server.h	/^    long long stat_dump_payload_sanitizations; \/* Number deep dump payloads integrity validatio/;"	m	struct:redisServer	typeref:typename:long long
stat_evictedkeys	src/server.h	/^    long long stat_evictedkeys;     \/* Number of evicted keys (maxmemory) *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_expire_cycle_time_used	src/server.h	/^    long long stat_expire_cycle_time_used; \/* Cumulative microseconds used. *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_expired_stale_perc	src/server.h	/^    double stat_expired_stale_perc; \/* Percentage of keys probably expired *\/$/;"	m	struct:redisServer	typeref:typename:double
stat_expired_time_cap_reached_count	src/server.h	/^    long long stat_expired_time_cap_reached_count; \/* Early expire cylce stops.*\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_expiredkeys	src/server.h	/^    long long stat_expiredkeys;     \/* Number of expired keys *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_fork_rate	src/server.h	/^    double stat_fork_rate;          \/* Fork rate in GB\/sec. *\/$/;"	m	struct:redisServer	typeref:typename:double
stat_fork_time	src/server.h	/^    long long stat_fork_time;       \/* Time needed to perform latest fork() *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_io_reads_processed	src/server.h	/^    long long stat_io_reads_processed; \/* Number of read events processed by IO \/ Main threads/;"	m	struct:redisServer	typeref:typename:long long
stat_io_writes_processed	src/server.h	/^    long long stat_io_writes_processed; \/* Number of write events processed by IO \/ Main threa/;"	m	struct:redisServer	typeref:typename:long long
stat_keyspace_hits	src/server.h	/^    long long stat_keyspace_hits;   \/* Number of successful lookups of keys *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_keyspace_misses	src/server.h	/^    long long stat_keyspace_misses; \/* Number of failed lookups of keys *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_mode	src/redis-cli.c	/^    int stat_mode;$/;"	m	struct:config	typeref:typename:int	file:
stat_module_cow_bytes	src/server.h	/^    size_t stat_module_cow_bytes;   \/* Copy on write bytes during module fork. *\/$/;"	m	struct:redisServer	typeref:typename:size_t
stat_module_progress	src/server.h	/^    double stat_module_progress;   \/* Module save progress. *\/$/;"	m	struct:redisServer	typeref:typename:double
stat_net_input_bytes	src/server.h	/^    redisAtomic long long stat_net_input_bytes; \/* Bytes read from network. *\/$/;"	m	struct:redisServer	typeref:typename:redisAtomic long long
stat_net_output_bytes	src/server.h	/^    redisAtomic long long stat_net_output_bytes; \/* Bytes written to network. *\/$/;"	m	struct:redisServer	typeref:typename:redisAtomic long long
stat_numcommands	src/server.h	/^    long long stat_numcommands;     \/* Number of processed commands *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_numconnections	src/server.h	/^    long long stat_numconnections;  \/* Number of connections received *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_peak_memory	src/server.h	/^    size_t stat_peak_memory;        \/* Max used memory record *\/$/;"	m	struct:redisServer	typeref:typename:size_t
stat_rdb_cow_bytes	src/server.h	/^    size_t stat_rdb_cow_bytes;      \/* Copy on write bytes during RDB saving. *\/$/;"	m	struct:redisServer	typeref:typename:size_t
stat_rejected_conn	src/server.h	/^    long long stat_rejected_conn;   \/* Clients rejected because of maxclients *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_starttime	src/server.h	/^    time_t stat_starttime;          \/* Server start time *\/$/;"	m	struct:redisServer	typeref:typename:time_t
stat_sync_full	src/server.h	/^    long long stat_sync_full;       \/* Number of full resyncs with slaves. *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_sync_partial_err	src/server.h	/^    long long stat_sync_partial_err;\/* Number of unaccepted PSYNC requests. *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_sync_partial_ok	src/server.h	/^    long long stat_sync_partial_ok; \/* Number of accepted PSYNC requests. *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_total_error_replies	src/server.h	/^    long long stat_total_error_replies; \/* Total number of issued error replies ( command + rej/;"	m	struct:redisServer	typeref:typename:long long
stat_total_forks	src/server.h	/^    long long stat_total_forks;     \/* Total count of fork. *\/$/;"	m	struct:redisServer	typeref:typename:long long
stat_total_reads_processed	src/server.h	/^    redisAtomic long long stat_total_reads_processed; \/* Total number of read events processed /;"	m	struct:redisServer	typeref:typename:redisAtomic long long
stat_total_writes_processed	src/server.h	/^    redisAtomic long long stat_total_writes_processed; \/* Total number of write events processe/;"	m	struct:redisServer	typeref:typename:redisAtomic long long
stat_unexpected_error_replies	src/server.h	/^    long long stat_unexpected_error_replies; \/* Number of unexpected (aof-loading, replica to m/;"	m	struct:redisServer	typeref:typename:long long
state	deps/hiredis/adapters/libevent.h	/^    short state;$/;"	m	struct:redisLibeventEvents	typeref:typename:short
state	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	background_thread_state_t	state;$/;"	m	struct:background_thread_info_s	typeref:typename:background_thread_state_t
state	deps/jemalloc/include/jemalloc/internal/extent_structs.h	/^	extent_state_t		state;$/;"	m	struct:extents_s	typeref:typename:extent_state_t
state	deps/jemalloc/include/jemalloc/internal/log.h	/^	atomic_u_t state;$/;"	m	struct:log_var_s	typeref:typename:atomic_u_t
state	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_tctx_state_t	state;$/;"	m	struct:prof_tctx_s	typeref:typename:prof_tctx_state_t
state	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_state_t	state;$/;"	m	struct:tsd_s	typeref:typename:tsd_state_t
state	src/cluster.h	/^    int state;            \/* CLUSTER_OK, CLUSTER_FAIL, ... *\/$/;"	m	struct:clusterState	typeref:typename:int
state	src/cluster.h	/^    unsigned char state; \/* Cluster state from the POV of the sender *\/$/;"	m	struct:__anon2cc7db540b08	typeref:typename:unsigned char
state	src/connection.h	/^    ConnectionState state;$/;"	m	struct:connection	typeref:typename:ConnectionState
state	src/sha1.h	/^    uint32_t state[5];$/;"	m	struct:__anon790f1a3f0108	typeref:typename:uint32_t[5]
state	src/sha256.h	/^	WORD state[8];$/;"	m	struct:__anonf953c6cb0108	typeref:typename:WORD[8]
state_size	deps/lua/src/lstate.c	/^#define state_size(/;"	d	file:
statement	deps/lua/src/lparser.c	/^static int statement (LexState *ls) {$/;"	f	typeref:typename:int	file:
static	deps/hiredis/Makefile	/^static: $(SSL_STLIBNAME)$/;"	t
static	deps/hiredis/Makefile	/^static: $(STLIBNAME)$/;"	t
static_items	src/rax.h	/^    void *static_items[RAX_STACK_STATIC_ITEMS];$/;"	m	struct:raxStack	typeref:typename:void * []
static_opts_init	deps/jemalloc/src/jemalloc.c	/^static_opts_init(static_opts_t *static_opts) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
static_opts_s	deps/jemalloc/src/jemalloc.c	/^struct static_opts_s {$/;"	s	file:
static_opts_t	deps/jemalloc/src/jemalloc.c	/^typedef struct static_opts_s static_opts_t;$/;"	t	typeref:struct:static_opts_s	file:
statistics	deps/jemalloc/src/zone.c	/^	void (*statistics)(malloc_zone_t *, malloc_statistics_t *);$/;"	m	struct:malloc_introspection_t	typeref:typename:void (*)(malloc_zone_t *,malloc_statistics_t *)	file:
statnames	deps/lua/src/lbaselib.c	/^static const char *const statnames[] =$/;"	v	typeref:typename:const char * const[]	file:
stats	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	arena_stats_decay_t	*stats;$/;"	m	struct:arena_decay_s	typeref:typename:arena_stats_decay_t *
stats	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	arena_stats_t		stats;$/;"	m	struct:arena_s	typeref:typename:arena_stats_t
stats	deps/jemalloc/include/jemalloc/internal/bin.h	/^	bin_stats_t	stats;$/;"	m	struct:bin_s	typeref:typename:bin_stats_t
stats_arena_bins_print	deps/jemalloc/src/stats.c	/^stats_arena_bins_print(emitter_t *emitter, bool mutex, unsigned i) {$/;"	f	typeref:typename:void	file:
stats_arena_lextents_print	deps/jemalloc/src/stats.c	/^stats_arena_lextents_print(emitter_t *emitter, unsigned i) {$/;"	f	typeref:typename:void	file:
stats_arena_mutexes_print	deps/jemalloc/src/stats.c	/^stats_arena_mutexes_print(emitter_t *emitter, unsigned arena_ind) {$/;"	f	typeref:typename:void	file:
stats_arena_print	deps/jemalloc/src/stats.c	/^stats_arena_print(emitter_t *emitter, unsigned i, bool bins, bool large,$/;"	f	typeref:typename:void	file:
stats_arenas_i_bins_node	deps/jemalloc/src/ctl.c	/^static const ctl_indexed_node_t stats_arenas_i_bins_node[] = {$/;"	v	typeref:typename:const ctl_indexed_node_t[]	file:
stats_arenas_i_index	deps/jemalloc/src/ctl.c	/^stats_arenas_i_index(tsdn_t *tsdn, const size_t *mib, size_t miblen, size_t i) {$/;"	f	typeref:typename:const ctl_named_node_t *	file:
stats_arenas_i_large_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_arenas_i_large_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
stats_arenas_i_lextents_j_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_arenas_i_lextents_j_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
stats_arenas_i_lextents_node	deps/jemalloc/src/ctl.c	/^static const ctl_indexed_node_t stats_arenas_i_lextents_node[] = {$/;"	v	typeref:typename:const ctl_indexed_node_t[]	file:
stats_arenas_i_mutexes_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_arenas_i_mutexes_node[] = {$/;"	v	typeref:typename:MUTEX_PROF_ARENA_MUTEXES const ctl_named_node_t[]	file:
stats_arenas_i_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_arenas_i_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
stats_arenas_i_small_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_arenas_i_small_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
stats_arenas_node	deps/jemalloc/src/ctl.c	/^static const ctl_indexed_node_t stats_arenas_node[] = {$/;"	v	typeref:typename:const ctl_indexed_node_t[]	file:
stats_background_thread_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_background_thread_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
stats_bus_messages_received	src/cluster.h	/^    long long stats_bus_messages_received[CLUSTERMSG_TYPE_COUNT];$/;"	m	struct:clusterState	typeref:typename:long long[]
stats_bus_messages_sent	src/cluster.h	/^    long long stats_bus_messages_sent[CLUSTERMSG_TYPE_COUNT];$/;"	m	struct:clusterState	typeref:typename:long long[]
stats_general_print	deps/jemalloc/src/stats.c	/^stats_general_print(emitter_t *emitter) {$/;"	f	typeref:typename:void	file:
stats_mutexes_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_mutexes_node[] = {$/;"	v	typeref:typename:MUTEX_PROF_GLOBAL_MUTEXES const ctl_named_node_t[]	file:
stats_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t stats_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
stats_pfail_nodes	src/cluster.h	/^    long long stats_pfail_nodes;    \/* Number of nodes in PFAIL status,$/;"	m	struct:clusterState	typeref:typename:long long
stats_print	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define stats_print /;"	d
stats_print	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define stats_print /;"	d
stats_print	deps/jemalloc/src/stats.c	/^stats_print(void (*write_cb)(void *, const char *), void *cbopaque,$/;"	f	typeref:typename:void
stats_print_atexit	deps/jemalloc/src/jemalloc.c	/^stats_print_atexit(void) {$/;"	f	typeref:typename:void	file:
stats_print_helper	deps/jemalloc/src/stats.c	/^stats_print_helper(emitter_t *emitter, bool merged, bool destroyed,$/;"	f	typeref:typename:void	file:
status	deps/lua/src/ldo.c	/^  volatile int status;  \/* error code *\/$/;"	m	struct:lua_longjmp	typeref:typename:volatile int	file:
status	deps/lua/src/ldump.c	/^ int status;$/;"	m	struct:__anon1dacebdb0108	typeref:typename:int	file:
status	deps/lua/src/lstate.h	/^  lu_byte status;$/;"	m	struct:lua_State	typeref:typename:lu_byte
status	deps/lua/src/lua.c	/^  int status;$/;"	m	struct:Smain	typeref:typename:int	file:
stdbool_h	deps/jemalloc/include/msvc_compat/C99/stdbool.h	/^#define stdbool_h$/;"	d
stdinarg	src/redis-cli.c	/^    int stdinarg; \/* get last arg from stdin. (-x option) *\/$/;"	m	struct:config	typeref:typename:int	file:
step	src/geohash.h	/^    uint8_t step;$/;"	m	struct:__anona01652f10208	typeref:typename:uint8_t
step	src/scripting.c	/^    int step;   \/* Stop at next line regardless of breakpoints. *\/$/;"	m	struct:ldbState	typeref:typename:int	file:
stop	src/ae.h	/^    int stop;$/;"	m	struct:aeEventLoop	typeref:typename:int
stopAppendOnly	src/aof.c	/^void stopAppendOnly(void) {$/;"	f	typeref:typename:void
stopLoading	src/rdb.c	/^void stopLoading(int success) {$/;"	f	typeref:typename:void
stopSaving	src/rdb.c	/^void stopSaving(int success) {$/;"	f	typeref:typename:void
stopThreadedIO	src/networking.c	/^void stopThreadedIO(void) {$/;"	f	typeref:typename:void
stopThreadedIOIfNeeded	src/networking.c	/^int stopThreadedIOIfNeeded(void) {$/;"	f	typeref:typename:int
stop_writes_on_bgsave_err	src/server.h	/^    int stop_writes_on_bgsave_err;  \/* Don't allow writes if can't BGSAVE *\/$/;"	m	struct:redisServer	typeref:typename:int
str	deps/hiredis/hiredis.h	/^    char *str; \/* Used for REDIS_REPLY_ERROR, REDIS_REPLY_STRING$/;"	m	struct:redisReply	typeref:typename:char *
str	deps/hiredis/test.c	/^    int str;$/;"	m	struct:pushCounters	typeref:typename:int	file:
str	src/module.c	/^        const char *str; \/* String pointer for string and error replies. This$/;"	m	union:RedisModuleCallReply::__anon967b4733040a	typeref:typename:const char *	file:
strChildType	src/server.c	/^const char *strChildType(int type) {$/;"	f	typeref:typename:const char *
strEncoding	src/object.c	/^char *strEncoding(int encoding) {$/;"	f	typeref:typename:char *
strEntryBytesLarge	src/ziplist.c	/^static size_t strEntryBytesLarge(size_t slen) {$/;"	f	typeref:typename:size_t	file:
strEntryBytesSmall	src/ziplist.c	/^static size_t strEntryBytesSmall(size_t slen) {$/;"	f	typeref:typename:size_t	file:
str_byte	deps/lua/src/lstrlib.c	/^static int str_byte (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_char	deps/lua/src/lstrlib.c	/^static int str_char (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_checkname	deps/lua/src/lparser.c	/^static TString *str_checkname (LexState *ls) {$/;"	f	typeref:typename:TString *	file:
str_dump	deps/lua/src/lstrlib.c	/^static int str_dump (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_find	deps/lua/src/lstrlib.c	/^static int str_find (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_find_aux	deps/lua/src/lstrlib.c	/^static int str_find_aux (lua_State *L, int find) {$/;"	f	typeref:typename:int	file:
str_format	deps/lua/src/lstrlib.c	/^static int str_format (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_gsub	deps/lua/src/lstrlib.c	/^static int str_gsub (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_len	deps/lua/src/lstrlib.c	/^static int str_len (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_lower	deps/lua/src/lstrlib.c	/^static int str_lower (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_match	deps/lua/src/lstrlib.c	/^static int str_match (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_rep	deps/lua/src/lstrlib.c	/^static int str_rep (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_reverse	deps/lua/src/lstrlib.c	/^static int str_reverse (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_sub	deps/lua/src/lstrlib.c	/^static int str_sub (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_upper	deps/lua/src/lstrlib.c	/^static int str_upper (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_val	deps/jemalloc/include/jemalloc/internal/emitter.h	/^		const char *str_val;$/;"	m	union:emitter_col_s::__anona0eb805b010a	typeref:typename:const char *
stralgoCommand	src/t_string.c	/^void stralgoCommand(client *c) {$/;"	f	typeref:typename:void
stralgoLCS	src/t_string.c	/^void stralgoLCS(client *c) {$/;"	f	typeref:typename:void
strbuf_allocated	deps/lua/src/strbuf.h	/^static inline int strbuf_allocated(strbuf_t *s)$/;"	f	typeref:typename:int
strbuf_append_char	deps/lua/src/strbuf.h	/^static inline void strbuf_append_char(strbuf_t *s, const char c)$/;"	f	typeref:typename:void
strbuf_append_char_unsafe	deps/lua/src/strbuf.h	/^static inline void strbuf_append_char_unsafe(strbuf_t *s, const char c)$/;"	f	typeref:typename:void
strbuf_append_fmt	deps/lua/src/strbuf.c	/^void strbuf_append_fmt(strbuf_t *s, int len, const char *fmt, ...)$/;"	f	typeref:typename:void
strbuf_append_fmt_retry	deps/lua/src/strbuf.c	/^void strbuf_append_fmt_retry(strbuf_t *s, const char *fmt, ...)$/;"	f	typeref:typename:void
strbuf_append_mem	deps/lua/src/strbuf.h	/^static inline void strbuf_append_mem(strbuf_t *s, const char *c, int len)$/;"	f	typeref:typename:void
strbuf_append_mem_unsafe	deps/lua/src/strbuf.h	/^static inline void strbuf_append_mem_unsafe(strbuf_t *s, const char *c, int len)$/;"	f	typeref:typename:void
strbuf_append_string	deps/lua/src/strbuf.c	/^void strbuf_append_string(strbuf_t *s, const char *str)$/;"	f	typeref:typename:void
strbuf_empty_length	deps/lua/src/strbuf.h	/^static inline int strbuf_empty_length(strbuf_t *s)$/;"	f	typeref:typename:int
strbuf_empty_ptr	deps/lua/src/strbuf.h	/^static inline char *strbuf_empty_ptr(strbuf_t *s)$/;"	f	typeref:typename:char *
strbuf_ensure_empty_length	deps/lua/src/strbuf.h	/^static inline void strbuf_ensure_empty_length(strbuf_t *s, int len)$/;"	f	typeref:typename:void
strbuf_ensure_null	deps/lua/src/strbuf.h	/^static inline void strbuf_ensure_null(strbuf_t *s)$/;"	f	typeref:typename:void
strbuf_extend_length	deps/lua/src/strbuf.h	/^static inline void strbuf_extend_length(strbuf_t *s, int len)$/;"	f	typeref:typename:void
strbuf_free	deps/lua/src/strbuf.c	/^void strbuf_free(strbuf_t *s)$/;"	f	typeref:typename:void
strbuf_free_to_string	deps/lua/src/strbuf.c	/^char *strbuf_free_to_string(strbuf_t *s, int *len)$/;"	f	typeref:typename:char *
strbuf_init	deps/lua/src/strbuf.c	/^void strbuf_init(strbuf_t *s, int len)$/;"	f	typeref:typename:void
strbuf_length	deps/lua/src/strbuf.h	/^static inline int strbuf_length(strbuf_t *s)$/;"	f	typeref:typename:int
strbuf_new	deps/lua/src/strbuf.c	/^strbuf_t *strbuf_new(int len)$/;"	f	typeref:typename:strbuf_t *
strbuf_reset	deps/lua/src/strbuf.h	/^static inline void strbuf_reset(strbuf_t *s)$/;"	f	typeref:typename:void
strbuf_resize	deps/lua/src/strbuf.c	/^void strbuf_resize(strbuf_t *s, int len)$/;"	f	typeref:typename:void
strbuf_set_increment	deps/lua/src/strbuf.c	/^void strbuf_set_increment(strbuf_t *s, int increment)$/;"	f	typeref:typename:void
strbuf_string	deps/lua/src/strbuf.h	/^static inline char *strbuf_string(strbuf_t *s, int *len)$/;"	f	typeref:typename:char *
strbuf_t	deps/lua/src/strbuf.h	/^} strbuf_t;$/;"	t	typeref:struct:__anon10f823b40108
strcasecmp	deps/hiredis/win32.h	/^#define strcasecmp /;"	d
strdupFn	deps/hiredis/alloc.h	/^    char *(*strdupFn)(const char*);$/;"	m	struct:hiredisAllocFuncs	typeref:typename:char * (*)(const char *)
stream	src/module.c	/^        } stream;$/;"	m	union:RedisModuleKey::__anon967b4733010a	typeref:struct:RedisModuleKey::__anon967b4733010a::__anon967b47330308	file:
stream	src/stream.h	/^    stream *stream;         \/* The stream we are iterating. *\/$/;"	m	struct:streamIterator	typeref:typename:stream *
stream	src/stream.h	/^typedef struct stream {$/;"	s
stream	src/stream.h	/^} stream;$/;"	t	typeref:struct:stream
streamAddTrimArgs	src/t_stream.c	/^} streamAddTrimArgs;$/;"	t	typeref:struct:__anon8fe9202c0108	file:
streamAppendItem	src/t_stream.c	/^int streamAppendItem(stream *s, robj **argv, int64_t numfields, streamID *added_id, streamID *us/;"	f	typeref:typename:int
streamCG	src/stream.h	/^typedef struct streamCG {$/;"	s
streamCG	src/stream.h	/^} streamCG;$/;"	t	typeref:struct:streamCG
streamCompareID	src/t_stream.c	/^int streamCompareID(streamID *a, streamID *b) {$/;"	f	typeref:typename:int
streamConsumer	src/stream.h	/^typedef struct streamConsumer {$/;"	s
streamConsumer	src/stream.h	/^} streamConsumer;$/;"	t	typeref:struct:streamConsumer
streamCreateCG	src/t_stream.c	/^streamCG *streamCreateCG(stream *s, char *name, size_t namelen, streamID *id) {$/;"	f	typeref:typename:streamCG *
streamCreateNACK	src/t_stream.c	/^streamNACK *streamCreateNACK(streamConsumer *consumer) {$/;"	f	typeref:typename:streamNACK *
streamDecodeID	src/t_stream.c	/^void streamDecodeID(void *buf, streamID *id) {$/;"	f	typeref:typename:void
streamDecrID	src/t_stream.c	/^int streamDecrID(streamID *id) {$/;"	f	typeref:typename:int
streamDelConsumer	src/t_stream.c	/^uint64_t streamDelConsumer(streamCG *cg, sds name) {$/;"	f	typeref:typename:uint64_t
streamDeleteItem	src/t_stream.c	/^int streamDeleteItem(stream *s, streamID *id) {$/;"	f	typeref:typename:int
streamDup	src/t_stream.c	/^robj *streamDup(robj *o) {$/;"	f	typeref:typename:robj *
streamEncodeID	src/t_stream.c	/^void streamEncodeID(void *buf, streamID *id) {$/;"	f	typeref:typename:void
streamFreeCG	src/t_stream.c	/^void streamFreeCG(streamCG *cg) {$/;"	f	typeref:typename:void
streamFreeConsumer	src/t_stream.c	/^void streamFreeConsumer(streamConsumer *sc) {$/;"	f	typeref:typename:void
streamFreeNACK	src/t_stream.c	/^void streamFreeNACK(streamNACK *na) {$/;"	f	typeref:typename:void
streamGenericParseIDOrReply	src/t_stream.c	/^int streamGenericParseIDOrReply(client *c, const robj *o, streamID *id, uint64_t missing_seq, in/;"	f	typeref:typename:int
streamGetEdgeID	src/t_stream.c	/^void streamGetEdgeID(stream *s, int first, streamID *edge_id)$/;"	f	typeref:typename:void
streamID	src/stream.h	/^typedef struct streamID {$/;"	s
streamID	src/stream.h	/^} streamID;$/;"	t	typeref:struct:streamID
streamIncrID	src/t_stream.c	/^int streamIncrID(streamID *id) {$/;"	f	typeref:typename:int
streamIterator	src/stream.h	/^typedef struct streamIterator {$/;"	s
streamIterator	src/stream.h	/^} streamIterator;$/;"	t	typeref:struct:streamIterator
streamIteratorGetField	src/t_stream.c	/^void streamIteratorGetField(streamIterator *si, unsigned char **fieldptr, unsigned char **valuep/;"	f	typeref:typename:void
streamIteratorGetID	src/t_stream.c	/^int streamIteratorGetID(streamIterator *si, streamID *id, int64_t *numfields) {$/;"	f	typeref:typename:int
streamIteratorRemoveEntry	src/t_stream.c	/^void streamIteratorRemoveEntry(streamIterator *si, streamID *current) {$/;"	f	typeref:typename:void
streamIteratorStart	src/t_stream.c	/^void streamIteratorStart(streamIterator *si, stream *s, streamID *start, streamID *end, int rev)/;"	f	typeref:typename:void
streamIteratorStop	src/t_stream.c	/^void streamIteratorStop(streamIterator *si) {$/;"	f	typeref:typename:void
streamLastValidID	src/t_stream.c	/^void streamLastValidID(stream *s, streamID *maxid)$/;"	f	typeref:typename:void
streamLength	src/t_stream.c	/^unsigned long streamLength(const robj *subject) {$/;"	f	typeref:typename:unsigned long
streamLogListpackContent	src/t_stream.c	/^void streamLogListpackContent(unsigned char *lp) {$/;"	f	typeref:typename:void
streamLookupCG	src/t_stream.c	/^streamCG *streamLookupCG(stream *s, sds groupname) {$/;"	f	typeref:typename:streamCG *
streamLookupConsumer	src/t_stream.c	/^streamConsumer *streamLookupConsumer(streamCG *cg, sds name, int flags, int *created) {$/;"	f	typeref:typename:streamConsumer *
streamNACK	src/stream.h	/^typedef struct streamNACK {$/;"	s
streamNACK	src/stream.h	/^} streamNACK;$/;"	t	typeref:struct:streamNACK
streamNew	src/t_stream.c	/^stream *streamNew(void) {$/;"	f	typeref:typename:stream *
streamNextID	src/t_stream.c	/^void streamNextID(streamID *last_id, streamID *new_id) {$/;"	f	typeref:typename:void
streamParseAddOrTrimArgsOrReply	src/t_stream.c	/^static int streamParseAddOrTrimArgsOrReply(client *c, streamAddTrimArgs *args, int xadd) {$/;"	f	typeref:typename:int	file:
streamParseID	src/t_stream.c	/^int streamParseID(const robj *o, streamID *id) {$/;"	f	typeref:typename:int
streamParseIDOrReply	src/t_stream.c	/^int streamParseIDOrReply(client *c, robj *o, streamID *id, uint64_t missing_seq) {$/;"	f	typeref:typename:int
streamParseIntervalIDOrReply	src/t_stream.c	/^int streamParseIntervalIDOrReply(client *c, robj *o, streamID *id, int *exclude, uint64_t missin/;"	f	typeref:typename:int
streamParseStrictIDOrReply	src/t_stream.c	/^int streamParseStrictIDOrReply(client *c, robj *o, streamID *id, uint64_t missing_seq) {$/;"	f	typeref:typename:int
streamPropInfo	src/stream.h	/^typedef struct streamPropInfo {$/;"	s
streamPropInfo	src/stream.h	/^} streamPropInfo;$/;"	t	typeref:struct:streamPropInfo
streamPropagateConsumerCreation	src/t_stream.c	/^void streamPropagateConsumerCreation(client *c, robj *key, robj *groupname, sds consumername) {$/;"	f	typeref:typename:void
streamPropagateGroupID	src/t_stream.c	/^void streamPropagateGroupID(client *c, robj *key, streamCG *group, robj *groupname) {$/;"	f	typeref:typename:void
streamPropagateXCLAIM	src/t_stream.c	/^void streamPropagateXCLAIM(client *c, robj *key, streamCG *group, robj *groupname, robj *id, str/;"	f	typeref:typename:void
streamRadixTreeMemoryUsage	src/object.c	/^size_t streamRadixTreeMemoryUsage(rax *rax) {$/;"	f	typeref:typename:size_t
streamReplyWithRange	src/t_stream.c	/^size_t streamReplyWithRange(client *c, stream *s, streamID *start, streamID *end, size_t count, /;"	f	typeref:typename:size_t
streamReplyWithRangeFromConsumerPEL	src/t_stream.c	/^size_t streamReplyWithRangeFromConsumerPEL(client *c, stream *s, streamID *start, streamID *end,/;"	f	typeref:typename:size_t
streamRewriteApproxSpecifier	src/t_stream.c	/^void streamRewriteApproxSpecifier(client *c, int idx) {$/;"	f	typeref:typename:void
streamRewriteTrimArgument	src/t_stream.c	/^void streamRewriteTrimArgument(client *c, stream *s, int trim_strategy, int idx) {$/;"	f	typeref:typename:void
streamTrim	src/t_stream.c	/^int64_t streamTrim(stream *s, streamAddTrimArgs *args) {$/;"	f	typeref:typename:int64_t
streamTrimByID	src/t_stream.c	/^int64_t streamTrimByID(stream *s, streamID minid, int approx) {$/;"	f	typeref:typename:int64_t
streamTrimByLength	src/t_stream.c	/^int64_t streamTrimByLength(stream *s, long long maxlen, int approx) {$/;"	f	typeref:typename:int64_t
streamTypeLookupWriteOrCreate	src/t_stream.c	/^robj *streamTypeLookupWriteOrCreate(client *c, robj *key, int no_create) {$/;"	f	typeref:typename:robj *
streamValidateListpackIntegrity	src/t_stream.c	/^int streamValidateListpackIntegrity(unsigned char *lp, size_t size, int deep) {$/;"	f	typeref:typename:int
stream_add	tests/modules/stream.c	/^int stream_add(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
stream_addn	tests/modules/stream.c	/^int stream_addn(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
stream_delete	tests/modules/stream.c	/^int stream_delete(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
stream_id	src/blocked.c	/^    streamID stream_id;     \/* Stream ID if we blocked in a stream. *\/$/;"	m	struct:bkinfo	typeref:typename:streamID	file:
stream_node_max_bytes	src/server.h	/^    size_t stream_node_max_bytes;$/;"	m	struct:redisServer	typeref:typename:size_t
stream_node_max_entries	src/server.h	/^    long long stream_node_max_entries;$/;"	m	struct:redisServer	typeref:typename:long long
stream_range	tests/modules/stream.c	/^int stream_range(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
stream_trim	tests/modules/stream.c	/^int stream_trim(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
strerror_r	deps/hiredis/win32.h	/^#define strerror_r(/;"	d
stress	deps/jemalloc/Makefile	/^stress: tests_stress stress_dir$/;"	t
stress	deps/jemalloc/Makefile.in	/^stress: tests_stress stress_dir$/;"	t
stress	src/ziplist.c	/^static void stress(int pos, int num, int maxsize, int dnum) {$/;"	f	typeref:typename:void	file:
stressGetKeys	utils/hashtable/rehashing.c	/^void stressGetKeys(dict *d, int times, int *perfect_run, int *approx_run) {$/;"	f	typeref:typename:void
stress_dir	deps/jemalloc/Makefile	/^stress_dir:$/;"	t
stress_dir	deps/jemalloc/Makefile.in	/^stress_dir:$/;"	t
strict	deps/lua/etc/Makefile	/^strict:$/;"	t
string	deps/lua/src/lua_cjson.c	/^        const char *string;$/;"	m	union:__anona3a73c770408::__anona3a73c77050a	typeref:typename:const char *	file:
string	src/config.c	/^    stringConfigData string;$/;"	m	union:typeData	typeref:typename:stringConfigData	file:
string2d	src/util.c	/^int string2d(const char *s, size_t slen, double *dp) {$/;"	f	typeref:typename:int
string2l	src/util.c	/^int string2l(const char *s, size_t slen, long *lval) {$/;"	f	typeref:typename:int
string2ld	src/util.c	/^int string2ld(const char *s, size_t slen, long double *dp) {$/;"	f	typeref:typename:int
string2ll	deps/hiredis/read.c	/^static int string2ll(const char *s, size_t slen, long long *value) {$/;"	f	typeref:typename:int	file:
string2ll	src/util.c	/^int string2ll(const char *s, size_t slen, long long *value) {$/;"	f	typeref:typename:int
string2ull	src/util.c	/^int string2ull(const char *s, unsigned long long *value) {$/;"	f	typeref:typename:int
stringCheckPrefix	src/tracking.c	/^static int stringCheckPrefix(unsigned char *s1, size_t s1_len, unsigned char *s2, size_t s2_len)/;"	f	typeref:typename:int	file:
stringConfigData	src/config.c	/^typedef struct stringConfigData {$/;"	s	file:
stringConfigData	src/config.c	/^} stringConfigData;$/;"	t	typeref:struct:stringConfigData	file:
stringFromLongLong	src/dict.c	/^char *stringFromLongLong(long long value) {$/;"	f	typeref:typename:char *
stringObjectLen	src/object.c	/^size_t stringObjectLen(robj *o) {$/;"	f	typeref:typename:size_t
string_len	deps/lua/src/lua_cjson.c	/^    int string_len;$/;"	m	struct:__anona3a73c770408	typeref:typename:int	file:
stringmark	deps/lua/src/lgc.c	/^#define stringmark(/;"	d	file:
stringmatch	src/util.c	/^int stringmatch(const char *pattern, const char *string, int nocase) {$/;"	f	typeref:typename:int
stringmatchlen	src/util.c	/^int stringmatchlen(const char *pattern, int patternLen,$/;"	f	typeref:typename:int
stringmatchlen_fuzz_test	src/util.c	/^int stringmatchlen_fuzz_test(void) {$/;"	f	typeref:typename:int
strings_h	deps/jemalloc/include/msvc_compat/strings.h	/^#define strings_h$/;"	d
stringtable	deps/lua/src/lstate.h	/^typedef struct stringtable {$/;"	s
stringtable	deps/lua/src/lstate.h	/^} stringtable;$/;"	t	typeref:struct:stringtable
strip	deps/lua/src/ldump.c	/^ int strip;$/;"	m	struct:__anon1dacebdb0108	typeref:typename:int	file:
stripping	deps/lua/src/luac.c	/^static int stripping=0;			\/* strip debug information? *\/$/;"	v	typeref:typename:int	file:
strlenCommand	src/t_string.c	/^void strlenCommand(client *c) {$/;"	f	typeref:typename:void
strlib	deps/lua/src/lstrlib.c	/^static const luaL_Reg strlib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
strncasecmp	deps/hiredis/win32.h	/^#define strncasecmp /;"	d
strt	deps/lua/src/lstate.h	/^  stringtable strt;  \/* hash table for strings *\/$/;"	m	struct:global_State	typeref:typename:stringtable
strtod_buffer_size	deps/lua/src/fpconv.c	/^static int strtod_buffer_size(const char *s)$/;"	f	typeref:typename:int	file:
strtold	src/object.c	/^#define strtold(/;"	d	file:
strval	tests/modules/datatype.c	/^    RedisModuleString *strval;$/;"	m	struct:__anonc5c0b6fc0108	typeref:typename:RedisModuleString *	file:
sub	deps/hiredis/async.h	/^    } sub;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::__anon89b0a8ab0208
sub_bucket_count	deps/hdr_histogram/hdr_histogram.h	/^    int32_t sub_bucket_count;$/;"	m	struct:hdr_histogram	typeref:typename:int32_t
sub_bucket_count	deps/hdr_histogram/hdr_histogram.h	/^    int32_t sub_bucket_count;$/;"	m	struct:hdr_histogram_bucket_config	typeref:typename:int32_t
sub_bucket_half_count	deps/hdr_histogram/hdr_histogram.h	/^    int32_t sub_bucket_half_count;$/;"	m	struct:hdr_histogram	typeref:typename:int32_t
sub_bucket_half_count	deps/hdr_histogram/hdr_histogram.h	/^    int32_t sub_bucket_half_count;$/;"	m	struct:hdr_histogram_bucket_config	typeref:typename:int32_t
sub_bucket_half_count_magnitude	deps/hdr_histogram/hdr_histogram.h	/^    int32_t sub_bucket_half_count_magnitude;$/;"	m	struct:hdr_histogram	typeref:typename:int32_t
sub_bucket_half_count_magnitude	deps/hdr_histogram/hdr_histogram.h	/^    int32_t sub_bucket_half_count_magnitude;$/;"	m	struct:hdr_histogram_bucket_config	typeref:typename:int32_t
sub_bucket_mask	deps/hdr_histogram/hdr_histogram.h	/^    int64_t sub_bucket_mask;$/;"	m	struct:hdr_histogram	typeref:typename:int64_t
sub_bucket_mask	deps/hdr_histogram/hdr_histogram.h	/^    int64_t sub_bucket_mask;$/;"	m	struct:hdr_histogram_bucket_config	typeref:typename:int64_t
sub_worker	tests/modules/blockedclient.c	/^void *sub_worker(void *arg) {$/;"	f	typeref:typename:void *
subexpr	deps/lua/src/lparser.c	/^static BinOpr subexpr (LexState *ls, expdesc *v, unsigned int limit) {$/;"	f	typeref:typename:BinOpr	file:
subject	src/server.h	/^    robj *subject;$/;"	m	struct:__anon3ef696e90908	typeref:typename:robj *
subject	src/server.h	/^    robj *subject;$/;"	m	struct:__anon3ef696e90b08	typeref:typename:robj *
subject	src/server.h	/^    robj *subject;$/;"	m	struct:__anon3ef696e90c08	typeref:typename:robj *
subject	src/t_zset.c	/^    robj *subject;$/;"	m	struct:__anon6fce03460408	typeref:typename:robj *	file:
subscribeCommand	src/pubsub.c	/^void subscribeCommand(client *c) {$/;"	f	typeref:typename:void
subscribebulk	src/server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
summary	src/help.h	/^  char *summary;$/;"	m	struct:commandHelp	typeref:typename:char *
sunionCommand	src/t_set.c	/^void sunionCommand(client *c) {$/;"	f	typeref:typename:void
sunionDiffGenericCommand	src/t_set.c	/^void sunionDiffGenericCommand(client *c, robj **setkeys, int setnum,$/;"	f	typeref:typename:void
sunionstoreCommand	src/t_set.c	/^void sunionstoreCommand(client *c) {$/;"	f	typeref:typename:void
super_arena_i_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t super_arena_i_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
super_arenas_bin_i_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t super_arenas_bin_i_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
super_arenas_lextent_i_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t super_arenas_lextent_i_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
super_root_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t super_root_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
super_stats_arenas_i_bins_j_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t super_stats_arenas_i_bins_j_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
super_stats_arenas_i_lextents_j_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t super_stats_arenas_i_lextents_j_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
super_stats_arenas_i_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t super_stats_arenas_i_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
supervised	src/server.h	/^    int supervised;                 \/* 1 if supervised, 0 otherwise. *\/$/;"	m	struct:redisServer	typeref:typename:int
supervised_mode	src/server.h	/^    int supervised_mode;            \/* See SUPERVISED_* *\/$/;"	m	struct:redisServer	typeref:typename:int
supervised_mode_enum	src/config.c	/^configEnum supervised_mode_enum[] = {$/;"	v	typeref:typename:configEnum[]
sval	src/ziplist.h	/^    unsigned char *sval;$/;"	m	struct:__anon4d39dfe10108	typeref:typename:unsigned char *
svalue	deps/lua/src/lobject.h	/^#define svalue(/;"	d
swap	deps/jemalloc/test/include/test/SFMT-alti.h	/^static inline void swap(w128_t *array, int size) {$/;"	f	typeref:typename:void
swap	deps/jemalloc/test/src/SFMT.c	/^static inline void swap(w128_t *array, int size) {$/;"	f	typeref:typename:void	file:
swap	src/pqsort.c	/^#define swap(/;"	d	file:
swapDbCallback	tests/modules/hooks.c	/^void swapDbCallback(RedisModuleCtx *ctx, RedisModuleEvent e, uint64_t sub, void *data)$/;"	f	typeref:typename:void
swapcode	src/pqsort.c	/^#define swapcode(/;"	d	file:
swapdbCommand	src/db.c	/^void swapdbCommand(client *c) {$/;"	f	typeref:typename:void
swapfunc	src/pqsort.c	/^swapfunc(char *a, char *b, size_t n, int swaptype)$/;"	f	typeref:typename:void	file:
sweepgc	deps/lua/src/lstate.h	/^  GCObject **sweepgc;  \/* position of sweep in `rootgc' *\/$/;"	m	struct:global_State	typeref:typename:GCObject **
sweeplist	deps/lua/src/lgc.c	/^static GCObject **sweeplist (lua_State *L, GCObject **p, lu_mem count) {$/;"	f	typeref:typename:GCObject **	file:
sweepstrgc	deps/lua/src/lstate.h	/^  int sweepstrgc;  \/* position of sweep in `strt' *\/$/;"	m	struct:global_State	typeref:typename:int
sweepwholelist	deps/lua/src/lgc.c	/^#define sweepwholelist(/;"	d	file:
switch_after	utils/lru/lfu-simulation.c	/^time_t switch_after = 30; \/* Switch access pattern after N seconds. *\/$/;"	v	typeref:typename:time_t
symbexec	deps/lua/src/ldebug.c	/^static Instruction symbexec (const Proto *pt, int lastpc, int reg) {$/;"	f	typeref:typename:Instruction	file:
sync	src/redismodule.h	/^    int32_t sync;           \/* Synchronous or threaded flush?. *\/$/;"	m	struct:RedisModuleFlushInfo	typeref:typename:int32_t
syncCommand	src/replication.c	/^void syncCommand(client *c) {$/;"	f	typeref:typename:void
syncRead	src/syncio.c	/^ssize_t syncRead(int fd, char *ptr, ssize_t size, long long timeout) {$/;"	f	typeref:typename:ssize_t
syncReadLine	src/syncio.c	/^ssize_t syncReadLine(int fd, char *ptr, ssize_t size, long long timeout) {$/;"	f	typeref:typename:ssize_t
syncWithMaster	src/replication.c	/^void syncWithMaster(connection *conn) {$/;"	f	typeref:typename:void
syncWrite	src/syncio.c	/^ssize_t syncWrite(int fd, char *ptr, ssize_t size, long long timeout) {$/;"	f	typeref:typename:ssize_t
sync_read	src/connection.h	/^    ssize_t (*sync_read)(struct connection *conn, char *ptr, ssize_t size, long long timeout);$/;"	m	struct:ConnectionType	typeref:typename:ssize_t (*)(struct connection * conn,char * ptr,ssize_t size,long long timeout)
sync_readline	src/connection.h	/^    ssize_t (*sync_readline)(struct connection *conn, char *ptr, ssize_t size, long long timeout/;"	m	struct:ConnectionType	typeref:typename:ssize_t (*)(struct connection * conn,char * ptr,ssize_t size,long long timeout)
sync_write	src/connection.h	/^    ssize_t (*sync_write)(struct connection *conn, char *ptr, ssize_t size, long long timeout);$/;"	m	struct:ConnectionType	typeref:typename:ssize_t (*)(struct connection * conn,char * ptr,ssize_t size,long long timeout)
syntaxerr	src/server.h	/^    *emptyarray, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *********** [4]* [4]* [4]* [4]****
syslib	deps/lua/src/loslib.c	/^static const luaL_Reg syslib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
syslog_enabled	src/server.h	/^    int syslog_enabled;             \/* Is syslog enabled? *\/$/;"	m	struct:redisServer	typeref:typename:int
syslog_facility	src/server.h	/^    int syslog_facility;            \/* Syslog facility *\/$/;"	m	struct:redisServer	typeref:typename:int
syslog_facility_enum	src/config.c	/^configEnum syslog_facility_enum[] = {$/;"	v	typeref:typename:configEnum[]
syslog_ident	src/server.h	/^    char *syslog_ident;             \/* Syslog ident *\/$/;"	m	struct:redisServer	typeref:typename:char *
system_memory_size	src/server.h	/^    size_t system_memory_size;  \/* Total memory in system as reported by OS *\/$/;"	m	struct:redisServer	typeref:typename:size_t
sz	deps/jemalloc/test/unit/retained.c	/^static size_t		sz;$/;"	v	typeref:typename:size_t	file:
sz	src/quicklist.h	/^    unsigned int sz;             \/* ziplist size in bytes *\/$/;"	m	struct:quicklistNode	typeref:typename:unsigned int
sz	src/quicklist.h	/^    unsigned int sz; \/* LZF size in bytes*\/$/;"	m	struct:quicklistLZF	typeref:typename:unsigned int
sz	src/quicklist.h	/^    unsigned int sz;$/;"	m	struct:quicklistEntry	typeref:typename:unsigned int
sz_index2size	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_index2size(szind_t index) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
sz_index2size_compute	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_index2size_compute(szind_t index) {$/;"	f	typeref:typename:size_t
sz_index2size_lookup	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_index2size_lookup(szind_t index) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
sz_index2size_tab	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define sz_index2size_tab /;"	d
sz_index2size_tab	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define sz_index2size_tab /;"	d
sz_large_pad	deps/jemalloc/include/jemalloc/internal/sz.h	/^static const size_t sz_large_pad =$/;"	v	typeref:typename:const size_t
sz_pind2sz	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_pind2sz(pszind_t pind) {$/;"	f	typeref:typename:size_t
sz_pind2sz_compute	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_pind2sz_compute(pszind_t pind) {$/;"	f	typeref:typename:size_t
sz_pind2sz_lookup	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_pind2sz_lookup(pszind_t pind) {$/;"	f	typeref:typename:size_t
sz_pind2sz_tab	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define sz_pind2sz_tab /;"	d
sz_pind2sz_tab	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define sz_pind2sz_tab /;"	d
sz_psz2ind	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_psz2ind(size_t psz) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE pszind_t
sz_psz2u	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_psz2u(size_t psz) {$/;"	f	typeref:typename:size_t
sz_s2u	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_s2u(size_t size) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
sz_s2u_compute	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_s2u_compute(size_t size) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
sz_s2u_lookup	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_s2u_lookup(size_t size) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
sz_sa2u	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_sa2u(size_t size, size_t alignment) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE size_t
sz_size2index	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_size2index(size_t size) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE szind_t
sz_size2index_compute	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_size2index_compute(size_t size) {$/;"	f	typeref:typename:szind_t
sz_size2index_lookup	deps/jemalloc/include/jemalloc/internal/sz.h	/^sz_size2index_lookup(size_t size) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE szind_t
sz_size2index_tab	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define sz_size2index_tab /;"	d
sz_size2index_tab	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define sz_size2index_tab /;"	d
szind	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	szind_t szind;$/;"	m	struct:alloc_ctx_s	typeref:typename:szind_t
szind_t	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_types.h	/^typedef unsigned szind_t;$/;"	t	typeref:typename:unsigned
t	deps/lua/src/llex.h	/^  Token t;  \/* current token *\/$/;"	m	struct:LexState	typeref:typename:Token
t	deps/lua/src/lparser.c	/^  expdesc *t;  \/* table descriptor *\/$/;"	m	struct:ConsControl	typeref:typename:expdesc *	file:
t	deps/lua/src/lparser.h	/^  int t;  \/* patch list of `exit when true' *\/$/;"	m	struct:expdesc	typeref:typename:int
t	src/geohash.h	/^    } t;$/;"	m	struct:__anona01652f10608	typeref:union:__anona01652f10608::__anona01652f1070a
t0	deps/jemalloc/test/include/test/timer.h	/^	nstime_t t0;$/;"	m	struct:__anonfe8af5de0108	typeref:typename:nstime_t
t1	deps/jemalloc/test/include/test/timer.h	/^	nstime_t t1;$/;"	m	struct:__anonfe8af5de0108	typeref:typename:nstime_t
tab	deps/jemalloc/include/jemalloc/internal/ckh.h	/^	ckhc_t *tab;$/;"	m	struct:__anon25f7a4b70208	typeref:typename:ckhc_t *
tab_funcs	deps/lua/src/ltablib.c	/^static const luaL_Reg tab_funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
table	deps/hiredis/dict.h	/^    dictEntry **table;$/;"	m	struct:dict	typeref:typename:dictEntry **
table	src/dict.h	/^    dictEntry **table;$/;"	m	struct:dictht	typeref:typename:dictEntry **
table	src/dict.h	/^    int table, safe;$/;"	m	struct:dictIterator	typeref:typename:int
table_is_an_array	deps/lua/src/lua_cmsgpack.c	/^int table_is_an_array(lua_State *L) {$/;"	f	typeref:typename:int
table_printf_json	deps/jemalloc/test/unit/emitter.c	/^static const char *table_printf_json =$/;"	v	typeref:typename:const char *	file:
table_printf_table	deps/jemalloc/test/unit/emitter.c	/^static const char *table_printf_table =$/;"	v	typeref:typename:const char *	file:
table_row_json	deps/jemalloc/test/unit/emitter.c	/^static const char *table_row_json =$/;"	v	typeref:typename:const char *	file:
table_row_table	deps/jemalloc/test/unit/emitter.c	/^static const char *table_row_table =$/;"	v	typeref:typename:const char *	file:
tag_error	deps/lua/src/lauxlib.c	/^static void tag_error (lua_State *L, int narg, int tag) {$/;"	f	typeref:typename:void	file:
tail	deps/hiredis/async.h	/^    redisCallback *head, *tail;$/;"	m	struct:redisCallbackList	typeref:typename:redisCallback **
tail	src/adlist.h	/^    listNode *tail;$/;"	m	struct:list	typeref:typename:listNode *
tail	src/quicklist.h	/^    quicklistNode *tail;$/;"	m	struct:quicklist	typeref:typename:quicklistNode *
tail	src/server.h	/^    struct zskiplistNode *header, *tail;$/;"	m	struct:zskiplist	typeref:struct:zskiplistNode **
tailcalls	deps/lua/src/lstate.h	/^  int tailcalls;  \/* number of tail calls lost under this entry *\/$/;"	m	struct:CallInfo	typeref:typename:int
target	src/server.h	/^    int argc, dbid, target;$/;"	m	struct:redisOp	typeref:typename:int
target	src/server.h	/^    robj *target;           \/* The key that should receive the element,$/;"	m	struct:blockingState	typeref:typename:robj *
target_replica_host	src/server.h	/^    char *target_replica_host; \/* Failover target host. If null during a$/;"	m	struct:redisServer	typeref:typename:char *
target_replica_port	src/server.h	/^    int target_replica_port; \/* Failover target port *\/$/;"	m	struct:redisServer	typeref:typename:int
task	deps/hiredis/read.h	/^    redisReadTask **task;$/;"	m	struct:redisReader	typeref:typename:redisReadTask **
tasks	deps/hiredis/read.h	/^    int tasks;$/;"	m	struct:redisReader	typeref:typename:int
tcache	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^		tcache_t	*tcache;$/;"	m	union:tcaches_s::__anon676e9ac0010a	typeref:typename:tcache_t *
tcache_alloc_large	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^tcache_alloc_large(tsd_t *tsd, arena_t *arena, tcache_t *tcache, size_t size,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
tcache_alloc_small	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^tcache_alloc_small(tsd_t *tsd, arena_t *arena, tcache_t *tcache,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void *
tcache_alloc_small_hard	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_alloc_small_hard /;"	d
tcache_alloc_small_hard	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_alloc_small_hard /;"	d
tcache_alloc_small_hard	deps/jemalloc/src/tcache.c	/^tcache_alloc_small_hard(tsdn_t *tsdn, arena_t *arena, tcache_t *tcache,$/;"	f	typeref:typename:void *
tcache_arena_associate	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_arena_associate /;"	d
tcache_arena_associate	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_arena_associate /;"	d
tcache_arena_associate	deps/jemalloc/src/tcache.c	/^tcache_arena_associate(tsdn_t *tsdn, tcache_t *tcache, arena_t *arena) {$/;"	f	typeref:typename:void
tcache_arena_dissociate	deps/jemalloc/src/tcache.c	/^tcache_arena_dissociate(tsdn_t *tsdn, tcache_t *tcache) {$/;"	f	typeref:typename:void	file:
tcache_arena_reassociate	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_arena_reassociate /;"	d
tcache_arena_reassociate	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_arena_reassociate /;"	d
tcache_arena_reassociate	deps/jemalloc/src/tcache.c	/^tcache_arena_reassociate(tsdn_t *tsdn, tcache_t *tcache, arena_t *arena) {$/;"	f	typeref:typename:void
tcache_available	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^tcache_available(tsd_t *tsd) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tcache_bin_flush_large	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_bin_flush_large /;"	d
tcache_bin_flush_large	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_bin_flush_large /;"	d
tcache_bin_flush_large	deps/jemalloc/src/tcache.c	/^tcache_bin_flush_large(tsd_t *tsd, cache_bin_t *tbin, szind_t binind,$/;"	f	typeref:typename:void
tcache_bin_flush_small	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_bin_flush_small /;"	d
tcache_bin_flush_small	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_bin_flush_small /;"	d
tcache_bin_flush_small	deps/jemalloc/src/tcache.c	/^tcache_bin_flush_small(tsd_t *tsd, tcache_t *tcache, cache_bin_t *tbin,$/;"	f	typeref:typename:void
tcache_bin_info	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_bin_info /;"	d
tcache_bin_info	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_bin_info /;"	d
tcache_bin_info	deps/jemalloc/src/tcache.c	/^cache_bin_info_t	*tcache_bin_info;$/;"	v	typeref:typename:cache_bin_info_t *
tcache_boot	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_boot /;"	d
tcache_boot	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_boot /;"	d
tcache_boot	deps/jemalloc/src/tcache.c	/^tcache_boot(tsdn_t *tsdn) {$/;"	f	typeref:typename:bool
tcache_bytes	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	atomic_zu_t		tcache_bytes; \/* Derived. *\/$/;"	m	struct:arena_stats_s	typeref:typename:atomic_zu_t
tcache_cleanup	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_cleanup /;"	d
tcache_cleanup	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_cleanup /;"	d
tcache_cleanup	deps/jemalloc/src/tcache.c	/^tcache_cleanup(tsd_t *tsd) {$/;"	f	typeref:typename:void
tcache_create_ctl	deps/jemalloc/src/ctl.c	/^tcache_create_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
tcache_create_explicit	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_create_explicit /;"	d
tcache_create_explicit	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_create_explicit /;"	d
tcache_create_explicit	deps/jemalloc/src/tcache.c	/^tcache_create_explicit(tsd_t *tsd) {$/;"	f	typeref:typename:tcache_t *
tcache_dalloc_large	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^tcache_dalloc_large(tsd_t *tsd, tcache_t *tcache, void *ptr, szind_t binind,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
tcache_dalloc_small	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^tcache_dalloc_small(tsd_t *tsd, tcache_t *tcache, void *ptr, szind_t binind,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
tcache_destroy	deps/jemalloc/src/tcache.c	/^tcache_destroy(tsd_t *tsd, tcache_t *tcache, bool tsd_tcache) {$/;"	f	typeref:typename:void	file:
tcache_destroy_ctl	deps/jemalloc/src/ctl.c	/^tcache_destroy_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
tcache_enabled_get	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^tcache_enabled_get(tsd_t *tsd) {$/;"	f	typeref:typename:bool
tcache_enabled_set	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^tcache_enabled_set(tsd_t *tsd, bool enabled) {$/;"	f	typeref:typename:void
tcache_event	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^tcache_event(tsd_t *tsd, tcache_t *tcache) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
tcache_event_hard	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_event_hard /;"	d
tcache_event_hard	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_event_hard /;"	d
tcache_event_hard	deps/jemalloc/src/tcache.c	/^tcache_event_hard(tsd_t *tsd, tcache_t *tcache) {$/;"	f	typeref:typename:void
tcache_flush	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_flush /;"	d
tcache_flush	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_flush /;"	d
tcache_flush	deps/jemalloc/src/tcache.c	/^tcache_flush(tsd_t *tsd) {$/;"	f	typeref:typename:void
tcache_flush_cache	deps/jemalloc/src/tcache.c	/^tcache_flush_cache(tsd_t *tsd, tcache_t *tcache) {$/;"	f	typeref:typename:void	file:
tcache_flush_ctl	deps/jemalloc/src/ctl.c	/^tcache_flush_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
tcache_get	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^tcache_get(tsd_t *tsd) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE tcache_t *
tcache_ind	deps/jemalloc/src/jemalloc.c	/^	unsigned tcache_ind;$/;"	m	struct:dynamic_opts_s	typeref:typename:unsigned	file:
tcache_init	deps/jemalloc/src/tcache.c	/^tcache_init(tsd_t *tsd, tcache_t *tcache, void *avail_stack) {$/;"	f	typeref:typename:void	file:
tcache_large_bin_get	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^tcache_large_bin_get(tcache_t *tcache, szind_t binind) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE cache_bin_t *
tcache_maxclass	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_maxclass /;"	d
tcache_maxclass	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_maxclass /;"	d
tcache_maxclass	deps/jemalloc/src/tcache.c	/^size_t			tcache_maxclass;$/;"	v	typeref:typename:size_t
tcache_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t	tcache_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
tcache_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_postfork_child /;"	d
tcache_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_postfork_child /;"	d
tcache_postfork_child	deps/jemalloc/src/tcache.c	/^tcache_postfork_child(tsdn_t *tsdn) {$/;"	f	typeref:typename:void
tcache_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_postfork_parent /;"	d
tcache_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_postfork_parent /;"	d
tcache_postfork_parent	deps/jemalloc/src/tcache.c	/^tcache_postfork_parent(tsdn_t *tsdn) {$/;"	f	typeref:typename:void
tcache_prefork	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_prefork /;"	d
tcache_prefork	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_prefork /;"	d
tcache_prefork	deps/jemalloc/src/tcache.c	/^tcache_prefork(tsdn_t *tsdn) {$/;"	f	typeref:typename:void
tcache_ql_mtx	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	malloc_mutex_t				tcache_ql_mtx;$/;"	m	struct:arena_s	typeref:typename:malloc_mutex_t
tcache_s	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^struct tcache_s {$/;"	s
tcache_salloc	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_salloc /;"	d
tcache_salloc	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_salloc /;"	d
tcache_salloc	deps/jemalloc/src/tcache.c	/^tcache_salloc(tsdn_t *tsdn, const void *ptr) {$/;"	f	typeref:typename:size_t
tcache_small_bin_get	deps/jemalloc/include/jemalloc/internal/jemalloc_internal_inlines_a.h	/^tcache_small_bin_get(tcache_t *tcache, szind_t binind) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE cache_bin_t *
tcache_stats_merge	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcache_stats_merge /;"	d
tcache_stats_merge	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcache_stats_merge /;"	d
tcache_stats_merge	deps/jemalloc/src/tcache.c	/^tcache_stats_merge(tsdn_t *tsdn, tcache_t *tcache, arena_t *arena) {$/;"	f	typeref:typename:void
tcache_t	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^typedef struct tcache_s tcache_t;$/;"	t	typeref:struct:tcache_s
tcaches	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcaches /;"	d
tcaches	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcaches /;"	d
tcaches	deps/jemalloc/src/tcache.c	/^tcaches_t		*tcaches;$/;"	v	typeref:typename:tcaches_t *
tcaches_avail	deps/jemalloc/src/tcache.c	/^static tcaches_t	*tcaches_avail;$/;"	v	typeref:typename:tcaches_t *	file:
tcaches_create	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcaches_create /;"	d
tcaches_create	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcaches_create /;"	d
tcaches_create	deps/jemalloc/src/tcache.c	/^tcaches_create(tsd_t *tsd, unsigned *r_ind) {$/;"	f	typeref:typename:bool
tcaches_create_prep	deps/jemalloc/src/tcache.c	/^tcaches_create_prep(tsd_t *tsd) {$/;"	f	typeref:typename:bool	file:
tcaches_destroy	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcaches_destroy /;"	d
tcaches_destroy	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcaches_destroy /;"	d
tcaches_destroy	deps/jemalloc/src/tcache.c	/^tcaches_destroy(tsd_t *tsd, unsigned ind) {$/;"	f	typeref:typename:void
tcaches_elm_remove	deps/jemalloc/src/tcache.c	/^tcaches_elm_remove(tsd_t *tsd, tcaches_t *elm) {$/;"	f	typeref:typename:tcache_t *	file:
tcaches_flush	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tcaches_flush /;"	d
tcaches_flush	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tcaches_flush /;"	d
tcaches_flush	deps/jemalloc/src/tcache.c	/^tcaches_flush(tsd_t *tsd, unsigned ind) {$/;"	f	typeref:typename:void
tcaches_get	deps/jemalloc/include/jemalloc/internal/tcache_inlines.h	/^tcaches_get(tsd_t *tsd, unsigned ind) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE tcache_t *
tcaches_mtx	deps/jemalloc/src/tcache.c	/^static malloc_mutex_t	tcaches_mtx;$/;"	v	typeref:typename:malloc_mutex_t	file:
tcaches_past	deps/jemalloc/src/tcache.c	/^static unsigned		tcaches_past;$/;"	v	typeref:typename:unsigned	file:
tcaches_s	deps/jemalloc/include/jemalloc/internal/tcache_structs.h	/^struct tcaches_s {$/;"	s
tcaches_t	deps/jemalloc/include/jemalloc/internal/tcache_types.h	/^typedef struct tcaches_s tcaches_t;$/;"	t	typeref:struct:tcaches_s
tconcat	deps/lua/src/ltablib.c	/^static int tconcat (lua_State *L) {$/;"	f	typeref:typename:int	file:
tcp	deps/hiredis/hiredis.h	/^        } tcp;$/;"	m	union:__anon7daed6b50108::__anon7daed6b5020a	typeref:struct:__anon7daed6b50108::__anon7daed6b5020a::__anon7daed6b50308
tcp	deps/hiredis/hiredis.h	/^    } tcp;$/;"	m	struct:redisContext	typeref:struct:redisContext::__anon7daed6b50408
tcp	deps/hiredis/test.c	/^    } tcp;$/;"	m	struct:config	typeref:struct:config::__anonab9ca1680108	file:
tcp_backlog	src/server.h	/^    int tcp_backlog;            \/* TCP listen() backlog *\/$/;"	m	struct:redisServer	typeref:typename:int
tcpkeepalive	src/server.h	/^    int tcpkeepalive;               \/* Set SO_KEEPALIVE if non-zero. *\/$/;"	m	struct:redisServer	typeref:typename:int
tctx_uid	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t		tctx_uid;$/;"	m	struct:prof_tctx_s	typeref:typename:uint64_t
tctx_uid_next	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t		tctx_uid_next;$/;"	m	struct:prof_tdata_s	typeref:typename:uint64_t
tctxs	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_tctx_tree_t	tctxs;$/;"	m	struct:prof_gctx_s	typeref:typename:prof_tctx_tree_t
tdata	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	prof_tdata_t		*tdata;$/;"	m	struct:prof_tctx_s	typeref:typename:prof_tdata_t *
tdata_locks	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	*tdata_locks;$/;"	v	typeref:typename:malloc_mutex_t *	file:
tdatas	deps/jemalloc/src/prof.c	/^static prof_tdata_tree_t	tdatas;$/;"	v	typeref:typename:prof_tdata_tree_t	file:
tdatas_mtx	deps/jemalloc/src/prof.c	/^static malloc_mutex_t	tdatas_mtx;$/;"	v	typeref:typename:malloc_mutex_t	file:
tell	src/rio.h	/^    off_t (*tell)(struct _rio *);$/;"	m	struct:_rio	typeref:typename:off_t (*)(struct _rio *)
test	deps/hiredis/Makefile	/^test: hiredis-test$/;"	t
test	deps/hiredis/test.c	/^#define test(/;"	d	file:
test	deps/jemalloc/test/include/test/test.h	/^#define test(/;"	d
test	deps/lua/Makefile	/^test:	dummy$/;"	t
test	src/Makefile	/^test: $(REDIS_SERVER_NAME) $(REDIS_CHECK_AOF_NAME) $(REDIS_CLI_NAME) $(REDIS_BENCHMARK_NAME)$/;"	t
test-modules	src/Makefile	/^test-modules: $(REDIS_SERVER_NAME)$/;"	t
test-sentinel	src/Makefile	/^test-sentinel: $(REDIS_SENTINEL_NAME) $(REDIS_CLI_NAME)$/;"	t
test.o	deps/hiredis/Makefile	/^test.o: test.c fmacros.h hiredis.h read.h sds.h alloc.h net.h sockcompat.h win32.h$/;"	t
test2bits	deps/lua/src/lgc.h	/^#define test2bits(/;"	d
testAMode	deps/lua/src/lopcodes.h	/^#define testAMode(/;"	d
testHashingFunction	utils/tracking_collisions.c	/^unsigned long testHashingFunction(uint64_t (*hash)(char *, size_t)) {$/;"	f	typeref:typename:unsigned long
testTMode	deps/lua/src/lopcodes.h	/^#define testTMode(/;"	d
test_allocator_injection	deps/hiredis/test.c	/^static void test_allocator_injection(void) {$/;"	f	typeref:typename:void	file:
test_append_formatted_commands	deps/hiredis/test.c	/^static void test_append_formatted_commands(struct config config) {$/;"	f	typeref:typename:void	file:
test_bitmap_init_body	deps/jemalloc/test/unit/bitmap.c	/^test_bitmap_init_body(const bitmap_info_t *binfo, size_t nbits) {$/;"	f	typeref:typename:TEST_END void	file:
test_bitmap_initializer_body	deps/jemalloc/test/unit/bitmap.c	/^test_bitmap_initializer_body(const bitmap_info_t *binfo, size_t nbits) {$/;"	f	typeref:typename:void	file:
test_bitmap_set_body	deps/jemalloc/test/unit/bitmap.c	/^test_bitmap_set_body(const bitmap_info_t *binfo, size_t nbits) {$/;"	f	typeref:typename:TEST_END void	file:
test_bitmap_size_body	deps/jemalloc/test/unit/bitmap.c	/^test_bitmap_size_body(const bitmap_info_t *binfo, size_t nbits,$/;"	f	typeref:typename:TEST_END size_t	file:
test_bitmap_unset_body	deps/jemalloc/test/unit/bitmap.c	/^test_bitmap_unset_body(const bitmap_info_t *binfo, size_t nbits) {$/;"	f	typeref:typename:TEST_END void	file:
test_bitmap_xfu_body	deps/jemalloc/test/unit/bitmap.c	/^test_bitmap_xfu_body(const bitmap_info_t *binfo, size_t nbits) {$/;"	f	typeref:typename:TEST_END void	file:
test_blocking_connection	deps/hiredis/test.c	/^static void test_blocking_connection(struct config config) {$/;"	f	typeref:typename:void	file:
test_blocking_connection_errors	deps/hiredis/test.c	/^static void test_blocking_connection_errors(void) {$/;"	f	typeref:typename:void	file:
test_blocking_connection_timeouts	deps/hiredis/test.c	/^static void test_blocking_connection_timeouts(struct config config) {$/;"	f	typeref:typename:void	file:
test_blocking_io_errors	deps/hiredis/test.c	/^static void test_blocking_io_errors(struct config config) {$/;"	f	typeref:typename:void	file:
test_call_generic	tests/modules/misc.c	/^int test_call_generic(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
test_call_info	tests/modules/misc.c	/^int test_call_info(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
test_callback_t	deps/jemalloc/include/jemalloc/internal/tsd.h	/^typedef void (*test_callback_t)(int *);$/;"	t	typeref:typename:void (*)(int *)
test_clientinfo	tests/modules/misc.c	/^int test_clientinfo(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
test_cond	deps/hiredis/test.c	/^#define test_cond(/;"	d	file:
test_cond	src/testhelp.h	/^#define test_cond(/;"	d
test_count	deps/jemalloc/test/src/test.c	/^static unsigned		test_count = 0;$/;"	v	typeref:typename:unsigned	file:
test_counts	deps/jemalloc/test/src/test.c	/^static test_status_t	test_counts[test_status_count] = {0, 0, 0};$/;"	v	typeref:typename:test_status_t[]	file:
test_createtimer	tests/modules/timer.c	/^int test_createtimer(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
test_dbsize	tests/modules/misc.c	/^int test_dbsize(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
test_empty_list	deps/jemalloc/test/unit/ql.c	/^test_empty_list(list_head_t *head) {$/;"	f	typeref:typename:void	file:
test_entries_list	deps/jemalloc/test/unit/ql.c	/^test_entries_list(list_head_t *head, list_t *entries, unsigned nentries) {$/;"	f	typeref:typename:void	file:
test_entries_ring	deps/jemalloc/test/unit/qr.c	/^test_entries_ring(ring_t *entries) {$/;"	f	typeref:typename:TEST_END void	file:
test_eof	deps/lua/src/liolib.c	/^static int test_eof (lua_State *L, FILE *f) {$/;"	f	typeref:typename:int	file:
test_extent_body	deps/jemalloc/test/integration/extent.c	/^test_extent_body(unsigned arena_ind) {$/;"	f	typeref:typename:void	file:
test_fail	deps/jemalloc/test/src/test.c	/^test_fail(const char *format, ...) {$/;"	f	typeref:typename:JEMALLOC_FORMAT_PRINTF (1,2)void
test_flushall	tests/modules/misc.c	/^int test_flushall(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
test_format_commands	deps/hiredis/test.c	/^static void test_format_commands(void) {$/;"	f	typeref:typename:void	file:
test_free_null	deps/hiredis/test.c	/^static void test_free_null(void) {$/;"	f	typeref:typename:void	file:
test_getclientcert	tests/modules/misc.c	/^int test_getclientcert(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
test_getlfu	tests/modules/misc.c	/^int test_getlfu(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
test_getlru	tests/modules/misc.c	/^int test_getlru(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
test_gettimer	tests/modules/timer.c	/^int test_gettimer(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
test_independent_entries	deps/jemalloc/test/unit/qr.c	/^test_independent_entries(ring_t *entries) {$/;"	f	typeref:typename:void	file:
test_invalid_timeout_errors	deps/hiredis/test.c	/^static void test_invalid_timeout_errors(struct config config) {$/;"	f	typeref:typename:void	file:
test_is_reentrant	deps/jemalloc/test/src/test.c	/^test_is_reentrant() {$/;"	f	typeref:typename:bool
test_is_selected	src/redis-benchmark.c	/^int test_is_selected(char *name) {$/;"	f	typeref:typename:int
test_junk	deps/jemalloc/test/unit/junk.c	/^test_junk(size_t sz_min, size_t sz_max) {$/;"	f	typeref:typename:void	file:
test_ld_conv	tests/modules/misc.c	/^int test_ld_conv(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
test_ll2string	src/util.c	/^static void test_ll2string(void) {$/;"	f	typeref:typename:void	file:
test_log_tsctx	tests/modules/misc.c	/^int test_log_tsctx(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
test_manual_hook_auto_arena	deps/jemalloc/test/integration/extent.c	/^test_manual_hook_auto_arena(void) {$/;"	f	typeref:typename:void	file:
test_manual_hook_body	deps/jemalloc/test/integration/extent.c	/^test_manual_hook_body(void) {$/;"	f	typeref:typename:void	file:
test_name	deps/jemalloc/test/src/test.c	/^static const char *	test_name = "";$/;"	v	typeref:typename:const char *	file:
test_no_malloc_init	deps/jemalloc/test/include/test/test.h	/^#define test_no_malloc_init(/;"	d
test_no_reentrancy	deps/jemalloc/test/include/test/test.h	/^#define test_no_reentrancy(/;"	d
test_privdata_hooks	deps/hiredis/test.c	/^static void test_privdata_hooks(struct config config) {$/;"	f	typeref:typename:void	file:
test_prng_lg_range_u32	deps/jemalloc/test/unit/prng.c	/^test_prng_lg_range_u32(bool atomic) {$/;"	f	typeref:typename:void	file:
test_prng_lg_range_u64	deps/jemalloc/test/unit/prng.c	/^test_prng_lg_range_u64(void) {$/;"	f	typeref:typename:void	file:
test_prng_lg_range_zu	deps/jemalloc/test/unit/prng.c	/^test_prng_lg_range_zu(bool atomic) {$/;"	f	typeref:typename:void	file:
test_prng_range_u32	deps/jemalloc/test/unit/prng.c	/^test_prng_range_u32(bool atomic) {$/;"	f	typeref:typename:TEST_END void	file:
test_prng_range_u64	deps/jemalloc/test/unit/prng.c	/^test_prng_range_u64(void) {$/;"	f	typeref:typename:void	file:
test_prng_range_zu	deps/jemalloc/test/unit/prng.c	/^test_prng_range_zu(bool atomic) {$/;"	f	typeref:typename:void	file:
test_randomkey	tests/modules/misc.c	/^int test_randomkey(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
test_redisversion	tests/modules/misc.c	/^int test_redisversion(RedisModuleCtx *ctx, RedisModuleString **argv, int argc){$/;"	f	typeref:typename:int
test_repeat_background_thread_ctl	deps/jemalloc/test/unit/background_thread.c	/^test_repeat_background_thread_ctl(bool before) {$/;"	f	typeref:typename:void	file:
test_reply_reader	deps/hiredis/test.c	/^static void test_reply_reader(void) {$/;"	f	typeref:typename:void	file:
test_report	src/testhelp.h	/^#define test_report(/;"	d
test_resp3_push_handler	deps/hiredis/test.c	/^static void test_resp3_push_handler(redisContext *c) {$/;"	f	typeref:typename:void	file:
test_resp3_push_options	deps/hiredis/test.c	/^static void test_resp3_push_options(struct config config) {$/;"	f	typeref:typename:void	file:
test_rtree	deps/jemalloc/test/unit/rtree.c	/^rtree_t test_rtree;$/;"	v	typeref:typename:rtree_t
test_s	deps/jemalloc/test/unit/malloc_io.c	/^	struct test_s {$/;"	s	function:TEST_BEGIN	file:
test_setlfu	tests/modules/misc.c	/^int test_setlfu(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
test_setlru	tests/modules/misc.c	/^int test_setlru(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
test_skip	deps/jemalloc/test/src/test.c	/^test_skip(const char *format, ...) {$/;"	f	typeref:typename:JEMALLOC_FORMAT_PRINTF (1,2)void
test_skip_if	deps/jemalloc/test/include/test/test.h	/^#define test_skip_if(/;"	d
test_skipped	deps/hiredis/test.c	/^#define test_skipped(/;"	d	file:
test_split_entries	deps/jemalloc/test/unit/qr.c	/^test_split_entries(ring_t *entries) {$/;"	f	typeref:typename:TEST_END void	file:
test_status	deps/jemalloc/test/src/test.c	/^static test_status_t	test_status = test_status_pass;$/;"	v	typeref:typename:test_status_t	file:
test_status_count	deps/jemalloc/test/include/test/test.h	/^	test_status_count = 3$/;"	e	enum:__anonc9623e3d0103
test_status_fail	deps/jemalloc/test/include/test/test.h	/^	test_status_fail = 2,$/;"	e	enum:__anonc9623e3d0103
test_status_pass	deps/jemalloc/test/include/test/test.h	/^	test_status_pass = 0,$/;"	e	enum:__anonc9623e3d0103
test_status_skip	deps/jemalloc/test/include/test/test.h	/^	test_status_skip = 1,$/;"	e	enum:__anonc9623e3d0103
test_status_string	deps/jemalloc/test/src/test.c	/^test_status_string(test_status_t test_status) {$/;"	f	typeref:typename:const char *	file:
test_status_t	deps/jemalloc/test/include/test/test.h	/^} test_status_t;$/;"	t	typeref:enum:__anonc9623e3d0103
test_stoptimer	tests/modules/timer.c	/^int test_stoptimer(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
test_string2l	src/util.c	/^static void test_string2l(void) {$/;"	f	typeref:typename:void	file:
test_string2ll	src/util.c	/^static void test_string2ll(void) {$/;"	f	typeref:typename:void	file:
test_switch_background_thread_ctl	deps/jemalloc/test/unit/background_thread.c	/^test_switch_background_thread_ctl(bool new_val) {$/;"	f	typeref:typename:void	file:
test_t	deps/jemalloc/test/include/test/test.h	/^typedef void (test_t)(void);$/;"	t	typeref:typename:void ()(void)
test_then_block	deps/lua/src/lparser.c	/^static int test_then_block (LexState *ls) {$/;"	f	typeref:typename:int	file:
test_threads	deps/jemalloc/msvc/test_threads/test_threads.cpp	/^int test_threads() {$/;"	f	typeref:typename:int
test_throughput	deps/hiredis/test.c	/^static void test_throughput(struct config config) {$/;"	f	typeref:typename:void	file:
test_zero	deps/jemalloc/test/integration/xallocx.c	/^test_zero(size_t szmin, size_t szmax) {$/;"	f	typeref:typename:void	file:
test_zero	deps/jemalloc/test/unit/zero.c	/^test_zero(size_t sz_min, size_t sz_max) {$/;"	f	typeref:typename:void	file:
testbit	deps/lua/src/lgc.h	/^#define testbit(/;"	d
testbits	deps/lua/src/lgc.h	/^#define testbits(/;"	d
testnext	deps/lua/src/lparser.c	/^static int testnext (LexState *ls, int c) {$/;"	f	typeref:typename:int	file:
testrdb_aux_load	tests/modules/testrdb.c	/^int testrdb_aux_load(RedisModuleIO *rdb, int encver, int when) {$/;"	f	typeref:typename:int
testrdb_aux_save	tests/modules/testrdb.c	/^void testrdb_aux_save(RedisModuleIO *rdb, int when) {$/;"	f	typeref:typename:void
testrdb_get_after	tests/modules/testrdb.c	/^int testrdb_get_after(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
testrdb_get_before	tests/modules/testrdb.c	/^int testrdb_get_before(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
testrdb_get_key	tests/modules/testrdb.c	/^int testrdb_get_key(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
testrdb_set_after	tests/modules/testrdb.c	/^int testrdb_set_after(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
testrdb_set_before	tests/modules/testrdb.c	/^int testrdb_set_before(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
testrdb_set_key	tests/modules/testrdb.c	/^int testrdb_set_key(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)$/;"	f	typeref:typename:int
testrdb_type	tests/modules/testrdb.c	/^RedisModuleType *testrdb_type = NULL;$/;"	v	typeref:typename:RedisModuleType *
testrdb_type_free	tests/modules/testrdb.c	/^void testrdb_type_free(void *value) {$/;"	f	typeref:typename:void
testrdb_type_load	tests/modules/testrdb.c	/^void *testrdb_type_load(RedisModuleIO *rdb, int encver) {$/;"	f	typeref:typename:void *
testrdb_type_save	tests/modules/testrdb.c	/^void testrdb_type_save(RedisModuleIO *rdb, void *value) {$/;"	f	typeref:typename:void
tests	deps/hiredis/test.c	/^static int tests = 0, fails = 0, skips = 0;$/;"	v	typeref:typename:int	file:
tests	deps/jemalloc/Makefile	/^tests: tests_unit tests_integration tests_stress$/;"	t
tests	deps/jemalloc/Makefile.in	/^tests: tests_unit tests_integration tests_stress$/;"	t
tests	src/redis-benchmark.c	/^    char *tests;$/;"	m	struct:config	typeref:typename:char *	file:
tests_integration	deps/jemalloc/Makefile	/^tests_integration: $(TESTS_INTEGRATION:$(srcroot)%.c=$(objroot)%$(EXE)) $(TESTS_INTEGRATION_CPP:/;"	t
tests_integration	deps/jemalloc/Makefile.in	/^tests_integration: $(TESTS_INTEGRATION:$(srcroot)%.c=$(objroot)%$(EXE)) $(TESTS_INTEGRATION_CPP:/;"	t
tests_stress	deps/jemalloc/Makefile	/^tests_stress: $(TESTS_STRESS:$(srcroot)%.c=$(objroot)%$(EXE))$/;"	t
tests_stress	deps/jemalloc/Makefile.in	/^tests_stress: $(TESTS_STRESS:$(srcroot)%.c=$(objroot)%$(EXE))$/;"	t
tests_unit	deps/jemalloc/Makefile	/^tests_unit: $(TESTS_UNIT:$(srcroot)%.c=$(objroot)%$(EXE))$/;"	t
tests_unit	deps/jemalloc/Makefile.in	/^tests_unit: $(TESTS_UNIT:$(srcroot)%.c=$(objroot)%$(EXE))$/;"	t
th	deps/lua/src/lstate.h	/^  struct lua_State th;  \/* thread *\/$/;"	m	union:GCObject	typeref:struct:lua_State
thd_create	deps/jemalloc/test/src/thd.c	/^thd_create(thd_t *thd, void *(*proc)(void *), void *arg) {$/;"	f	typeref:typename:void
thd_join	deps/jemalloc/test/src/thd.c	/^thd_join(thd_t thd, void **ret) {$/;"	f	typeref:typename:void
thd_receiver_start	deps/jemalloc/test/unit/mq.c	/^thd_receiver_start(void *arg) {$/;"	f	typeref:typename:TEST_END void *	file:
thd_sender_start	deps/jemalloc/test/unit/mq.c	/^thd_sender_start(void *arg) {$/;"	f	typeref:typename:void *	file:
thd_start	deps/jemalloc/test/integration/MALLOCX_ARENA.c	/^thd_start(void *arg) {$/;"	f	typeref:typename:void *
thd_start	deps/jemalloc/test/integration/allocated.c	/^thd_start(void *arg) {$/;"	f	typeref:typename:void *
thd_start	deps/jemalloc/test/integration/thread_arena.c	/^thd_start(void *arg) {$/;"	f	typeref:typename:void *
thd_start	deps/jemalloc/test/integration/thread_tcache_enabled.c	/^thd_start(void *arg) {$/;"	f	typeref:typename:void *
thd_start	deps/jemalloc/test/unit/mtx.c	/^thd_start(void *varg) {$/;"	f	typeref:typename:void *	file:
thd_start	deps/jemalloc/test/unit/prof_accum.c	/^thd_start(void *varg) {$/;"	f	typeref:typename:void *	file:
thd_start	deps/jemalloc/test/unit/prof_reset.c	/^thd_start(void *varg) {$/;"	f	typeref:typename:TEST_END void *	file:
thd_start	deps/jemalloc/test/unit/prof_thread_name.c	/^thd_start(void *varg) {$/;"	f	typeref:typename:TEST_END void *	file:
thd_start	deps/jemalloc/test/unit/retained.c	/^thd_start(void *arg) {$/;"	f	typeref:typename:void *	file:
thd_start	deps/jemalloc/test/unit/stats.c	/^thd_start(void *arg) {$/;"	f	typeref:typename:TEST_END void *
thd_start	deps/jemalloc/test/unit/tsd.c	/^thd_start(void *arg) {$/;"	f	typeref:typename:void *	file:
thd_start_arg_t	deps/jemalloc/test/unit/mtx.c	/^} thd_start_arg_t;$/;"	t	typeref:struct:__anon0f5a9b9e0108	file:
thd_start_reincarnated	deps/jemalloc/test/unit/tsd.c	/^thd_start_reincarnated(void *arg) {$/;"	f	typeref:typename:TEST_END void *	file:
thd_t	deps/jemalloc/test/include/test/thd.h	/^typedef HANDLE thd_t;$/;"	t	typeref:typename:HANDLE
thd_t	deps/jemalloc/test/include/test/thd.h	/^typedef pthread_t thd_t;$/;"	t	typeref:typename:pthread_t
thislib	deps/lua/src/lua_struct.c	/^static const struct luaL_Reg thislib[] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
thp_mode_always	deps/jemalloc/include/jemalloc/internal/pages.h	/^	thp_mode_always        = 1, \/* Always set MADV_HUGEPAGE. *\/$/;"	e	enum:__anon53e173710103
thp_mode_default	deps/jemalloc/include/jemalloc/internal/pages.h	/^	thp_mode_default       = 0, \/* Do not change hugepage settings. *\/$/;"	e	enum:__anon53e173710103
thp_mode_names	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define thp_mode_names /;"	d
thp_mode_names	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define thp_mode_names /;"	d
thp_mode_names	deps/jemalloc/src/pages.c	/^const char *thp_mode_names[] = {$/;"	v	typeref:typename:const char * []
thp_mode_names_limit	deps/jemalloc/include/jemalloc/internal/pages.h	/^	thp_mode_names_limit   = 3, \/* Used for option processing. *\/$/;"	e	enum:__anon53e173710103
thp_mode_never	deps/jemalloc/include/jemalloc/internal/pages.h	/^	thp_mode_never         = 2, \/* Always set MADV_NOHUGEPAGE. *\/$/;"	e	enum:__anon53e173710103
thp_mode_not_supported	deps/jemalloc/include/jemalloc/internal/pages.h	/^	thp_mode_not_supported = 3  \/* No THP support detected. *\/$/;"	e	enum:__anon53e173710103
thp_mode_t	deps/jemalloc/include/jemalloc/internal/pages.h	/^} thp_mode_t;$/;"	t	typeref:enum:__anon53e173710103
thr_discrim	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t		thr_discrim;$/;"	m	struct:prof_tctx_s	typeref:typename:uint64_t
thr_discrim	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t		thr_discrim;$/;"	m	struct:prof_tdata_s	typeref:typename:uint64_t
thr_uid	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t		thr_uid;$/;"	m	struct:prof_tctx_s	typeref:typename:uint64_t
thr_uid	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	uint64_t		thr_uid;$/;"	m	struct:prof_tdata_s	typeref:typename:uint64_t
thread	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	pthread_t		thread;$/;"	m	struct:background_thread_info_s	typeref:typename:pthread_t
thread	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^	pthread_t thread;$/;"	m	struct:tsd_init_block_s	typeref:typename:pthread_t
thread	src/redis-benchmark.c	/^    pthread_t thread;$/;"	m	struct:benchmarkThread	typeref:typename:pthread_t	file:
threadMain	tests/modules/propagate.c	/^void *threadMain(void *arg) {$/;"	f	typeref:typename:void *
thread_id	src/redis-benchmark.c	/^    int thread_id;$/;"	m	struct:_client	typeref:typename:int	file:
thread_name	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	char			*thread_name;$/;"	m	struct:prof_tdata_s	typeref:typename:char *
thread_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t	thread_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
thread_prof_active_ctl	deps/jemalloc/src/ctl.c	/^thread_prof_active_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
thread_prof_name_ctl	deps/jemalloc/src/ctl.c	/^thread_prof_name_ctl(tsd_t *tsd, const size_t *mib, size_t miblen, void *oldp,$/;"	f	typeref:typename:int	file:
thread_prof_node	deps/jemalloc/src/ctl.c	/^static const ctl_named_node_t	thread_prof_node[] = {$/;"	v	typeref:typename:const ctl_named_node_t[]	file:
thread_tcache_flush_ctl	deps/jemalloc/src/ctl.c	/^thread_tcache_flush_ctl(tsd_t *tsd, const size_t *mib, size_t miblen,$/;"	f	typeref:typename:int	file:
threads	src/redis-benchmark.c	/^    struct benchmarkThread **threads;$/;"	m	struct:config	typeref:struct:benchmarkThread **	file:
threshold	src/redis-cli.c	/^    float threshold;$/;"	m	struct:clusterManagerCommand	typeref:typename:float	file:
thvalue	deps/lua/src/lobject.h	/^#define thvalue(/;"	d
tick	deps/jemalloc/include/jemalloc/internal/ticker.h	/^	int32_t tick;$/;"	m	struct:__anondffa78830108	typeref:typename:int32_t
ticker_copy	deps/jemalloc/include/jemalloc/internal/ticker.h	/^ticker_copy(ticker_t *ticker, const ticker_t *other) {$/;"	f	typeref:typename:void
ticker_fixup	deps/jemalloc/include/jemalloc/internal/ticker.h	/^ticker_fixup(ticker_t *ticker) {$/;"	f	typeref:typename:JEMALLOC_NOINLINE bool
ticker_init	deps/jemalloc/include/jemalloc/internal/ticker.h	/^ticker_init(ticker_t *ticker, int32_t nticks) {$/;"	f	typeref:typename:void
ticker_read	deps/jemalloc/include/jemalloc/internal/ticker.h	/^ticker_read(const ticker_t *ticker) {$/;"	f	typeref:typename:int32_t
ticker_t	deps/jemalloc/include/jemalloc/internal/ticker.h	/^} ticker_t;$/;"	t	typeref:struct:__anondffa78830108
ticker_tick	deps/jemalloc/include/jemalloc/internal/ticker.h	/^ticker_tick(ticker_t *ticker) {$/;"	f	typeref:typename:bool
ticker_ticks	deps/jemalloc/include/jemalloc/internal/ticker.h	/^ticker_ticks(ticker_t *ticker, int32_t nticks) {$/;"	f	typeref:typename:bool
ticks_per_half_distance	deps/hdr_histogram/hdr_histogram.h	/^    int32_t ticks_per_half_distance;$/;"	m	struct:hdr_iter_percentiles	typeref:typename:int32_t
tilt	src/sentinel.c	/^    int tilt;           \/* Are we in TILT mode? *\/$/;"	m	struct:sentinelState	typeref:typename:int	file:
tilt_start_time	src/sentinel.c	/^    mstime_t tilt_start_time;       \/* When TITL started. *\/$/;"	m	struct:sentinelState	typeref:typename:mstime_t	file:
time	src/bio.c	/^    time_t time; \/* Time at which the job was created. *\/$/;"	m	struct:bio_job	typeref:typename:time_t	file:
time	src/cluster.h	/^    mstime_t time;             \/* Time of the last report from this node. *\/$/;"	m	struct:clusterNodeFailReport	typeref:typename:mstime_t
time	src/latency.h	/^    int32_t time; \/* We don't use time_t to force 4 bytes usage everywhere. *\/$/;"	m	struct:latencySample	typeref:typename:int32_t
time	src/server.h	/^    *time, *pxat, *px, *retrycount, *force, *justid, $/;"	m	struct:sharedObjectsStruct
time	src/slowlog.h	/^    time_t time;        \/* Unix time at which the query was executed. *\/$/;"	m	struct:slowlogEntry	typeref:typename:time_t
timeCommand	src/server.c	/^void timeCommand(client *c) {$/;"	f	typeref:typename:void
timeEventHead	src/ae.h	/^    aeTimeEvent *timeEventHead;$/;"	m	struct:aeEventLoop	typeref:typename:aeTimeEvent *
timeEventNextId	src/ae.h	/^    long long timeEventNextId;$/;"	m	struct:aeEventLoop	typeref:typename:long long
timeInMilliseconds	src/dict.c	/^long long timeInMilliseconds(void) {$/;"	f	typeref:typename:long long
timeProc	src/ae.h	/^    aeTimeProc *timeProc;$/;"	m	struct:aeTimeEvent	typeref:typename:aeTimeProc *
time_func	deps/jemalloc/test/stress/microbench.c	/^time_func(timedelta_t *timer, uint64_t nwarmup, uint64_t niter,$/;"	f	typeref:typename:void	file:
time_independent_strcmp	src/acl.c	/^int time_independent_strcmp(char *a, char *b) {$/;"	f	typeref:typename:int
time_mock	deps/jemalloc/test/unit/decay.c	/^static nstime_t time_mock;$/;"	v	typeref:typename:nstime_t	file:
time_ms	deps/jemalloc/include/jemalloc/internal/arena_structs_b.h	/^	atomic_zd_t		time_ms;$/;"	m	struct:arena_decay_s	typeref:typename:atomic_zd_t
timedelta_t	deps/jemalloc/test/include/test/timer.h	/^} timedelta_t;$/;"	t	typeref:struct:__anonfe8af5de0108
timeout	deps/hiredis/test.c	/^        struct timeval timeout;$/;"	m	struct:config::__anonab9ca1680108	typeref:struct:timeval	file:
timeout	src/redis-cli.c	/^    int timeout;$/;"	m	struct:clusterManagerCommand	typeref:typename:int	file:
timeout	src/server.h	/^    mstime_t timeout;       \/* Blocking operation timeout. If UNIX current time$/;"	m	struct:blockingState	typeref:typename:mstime_t
timeout_callback	src/module.c	/^    RedisModuleCmdFunc timeout_callback; \/* Reply callback on timeout. *\/$/;"	m	struct:RedisModuleBlockedClient	typeref:typename:RedisModuleCmdFunc	file:
timer	deps/hiredis/adapters/libev.h	/^    ev_timer timer;$/;"	m	struct:redisLibevEvents	typeref:typename:ev_timer
timerHandler	src/modules/hellotimer.c	/^void timerHandler(RedisModuleCtx *ctx, void *data) {$/;"	f	typeref:typename:void
timerHandler	tests/modules/propagate.c	/^void timerHandler(RedisModuleCtx *ctx, void *data) {$/;"	f	typeref:typename:void
timerNestedHandler	tests/modules/propagate.c	/^void timerNestedHandler(RedisModuleCtx *ctx, void *data) {$/;"	f	typeref:typename:void
timer_callback	tests/modules/timer.c	/^static void timer_callback(RedisModuleCtx *ctx, void *data)$/;"	f	typeref:typename:void	file:
timer_ratio	deps/jemalloc/test/src/timer.c	/^timer_ratio(timedelta_t *a, timedelta_t *b, char *buf, size_t buflen) {$/;"	f	typeref:typename:void
timer_start	deps/jemalloc/test/src/timer.c	/^timer_start(timedelta_t *timer) {$/;"	f	typeref:typename:void
timer_stop	deps/jemalloc/test/src/timer.c	/^timer_stop(timedelta_t *timer) {$/;"	f	typeref:typename:void
timer_usec	deps/jemalloc/test/src/timer.c	/^timer_usec(const timedelta_t *timer) {$/;"	f	typeref:typename:uint64_t
timezone	src/server.h	/^    time_t timezone;            \/* Cached timezone. As set by tzset(). *\/$/;"	m	struct:redisServer	typeref:typename:time_t
tinsert	deps/lua/src/ltablib.c	/^static int tinsert (lua_State *L) {$/;"	f	typeref:typename:int	file:
title	src/redis-benchmark.c	/^    const char *title;$/;"	m	struct:config	typeref:typename:const char *	file:
tls	src/redis-benchmark.c	/^    int tls;$/;"	m	struct:config	typeref:typename:int	file:
tls	src/redis-cli.c	/^    int tls;$/;"	m	struct:config	typeref:typename:int	file:
tlsCleanup	src/tls.c	/^void tlsCleanup(void) {$/;"	f	typeref:typename:void
tlsConfigure	src/tls.c	/^int tlsConfigure(redisTLSContextConfig *ctx_config) {$/;"	f	typeref:typename:int
tlsEventHandler	src/tls.c	/^static void tlsEventHandler(struct aeEventLoop *el, int fd, void *clientData, int mask) {$/;"	f	typeref:typename:void	file:
tlsHandleEvent	src/tls.c	/^static void tlsHandleEvent(tls_connection *conn, int mask) {$/;"	f	typeref:typename:void	file:
tlsHasPendingData	src/tls.c	/^int tlsHasPendingData() {$/;"	f	typeref:typename:int
tlsInit	src/tls.c	/^void tlsInit(void) {$/;"	f	typeref:typename:void
tlsPasswordCallback	src/tls.c	/^static int tlsPasswordCallback(char *buf, int size, int rwflag, void *u) {$/;"	f	typeref:typename:int	file:
tlsProcessPendingData	src/tls.c	/^int tlsProcessPendingData() {$/;"	f	typeref:typename:int
tls_auth_clients	src/server.h	/^    int tls_auth_clients;$/;"	m	struct:redisServer	typeref:typename:int
tls_auth_clients_enum	src/config.c	/^configEnum tls_auth_clients_enum[] = {$/;"	v	typeref:typename:configEnum[]
tls_cluster	src/server.h	/^    int tls_cluster;$/;"	m	struct:redisServer	typeref:typename:int
tls_connection	src/tls.c	/^typedef struct tls_connection {$/;"	s	file:
tls_connection	src/tls.c	/^} tls_connection;$/;"	t	typeref:struct:tls_connection	file:
tls_ctx_config	src/server.h	/^    redisTLSContextConfig tls_ctx_config;$/;"	m	struct:redisServer	typeref:typename:redisTLSContextConfig
tls_port	src/server.h	/^    int tls_port;               \/* TLS listening port *\/$/;"	m	struct:redisServer	typeref:typename:int
tls_replication	src/server.h	/^    int tls_replication;$/;"	m	struct:redisServer	typeref:typename:int
tlsfd	src/server.h	/^    socketFds tlsfd;            \/* TLS socket file descriptors *\/$/;"	m	struct:redisServer	typeref:typename:socketFds
tmname	deps/lua/src/lstate.h	/^  TString *tmname[TM_N];  \/* array with tag-method names *\/$/;"	m	struct:global_State	typeref:typename:TString * []
tmp	deps/lua/src/lua_cjson.c	/^    strbuf_t *tmp;    \/* Temporary storage for strings *\/$/;"	m	struct:__anona3a73c770308	typeref:typename:strbuf_t *	file:
tmudata	deps/lua/src/lstate.h	/^  GCObject *tmudata;  \/* last element of list of userdata to be GC *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
to	src/redis-cli.c	/^    char *to;$/;"	m	struct:clusterManagerCommand	typeref:typename:char *	file:
to_16bit_minutes	utils/lru/lfu-simulation.c	/^#define to_16bit_minutes(/;"	d	file:
to_real1	deps/jemalloc/test/include/test/SFMT.h	/^static inline double to_real1(uint32_t v) {$/;"	f	typeref:typename:double
to_real2	deps/jemalloc/test/include/test/SFMT.h	/^static inline double to_real2(uint32_t v) {$/;"	f	typeref:typename:double
to_real3	deps/jemalloc/test/include/test/SFMT.h	/^static inline double to_real3(uint32_t v) {$/;"	f	typeref:typename:double
to_res53	deps/jemalloc/test/include/test/SFMT.h	/^static inline double to_res53(uint64_t v) {$/;"	f	typeref:typename:double
to_res53_mix	deps/jemalloc/test/include/test/SFMT.h	/^static inline double to_res53_mix(uint32_t x, uint32_t y) {$/;"	f	typeref:typename:double
todo_before_sleep	src/cluster.h	/^    int todo_before_sleep; \/* Things to do in clusterBeforeSleep(). *\/$/;"	m	struct:clusterState	typeref:typename:int
tofile	deps/lua/src/liolib.c	/^static FILE *tofile (lua_State *L) {$/;"	f	typeref:typename:FILE *	file:
tofilep	deps/lua/src/liolib.c	/^#define tofilep(/;"	d	file:
token	deps/jemalloc/test/unit/stats_print.c	/^	token_t	token;$/;"	m	struct:parser_s	typeref:typename:token_t	file:
token	deps/lua/src/llex.h	/^  int token;$/;"	m	struct:Token	typeref:typename:int
token_error	deps/jemalloc/test/unit/stats_print.c	/^token_error(token_t *token) {$/;"	f	typeref:typename:void	file:
token_init	deps/jemalloc/test/unit/stats_print.c	/^token_init(token_t *token, parser_t *parser, token_type_t token_type,$/;"	f	typeref:typename:void	file:
token_t	deps/jemalloc/test/unit/stats_print.c	/^} token_t;$/;"	t	typeref:struct:__anonb5a306e00208	file:
token_type	deps/jemalloc/test/unit/stats_print.c	/^	token_type_t	token_type;$/;"	m	struct:__anonb5a306e00208	typeref:typename:token_type_t	file:
token_type_t	deps/jemalloc/test/unit/stats_print.c	/^} token_type_t;$/;"	t	typeref:enum:__anonb5a306e00103	file:
tonumber	deps/lua/src/lvm.h	/^#define tonumber(/;"	d
top	deps/lua/src/lstate.h	/^  StkId	top;  \/* top for this function *\/$/;"	m	struct:CallInfo	typeref:typename:StkId
top	deps/lua/src/lstate.h	/^  StkId top;  \/* first free slot in the stack *\/$/;"	m	struct:lua_State	typeref:typename:StkId
toproto	deps/lua/src/luac.c	/^#define toproto(/;"	d	file:
tostate	deps/lua/src/lstate.c	/^#define tostate(/;"	d	file:
tostore	deps/lua/src/lparser.c	/^  int tostore;  \/* number of array elements pending to be stored *\/$/;"	m	struct:ConsControl	typeref:typename:int	file:
tostring	deps/lua/src/lvm.h	/^#define tostring(/;"	d
tot_n_runs	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	uint64_t		tot_n_runs;$/;"	m	struct:background_thread_info_s	typeref:typename:uint64_t
tot_sleep_time	deps/jemalloc/include/jemalloc/internal/background_thread_structs.h	/^	nstime_t		tot_sleep_time;$/;"	m	struct:background_thread_info_s	typeref:typename:nstime_t
tot_wait_time	deps/jemalloc/include/jemalloc/internal/mutex_prof.h	/^	nstime_t		tot_wait_time;$/;"	m	struct:__anonb26b3fca0308	typeref:typename:nstime_t
total_allocated	src/server.h	/^    size_t total_allocated;$/;"	m	struct:redisMemOverhead	typeref:typename:size_t
total_count	deps/hdr_histogram/hdr_histogram.h	/^    int64_t total_count;$/;"	m	struct:hdr_histogram	typeref:typename:int64_t
total_count	deps/hdr_histogram/hdr_histogram.h	/^    int64_t total_count;$/;"	m	struct:hdr_iter	typeref:typename:int64_t
total_frag	src/server.h	/^    float total_frag;$/;"	m	struct:redisMemOverhead	typeref:typename:float
total_frag_bytes	src/server.h	/^    ssize_t total_frag_bytes;$/;"	m	struct:redisMemOverhead	typeref:typename:ssize_t
total_keys	src/server.h	/^    size_t total_keys;$/;"	m	struct:redisMemOverhead	typeref:typename:size_t
totalbytes	deps/lua/src/lstate.h	/^  lu_mem totalbytes;  \/* number of bytes currently allocated *\/$/;"	m	struct:global_State	typeref:typename:lu_mem
totalsize	src/redis-cli.c	/^    unsigned long long totalsize;$/;"	m	struct:__anon6af24fe90208	typeref:typename:unsigned long long	file:
totlatency	src/redis-benchmark.c	/^    long long totlatency;$/;"	m	struct:config	typeref:typename:long long	file:
totlen	src/cluster.h	/^    uint32_t totlen;    \/* Total length of this message *\/$/;"	m	struct:__anon2cc7db540b08	typeref:typename:uint32_t
touchAllWatchedKeysInDb	src/multi.c	/^void touchAllWatchedKeysInDb(redisDb *emptied, redisDb *replaced_with) {$/;"	f	typeref:typename:void
touchCommand	src/expire.c	/^void touchCommand(client *c) {$/;"	f	typeref:typename:void
touchWatchedKey	src/multi.c	/^void touchWatchedKey(redisDb *db, robj *key) {$/;"	f	typeref:typename:void
traceback	deps/lua/src/lua.c	/^static int traceback (lua_State *L) {$/;"	f	typeref:typename:int	file:
traceexec	deps/lua/src/lvm.c	/^static void traceexec (lua_State *L, const Instruction *pc) {$/;"	f	typeref:typename:void	file:
traces	src/scripting.c	/^    list *traces; \/* Messages about Redis commands executed since last stop.*\/$/;"	m	struct:ldbState	typeref:typename:list *	file:
trackInstantaneousMetric	src/server.c	/^void trackInstantaneousMetric(int metric, long long current_reading) {$/;"	f	typeref:typename:void
trackingBroadcastInvalidationMessages	src/tracking.c	/^void trackingBroadcastInvalidationMessages(void) {$/;"	f	typeref:typename:void
trackingBuildBroadcastReply	src/tracking.c	/^sds trackingBuildBroadcastReply(client *c, rax *keys) {$/;"	f	typeref:typename:sds
trackingGetTotalItems	src/tracking.c	/^uint64_t trackingGetTotalItems(void) {$/;"	f	typeref:typename:uint64_t
trackingGetTotalKeys	src/tracking.c	/^uint64_t trackingGetTotalKeys(void) {$/;"	f	typeref:typename:uint64_t
trackingGetTotalPrefixes	src/tracking.c	/^uint64_t trackingGetTotalPrefixes(void) {$/;"	f	typeref:typename:uint64_t
trackingInvalidateKey	src/tracking.c	/^void trackingInvalidateKey(client *c, robj *keyobj) {$/;"	f	typeref:typename:void
trackingInvalidateKeyRaw	src/tracking.c	/^void trackingInvalidateKeyRaw(client *c, char *key, size_t keylen, int bcast) {$/;"	f	typeref:typename:void
trackingInvalidateKeysOnFlush	src/tracking.c	/^void trackingInvalidateKeysOnFlush(int async) {$/;"	f	typeref:typename:void
trackingLimitUsedSlots	src/tracking.c	/^void trackingLimitUsedSlots(void) {$/;"	f	typeref:typename:void
trackingRememberKeyToBroadcast	src/tracking.c	/^void trackingRememberKeyToBroadcast(client *c, char *keyname, size_t keylen) {$/;"	f	typeref:typename:void
trackingRememberKeys	src/tracking.c	/^void trackingRememberKeys(client *c) {$/;"	f	typeref:typename:void
tracking_clients	src/server.h	/^    unsigned int tracking_clients;  \/* # of clients with tracking enabled.*\/$/;"	m	struct:redisServer	typeref:typename:unsigned int
tracking_table_max_keys	src/server.h	/^    size_t tracking_table_max_keys; \/* Max number of keys in tracking table. *\/$/;"	m	struct:redisServer	typeref:typename:size_t
traverseclosure	deps/lua/src/lgc.c	/^static void traverseclosure (global_State *g, Closure *cl) {$/;"	f	typeref:typename:void	file:
traverseproto	deps/lua/src/lgc.c	/^static void traverseproto (global_State *g, Proto *f) {$/;"	f	typeref:typename:void	file:
traversestack	deps/lua/src/lgc.c	/^static void traversestack (global_State *g, lua_State *l) {$/;"	f	typeref:typename:void	file:
traversetable	deps/lua/src/lgc.c	/^static int traversetable (global_State *g, Table *h) {$/;"	f	typeref:typename:int	file:
treatstackoption	deps/lua/src/ldblib.c	/^static void treatstackoption (lua_State *L, lua_State *L1, const char *fname) {$/;"	f	typeref:typename:void	file:
tree_iterate	deps/jemalloc/test/unit/rb.c	/^tree_iterate(tree_t *tree) {$/;"	f	typeref:typename:unsigned	file:
tree_iterate_cb	deps/jemalloc/test/unit/rb.c	/^tree_iterate_cb(tree_t *tree, node_t *node, void *data) {$/;"	f	typeref:typename:node_t *	file:
tree_iterate_reverse	deps/jemalloc/test/unit/rb.c	/^tree_iterate_reverse(tree_t *tree) {$/;"	f	typeref:typename:unsigned	file:
tree_recurse	deps/jemalloc/test/unit/rb.c	/^tree_recurse(node_t *node, unsigned black_height, unsigned black_depth) {$/;"	f	typeref:typename:TEST_END unsigned	file:
tree_t	deps/jemalloc/test/unit/rb.c	/^typedef rb_tree(node_t) tree_t;$/;"	t	file:
tremove	deps/lua/src/ltablib.c	/^static int tremove (lua_State *L) {$/;"	f	typeref:typename:int	file:
trimReplyUnusedTailSpace	src/networking.c	/^void trimReplyUnusedTailSpace(client *c) {$/;"	f	typeref:typename:void
trimStringObjectIfNeeded	src/object.c	/^void trimStringObjectIfNeeded(robj *o) {$/;"	f	typeref:typename:void
trim_strategy	src/t_stream.c	/^    int trim_strategy; \/* TRIM_STRATEGY_* *\/$/;"	m	struct:__anon8fe9202c0108	typeref:typename:int	file:
trim_strategy_arg_idx	src/t_stream.c	/^    int trim_strategy_arg_idx; \/* Index of the count in MAXLEN\/MINID, for rewriting. *\/$/;"	m	struct:__anon8fe9202c0108	typeref:typename:int	file:
true	deps/jemalloc/include/msvc_compat/C99/stdbool.h	/^#define true /;"	d
tryCreateRawStringObject	src/object.c	/^robj *tryCreateRawStringObject(const char *ptr, size_t len) {$/;"	f	typeref:typename:robj *
tryCreateStringObject	src/object.c	/^robj *tryCreateStringObject(const char *ptr, size_t len) {$/;"	f	typeref:typename:robj *
tryObjectEncoding	src/object.c	/^robj *tryObjectEncoding(robj *o) {$/;"	f	typeref:typename:robj *
tryResizeHashTables	src/server.c	/^void tryResizeHashTables(int dbid) {$/;"	f	typeref:typename:void
try_alloc	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_alloc = true;$/;"	v	typeref:typename:bool
try_commit	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_commit = true;$/;"	v	typeref:typename:bool
try_dalloc	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_dalloc = true;$/;"	v	typeref:typename:bool
try_decommit	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_decommit = true;$/;"	v	typeref:typename:bool
try_destroy	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_destroy = true;$/;"	v	typeref:typename:bool
try_merge	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_merge = true;$/;"	v	typeref:typename:bool
try_purge_forced	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_purge_forced = true;$/;"	v	typeref:typename:bool
try_purge_lazy	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_purge_lazy = true;$/;"	v	typeref:typename:bool
try_split	deps/jemalloc/test/include/test/extent_hooks.h	/^static bool try_split = true;$/;"	v	typeref:typename:bool
trydecpoint	deps/lua/src/llex.c	/^static void trydecpoint (LexState *ls, SemInfo *seminfo) {$/;"	f	typeref:typename:void	file:
tryfuncTM	deps/lua/src/ldo.c	/^static StkId tryfuncTM (lua_State *L, StkId func) {$/;"	f	typeref:typename:StkId	file:
ts	deps/lua/src/llex.h	/^  TString *ts;$/;"	m	union:__anon6e0980f3010a	typeref:typename:TString *
ts	deps/lua/src/lstate.h	/^  union TString ts;$/;"	m	union:GCObject	typeref:union:TString
tsd	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_t tsd;$/;"	m	struct:tsdn_s	typeref:typename:tsd_t
tsd_assert_fast	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_assert_fast(tsd_t *tsd) {$/;"	f
tsd_boot	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_boot(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_boot	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^tsd_boot(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_boot	deps/jemalloc/include/jemalloc/internal/tsd_tls.h	/^tsd_boot(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_boot	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_boot(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_boot0	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_boot0(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_boot0	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^tsd_boot0(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_boot0	deps/jemalloc/include/jemalloc/internal/tsd_tls.h	/^tsd_boot0(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_boot0	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_boot0(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_boot1	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_boot1(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
tsd_boot1	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^tsd_boot1(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
tsd_boot1	deps/jemalloc/include/jemalloc/internal/tsd_tls.h	/^tsd_boot1(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
tsd_boot1	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_boot1(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
tsd_boot_wrapper	deps/jemalloc/src/tsd.c	/^tsd_wrapper_t tsd_boot_wrapper = {$/;"	v	typeref:typename:tsd_wrapper_t
tsd_boot_wrapper	deps/jemalloc/src/tsd.c	/^tsd_wrapper_t tsd_boot_wrapper = {false, TSD_INITIALIZER};$/;"	v	typeref:typename:tsd_wrapper_t
tsd_booted	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tsd_booted /;"	d
tsd_booted	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tsd_booted /;"	d
tsd_booted	deps/jemalloc/src/tsd.c	/^bool tsd_booted = false;$/;"	v	typeref:typename:bool
tsd_booted_get	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_booted_get(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_booted_get	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^tsd_booted_get(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_booted_get	deps/jemalloc/include/jemalloc/internal/tsd_tls.h	/^tsd_booted_get(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_booted_get	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_booted_get(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_cleanup	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tsd_cleanup /;"	d
tsd_cleanup	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tsd_cleanup /;"	d
tsd_cleanup	deps/jemalloc/src/tsd.c	/^tsd_cleanup(void *arg) {$/;"	f	typeref:typename:void
tsd_cleanup_wrapper	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_cleanup_wrapper(void *arg) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
tsd_cleanup_wrapper	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^tsd_cleanup_wrapper(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_cleanup_wrapper	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_cleanup_wrapper(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_data_init	deps/jemalloc/src/tsd.c	/^tsd_data_init(tsd_t *tsd) {$/;"	f	typeref:typename:bool	file:
tsd_data_init_nocleanup	deps/jemalloc/src/tsd.c	/^tsd_data_init_nocleanup(tsd_t *tsd) {$/;"	f	typeref:typename:bool	file:
tsd_do_data_cleanup	deps/jemalloc/src/tsd.c	/^tsd_do_data_cleanup(tsd_t *tsd) {$/;"	f	typeref:typename:void	file:
tsd_fast	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_fast(tsd_t *tsd) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_fetch	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_fetch(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE tsd_t *
tsd_fetch_impl	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_fetch_impl(bool init, bool minimal) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE tsd_t *
tsd_fetch_min	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_fetch_min(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE tsd_t *
tsd_fetch_slow	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tsd_fetch_slow /;"	d
tsd_fetch_slow	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tsd_fetch_slow /;"	d
tsd_fetch_slow	deps/jemalloc/src/tsd.c	/^tsd_fetch_slow(tsd_t *tsd, bool minimal) {$/;"	f	typeref:typename:tsd_t *
tsd_get	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_get(bool init) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE tsd_t *
tsd_get	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^tsd_get(bool init) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE tsd_t *
tsd_get	deps/jemalloc/include/jemalloc/internal/tsd_tls.h	/^tsd_get(UNUSED bool init) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE tsd_t *
tsd_get	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_get(bool init) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE tsd_t *
tsd_get_allocates	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_get_allocates(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_get_allocates	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^tsd_get_allocates(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_get_allocates	deps/jemalloc/include/jemalloc/internal/tsd_tls.h	/^tsd_get_allocates(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_get_allocates	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_get_allocates(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsd_init_block_s	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^struct tsd_init_block_s {$/;"	s
tsd_init_block_t	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^typedef struct tsd_init_block_s tsd_init_block_t;$/;"	t	typeref:struct:tsd_init_block_s
tsd_init_check_recursion	deps/jemalloc/src/tsd.c	/^tsd_init_check_recursion(tsd_init_head_t *head, tsd_init_block_t *block) {$/;"	f	typeref:typename:void *
tsd_init_finish	deps/jemalloc/src/tsd.c	/^tsd_init_finish(tsd_init_head_t *head, tsd_init_block_t *block) {$/;"	f	typeref:typename:void
tsd_init_head	deps/jemalloc/src/tsd.c	/^tsd_init_head_t	tsd_init_head = {$/;"	v	typeref:typename:tsd_init_head_t
tsd_init_head_s	deps/jemalloc/src/tsd.c	/^struct tsd_init_head_s {$/;"	s	file:
tsd_init_head_t	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^typedef struct tsd_init_head_s tsd_init_head_t;$/;"	t	typeref:struct:tsd_init_head_s
tsd_initialized	deps/jemalloc/src/tsd.c	/^__thread bool JEMALLOC_TLS_MODEL tsd_initialized = false;$/;"	v	typeref:typename:__thread bool JEMALLOC_TLS_MODEL
tsd_internal_fetch	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_internal_fetch(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE tsd_t *
tsd_nominal	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_nominal(tsd_t *tsd) {$/;"	f	typeref:typename:bool
tsd_rtree_ctx	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_rtree_ctx(tsd_t *tsd) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE rtree_ctx_t *
tsd_s	deps/jemalloc/include/jemalloc/internal/tsd.h	/^struct tsd_s {$/;"	s
tsd_set	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_set(tsd_t *val) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
tsd_set	deps/jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h	/^tsd_set(tsd_t *val) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
tsd_set	deps/jemalloc/include/jemalloc/internal/tsd_tls.h	/^tsd_set(tsd_t *val) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
tsd_set	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_set(tsd_t *val) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
tsd_slow_update	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tsd_slow_update /;"	d
tsd_slow_update	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tsd_slow_update /;"	d
tsd_slow_update	deps/jemalloc/src/tsd.c	/^tsd_slow_update(tsd_t *tsd) {$/;"	f	typeref:typename:void
tsd_state_minimal_initialized	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_state_minimal_initialized = 2,$/;"	e	enum:__anon272f974c0103
tsd_state_nominal	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_state_nominal = 0, \/* Common case --> jnz. *\/$/;"	e	enum:__anon272f974c0103
tsd_state_nominal_max	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_state_nominal_max = 1, \/* used for comparison only. *\/$/;"	e	enum:__anon272f974c0103
tsd_state_nominal_slow	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_state_nominal_slow = 1, \/* Initialized but on slow path. *\/$/;"	e	enum:__anon272f974c0103
tsd_state_purgatory	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_state_purgatory = 3,$/;"	e	enum:__anon272f974c0103
tsd_state_reincarnated	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_state_reincarnated = 4,$/;"	e	enum:__anon272f974c0103
tsd_state_t	deps/jemalloc/include/jemalloc/internal/tsd.h	/^typedef uint8_t tsd_state_t;$/;"	t	typeref:typename:uint8_t
tsd_state_uninitialized	deps/jemalloc/include/jemalloc/internal/tsd.h	/^	tsd_state_uninitialized = 5$/;"	e	enum:__anon272f974c0103
tsd_t	deps/jemalloc/include/jemalloc/internal/tsd_types.h	/^typedef struct tsd_s tsd_t;$/;"	t	typeref:struct:tsd_s
tsd_tcache_data_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tsd_tcache_data_init /;"	d
tsd_tcache_data_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tsd_tcache_data_init /;"	d
tsd_tcache_data_init	deps/jemalloc/src/tcache.c	/^tsd_tcache_data_init(tsd_t *tsd) {$/;"	f	typeref:typename:bool
tsd_tcache_enabled_data_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tsd_tcache_enabled_data_init /;"	d
tsd_tcache_enabled_data_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tsd_tcache_enabled_data_init /;"	d
tsd_tcache_enabled_data_init	deps/jemalloc/src/tcache.c	/^tsd_tcache_enabled_data_init(tsd_t *tsd) {$/;"	f	typeref:typename:bool
tsd_tls	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tsd_tls /;"	d
tsd_tls	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tsd_tls /;"	d
tsd_tls	deps/jemalloc/src/tsd.c	/^__thread tsd_t JEMALLOC_TLS_MODEL tsd_tls = TSD_INITIALIZER;$/;"	v	typeref:typename:__thread tsd_t JEMALLOC_TLS_MODEL
tsd_tsd	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define tsd_tsd /;"	d
tsd_tsd	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define tsd_tsd /;"	d
tsd_tsd	deps/jemalloc/src/tsd.c	/^DWORD tsd_tsd;$/;"	v	typeref:typename:DWORD
tsd_tsd	deps/jemalloc/src/tsd.c	/^pthread_key_t tsd_tsd;$/;"	v	typeref:typename:pthread_key_t
tsd_tsdn	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsd_tsdn(tsd_t *tsd) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE tsdn_t *
tsd_wrapper_get	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_wrapper_get(bool init) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE tsd_wrapper_t *
tsd_wrapper_get	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_wrapper_get(bool init) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE tsd_wrapper_t *
tsd_wrapper_set	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^tsd_wrapper_set(tsd_wrapper_t *wrapper) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
tsd_wrapper_set	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^tsd_wrapper_set(tsd_wrapper_t *wrapper) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE void
tsd_wrapper_t	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^} tsd_wrapper_t;$/;"	t	typeref:struct:__anon70b3c1880108
tsd_wrapper_t	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^} tsd_wrapper_t;$/;"	t	typeref:struct:__anon4c1a01b90108
tsdn	deps/jemalloc/src/prof.c	/^	tsdn_t		*tsdn;$/;"	m	struct:prof_tdata_merge_iter_arg_s	typeref:typename:tsdn_t *	file:
tsdn	deps/jemalloc/src/prof.c	/^	tsdn_t	*tsdn;$/;"	m	struct:prof_gctx_dump_iter_arg_s	typeref:typename:tsdn_t *	file:
tsdn	deps/jemalloc/src/prof.c	/^	tsdn_t	*tsdn;$/;"	m	struct:prof_gctx_merge_iter_arg_s	typeref:typename:tsdn_t *	file:
tsdn	deps/jemalloc/src/prof.c	/^	tsdn_t	*tsdn;$/;"	m	struct:prof_tctx_dump_iter_arg_s	typeref:typename:tsdn_t *	file:
tsdn_fetch	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsdn_fetch(void) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE tsdn_t *
tsdn_null	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsdn_null(const tsdn_t *tsdn) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
tsdn_rtree_ctx	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsdn_rtree_ctx(tsdn_t *tsdn, rtree_ctx_t *fallback) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE rtree_ctx_t *
tsdn_s	deps/jemalloc/include/jemalloc/internal/tsd.h	/^struct tsdn_s {$/;"	s
tsdn_t	deps/jemalloc/include/jemalloc/internal/tsd_types.h	/^typedef struct tsdn_s tsdn_t;$/;"	t	typeref:struct:tsdn_s
tsdn_tsd	deps/jemalloc/include/jemalloc/internal/tsd.h	/^tsdn_tsd(tsdn_t *tsdn) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE tsd_t *
tstats	deps/jemalloc/include/jemalloc/internal/cache_bin.h	/^	cache_bin_stats_t tstats;$/;"	m	struct:cache_bin_s	typeref:typename:cache_bin_stats_t
tsv	deps/lua/src/lobject.h	/^  } tsv;$/;"	m	union:TString	typeref:struct:TString::__anona52fc9410208
tsvalue	deps/lua/src/lobject.h	/^#define tsvalue(/;"	d
tt	src/config.c	/^        time_t *tt;$/;"	m	union:numericConfigData::__anon722b8083020a	typeref:typename:time_t *	file:
ttisboolean	deps/lua/src/lobject.h	/^#define ttisboolean(/;"	d
ttisfunction	deps/lua/src/lobject.h	/^#define ttisfunction(/;"	d
ttislightuserdata	deps/lua/src/lobject.h	/^#define ttislightuserdata(/;"	d
ttisnil	deps/lua/src/lobject.h	/^#define ttisnil(/;"	d
ttisnumber	deps/lua/src/lobject.h	/^#define ttisnumber(/;"	d
ttisstring	deps/lua/src/lobject.h	/^#define ttisstring(/;"	d
ttistable	deps/lua/src/lobject.h	/^#define ttistable(/;"	d
ttisthread	deps/lua/src/lobject.h	/^#define ttisthread(/;"	d
ttisuserdata	deps/lua/src/lobject.h	/^#define ttisuserdata(/;"	d
ttlCommand	src/expire.c	/^void ttlCommand(client *c) {$/;"	f	typeref:typename:void
ttlGenericCommand	src/expire.c	/^void ttlGenericCommand(client *c, int output_ms) {$/;"	f	typeref:typename:void
ttype	deps/lua/src/lobject.h	/^#define ttype(/;"	d
tv	deps/hiredis/adapters/libevent.h	/^    struct timeval tv;$/;"	m	struct:redisLibeventEvents	typeref:struct:timeval
tvk	deps/lua/src/lobject.h	/^  TValue tvk;$/;"	m	union:TKey	typeref:typename:TValue
twoto	deps/lua/src/lobject.h	/^#define twoto(/;"	d
txtToken	deps/lua/src/llex.c	/^static const char *txtToken (LexState *ls, int token) {$/;"	f	typeref:typename:const char *	file:
type	deps/hiredis/dict.h	/^    dictType *type;$/;"	m	struct:dict	typeref:typename:dictType *
type	deps/hiredis/hiredis.h	/^    int type; \/* REDIS_REPLY_* *\/$/;"	m	struct:redisReply	typeref:typename:int
type	deps/hiredis/hiredis.h	/^    int type;$/;"	m	struct:__anon7daed6b50108	typeref:typename:int
type	deps/hiredis/read.h	/^    int type;$/;"	m	struct:redisReadTask	typeref:typename:int
type	deps/hiredis/test.c	/^    enum connection_type type;$/;"	m	struct:config	typeref:enum:connection_type	file:
type	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	emitter_type_t type;$/;"	m	struct:emitter_col_s	typeref:typename:emitter_type_t
type	deps/lua/src/lua_cjson.c	/^    json_token_type_t type;$/;"	m	struct:__anona3a73c770408	typeref:typename:json_token_type_t	file:
type	src/cluster.h	/^    uint16_t type;      \/* Message type *\/$/;"	m	struct:__anon2cc7db540b08	typeref:typename:uint16_t
type	src/cluster.h	/^    uint8_t type;           \/* Type from 0 to 255. *\/$/;"	m	struct:__anon2cc7db540508	typeref:typename:uint8_t
type	src/connection.h	/^    ConnectionType *type;$/;"	m	struct:connection	typeref:typename:ConnectionType *
type	src/dict.h	/^    dictType *type;$/;"	m	struct:dict	typeref:typename:dictType *
type	src/geohash.h	/^    int type; \/* search type *\/$/;"	m	struct:__anona01652f10608	typeref:typename:int
type	src/module.c	/^            uint32_t type;         \/* REDISMODULE_ZSET_RANGE_* *\/$/;"	m	struct:RedisModuleKey::__anon967b4733010a::__anon967b47330208	typeref:typename:uint32_t	file:
type	src/module.c	/^    int type;       \/* REDISMODULE_REPLY_... *\/$/;"	m	struct:RedisModuleCallReply	typeref:typename:int	file:
type	src/module.c	/^    int type;$/;"	m	struct:AutoMemEntry	typeref:typename:int	file:
type	src/redis-cli.c	/^    int type;$/;"	m	struct:__anon6af24fe90108	typeref:typename:int	file:
type	src/server.h	/^    int type;$/;"	m	struct:_redisSortOperation	typeref:typename:int
type	src/server.h	/^    moduleType *type;   \/* Module type doing the operation. *\/$/;"	m	struct:RedisModuleIO	typeref:typename:moduleType *
type	src/server.h	/^    moduleType *type;$/;"	m	struct:moduleValue	typeref:typename:moduleType *
type	src/server.h	/^    unsigned type:4;$/;"	m	struct:redisObject	typeref:typename:unsigned:4
type	src/t_zset.c	/^    int type; \/* Set, sorted set *\/$/;"	m	struct:__anon6fce03460408	typeref:typename:int	file:
type	src/t_zset.c	/^    zrange_consumer_type                 type;$/;"	m	struct:zrange_result_handler	typeref:typename:zrange_consumer_type	file:
typeCommand	src/db.c	/^void typeCommand(client *c) {$/;"	f	typeref:typename:void
typeData	src/config.c	/^typedef union typeData {$/;"	u	file:
typeData	src/config.c	/^} typeData;$/;"	t	typeref:union:typeData	file:
typeInterface	src/config.c	/^typedef struct typeInterface {$/;"	s	file:
typeInterface	src/config.c	/^} typeInterface;$/;"	t	typeref:struct:typeInterface	file:
type_free	src/redis-cli.c	/^void type_free(void* priv_data, void* val) {$/;"	f	typeref:typename:void
type_hash	src/redis-cli.c	/^typeinfo type_hash = { "hash", "HLEN", "fields" };$/;"	v	typeref:typename:typeinfo
type_list	src/redis-cli.c	/^typeinfo type_list = { "list", "LLEN", "items" };$/;"	v	typeref:typename:typeinfo
type_other	src/redis-cli.c	/^typeinfo type_other = { "other", NULL, "?" };$/;"	v	typeref:typename:typeinfo
type_set	src/redis-cli.c	/^typeinfo type_set = { "set", "SCARD", "members" };$/;"	v	typeref:typename:typeinfo
type_stream	src/redis-cli.c	/^typeinfo type_stream = { "stream", "XLEN", "entries" };$/;"	v	typeref:typename:typeinfo
type_string	src/redis-cli.c	/^typeinfo type_string = { "string", "STRLEN", "bytes" };$/;"	v	typeref:typename:typeinfo
type_zset	src/redis-cli.c	/^typeinfo type_zset = { "zset", "ZCARD", "members" };$/;"	v	typeref:typename:typeinfo
typeinfo	src/redis-cli.c	/^} typeinfo;$/;"	t	typeref:struct:__anon6af24fe90208	file:
typeinfoDictType	src/redis-cli.c	/^static dictType typeinfoDictType = {$/;"	v	typeref:typename:dictType	file:
typeinfo_add	src/redis-cli.c	/^static typeinfo* typeinfo_add(dict *types, char* name, typeinfo* type_template) {$/;"	f	typeref:typename:typeinfo *	file:
typemethods	src/module.c	/^    struct typemethods {$/;"	s	function:RM_CreateDataType	file:
types	src/module.c	/^    list *types;    \/* Module data types. *\/$/;"	m	struct:RedisModule	typeref:typename:list *	file:
types_json	deps/jemalloc/test/unit/emitter.c	/^static const char *types_json =$/;"	v	typeref:typename:const char *	file:
types_table	deps/jemalloc/test/unit/emitter.c	/^static const char *types_table =$/;"	v	typeref:typename:const char *	file:
u	deps/jemalloc/test/src/SFMT.c	/^    uint32_t u[4];$/;"	m	struct:W128_T	typeref:typename:uint32_t[4]	file:
u	deps/jemalloc/test/src/SFMT.c	/^    uint32_t u[4];$/;"	m	union:W128_T	typeref:typename:uint32_t[4]	file:
u	deps/lua/src/lobject.h	/^  } u;$/;"	m	struct:UpVal	typeref:union:UpVal::__anona52fc941040a
u	deps/lua/src/lparser.h	/^  } u;$/;"	m	struct:expdesc	typeref:union:expdesc::__anon581f0db7020a
u	deps/lua/src/lstate.h	/^  union Udata u;$/;"	m	union:GCObject	typeref:union:Udata
u	src/bitops.c	/^    union {uint64_t u; int64_t i;} conv;$/;"	m	union:getSignedBitfield::__anonc6b2191e010a	typeref:typename:uint64_t	file:
u	src/module.c	/^    union {uint64_t u; int64_t i;} conv;$/;"	m	union:RM_LoadSigned::__anon967b4733090a	typeref:typename:uint64_t	file:
u	src/module.c	/^    union {uint64_t u; int64_t i;} conv;$/;"	m	union:RM_SaveSigned::__anon967b4733080a	typeref:typename:uint64_t	file:
u	src/module.c	/^    } u;$/;"	m	struct:RedisModuleKey	typeref:union:RedisModuleKey::__anon967b4733010a	file:
u	src/server.h	/^    } u;$/;"	m	struct:_redisSortObject	typeref:union:_redisSortObject::__anon3ef696e9080a
u16	src/lzfP.h	/^    typedef unsigned int u16;$/;"	t	typeref:typename:unsigned int
u16	src/lzfP.h	/^    typedef unsigned short u16;$/;"	t	typeref:typename:unsigned short
u2s	deps/jemalloc/src/malloc_io.c	/^u2s(uintmax_t x, unsigned base, bool uppercase, char *s, size_t *slen_p) {$/;"	f	typeref:typename:char *	file:
u64	src/dict.h	/^        uint64_t u64;$/;"	m	union:dictEntry::__anon56260716010a	typeref:typename:uint64_t
u8	src/lzfP.h	/^typedef unsigned char u8;$/;"	t	typeref:typename:unsigned char
u_int	src/solarisfixes.h	/^#define u_int /;"	d
u_int32_t	src/solarisfixes.h	/^#define u_int32_t /;"	d
uchar	deps/lua/src/lstrlib.c	/^#define uchar(/;"	d	file:
ud	deps/lua/src/lapi.c	/^  void *ud;$/;"	m	struct:CCallS	typeref:typename:void *	file:
ud	deps/lua/src/lstate.h	/^  void *ud;         \/* auxiliary data to `frealloc' *\/$/;"	m	struct:global_State	typeref:typename:void *
ui	src/config.c	/^        unsigned int *ui;$/;"	m	union:numericConfigData::__anon722b8083020a	typeref:typename:unsigned int *	file:
uint16_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef unsigned __int16  uint16_t;$/;"	t	typeref:typename:unsigned __int16
uint16_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef unsigned short    uint16_t;$/;"	t	typeref:typename:unsigned short
uint32_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef unsigned __int32  uint32_t;$/;"	t	typeref:typename:unsigned __int32
uint32_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef unsigned int      uint32_t;$/;"	t	typeref:typename:unsigned int
uint32_t	deps/lua/src/lua_bit.c	/^typedef unsigned __int32 uint32_t;$/;"	t	typeref:typename:unsigned __int32	file:
uint32_val	deps/jemalloc/include/jemalloc/internal/emitter.h	/^		uint32_t uint32_val;$/;"	m	union:emitter_col_s::__anona0eb805b010a	typeref:typename:uint32_t
uint64_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef unsigned __int64     uint64_t;$/;"	t	typeref:typename:unsigned __int64
uint64_t	deps/lua/src/lua_bit.c	/^typedef unsigned __int64 uint64_t;$/;"	t	typeref:typename:unsigned __int64	file:
uint64_val	deps/jemalloc/include/jemalloc/internal/emitter.h	/^		uint64_t uint64_val;$/;"	m	union:emitter_col_s::__anona0eb805b010a	typeref:typename:uint64_t
uint8_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef unsigned __int8   uint8_t;$/;"	t	typeref:typename:unsigned __int8
uint8_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef unsigned char     uint8_t;$/;"	t	typeref:typename:unsigned char
uintCompare	src/ziplist.c	/^int uintCompare(const void *a, const void *b) {$/;"	f	typeref:typename:int
uint_fast16_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint16_t  uint_fast16_t;$/;"	t	typeref:typename:uint16_t
uint_fast32_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint32_t  uint_fast32_t;$/;"	t	typeref:typename:uint32_t
uint_fast64_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint64_t  uint_fast64_t;$/;"	t	typeref:typename:uint64_t
uint_fast8_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint8_t   uint_fast8_t;$/;"	t	typeref:typename:uint8_t
uint_least16_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint16_t  uint_least16_t;$/;"	t	typeref:typename:uint16_t
uint_least32_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint32_t  uint_least32_t;$/;"	t	typeref:typename:uint32_t
uint_least64_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint64_t  uint_least64_t;$/;"	t	typeref:typename:uint64_t
uint_least8_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint8_t   uint_least8_t;$/;"	t	typeref:typename:uint8_t
uintmax_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^typedef uint64_t  uintmax_t;$/;"	t	typeref:typename:uint64_t
uintptr_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef _W64 unsigned int uintptr_t;$/;"	t	typeref:typename:_W64 unsigned int
uintptr_t	deps/jemalloc/include/msvc_compat/C99/stdint.h	/^   typedef unsigned __int64  uintptr_t;$/;"	t	typeref:typename:unsigned __int64
ul	src/config.c	/^        unsigned long *ul;$/;"	m	union:numericConfigData::__anon722b8083020a	typeref:typename:unsigned long *	file:
ull	src/config.c	/^        unsigned long long *ull;$/;"	m	union:numericConfigData::__anon722b8083020a	typeref:typename:unsigned long long *	file:
umask	src/server.h	/^    mode_t umask;               \/* The umask value of the process on startup *\/$/;"	m	struct:redisServer	typeref:typename:mode_t
uname_M	src/Makefile	/^uname_M := $(shell sh -c 'uname -m 2>\/dev\/null || echo not')$/;"	m
uname_S	deps/Makefile	/^uname_S:= $(shell sh -c 'uname -s 2>\/dev\/null || echo not')$/;"	m
uname_S	deps/hiredis/Makefile	/^uname_S := $(shell sh -c 'uname -s 2>\/dev\/null || echo not')$/;"	m
uname_S	src/Makefile	/^uname_S := $(shell sh -c 'uname -s 2>\/dev\/null || echo not')$/;"	m
uname_S	src/modules/Makefile	/^uname_S := $(shell sh -c 'uname -s 2>\/dev\/null || echo not')$/;"	m
uname_S	tests/modules/Makefile	/^uname_S := $(shell sh -c 'uname -s 2>\/dev\/null || echo not')$/;"	m
unblockClient	src/blocked.c	/^void unblockClient(client *c) {$/;"	f	typeref:typename:void
unblockClientFromModule	src/module.c	/^void unblockClientFromModule(client *c) {$/;"	f	typeref:typename:void
unblockClientWaitingData	src/blocked.c	/^void unblockClientWaitingData(client *c) {$/;"	f	typeref:typename:void
unblockClientWaitingReplicas	src/replication.c	/^void unblockClientWaitingReplicas(client *c) {$/;"	f	typeref:typename:void
unblocked	src/module.c	/^    int unblocked;          \/* Already on the moduleUnblocked list. *\/$/;"	m	struct:RedisModuleBlockedClient	typeref:typename:int	file:
unblocked_clients	src/server.h	/^    list *unblocked_clients; \/* list of clients to unblock before next loop *\/$/;"	m	struct:redisServer	typeref:typename:list *
unbound_search	deps/lua/src/ltable.c	/^static int unbound_search (Table *t, unsigned int j) {$/;"	f	typeref:typename:int	file:
undoConnectWithMaster	src/replication.c	/^void undoConnectWithMaster(void) {$/;"	f	typeref:typename:void
uninstall	src/Makefile	/^uninstall:$/;"	t
unit_magnitude	deps/hdr_histogram/hdr_histogram.h	/^    int32_t unit_magnitude;$/;"	m	struct:hdr_histogram	typeref:typename:int32_t
unit_magnitude	deps/hdr_histogram/hdr_histogram.h	/^    int64_t unit_magnitude;$/;"	m	struct:hdr_histogram_bucket_config	typeref:typename:int64_t
unix_sock	deps/hiredis/hiredis.h	/^    } unix_sock;$/;"	m	struct:redisContext	typeref:struct:redisContext::__anon7daed6b50508
unix_sock	deps/hiredis/test.c	/^    } unix_sock;$/;"	m	struct:config	typeref:struct:config::__anonab9ca1680208	file:
unix_socket	deps/hiredis/hiredis.h	/^        const char *unix_socket;$/;"	m	union:__anon7daed6b50108::__anon7daed6b5020a	typeref:typename:const char *
unixsocket	src/server.h	/^    char *unixsocket;           \/* UNIX socket path *\/$/;"	m	struct:redisServer	typeref:typename:char *
unixsocketperm	src/server.h	/^    mode_t unixsocketperm;      \/* UNIX socket permission *\/$/;"	m	struct:redisServer	typeref:typename:mode_t
unixtime	src/server.h	/^    redisAtomic time_t unixtime; \/* Unix time sampled every cron cycle. *\/$/;"	m	struct:redisServer	typeref:typename:redisAtomic time_t
unlikely	deps/jemalloc/include/jemalloc/internal/util.h	/^#  define unlikely(/;"	d
unlikely	src/config.h	/^#define unlikely(/;"	d
unlink	src/module.c	/^            moduleTypeUnlinkFunc unlink;$/;"	m	struct:RM_CreateDataType::typemethods::__anon967b47330708	typeref:typename:moduleTypeUnlinkFunc	file:
unlink	src/redismodule.h	/^    RedisModuleTypeUnlinkFunc unlink;$/;"	m	struct:RedisModuleTypeMethods	typeref:typename:RedisModuleTypeUnlinkFunc
unlink	src/server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *unlink,$/;"	m	struct:sharedObjectsStruct
unlink	src/server.h	/^    moduleTypeUnlinkFunc unlink;$/;"	m	struct:RedisModuleType	typeref:typename:moduleTypeUnlinkFunc
unlinkClient	src/networking.c	/^void unlinkClient(client *c) {$/;"	f	typeref:typename:void
unlinkCommand	src/db.c	/^void unlinkCommand(client *c) {$/;"	f	typeref:typename:void
unlinkupval	deps/lua/src/lfunc.c	/^static void unlinkupval (UpVal *uv) {$/;"	f	typeref:typename:void	file:
unmakemask	deps/lua/src/ldblib.c	/^static char *unmakemask (int mask, char *smask) {$/;"	f	typeref:typename:char *	file:
unpauseClients	src/networking.c	/^void unpauseClients(void) {$/;"	f	typeref:typename:void
unprotectClient	src/networking.c	/^void unprotectClient(client *c) {$/;"	f	typeref:typename:void
unquoteCString	src/redis-cli.c	/^static sds unquoteCString(char *str) {$/;"	f	typeref:typename:sds	file:
unreachable	deps/jemalloc/include/jemalloc/internal/util.h	/^#define unreachable(/;"	d
unreachable_masters	src/redis-cli.c	/^    int unreachable_masters;    \/* Masters we are not able to reach. *\/$/;"	m	struct:clusterManager	typeref:typename:int	file:
unregister_command_name	tests/modules/commandfilter.c	/^static const char unregister_command_name[] = "commandfilter.unregister";$/;"	v	typeref:typename:const char[]	file:
unsafe_info_chars	src/server.c	/^static char unsafe_info_chars[] = "#:\\n\\r";$/;"	v	typeref:typename:char[]	file:
unsafe_info_chars_substs	src/server.c	/^static char unsafe_info_chars_substs[] = "____";   \/* Must be same length as above *\/$/;"	v	typeref:typename:char[]	file:
unsetBlockingTimeout	src/tls.c	/^static void unsetBlockingTimeout(tls_connection *conn) {$/;"	f	typeref:typename:void	file:
unsigned_val	deps/jemalloc/include/jemalloc/internal/emitter.h	/^		unsigned unsigned_val;$/;"	m	union:emitter_col_s::__anona0eb805b010a	typeref:typename:unsigned
unsubscribeCommand	src/pubsub.c	/^void unsubscribeCommand(client *c) {$/;"	f	typeref:typename:void
unsubscribebulk	src/server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *unlink,$/;"	m	struct:sharedObjectsStruct
unsupported_term	deps/linenoise/linenoise.c	/^static char *unsupported_term[] = {"dumb","cons25","emacs",NULL};$/;"	v	typeref:typename:char * []	file:
unwatchAllKeys	src/multi.c	/^void unwatchAllKeys(client *c) {$/;"	f	typeref:typename:void
unwatchCommand	src/multi.c	/^void unwatchCommand(client *c) {$/;"	f	typeref:typename:void
update	src/cluster.h	/^    } update;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon2cc7db540908
updateCachedTime	src/server.c	/^void updateCachedTime(int update_daylight_info) {$/;"	f	typeref:typename:void
updateChildInfo	src/childinfo.c	/^void updateChildInfo(childInfoType information_type, size_t cow, monotime cow_updated, size_t ke/;"	f	typeref:typename:void
updateClusterSlotsConfiguration	src/redis-benchmark.c	/^static void updateClusterSlotsConfiguration() {$/;"	f	typeref:typename:void	file:
updateDictResizePolicy	src/server.c	/^void updateDictResizePolicy(void) {$/;"	f	typeref:typename:void
updateFailoverStatus	src/replication.c	/^void updateFailoverStatus(void) {$/;"	f	typeref:typename:void
updateLFU	src/db.c	/^void updateLFU(robj *val) {$/;"	f	typeref:typename:void
updateOOMScoreAdjValues	src/config.c	/^static int updateOOMScoreAdjValues(sds *args, const char **err, int apply) {$/;"	f	typeref:typename:int	file:
updateSSLEvent	src/tls.c	/^void updateSSLEvent(tls_connection *conn) {$/;"	f	typeref:typename:void
updateSlavesWaitingBgsave	src/replication.c	/^void updateSlavesWaitingBgsave(int bgsaveerr, int type) {$/;"	f	typeref:typename:void
updateStatsOnUnblock	src/blocked.c	/^void updateStatsOnUnblock(client *c, long blocked_us, long reply_us){$/;"	f	typeref:typename:void
updateTLSError	src/tls.c	/^static void updateTLSError(tls_connection *conn) {$/;"	f	typeref:typename:void	file:
update_cksum	src/rio.h	/^    void (*update_cksum)(struct _rio *, const void *buf, size_t len);$/;"	m	struct:_rio	typeref:typename:void (*)(struct _rio *,const void * buf,size_t len)
update_fn	src/config.c	/^    int (*update_fn)(char* val, char* prev, const char **err); \/* Optional function to apply ne/;"	m	struct:stringConfigData	typeref:typename:int (*)(char * val,char * prev,const char ** err)	file:
update_fn	src/config.c	/^    int (*update_fn)(int val, int prev, const char **err); \/* Optional function to apply new va/;"	m	struct:boolConfigData	typeref:typename:int (*)(int val,int prev,const char ** err)	file:
update_fn	src/config.c	/^    int (*update_fn)(int val, int prev, const char **err); \/* Optional function to apply new va/;"	m	struct:enumConfigData	typeref:typename:int (*)(int val,int prev,const char ** err)	file:
update_fn	src/config.c	/^    int (*update_fn)(long long val, long long prev, const char **err); \/* Optional function to /;"	m	struct:numericConfigData	typeref:typename:int (*)(long long val,long long prev,const char ** err)	file:
update_fn	src/config.c	/^    int (*update_fn)(sds val, sds prev, const char **err); \/* Optional function to apply new va/;"	m	struct:sdsConfigData	typeref:typename:int (*)(sds val,sds prev,const char ** err)	file:
update_iterated_values	deps/hdr_histogram/hdr_histogram.c	/^static void update_iterated_values(struct hdr_iter* iter, int64_t new_value_iterated_to)$/;"	f	typeref:typename:void	file:
update_min_max	deps/hdr_histogram/hdr_histogram.c	/^static void update_min_max(struct hdr_histogram* h, int64_t value)$/;"	f	typeref:typename:void	file:
update_min_max_atomic	deps/hdr_histogram/hdr_histogram.c	/^static void update_min_max_atomic(struct hdr_histogram* h, int64_t value)$/;"	f	typeref:typename:void	file:
update_zmalloc_stat_alloc	src/zmalloc.c	/^#define update_zmalloc_stat_alloc(/;"	d	file:
update_zmalloc_stat_free	src/zmalloc.c	/^#define update_zmalloc_stat_free(/;"	d	file:
updated_slots	src/redis-benchmark.c	/^    int *updated_slots;         \/* Used by updateClusterSlotsConfiguration *\/$/;"	m	struct:clusterNode	typeref:typename:int *	file:
updated_slots_count	src/redis-benchmark.c	/^    int updated_slots_count;    \/* Used by updateClusterSlotsConfiguration *\/$/;"	m	struct:clusterNode	typeref:typename:int	file:
upper_bound	src/config.c	/^    long long upper_bound; \/* The upper bound of this numeric value *\/$/;"	m	struct:numericConfigData	typeref:typename:long long	file:
uptime	deps/jemalloc/include/jemalloc/internal/arena_stats.h	/^	nstime_t		uptime;$/;"	m	struct:arena_stats_s	typeref:typename:nstime_t
upval	deps/lua/src/lparser.c	/^  lu_byte upval;  \/* true if some variable in the block is an upvalue *\/$/;"	m	struct:BlockCnt	typeref:typename:lu_byte	file:
upvaldesc	deps/lua/src/lparser.h	/^typedef struct upvaldesc {$/;"	s
upvaldesc	deps/lua/src/lparser.h	/^} upvaldesc;$/;"	t	typeref:struct:upvaldesc
upvals	deps/lua/src/lobject.h	/^  UpVal *upvals[1];$/;"	m	struct:LClosure	typeref:typename:UpVal * [1]
upvalue	deps/lua/src/lobject.h	/^  TValue upvalue[1];$/;"	m	struct:CClosure	typeref:typename:TValue[1]
upvalues	deps/lua/src/lobject.h	/^  TString **upvalues;  \/* upvalue names *\/$/;"	m	struct:Proto	typeref:typename:TString **
upvalues	deps/lua/src/lparser.h	/^  upvaldesc upvalues[LUAI_MAXUPVALUES];  \/* upvalues *\/$/;"	m	struct:FuncState	typeref:typename:upvaldesc[]
usUntilEarliestTimer	src/ae.c	/^static int64_t usUntilEarliestTimer(aeEventLoop *eventLoop) {$/;"	f	typeref:typename:int64_t	file:
usage	deps/lua/src/luac.c	/^static void usage(const char* message)$/;"	f	typeref:typename:void	file:
usage	src/redis-cli.c	/^static void usage(void) {$/;"	f	typeref:typename:void	file:
usage	src/server.c	/^void usage(void) {$/;"	f	typeref:typename:void
useDisklessLoad	src/replication.c	/^static int useDisklessLoad() {$/;"	f	typeref:typename:int	file:
use_exit_on_panic	src/server.h	/^    int use_exit_on_panic;          \/* Use exit() on panic and assert rather than$/;"	m	struct:redisServer	typeref:typename:int
usec	deps/hiredis/test.c	/^static long long usec(void) {$/;"	f	typeref:typename:long long	file:
usec	src/intset.c	/^static long long usec(void) {$/;"	f	typeref:typename:long long	file:
usec	src/ziplist.c	/^static long long usec(void) {$/;"	f	typeref:typename:long long	file:
used	deps/hiredis/dict.h	/^    unsigned long used;$/;"	m	struct:dict	typeref:typename:unsigned long
used	src/aof.c	/^    unsigned long used, free;$/;"	m	struct:aofrwblock	typeref:typename:unsigned long	file:
used	src/dict.h	/^    unsigned long used;$/;"	m	struct:dictht	typeref:typename:unsigned long
used	src/geo.h	/^    size_t used;$/;"	m	struct:geoArray	typeref:typename:size_t
used	src/module.c	/^    uint32_t used;$/;"	m	struct:RedisModulePoolAllocBlock	typeref:typename:uint32_t	file:
used	src/server.h	/^    size_t size, used;$/;"	m	struct:clientReplyBlock	typeref:typename:size_t
used_memory	src/zmalloc.c	/^static redisAtomic size_t used_memory = 0;$/;"	v	typeref:typename:redisAtomic size_t	file:
usedby	src/module.c	/^    list *usedby;   \/* List of modules using APIs from this one. *\/$/;"	m	struct:RedisModule	typeref:typename:list *	file:
user	src/module.c	/^    user *user; \/* Reference to the real redis user *\/$/;"	m	struct:RedisModuleUser	typeref:typename:user *	file:
user	src/redis-benchmark.c	/^    const char *user;$/;"	m	struct:config	typeref:typename:const char *	file:
user	src/redis-cli.c	/^    char *user;$/;"	m	struct:config	typeref:typename:char *	file:
user	src/server.h	/^    user *user;             \/* User associated with this connection. If the$/;"	m	struct:client	typeref:typename:user *
user	src/server.h	/^} user;$/;"	t	typeref:struct:__anon3ef696e90408
user_data	src/module.c	/^    void* user_data;$/;"	m	struct:__anon967b47330a08	typeref:typename:void *	file:
user_data	src/module.c	/^    void* user_data;$/;"	m	struct:__anon967b47330b08	typeref:typename:void *	file:
userdata	src/t_zset.c	/^    void                                *userdata;$/;"	m	struct:zrange_result_handler	typeref:typename:void *	file:
username	src/acl.c	/^    sds username;       \/* User the client is authenticated with. *\/$/;"	m	struct:ACLLogEntry	typeref:typename:sds	file:
using	src/module.c	/^    list *using;    \/* List of modules we use some APIs of. *\/$/;"	m	struct:RedisModule	typeref:typename:list *	file:
ustime	src/quicklist.c	/^static long long ustime(void) {$/;"	f	typeref:typename:long long	file:
ustime	src/redis-benchmark.c	/^static long long ustime(void) {$/;"	f	typeref:typename:long long	file:
ustime	src/redis-cli.c	/^static long long ustime(void) {$/;"	f	typeref:typename:long long	file:
ustime	src/server.c	/^long long ustime(void) {$/;"	f	typeref:typename:long long
ustime	src/server.h	/^    ustime_t ustime;            \/* 'unixtime' in microseconds. *\/$/;"	m	struct:redisServer	typeref:typename:ustime_t
ustime_t	src/server.h	/^typedef long long ustime_t; \/* microsecond time type. *\/$/;"	t	typeref:typename:long long
utilTest	src/util.c	/^int utilTest(int argc, char **argv, int accurate) {$/;"	f	typeref:typename:int
uv	deps/lua/src/lobject.h	/^  } uv;$/;"	m	union:Udata	typeref:struct:Udata::__anona52fc9410308
uv	deps/lua/src/lstate.h	/^  struct UpVal uv;$/;"	m	union:GCObject	typeref:struct:UpVal
uvalue	deps/lua/src/lobject.h	/^#define uvalue(/;"	d
uvhead	deps/lua/src/lstate.h	/^  UpVal uvhead;  \/* head of double-linked list of all open upvalues *\/$/;"	m	struct:global_State	typeref:typename:UpVal
v	deps/jemalloc/src/ckh.c	/^		const void	*v;$/;"	m	union:ckh_pointer_hash::__anona5c96ad4010a	typeref:typename:const void *	file:
v	deps/jemalloc/src/prof.c	/^			void		*v;$/;"	m	union:prof_tdata_merge_iter::__anon7dcd3f75040a	typeref:typename:void *	file:
v	deps/jemalloc/src/prof.c	/^		void		*v;$/;"	m	union:prof_dump_prep::__anon7dcd3f75050a	typeref:typename:void *	file:
v	deps/jemalloc/src/prof.c	/^		void		*v;$/;"	m	union:prof_lookup::__anon7dcd3f75030a	typeref:typename:void *	file:
v	deps/jemalloc/src/prof.c	/^		void		*v;$/;"	m	union:prof_lookup_global::__anon7dcd3f75010a	typeref:typename:void *	file:
v	deps/jemalloc/src/prof.c	/^		void		*v;$/;"	m	union:prof_lookup_global::__anon7dcd3f75020a	typeref:typename:void *	file:
v	deps/lua/src/lobject.h	/^  TValue *v;  \/* points to stack or to its own value *\/$/;"	m	struct:UpVal	typeref:typename:TValue *
v	deps/lua/src/lparser.c	/^  expdesc v;  \/* last list item read *\/$/;"	m	struct:ConsControl	typeref:typename:expdesc	file:
v	deps/lua/src/lparser.c	/^  expdesc v;  \/* variable (global, local, upvalue, or indexed) *\/$/;"	m	struct:LHS_assign	typeref:typename:expdesc	file:
v	src/dict.h	/^    } v;$/;"	m	struct:dictEntry	typeref:union:dictEntry::__anon56260716010a
v2	src/module.c	/^        } v2;$/;"	m	struct:RM_CreateDataType::typemethods	typeref:struct:RM_CreateDataType::typemethods::__anon967b47330608	file:
v3	src/module.c	/^        } v3;$/;"	m	struct:RM_CreateDataType::typemethods	typeref:struct:RM_CreateDataType::typemethods::__anon967b47330708	file:
va_copy	deps/hiredis/win32.h	/^#define va_copy(/;"	d
val	deps/hiredis/dict.h	/^    void *val;$/;"	m	struct:dictEntry	typeref:typename:void *
val	deps/jemalloc/include/jemalloc/internal/tsd_generic.h	/^	tsd_t val;$/;"	m	struct:__anon70b3c1880108	typeref:typename:tsd_t
val	deps/jemalloc/include/jemalloc/internal/tsd_win.h	/^	tsd_t val;$/;"	m	struct:__anon4c1a01b90108	typeref:typename:tsd_t
val	src/config.c	/^    const int val;$/;"	m	struct:configEnum	typeref:typename:const int	file:
val	src/dict.h	/^        void *val;$/;"	m	union:dictEntry::__anon56260716010a	typeref:typename:void *
val	src/module.c	/^    } val;$/;"	m	struct:RedisModuleCallReply	typeref:union:RedisModuleCallReply::__anon967b4733040a	file:
valDestructor	deps/hiredis/dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType	typeref:typename:void (*)(void * privdata,void * obj)
valDestructor	src/dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType	typeref:typename:void (*)(void * privdata,void * obj)
valDup	deps/hiredis/dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType	typeref:typename:void * (*)(void * privdata,const void * obj)
valDup	src/dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType	typeref:typename:void * (*)(void * privdata,const void * obj)
valgrind	src/Makefile	/^valgrind:$/;"	t
valid_number_character	deps/lua/src/fpconv.c	/^static inline int valid_number_character(char ch)$/;"	f	typeref:typename:int	file:
validateClusterManagerCommand	src/redis-cli.c	/^static clusterManagerCommandProc *validateClusterManagerCommand(void) {$/;"	f	typeref:typename:clusterManagerCommandProc *	file:
validateProcTitleTemplate	src/server.c	/^int validateProcTitleTemplate(const char *template) {$/;"	f	typeref:typename:int
validate_fill	deps/jemalloc/test/integration/rallocx.c	/^validate_fill(const void *p, uint8_t c, size_t offset, size_t len) {$/;"	f	typeref:typename:TEST_END bool	file:
validate_fill	deps/jemalloc/test/integration/xallocx.c	/^validate_fill(const void *p, uint8_t c, size_t offset, size_t len) {$/;"	f	typeref:typename:bool	file:
valiswhite	deps/lua/src/lgc.h	/^#define valiswhite(/;"	d
valloc	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define valloc /;"	d
valloc	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define valloc /;"	d
valloc	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define valloc /;"	d
valloc	deps/jemalloc/src/zone.c	/^	void *(*valloc)(struct _malloc_zone_t *, size_t);$/;"	m	struct:_malloc_zone_t	typeref:typename:void * (*)(struct _malloc_zone_t *,size_t)	file:
value	deps/hdr_histogram/hdr_histogram.h	/^    int64_t value;$/;"	m	struct:hdr_iter	typeref:typename:int64_t
value	deps/lua/src/lobject.h	/^    TValue value;  \/* the value (when closed) *\/$/;"	m	union:UpVal::__anona52fc941040a	typeref:typename:TValue
value	deps/lua/src/lua_cjson.c	/^    } value;$/;"	m	struct:__anona3a73c770408	typeref:union:__anona3a73c770408::__anona3a73c77050a	file:
value	src/adlist.h	/^    void *value;$/;"	m	struct:listNode	typeref:typename:void *
value	src/module.c	/^    robj *value;    \/* Value object, or NULL if the key was not found. *\/$/;"	m	struct:RedisModuleKey	typeref:typename:robj *	file:
value	src/modules/hellotype.c	/^    int64_t value;$/;"	m	struct:HelloTypeNode	typeref:typename:int64_t	file:
value	src/quicklist.h	/^    unsigned char *value;$/;"	m	struct:quicklistEntry	typeref:typename:unsigned char *
value	src/server.h	/^    void *value;$/;"	m	struct:moduleValue	typeref:typename:void *
value	src/sparkline.h	/^    double value;$/;"	m	struct:sample	typeref:typename:double
value	tests/modules/test_lazyfree.c	/^    int64_t value;$/;"	m	struct:LazyFreeLinkNode	typeref:typename:int64_t	file:
value_buf	src/stream.h	/^    unsigned char value_buf[LP_INTBUF_SIZE];$/;"	m	struct:streamIterator	typeref:typename:unsigned char[]
value_from_index	deps/hdr_histogram/hdr_histogram.c	/^static int64_t value_from_index(int32_t bucket_index, int32_t sub_bucket_index, int32_t unit_mag/;"	f	typeref:typename:int64_t	file:
value_iterated_from	deps/hdr_histogram/hdr_histogram.h	/^    int64_t value_iterated_from;$/;"	m	struct:hdr_iter	typeref:typename:int64_t
value_iterated_to	deps/hdr_histogram/hdr_histogram.h	/^    int64_t value_iterated_to;$/;"	m	struct:hdr_iter	typeref:typename:int64_t
value_or_delete	tests/modules/hash.c	/^static RedisModuleString *value_or_delete(RedisModuleString *s) {$/;"	f	typeref:typename:RedisModuleString *	file:
value_units_per_bucket	deps/hdr_histogram/hdr_histogram.h	/^    int64_t value_units_per_bucket;$/;"	m	struct:hdr_iter_linear	typeref:typename:int64_t
values	tests/modules/defragtest.c	/^    void **values;$/;"	m	struct:FragObject	typeref:typename:void **	file:
varname	deps/lua/src/lobject.h	/^  TString *varname;$/;"	m	struct:LocVar	typeref:typename:TString *
vec	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	void			*vec[1];$/;"	m	struct:prof_gctx_s	typeref:typename:void * [1]
vec	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	void			*vec[PROF_BT_MAX];$/;"	m	struct:prof_tdata_s	typeref:typename:void * []
vec	deps/jemalloc/include/jemalloc/internal/prof_structs.h	/^	void		**vec;$/;"	m	struct:prof_bt_s	typeref:typename:void **
vec_recursion	deps/jemalloc/test/include/test/SFMT-alti.h	/^vector unsigned int vec_recursion(vector unsigned int a,$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE vector unsigned int
vecswap	src/pqsort.c	/^#define vecswap(/;"	d	file:
vectors_sip64	src/siphash.c	/^const uint8_t vectors_sip64[64][8] = {$/;"	v	typeref:typename:const uint8_t[64][8]
ver	src/cluster.h	/^    uint16_t ver;       \/* Protocol version, currently set to 1. *\/$/;"	m	struct:__anon2cc7db540b08	typeref:typename:uint16_t
ver	src/module.c	/^    int ver;        \/* Module version. We use just progressive integers. *\/$/;"	m	struct:RedisModule	typeref:typename:int	file:
ver	src/server.h	/^    int ver;            \/* Module serialization version: 1 (old),$/;"	m	struct:RedisModuleIO	typeref:typename:int
verbose	deps/jemalloc/test/unit/stats_print.c	/^	bool verbose;$/;"	m	struct:parser_s	typeref:typename:bool	file:
verbose	src/redis-cli.c	/^    int verbose;$/;"	m	struct:config	typeref:typename:int	file:
verbosity	src/server.h	/^    int verbosity;                  \/* Loglevel in redis.conf *\/$/;"	m	struct:redisServer	typeref:typename:int
verify	src/ziplist.c	/^static void verify(unsigned char *zl, zlentry *e) {$/;"	f	typeref:typename:void	file:
verifyClusterConfigWithData	src/cluster.c	/^int verifyClusterConfigWithData(void) {$/;"	f	typeref:typename:int
verifyDumpPayload	src/cluster.c	/^int verifyDumpPayload(unsigned char *p, size_t len) {$/;"	f	typeref:typename:int
version	deps/jemalloc/src/zone.c	/^	unsigned version;$/;"	m	struct:_malloc_zone_t	typeref:typename:unsigned	file:
version	src/module.c	/^        uint64_t version;$/;"	m	struct:RM_CreateDataType::typemethods	typeref:typename:uint64_t	file:
version	src/redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleCronLoopInfo	typeref:typename:uint64_t
version	src/redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleFlushInfo	typeref:typename:uint64_t
version	src/redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleLoadingProgressInfo	typeref:typename:uint64_t
version	src/redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleModuleChange	typeref:typename:uint64_t
version	src/redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleReplicationInfo	typeref:typename:uint64_t
version	src/redismodule.h	/^    uint64_t version;       \/* Not used since this structure is never passed$/;"	m	struct:RedisModuleSwapDbInfo	typeref:typename:uint64_t
version	src/redismodule.h	/^    uint64_t version;       \/* Version of this structure for ABI compat. *\/$/;"	m	struct:RedisModuleClientInfo	typeref:typename:uint64_t
version	src/redismodule.h	/^    uint64_t version;$/;"	m	struct:RedisModuleTypeMethods	typeref:typename:uint64_t
version	src/server.c	/^void version(void) {$/;"	f	typeref:typename:void
vm_range_t	deps/jemalloc/src/zone.c	/^typedef void vm_range_recorder_t(task_t, void *, unsigned type, vm_range_t *, unsigned);$/;"	t	typeref:typename:void vm_range_recorder_t (task_t,void *,unsigned type,*,unsigned)	file:
vm_range_t	deps/jemalloc/src/zone.c	/^} vm_range_t;$/;"	t	typeref:struct:__anon94e9fb9a0108	file:
vm_size_t	deps/jemalloc/src/zone.c	/^typedef kern_return_t memory_reader_t(task_t, vm_address_t, vm_size_t, void **);$/;"	t	typeref:typename:kern_return_t memory_reader_t (task_t,vm_address_t,,void **)	file:
voted_time	src/cluster.h	/^    mstime_t voted_time;     \/* Last time we voted for a slave of this master *\/$/;"	m	struct:clusterNode	typeref:typename:mstime_t
votes	src/sentinel.c	/^    unsigned long votes;$/;"	m	struct:sentinelLeader	typeref:typename:unsigned long	file:
vptr	src/server.h	/^    unsigned char *fptr, *vptr;$/;"	m	struct:__anon3ef696e90c08	typeref:typename:unsigned char **
vsalloc	deps/jemalloc/test/unit/arena_reset.c	/^vsalloc(tsdn_t *tsdn, const void *ptr) {$/;"	f	typeref:typename:size_t	file:
vtype	deps/hiredis/hiredis.h	/^    char vtype[4]; \/* Used for REDIS_REPLY_VERB, contains the null$/;"	m	struct:redisReply	typeref:typename:char[4]
w128_t	deps/jemalloc/test/src/SFMT.c	/^typedef struct W128_T w128_t;$/;"	t	typeref:struct:W128_T	file:
w128_t	deps/jemalloc/test/src/SFMT.c	/^typedef union W128_T w128_t;$/;"	t	typeref:union:W128_T	file:
waitCommand	src/replication.c	/^void waitCommand(client *c) {$/;"	f	typeref:typename:void
wait_for_child_exit	deps/jemalloc/test/unit/fork.c	/^wait_for_child_exit(int pid) {$/;"	f	typeref:typename:void	file:
wantRead	deps/hiredis/ssl.c	/^    int wantRead;$/;"	m	struct:redisSSL	typeref:typename:int	file:
watchCommand	src/multi.c	/^void watchCommand(client *c) {$/;"	f	typeref:typename:void
watchForKey	src/multi.c	/^void watchForKey(client *c, robj *key) {$/;"	f	typeref:typename:void
watch_for_junking	deps/jemalloc/test/unit/junk.c	/^static void *watch_for_junking;$/;"	v	typeref:typename:void *	file:
watch_junking	deps/jemalloc/test/unit/junk.c	/^watch_junking(void *p) {$/;"	f	typeref:typename:void	file:
watchdogScheduleSignal	src/debug.c	/^void watchdogScheduleSignal(int period) {$/;"	f	typeref:typename:void
watchdogSignalHandler	src/debug.c	/^void watchdogSignalHandler(int sig, siginfo_t *info, void *secret) {$/;"	f	typeref:typename:void
watchdog_period	src/server.h	/^    int watchdog_period;  \/* Software watchdog period in ms. 0 = off *\/$/;"	m	struct:redisServer	typeref:typename:int
watchedKey	src/multi.c	/^typedef struct watchedKey {$/;"	s	file:
watchedKey	src/multi.c	/^} watchedKey;$/;"	t	typeref:struct:watchedKey	file:
watched_keys	src/server.h	/^    dict *watched_keys;         \/* WATCHED keys for MULTI\/EXEC CAS *\/$/;"	m	struct:redisDb	typeref:typename:dict *
watched_keys	src/server.h	/^    list *watched_keys;     \/* Keys WATCHED for MULTI\/EXEC CAS *\/$/;"	m	struct:client	typeref:typename:list *
weak	deps/lua/src/lstate.h	/^  GCObject *weak;  \/* list of weak tables (to be cleared) *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
weight	src/redis-cli.c	/^    char **weight;$/;"	m	struct:clusterManagerCommand	typeref:typename:char **	file:
weight	src/redis-cli.c	/^    float weight;   \/* Weight used by rebalance *\/$/;"	m	struct:clusterManagerNode	typeref:typename:float	file:
weight	src/t_zset.c	/^    double weight;$/;"	m	struct:__anon6fce03460408	typeref:typename:double	file:
weight_argc	src/redis-cli.c	/^    int weight_argc;$/;"	m	struct:clusterManagerCommand	typeref:typename:int	file:
west	src/geohash.h	/^    GeoHashBits west;$/;"	m	struct:__anona01652f10508	typeref:typename:GeoHashBits
wev	deps/hiredis/adapters/libev.h	/^    ev_io rev, wev;$/;"	m	struct:redisLibevEvents	typeref:typename:ev_io
wfds	src/ae_select.c	/^    fd_set rfds, wfds;$/;"	m	struct:aeApiState	typeref:typename:fd_set	file:
wfileProc	src/ae.h	/^    aeFileProc *wfileProc;$/;"	m	struct:aeFileEvent	typeref:typename:aeFileProc *
what	deps/lua/src/lua.h	/^  const char *what;	\/* (S) `Lua', `C', `main', `tail' *\/$/;"	m	struct:lua_Debug	typeref:typename:const char *
when	src/ae.h	/^    monotime when;$/;"	m	struct:aeTimeEvent	typeref:typename:monotime
wherefrom	src/server.h	/^        int wherefrom;      \/* Where to pop from *\/$/;"	m	struct:blockingState::listPos	typeref:typename:int
whereto	src/server.h	/^        int whereto;        \/* Where to push to *\/$/;"	m	struct:blockingState::listPos	typeref:typename:int
whileBlockedCron	src/server.c	/^void whileBlockedCron() {$/;"	f	typeref:typename:void
whilestat	deps/lua/src/lparser.c	/^static void whilestat (LexState *ls, int line) {$/;"	f	typeref:typename:void	file:
white2gray	deps/lua/src/lgc.c	/^#define white2gray(/;"	d	file:
width	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	int width;$/;"	m	struct:emitter_col_s	typeref:typename:int
width	src/geohash.h	/^            double width;$/;"	m	struct:__anona01652f10608::__anona01652f1070a::__anona01652f10808	typeref:typename:double
width	src/lolwut.h	/^    int width;$/;"	m	struct:lwCanvas	typeref:typename:int
width	src/lolwut6.c	/^    int width;      \/* Pixels width. *\/$/;"	m	struct:skyscraper	typeref:typename:int	file:
win32_bind	deps/hiredis/sockcompat.c	/^int win32_bind(SOCKET sockfd, const struct sockaddr *addr, socklen_t addrlen) {$/;"	f	typeref:typename:int
win32_close	deps/hiredis/sockcompat.c	/^int win32_close(SOCKET fd) {$/;"	f	typeref:typename:int
win32_connect	deps/hiredis/sockcompat.c	/^int win32_connect(SOCKET sockfd, const struct sockaddr *addr, socklen_t addrlen) {$/;"	f	typeref:typename:int
win32_freeaddrinfo	deps/hiredis/sockcompat.c	/^void win32_freeaddrinfo(struct addrinfo *res) {$/;"	f	typeref:typename:void
win32_gai_strerror	deps/hiredis/sockcompat.c	/^const char *win32_gai_strerror(int errcode) {$/;"	f	typeref:typename:const char *
win32_getaddrinfo	deps/hiredis/sockcompat.c	/^int win32_getaddrinfo(const char *node, const char *service, const struct addrinfo *hints, struc/;"	f	typeref:typename:int
win32_getsockopt	deps/hiredis/sockcompat.c	/^int win32_getsockopt(SOCKET sockfd, int level, int optname, void *optval, socklen_t *optlen) {$/;"	f	typeref:typename:int
win32_ioctl	deps/hiredis/sockcompat.c	/^int win32_ioctl(SOCKET fd, unsigned long request, unsigned long *argp) {$/;"	f	typeref:typename:int
win32_poll	deps/hiredis/sockcompat.c	/^int win32_poll(struct pollfd *fds, nfds_t nfds, int timeout) {$/;"	f	typeref:typename:int
win32_recv	deps/hiredis/sockcompat.c	/^ssize_t win32_recv(SOCKET sockfd, void *buf, size_t len, int flags) {$/;"	f	typeref:typename:ssize_t
win32_send	deps/hiredis/sockcompat.c	/^ssize_t win32_send(SOCKET sockfd, const void *buf, size_t len, int flags) {$/;"	f	typeref:typename:ssize_t
win32_setsockopt	deps/hiredis/sockcompat.c	/^int win32_setsockopt(SOCKET sockfd, int level, int optname, const void *optval, socklen_t optlen/;"	f	typeref:typename:int
win32_socket	deps/hiredis/sockcompat.c	/^SOCKET win32_socket(int domain, int type, int protocol) {$/;"	f	typeref:typename:SOCKET
windows	src/lolwut6.c	/^    int windows;    \/* Draw windows if true. *\/$/;"	m	struct:skyscraper	typeref:typename:int	file:
withscores	src/t_zset.c	/^    int                                  withscores;$/;"	m	struct:zrange_result_handler	typeref:typename:int	file:
witness	deps/jemalloc/include/jemalloc/internal/mutex.h	/^		witness_t			witness;$/;"	m	union:malloc_mutex_s::__anon9c853d94020a	typeref:typename:witness_t
witness	deps/jemalloc/include/jemalloc/internal/mutex.h	/^	witness_t			witness;$/;"	m	struct:malloc_mutex_s	typeref:typename:witness_t
witness_assert_depth	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_assert_depth(witness_tsdn_t *witness_tsdn, unsigned depth) {$/;"	f	typeref:typename:void
witness_assert_depth_to_rank	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_assert_depth_to_rank(witness_tsdn_t *witness_tsdn,$/;"	f	typeref:typename:void
witness_assert_lockless	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_assert_lockless(witness_tsdn_t *witness_tsdn) {$/;"	f	typeref:typename:void
witness_assert_not_owner	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_assert_not_owner(witness_tsdn_t *witness_tsdn,$/;"	f	typeref:typename:void
witness_assert_owner	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_assert_owner(witness_tsdn_t *witness_tsdn, const witness_t *witness) {$/;"	f	typeref:typename:void
witness_comp	deps/jemalloc/test/unit/witness.c	/^witness_comp(const witness_t *a, void *oa, const witness_t *b, void *ob) {$/;"	f	typeref:typename:int	file:
witness_comp_reverse	deps/jemalloc/test/unit/witness.c	/^witness_comp_reverse(const witness_t *a, void *oa, const witness_t *b,$/;"	f	typeref:typename:int	file:
witness_depth_error	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define witness_depth_error /;"	d
witness_depth_error	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define witness_depth_error /;"	d
witness_depth_error	deps/jemalloc/src/witness.c	/^witness_depth_error_t *JET_MUTABLE witness_depth_error =$/;"	v	typeref:typename:witness_depth_error_t * JET_MUTABLE
witness_depth_error_impl	deps/jemalloc/src/witness.c	/^witness_depth_error_impl(const witness_list_t *witnesses,$/;"	f	typeref:typename:void	file:
witness_depth_error_intercept	deps/jemalloc/test/unit/witness.c	/^witness_depth_error_intercept(const witness_list_t *witnesses,$/;"	f	typeref:typename:void	file:
witness_depth_error_orig	deps/jemalloc/test/unit/witness.c	/^static witness_depth_error_t *witness_depth_error_orig;$/;"	v	typeref:typename:witness_depth_error_t *	file:
witness_depth_error_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef void (witness_depth_error_t)(const witness_list_t *,$/;"	t	typeref:typename:void ()(const witness_list_t *,witness_rank_t rank_inclusive,unsigned depth)
witness_init	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define witness_init /;"	d
witness_init	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define witness_init /;"	d
witness_init	deps/jemalloc/src/witness.c	/^witness_init(witness_t *witness, const char *name, witness_rank_t rank,$/;"	f	typeref:typename:void
witness_list_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef ql_head(witness_t) witness_list_t;$/;"	t
witness_lock	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_lock(witness_tsdn_t *witness_tsdn, witness_t *witness) {$/;"	f	typeref:typename:void
witness_lock_error	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define witness_lock_error /;"	d
witness_lock_error	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define witness_lock_error /;"	d
witness_lock_error	deps/jemalloc/src/witness.c	/^witness_lock_error_t *JET_MUTABLE witness_lock_error = witness_lock_error_impl;$/;"	v	typeref:typename:witness_lock_error_t * JET_MUTABLE
witness_lock_error_impl	deps/jemalloc/src/witness.c	/^witness_lock_error_impl(const witness_list_t *witnesses,$/;"	f	typeref:typename:void	file:
witness_lock_error_intercept	deps/jemalloc/test/unit/witness.c	/^witness_lock_error_intercept(const witness_list_t *witnesses,$/;"	f	typeref:typename:void	file:
witness_lock_error_orig	deps/jemalloc/test/unit/witness.c	/^static witness_lock_error_t *witness_lock_error_orig;$/;"	v	typeref:typename:witness_lock_error_t *	file:
witness_lock_error_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef void (witness_lock_error_t)(const witness_list_t *, const witness_t *);$/;"	t	typeref:typename:void ()(const witness_list_t *,const witness_t *)
witness_not_owner_error	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define witness_not_owner_error /;"	d
witness_not_owner_error	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define witness_not_owner_error /;"	d
witness_not_owner_error	deps/jemalloc/src/witness.c	/^witness_not_owner_error_t *JET_MUTABLE witness_not_owner_error =$/;"	v	typeref:typename:witness_not_owner_error_t * JET_MUTABLE
witness_not_owner_error_impl	deps/jemalloc/src/witness.c	/^witness_not_owner_error_impl(const witness_t *witness) {$/;"	f	typeref:typename:void	file:
witness_not_owner_error_intercept	deps/jemalloc/test/unit/witness.c	/^witness_not_owner_error_intercept(const witness_t *witness) {$/;"	f	typeref:typename:void	file:
witness_not_owner_error_orig	deps/jemalloc/test/unit/witness.c	/^static witness_not_owner_error_t *witness_not_owner_error_orig;$/;"	v	typeref:typename:witness_not_owner_error_t *	file:
witness_not_owner_error_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef void (witness_not_owner_error_t)(const witness_t *);$/;"	t	typeref:typename:void ()(const witness_t *)
witness_owner	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_owner(witness_tsd_t *witness_tsd, const witness_t *witness) {$/;"	f	typeref:typename:bool
witness_owner_error	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define witness_owner_error /;"	d
witness_owner_error	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define witness_owner_error /;"	d
witness_owner_error	deps/jemalloc/src/witness.c	/^witness_owner_error_t *JET_MUTABLE witness_owner_error =$/;"	v	typeref:typename:witness_owner_error_t * JET_MUTABLE
witness_owner_error_impl	deps/jemalloc/src/witness.c	/^witness_owner_error_impl(const witness_t *witness) {$/;"	f	typeref:typename:void	file:
witness_owner_error_intercept	deps/jemalloc/test/unit/witness.c	/^witness_owner_error_intercept(const witness_t *witness) {$/;"	f	typeref:typename:void	file:
witness_owner_error_orig	deps/jemalloc/test/unit/witness.c	/^static witness_owner_error_t *witness_owner_error_orig;$/;"	v	typeref:typename:witness_owner_error_t *	file:
witness_owner_error_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef void (witness_owner_error_t)(const witness_t *);$/;"	t	typeref:typename:void ()(const witness_t *)
witness_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define witness_postfork_child /;"	d
witness_postfork_child	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define witness_postfork_child /;"	d
witness_postfork_child	deps/jemalloc/src/witness.c	/^witness_postfork_child(witness_tsd_t *witness_tsd) {$/;"	f	typeref:typename:void
witness_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define witness_postfork_parent /;"	d
witness_postfork_parent	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define witness_postfork_parent /;"	d
witness_postfork_parent	deps/jemalloc/src/witness.c	/^witness_postfork_parent(witness_tsd_t *witness_tsd) {$/;"	f	typeref:typename:void
witness_prefork	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define witness_prefork /;"	d
witness_prefork	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define witness_prefork /;"	d
witness_prefork	deps/jemalloc/src/witness.c	/^witness_prefork(witness_tsd_t *witness_tsd) {$/;"	f	typeref:typename:void
witness_rank_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef unsigned witness_rank_t;$/;"	t	typeref:typename:unsigned
witness_s	deps/jemalloc/include/jemalloc/internal/witness.h	/^struct witness_s {$/;"	s
witness_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef int witness_comp_t (const witness_t *, void *, const witness_t *,$/;"	t	typeref:typename:int witness_comp_t (const witness_t *,void *,const *,void *)
witness_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef struct witness_s witness_t;$/;"	t	typeref:struct:witness_s
witness_tsd	deps/jemalloc/include/jemalloc/internal/witness.h	/^	witness_tsd_t witness_tsd;$/;"	m	struct:witness_tsdn_s	typeref:typename:witness_tsd_t
witness_tsd_s	deps/jemalloc/include/jemalloc/internal/witness.h	/^struct witness_tsd_s {$/;"	s
witness_tsd_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef struct witness_tsd_s witness_tsd_t;$/;"	t	typeref:struct:witness_tsd_s
witness_tsd_tsdn	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_tsd_tsdn(witness_tsd_t *witness_tsd) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE witness_tsdn_t *
witness_tsdn_null	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_tsdn_null(witness_tsdn_t *witness_tsdn) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE bool
witness_tsdn_s	deps/jemalloc/include/jemalloc/internal/witness.h	/^struct witness_tsdn_s {$/;"	s
witness_tsdn_t	deps/jemalloc/include/jemalloc/internal/witness.h	/^typedef struct witness_tsdn_s witness_tsdn_t;$/;"	t	typeref:struct:witness_tsdn_s
witness_tsdn_tsd	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_tsdn_tsd(witness_tsdn_t *witness_tsdn) {$/;"	f	typeref:typename:JEMALLOC_ALWAYS_INLINE witness_tsd_t *
witness_unlock	deps/jemalloc/include/jemalloc/internal/witness.h	/^witness_unlock(witness_tsdn_t *witness_tsdn, witness_t *witness) {$/;"	f	typeref:typename:void
witnesses	deps/jemalloc/include/jemalloc/internal/witness.h	/^	witness_list_t witnesses;$/;"	m	struct:witness_tsd_s	typeref:typename:witness_list_t
witnesses_cleanup	deps/jemalloc/include/jemalloc/internal/private_namespace.gen.h	/^#define witnesses_cleanup /;"	d
witnesses_cleanup	deps/jemalloc/include/jemalloc/internal/private_namespace.h	/^#define witnesses_cleanup /;"	d
witnesses_cleanup	deps/jemalloc/src/witness.c	/^witnesses_cleanup(witness_tsd_t *witness_tsd) {$/;"	f	typeref:typename:void
woff	src/server.h	/^    long long woff;         \/* Last write global replication offset. *\/$/;"	m	struct:client	typeref:typename:long long
worker	tests/modules/blockedclient.c	/^void *worker(void *arg) {$/;"	f	typeref:typename:void *
write	deps/hiredis/adapters/qt.h	/^        void write() { redisAsyncHandleWrite(m_ctx); }$/;"	f	class:RedisQtAdapter	typeref:typename:void
write	deps/hiredis/hiredis.h	/^    ssize_t (*write)(struct redisContext *);$/;"	m	struct:redisContextFuncs	typeref:typename:ssize_t (*)(struct redisContext *)
write	deps/jemalloc/include/jemalloc/internal/hooks.h	/^#define write /;"	d
write	src/connection.h	/^    int (*write)(struct connection *conn, const void *data, size_t data_len);$/;"	m	struct:ConnectionType	typeref:typename:int (*)(struct connection * conn,const void * data,size_t data_len)
write	src/rio.h	/^    size_t (*write)(struct _rio *, const void *buf, size_t len);$/;"	m	struct:_rio	typeref:typename:size_t (*)(struct _rio *,const void * buf,size_t len)
writeCommandsDeniedByDiskError	src/server.c	/^int writeCommandsDeniedByDiskError(void) {$/;"	f	typeref:typename:int
writeHandler	src/redis-benchmark.c	/^static void writeHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	typeref:typename:void	file:
writeToClient	src/networking.c	/^int writeToClient(client *c, int handler_installed) {$/;"	f	typeref:typename:int
write_cb	deps/jemalloc/include/jemalloc/internal/emitter.h	/^	void (*write_cb)(void *, const char *);$/;"	m	struct:emitter_s	typeref:typename:void (*)(void *,const char *)
write_cb	deps/jemalloc/test/unit/stats_print.c	/^write_cb(void *opaque, const char *str) {$/;"	f	typeref:typename:TEST_END void
write_handler	src/connection.h	/^    ConnectionCallbackFunc write_handler;$/;"	m	struct:connection	typeref:typename:ConnectionCallbackFunc
writer	deps/lua/src/ldump.c	/^ lua_Writer writer;$/;"	m	struct:__anon1dacebdb0108	typeref:typename:lua_Writer	file:
writer	deps/lua/src/lstrlib.c	/^static int writer (lua_State *L, const void* b, size_t size, void* B) {$/;"	f	typeref:typename:int	file:
writer	deps/lua/src/luac.c	/^static int writer(lua_State* L, const void* p, size_t size, void* u)$/;"	f	typeref:typename:int	file:
writing	deps/hiredis/adapters/ae.h	/^    int reading, writing;$/;"	m	struct:redisAeEvents	typeref:typename:int
writing	deps/hiredis/adapters/libev.h	/^    int reading, writing;$/;"	m	struct:redisLibevEvents	typeref:typename:int
writing	src/sentinel.c	/^    int reading, writing;$/;"	m	struct:redisAeEvents	typeref:typename:int	file:
written	src/redis-benchmark.c	/^    size_t written;         \/* Bytes of 'obuf' already written *\/$/;"	m	struct:_client	typeref:typename:size_t	file:
wrongtypeerr	src/server.h	/^    *emptyarray, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct	typeref:typename:robj *********** [4]* [4]* [4]* [4]**
wrtmessage	deps/jemalloc/src/malloc_io.c	/^wrtmessage(void *cbopaque, const char *s) {$/;"	f	typeref:typename:void	file:
ws	src/memtest.c	/^static struct winsize ws;$/;"	v	typeref:struct:winsize	file:
x	deps/jemalloc/test/unit/mtx.c	/^	unsigned	x;$/;"	m	struct:__anon0f5a9b9e0108	typeref:typename:unsigned	file:
x	src/rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	typeref:typename:uint32_t[3]	file:
x	src/server.h	/^    unsigned char x[20];    \/* Xored elements. *\/$/;"	m	struct:RedisModuleDigest	typeref:typename:unsigned char[20]
x2s	deps/jemalloc/src/malloc_io.c	/^x2s(uintmax_t x, bool alt_form, bool uppercase, char *s, size_t *slen_p) {$/;"	f	typeref:typename:char *	file:
xackCommand	src/t_stream.c	/^void xackCommand(client *c) {$/;"	f	typeref:typename:void
xaddCommand	src/t_stream.c	/^void xaddCommand(client *c) {$/;"	f	typeref:typename:void
xallocx	deps/jemalloc/include/jemalloc/jemalloc.h	/^#  define xallocx /;"	d
xallocx	deps/jemalloc/include/jemalloc/jemalloc_mangle.h	/^#  define xallocx /;"	d
xallocx	deps/jemalloc/include/jemalloc/jemalloc_mangle_jet.h	/^#  define xallocx /;"	d
xautoclaimCommand	src/t_stream.c	/^void xautoclaimCommand(client *c) {$/;"	f	typeref:typename:void
xclaim	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
xclaimCommand	src/server.h	/^                        *expireCommand, *pexpireCommand, *xclaimCommand,$/;"	m	struct:redisServer	typeref:struct:redisCommand ************
xclaimCommand	src/t_stream.c	/^void xclaimCommand(client *c) {$/;"	f	typeref:typename:void
xdelCommand	src/t_stream.c	/^void xdelCommand(client *c) {$/;"	f	typeref:typename:void
xgroup	src/server.h	/^    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  $/;"	m	struct:sharedObjectsStruct
xgroupCommand	src/server.h	/^                        *xgroupCommand, *rpoplpushCommand, *lmoveCommand;$/;"	m	struct:redisServer	typeref:struct:redisCommand *************
xgroupCommand	src/t_stream.c	/^void xgroupCommand(client *c) {$/;"	f	typeref:typename:void
xinfoCommand	src/t_stream.c	/^void xinfoCommand(client *c) {$/;"	f	typeref:typename:void
xinfoReplyWithStreamInfo	src/t_stream.c	/^void xinfoReplyWithStreamInfo(client *c, stream *s) {$/;"	f	typeref:typename:void
xlenCommand	src/t_stream.c	/^void xlenCommand(client *c) {$/;"	f	typeref:typename:void
xmallctl	deps/jemalloc/include/jemalloc/internal/ctl.h	/^#define xmallctl(/;"	d
xmallctlbymib	deps/jemalloc/include/jemalloc/internal/ctl.h	/^#define xmallctlbymib(/;"	d
xmallctlnametomib	deps/jemalloc/include/jemalloc/internal/ctl.h	/^#define xmallctlnametomib(/;"	d
xoff	src/lolwut6.c	/^    int xoff;       \/* X offset. *\/$/;"	m	struct:skyscraper	typeref:typename:int	file:
xorDigest	src/debug.c	/^void xorDigest(unsigned char *digest, void *ptr, size_t len) {$/;"	f	typeref:typename:void
xorObjectDigest	src/debug.c	/^void xorObjectDigest(redisDb *db, robj *keyobj, unsigned char *digest, robj *o) {$/;"	f	typeref:typename:void
xorStringObjectDigest	src/debug.c	/^void xorStringObjectDigest(unsigned char *digest, robj *o) {$/;"	f	typeref:typename:void
xorshift64star_next	src/memtest.c	/^#define xorshift64star_next(/;"	d	file:
xpendingCommand	src/t_stream.c	/^void xpendingCommand(client *c) {$/;"	f	typeref:typename:void
xrangeCommand	src/t_stream.c	/^void xrangeCommand(client *c) {$/;"	f	typeref:typename:void
xrangeGenericCommand	src/t_stream.c	/^void xrangeGenericCommand(client *c, int rev) {$/;"	f	typeref:typename:void
xreadCommand	src/t_stream.c	/^void xreadCommand(client *c) {$/;"	f	typeref:typename:void
xreadGetKeys	src/db.c	/^int xreadGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *result) {$/;"	f	typeref:typename:int
xread_consumer	src/server.h	/^    robj *xread_consumer;   \/* XREADGROUP consumer name. *\/$/;"	m	struct:blockingState	typeref:typename:robj *
xread_count	src/server.h	/^    size_t xread_count;     \/* XREAD COUNT option. *\/$/;"	m	struct:blockingState	typeref:typename:size_t
xread_group	src/server.h	/^    robj *xread_group;      \/* XREADGROUP group name. *\/$/;"	m	struct:blockingState	typeref:typename:robj *
xread_group_noack	src/server.h	/^    int xread_group_noack;$/;"	m	struct:blockingState	typeref:typename:int
xrevrangeCommand	src/t_stream.c	/^void xrevrangeCommand(client *c) {$/;"	f	typeref:typename:void
xsetidCommand	src/t_stream.c	/^void xsetidCommand(client *c) {$/;"	f	typeref:typename:void
xtrimCommand	src/t_stream.c	/^void xtrimCommand(client *c) {$/;"	f	typeref:typename:void
xy	src/geohash.h	/^    double xy[2]; \/* search center point, xy[0]: lon, xy[1]: lat *\/$/;"	m	struct:__anona01652f10608	typeref:typename:double[2]
yell	src/quicklist.c	/^#define yell(/;"	d	file:
yesno	src/config.c	/^    boolConfigData yesno;$/;"	m	union:typeData	typeref:typename:boolConfigData	file:
yesnotoi	src/config.c	/^int yesnotoi(char *s) {$/;"	f	typeref:typename:int
yindex	deps/lua/src/lparser.c	/^static void yindex (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
z	deps/lua/src/ldo.c	/^  ZIO *z;$/;"	m	struct:SParser	typeref:typename:ZIO *	file:
z	deps/lua/src/llex.h	/^  ZIO *z;  \/* input stream *\/$/;"	m	struct:LexState	typeref:typename:ZIO *
zaddCommand	src/t_zset.c	/^void zaddCommand(client *c) {$/;"	f	typeref:typename:void
zaddGenericCommand	src/t_zset.c	/^void zaddGenericCommand(client *c, int flags) {$/;"	f	typeref:typename:void
zarndmemberReplyWithZiplist	src/t_zset.c	/^static void zarndmemberReplyWithZiplist(client *c, unsigned int count, ziplistEntry *keys, zipli/;"	f	typeref:typename:void	file:
zcalloc	src/zmalloc.c	/^void *zcalloc(size_t size) {$/;"	f	typeref:typename:void *
zcalloc_usable	src/zmalloc.c	/^void *zcalloc_usable(size_t size, size_t *usable) {$/;"	f	typeref:typename:void *
zcardCommand	src/t_zset.c	/^void zcardCommand(client *c) {$/;"	f	typeref:typename:void
zcountCommand	src/t_zset.c	/^void zcountCommand(client *c) {$/;"	f	typeref:typename:void
zdiff	src/t_zset.c	/^static void zdiff(zsetopsrc *src, long setnum, zset *dstzset, size_t *maxelelen, size_t *totelel/;"	f	typeref:typename:void	file:
zdiffAlgorithm1	src/t_zset.c	/^static void zdiffAlgorithm1(zsetopsrc *src, long setnum, zset *dstzset, size_t *maxelelen, size_/;"	f	typeref:typename:void	file:
zdiffAlgorithm2	src/t_zset.c	/^static void zdiffAlgorithm2(zsetopsrc *src, long setnum, zset *dstzset, size_t *maxelelen, size_/;"	f	typeref:typename:void	file:
zdiffCommand	src/t_zset.c	/^void zdiffCommand(client *c) {$/;"	f	typeref:typename:void
zdiffstoreCommand	src/t_zset.c	/^void zdiffstoreCommand(client *c) {$/;"	f	typeref:typename:void
zero	deps/jemalloc/src/jemalloc.c	/^	bool zero;$/;"	m	struct:dynamic_opts_s	typeref:typename:bool	file:
zfree	src/zmalloc.c	/^void zfree(void *ptr) {$/;"	f	typeref:typename:void
zfree_no_tcache	src/zmalloc.c	/^void zfree_no_tcache(void *ptr) {$/;"	f	typeref:typename:void
zfree_usable	src/zmalloc.c	/^void zfree_usable(void *ptr, size_t *usable) {$/;"	f	typeref:typename:void
zgetc	deps/lua/src/lzio.h	/^#define zgetc(/;"	d
zi	src/quicklist.h	/^    unsigned char *zi;$/;"	m	struct:quicklistEntry	typeref:typename:unsigned char *
zi	src/quicklist.h	/^    unsigned char *zi;$/;"	m	struct:quicklistIter	typeref:typename:unsigned char *
zincrbyCommand	src/t_zset.c	/^void zincrbyCommand(client *c) {$/;"	f	typeref:typename:void
zinterCommand	src/t_zset.c	/^void zinterCommand(client *c) {$/;"	f	typeref:typename:void
zinterstoreCommand	src/t_zset.c	/^void zinterstoreCommand(client *c) {$/;"	f	typeref:typename:void
zipAssertValidEntry	src/ziplist.c	/^static inline void zipAssertValidEntry(unsigned char* zl, size_t zlbytes, unsigned char *p) {$/;"	f	typeref:typename:void	file:
zipEncodingLenSize	src/ziplist.c	/^static inline unsigned int zipEncodingLenSize(unsigned char encoding) {$/;"	f	typeref:typename:unsigned int	file:
zipEntry	src/ziplist.c	/^static inline void zipEntry(unsigned char *p, zlentry *e) {$/;"	f	typeref:typename:void	file:
zipEntrySafe	src/ziplist.c	/^static inline int zipEntrySafe(unsigned char* zl, size_t zlbytes, unsigned char *p, zlentry *e, /;"	f	typeref:typename:int	file:
zipIntSize	src/ziplist.c	/^static inline unsigned int zipIntSize(unsigned char encoding) {$/;"	f	typeref:typename:unsigned int	file:
zipLoadInteger	src/ziplist.c	/^int64_t zipLoadInteger(unsigned char *p, unsigned char encoding) {$/;"	f	typeref:typename:int64_t
zipPrevLenByteDiff	src/ziplist.c	/^int zipPrevLenByteDiff(unsigned char *p, unsigned int len) {$/;"	f	typeref:typename:int
zipRawEntryLength	src/ziplist.c	/^static inline unsigned int zipRawEntryLength(unsigned char *p) {$/;"	f	typeref:typename:unsigned int	file:
zipRawEntryLengthSafe	src/ziplist.c	/^static inline unsigned int zipRawEntryLengthSafe(unsigned char* zl, size_t zlbytes, unsigned cha/;"	f	typeref:typename:unsigned int	file:
zipSaveInteger	src/ziplist.c	/^void zipSaveInteger(unsigned char *p, int64_t value, unsigned char encoding) {$/;"	f	typeref:typename:void
zipStoreEntryEncoding	src/ziplist.c	/^unsigned int zipStoreEntryEncoding(unsigned char *p, unsigned char encoding, unsigned int rawlen/;"	f	typeref:typename:unsigned int
zipStorePrevEntryLength	src/ziplist.c	/^unsigned int zipStorePrevEntryLength(unsigned char *p, unsigned int len) {$/;"	f	typeref:typename:unsigned int
zipStorePrevEntryLengthLarge	src/ziplist.c	/^int zipStorePrevEntryLengthLarge(unsigned char *p, unsigned int len) {$/;"	f	typeref:typename:int
zipTryEncoding	src/ziplist.c	/^int zipTryEncoding(unsigned char *entry, unsigned int entrylen, long long *v, unsigned char *enc/;"	f	typeref:typename:int
ziplistBlobLen	src/ziplist.c	/^size_t ziplistBlobLen(unsigned char *zl) {$/;"	f	typeref:typename:size_t
ziplistCompare	src/ziplist.c	/^unsigned int ziplistCompare(unsigned char *p, unsigned char *sstr, unsigned int slen) {$/;"	f	typeref:typename:unsigned int
ziplistDelete	src/ziplist.c	/^unsigned char *ziplistDelete(unsigned char *zl, unsigned char **p) {$/;"	f	typeref:typename:unsigned char *
ziplistDeleteRange	src/ziplist.c	/^unsigned char *ziplistDeleteRange(unsigned char *zl, int index, unsigned int num) {$/;"	f	typeref:typename:unsigned char *
ziplistEntry	src/ziplist.h	/^} ziplistEntry;$/;"	t	typeref:struct:__anon4d39dfe10108
ziplistFind	src/ziplist.c	/^unsigned char *ziplistFind(unsigned char *zl, unsigned char *p, unsigned char *vstr, unsigned in/;"	f	typeref:typename:unsigned char *
ziplistGet	src/ziplist.c	/^unsigned int ziplistGet(unsigned char *p, unsigned char **sstr, unsigned int *slen, long long *s/;"	f	typeref:typename:unsigned int
ziplistGetObject	src/t_zset.c	/^sds ziplistGetObject(unsigned char *sptr) {$/;"	f	typeref:typename:sds
ziplistIndex	src/ziplist.c	/^unsigned char *ziplistIndex(unsigned char *zl, int index) {$/;"	f	typeref:typename:unsigned char *
ziplistInsert	src/ziplist.c	/^unsigned char *ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int/;"	f	typeref:typename:unsigned char *
ziplistLen	src/ziplist.c	/^unsigned int ziplistLen(unsigned char *zl) {$/;"	f	typeref:typename:unsigned int
ziplistMerge	src/ziplist.c	/^unsigned char *ziplistMerge(unsigned char **first, unsigned char **second) {$/;"	f	typeref:typename:unsigned char *
ziplistNew	src/ziplist.c	/^unsigned char *ziplistNew(void) {$/;"	f	typeref:typename:unsigned char *
ziplistNext	src/ziplist.c	/^unsigned char *ziplistNext(unsigned char *zl, unsigned char *p) {$/;"	f	typeref:typename:unsigned char *
ziplistPrev	src/ziplist.c	/^unsigned char *ziplistPrev(unsigned char *zl, unsigned char *p) {$/;"	f	typeref:typename:unsigned char *
ziplistPush	src/ziplist.c	/^unsigned char *ziplistPush(unsigned char *zl, unsigned char *s, unsigned int slen, int where) {$/;"	f	typeref:typename:unsigned char *
ziplistRandomPair	src/ziplist.c	/^void ziplistRandomPair(unsigned char *zl, unsigned long total_count, ziplistEntry *key, ziplistE/;"	f	typeref:typename:void
ziplistRandomPairs	src/ziplist.c	/^void ziplistRandomPairs(unsigned char *zl, unsigned int count, ziplistEntry *keys, ziplistEntry /;"	f	typeref:typename:void
ziplistRandomPairsUnique	src/ziplist.c	/^unsigned int ziplistRandomPairsUnique(unsigned char *zl, unsigned int count, ziplistEntry *keys,/;"	f	typeref:typename:unsigned int
ziplistReplace	src/ziplist.c	/^unsigned char *ziplistReplace(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned in/;"	f	typeref:typename:unsigned char *
ziplistRepr	src/ziplist.c	/^void ziplistRepr(unsigned char *zl) {$/;"	f	typeref:typename:void
ziplistResize	src/ziplist.c	/^unsigned char *ziplistResize(unsigned char *zl, size_t len) {$/;"	f	typeref:typename:unsigned char *
ziplistSafeToAdd	src/ziplist.c	/^int ziplistSafeToAdd(unsigned char* zl, size_t add) {$/;"	f	typeref:typename:int
ziplistSaveValue	src/ziplist.c	/^static inline void ziplistSaveValue(unsigned char *val, unsigned int len, long long lval, ziplis/;"	f	typeref:typename:void	file:
ziplistTest	src/ziplist.c	/^int ziplistTest(int argc, char **argv, int accurate) {$/;"	f	typeref:typename:int
ziplistValidateEntryCB	src/ziplist.h	/^typedef int (*ziplistValidateEntryCB)(unsigned char* p, void* userdata);$/;"	t	typeref:typename:int (*)(unsigned char * p,void * userdata)
ziplistValidateIntegrity	src/ziplist.c	/^int ziplistValidateIntegrity(unsigned char *zl, size_t size, int deep,$/;"	f	typeref:typename:int
zipmapBlobLen	src/zipmap.c	/^size_t zipmapBlobLen(unsigned char *zm) {$/;"	f	typeref:typename:size_t
zipmapDecodeLength	src/zipmap.c	/^static unsigned int zipmapDecodeLength(unsigned char *p) {$/;"	f	typeref:typename:unsigned int	file:
zipmapDel	src/zipmap.c	/^unsigned char *zipmapDel(unsigned char *zm, unsigned char *key, unsigned int klen, int *deleted)/;"	f	typeref:typename:unsigned char *
zipmapEncodeLength	src/zipmap.c	/^static unsigned int zipmapEncodeLength(unsigned char *p, unsigned int len) {$/;"	f	typeref:typename:unsigned int	file:
zipmapExists	src/zipmap.c	/^int zipmapExists(unsigned char *zm, unsigned char *key, unsigned int klen) {$/;"	f	typeref:typename:int
zipmapGet	src/zipmap.c	/^int zipmapGet(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char **value, u/;"	f	typeref:typename:int
zipmapGetEncodedLengthSize	src/zipmap.c	/^static unsigned int zipmapGetEncodedLengthSize(unsigned char *p) {$/;"	f	typeref:typename:unsigned int	file:
zipmapLen	src/zipmap.c	/^unsigned int zipmapLen(unsigned char *zm) {$/;"	f	typeref:typename:unsigned int
zipmapLookupRaw	src/zipmap.c	/^static unsigned char *zipmapLookupRaw(unsigned char *zm, unsigned char *key, unsigned int klen, /;"	f	typeref:typename:unsigned char *	file:
zipmapNew	src/zipmap.c	/^unsigned char *zipmapNew(void) {$/;"	f	typeref:typename:unsigned char *
zipmapNext	src/zipmap.c	/^unsigned char *zipmapNext(unsigned char *zm, unsigned char **key, unsigned int *klen, unsigned c/;"	f	typeref:typename:unsigned char *
zipmapRawEntryLength	src/zipmap.c	/^static unsigned int zipmapRawEntryLength(unsigned char *p) {$/;"	f	typeref:typename:unsigned int	file:
zipmapRawKeyLength	src/zipmap.c	/^static unsigned int zipmapRawKeyLength(unsigned char *p) {$/;"	f	typeref:typename:unsigned int	file:
zipmapRawValueLength	src/zipmap.c	/^static unsigned int zipmapRawValueLength(unsigned char *p) {$/;"	f	typeref:typename:unsigned int	file:
zipmapRepr	src/zipmap.c	/^static void zipmapRepr(unsigned char *p) {$/;"	f	typeref:typename:void	file:
zipmapRequiredLength	src/zipmap.c	/^static unsigned long zipmapRequiredLength(unsigned int klen, unsigned int vlen) {$/;"	f	typeref:typename:unsigned long	file:
zipmapResize	src/zipmap.c	/^static inline unsigned char *zipmapResize(unsigned char *zm, unsigned int len) {$/;"	f	typeref:typename:unsigned char *	file:
zipmapRewind	src/zipmap.c	/^unsigned char *zipmapRewind(unsigned char *zm) {$/;"	f	typeref:typename:unsigned char *
zipmapSet	src/zipmap.c	/^unsigned char *zipmapSet(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char/;"	f	typeref:typename:unsigned char *
zipmapTest	src/zipmap.c	/^int zipmapTest(int argc, char *argv[], int accurate) {$/;"	f	typeref:typename:int
zipmapValidateIntegrity	src/zipmap.c	/^int zipmapValidateIntegrity(unsigned char *zm, size_t size, int deep) {$/;"	f	typeref:typename:int
zl	src/quicklist.h	/^    unsigned char *zl;$/;"	m	struct:quicklistNode	typeref:typename:unsigned char *
zl	src/t_zset.c	/^                unsigned char *zl;$/;"	m	struct:__anon6fce03460408::__anon6fce0346050a::_iterzset::__anon6fce03460808	typeref:typename:unsigned char *	file:
zl	src/t_zset.c	/^            } zl;$/;"	m	union:__anon6fce03460408::__anon6fce0346050a::_iterzset	typeref:struct:__anon6fce03460408::__anon6fce0346050a::_iterzset::__anon6fce03460808	file:
zlentry	src/ziplist.c	/^typedef struct zlentry {$/;"	s	file:
zlentry	src/ziplist.c	/^} zlentry;$/;"	t	typeref:struct:zlentry	file:
zlexcountCommand	src/t_zset.c	/^void zlexcountCommand(client *c) {$/;"	f	typeref:typename:void
zlexrangespec	src/server.h	/^} zlexrangespec;$/;"	t	typeref:struct:__anon3ef696e90e08
zlibc_free	src/zmalloc.c	/^void zlibc_free(void *ptr) {$/;"	f	typeref:typename:void
zmalloc	src/zmalloc.c	/^void *zmalloc(size_t size) {$/;"	f	typeref:typename:void *
zmalloc_default_oom	src/zmalloc.c	/^static void zmalloc_default_oom(size_t size) {$/;"	f	typeref:typename:void	file:
zmalloc_get_allocator_info	src/zmalloc.c	/^int zmalloc_get_allocator_info(size_t *allocated,$/;"	f	typeref:typename:int
zmalloc_get_memory_size	src/zmalloc.c	/^size_t zmalloc_get_memory_size(void) {$/;"	f	typeref:typename:size_t
zmalloc_get_private_dirty	src/zmalloc.c	/^size_t zmalloc_get_private_dirty(long pid) {$/;"	f	typeref:typename:size_t
zmalloc_get_rss	src/zmalloc.c	/^size_t zmalloc_get_rss(void) {$/;"	f	typeref:typename:size_t
zmalloc_get_smap_bytes_by_field	src/zmalloc.c	/^size_t zmalloc_get_smap_bytes_by_field(char *field, long pid) {$/;"	f	typeref:typename:size_t
zmalloc_no_tcache	src/zmalloc.c	/^void *zmalloc_no_tcache(size_t size) {$/;"	f	typeref:typename:void *
zmalloc_oom_handler	src/zmalloc.c	/^static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;$/;"	v	typeref:typename:void (*)(size_t)	file:
zmalloc_set_oom_handler	src/zmalloc.c	/^void zmalloc_set_oom_handler(void (*oom_handler)(size_t)) {$/;"	f	typeref:typename:void
zmalloc_size	src/zmalloc.c	/^size_t zmalloc_size(void *ptr) {$/;"	f	typeref:typename:size_t
zmalloc_size	src/zmalloc.h	/^#define zmalloc_size(/;"	d
zmalloc_test	src/zmalloc.c	/^int zmalloc_test(int argc, char **argv, int accurate) {$/;"	f	typeref:typename:int
zmalloc_usable	src/zmalloc.c	/^void *zmalloc_usable(size_t size, size_t *usable) {$/;"	f	typeref:typename:void *
zmalloc_usable_size	src/zmalloc.c	/^size_t zmalloc_usable_size(void *ptr) {$/;"	f	typeref:typename:size_t
zmalloc_usable_size	src/zmalloc.h	/^#define zmalloc_usable_size(/;"	d
zmalloc_used	src/server.h	/^    size_t zmalloc_used;$/;"	m	struct:malloc_stats	typeref:typename:size_t
zmalloc_used_memory	src/zmalloc.c	/^size_t zmalloc_used_memory(void) {$/;"	f	typeref:typename:size_t
zmscoreCommand	src/t_zset.c	/^void zmscoreCommand(client *c) {$/;"	f	typeref:typename:void
zone_batch_free	deps/jemalloc/src/zone.c	/^zone_batch_free(struct _malloc_zone_t *zone, void **to_be_freed,$/;"	f	typeref:typename:void	file:
zone_batch_malloc	deps/jemalloc/src/zone.c	/^zone_batch_malloc(struct _malloc_zone_t *zone, size_t size, void **results,$/;"	f	typeref:typename:unsigned	file:
zone_calloc	deps/jemalloc/src/zone.c	/^zone_calloc(malloc_zone_t *zone, size_t num, size_t size) {$/;"	f	typeref:typename:void *	file:
zone_check	deps/jemalloc/src/zone.c	/^zone_check(malloc_zone_t *zone) {$/;"	f	typeref:typename:boolean_t	file:
zone_default_get	deps/jemalloc/src/zone.c	/^zone_default_get(void) {$/;"	f	typeref:typename:malloc_zone_t *	file:
zone_destroy	deps/jemalloc/src/zone.c	/^zone_destroy(malloc_zone_t *zone) {$/;"	f	typeref:typename:void	file:
zone_enumerator	deps/jemalloc/src/zone.c	/^zone_enumerator(task_t task, void *data, unsigned type_mask,$/;"	f	typeref:typename:kern_return_t	file:
zone_force_lock	deps/jemalloc/src/zone.c	/^zone_force_lock(malloc_zone_t *zone) {$/;"	f	typeref:typename:void	file:
zone_force_lock_pid	deps/jemalloc/src/zone.c	/^static pid_t zone_force_lock_pid = -1;$/;"	v	typeref:typename:pid_t	file:
zone_force_unlock	deps/jemalloc/src/zone.c	/^zone_force_unlock(malloc_zone_t *zone) {$/;"	f	typeref:typename:void	file:
zone_free	deps/jemalloc/src/zone.c	/^zone_free(malloc_zone_t *zone, void *ptr) {$/;"	f	typeref:typename:void	file:
zone_free_definite_size	deps/jemalloc/src/zone.c	/^zone_free_definite_size(malloc_zone_t *zone, void *ptr, size_t size) {$/;"	f	typeref:typename:void	file:
zone_good_size	deps/jemalloc/src/zone.c	/^zone_good_size(malloc_zone_t *zone, size_t size) {$/;"	f	typeref:typename:size_t	file:
zone_init	deps/jemalloc/src/zone.c	/^zone_init(void) {$/;"	f	typeref:typename:void	file:
zone_locked	deps/jemalloc/src/zone.c	/^	boolean_t (*zone_locked)(malloc_zone_t *);$/;"	m	struct:malloc_introspection_t	typeref:typename:boolean_t (*)(malloc_zone_t *)	file:
zone_locked	deps/jemalloc/src/zone.c	/^zone_locked(malloc_zone_t *zone) {$/;"	f	typeref:typename:boolean_t	file:
zone_log	deps/jemalloc/src/zone.c	/^zone_log(malloc_zone_t *zone, void *address) {$/;"	f	typeref:typename:void	file:
zone_malloc	deps/jemalloc/src/zone.c	/^zone_malloc(malloc_zone_t *zone, size_t size) {$/;"	f	typeref:typename:void *	file:
zone_memalign	deps/jemalloc/src/zone.c	/^zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size) {$/;"	f	typeref:typename:void *	file:
zone_name	deps/jemalloc/src/zone.c	/^	const char *zone_name;$/;"	m	struct:_malloc_zone_t	typeref:typename:const char *	file:
zone_pressure_relief	deps/jemalloc/src/zone.c	/^zone_pressure_relief(struct _malloc_zone_t *zone, size_t goal) {$/;"	f	typeref:typename:size_t	file:
zone_print	deps/jemalloc/src/zone.c	/^zone_print(malloc_zone_t *zone, boolean_t verbose) {$/;"	f	typeref:typename:void	file:
zone_promote	deps/jemalloc/src/zone.c	/^zone_promote(void) {$/;"	f	typeref:typename:void	file:
zone_realloc	deps/jemalloc/src/zone.c	/^zone_realloc(malloc_zone_t *zone, void *ptr, size_t size) {$/;"	f	typeref:typename:void *	file:
zone_reinit_lock	deps/jemalloc/src/zone.c	/^zone_reinit_lock(malloc_zone_t *zone) {$/;"	f	typeref:typename:void	file:
zone_size	deps/jemalloc/src/zone.c	/^zone_size(malloc_zone_t *zone, const void *ptr) {$/;"	f	typeref:typename:size_t	file:
zone_statistics	deps/jemalloc/src/zone.c	/^zone_statistics(malloc_zone_t *zone, malloc_statistics_t *stats) {$/;"	f	typeref:typename:void	file:
zone_valloc	deps/jemalloc/src/zone.c	/^zone_valloc(malloc_zone_t *zone, size_t size) {$/;"	f	typeref:typename:void *	file:
zpopmax	src/server.h	/^    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,$/;"	m	struct:sharedObjectsStruct
zpopmaxCommand	src/server.h	/^                        *zpopmaxCommand, *sremCommand, *execCommand,$/;"	m	struct:redisServer	typeref:struct:redisCommand *******
zpopmaxCommand	src/t_zset.c	/^void zpopmaxCommand(client *c) {$/;"	f	typeref:typename:void
zpopmin	src/server.h	/^    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,$/;"	m	struct:sharedObjectsStruct
zpopminCommand	src/server.h	/^                        *lpopCommand, *rpopCommand, *zpopminCommand,$/;"	m	struct:redisServer	typeref:struct:redisCommand ******
zpopminCommand	src/t_zset.c	/^void zpopminCommand(client *c) {$/;"	f	typeref:typename:void
zrandmemberCommand	src/t_zset.c	/^void zrandmemberCommand(client *c) {$/;"	f	typeref:typename:void
zrandmemberWithCountCommand	src/t_zset.c	/^void zrandmemberWithCountCommand(client *c, long l, int withscores) {$/;"	f	typeref:typename:void
zrangeCommand	src/t_zset.c	/^void zrangeCommand(client *c) {$/;"	f	typeref:typename:void
zrangeGenericCommand	src/t_zset.c	/^void zrangeGenericCommand(zrange_result_handler *handler, int argc_start, int store,$/;"	f	typeref:typename:void
zrangeResultBeginClient	src/t_zset.c	/^static void zrangeResultBeginClient(zrange_result_handler *handler) {$/;"	f	typeref:typename:void	file:
zrangeResultBeginFunction	src/t_zset.c	/^typedef void (*zrangeResultBeginFunction)(zrange_result_handler *c);$/;"	t	typeref:typename:void (*)(zrange_result_handler * c)	file:
zrangeResultBeginStore	src/t_zset.c	/^static void zrangeResultBeginStore(zrange_result_handler *handler)$/;"	f	typeref:typename:void	file:
zrangeResultEmitCBufferForStore	src/t_zset.c	/^static void zrangeResultEmitCBufferForStore(zrange_result_handler *handler,$/;"	f	typeref:typename:void	file:
zrangeResultEmitCBufferFunction	src/t_zset.c	/^typedef void (*zrangeResultEmitCBufferFunction)($/;"	t	typeref:typename:void (*)(zrange_result_handler * c,const void * p,size_t len,double score)	file:
zrangeResultEmitCBufferToClient	src/t_zset.c	/^static void zrangeResultEmitCBufferToClient(zrange_result_handler *handler,$/;"	f	typeref:typename:void	file:
zrangeResultEmitLongLongForStore	src/t_zset.c	/^static void zrangeResultEmitLongLongForStore(zrange_result_handler *handler,$/;"	f	typeref:typename:void	file:
zrangeResultEmitLongLongFunction	src/t_zset.c	/^typedef void (*zrangeResultEmitLongLongFunction)($/;"	t	typeref:typename:void (*)(zrange_result_handler * c,long long ll,double score)	file:
zrangeResultEmitLongLongToClient	src/t_zset.c	/^static void zrangeResultEmitLongLongToClient(zrange_result_handler *handler,$/;"	f	typeref:typename:void	file:
zrangeResultFinalizeClient	src/t_zset.c	/^static void zrangeResultFinalizeClient(zrange_result_handler *handler,$/;"	f	typeref:typename:void	file:
zrangeResultFinalizeFunction	src/t_zset.c	/^typedef void (*zrangeResultFinalizeFunction)($/;"	t	typeref:typename:void (*)(zrange_result_handler * c,size_t result_count)	file:
zrangeResultFinalizeStore	src/t_zset.c	/^static void zrangeResultFinalizeStore(zrange_result_handler *handler, size_t result_count)$/;"	f	typeref:typename:void	file:
zrangeResultHandlerDestinationKeySet	src/t_zset.c	/^static void zrangeResultHandlerDestinationKeySet (zrange_result_handler *handler,$/;"	f	typeref:typename:void	file:
zrangeResultHandlerInit	src/t_zset.c	/^static void zrangeResultHandlerInit(zrange_result_handler *handler,$/;"	f	typeref:typename:void	file:
zrangeResultHandlerScoreEmissionEnable	src/t_zset.c	/^static void zrangeResultHandlerScoreEmissionEnable(zrange_result_handler *handler) {$/;"	f	typeref:typename:void	file:
zrange_consumer_type	src/t_zset.c	/^} zrange_consumer_type;$/;"	t	typeref:enum:__anon6fce03460c03	file:
zrange_direction	src/t_zset.c	/^} zrange_direction;$/;"	t	typeref:enum:__anon6fce03460b03	file:
zrange_result_handler	src/t_zset.c	/^struct zrange_result_handler {$/;"	s	file:
zrange_result_handler	src/t_zset.c	/^typedef struct zrange_result_handler zrange_result_handler;$/;"	t	typeref:struct:zrange_result_handler	file:
zrange_type	src/t_zset.c	/^} zrange_type;$/;"	t	typeref:enum:__anon6fce03460303	file:
zrangebylexCommand	src/t_zset.c	/^void zrangebylexCommand(client *c) {$/;"	f	typeref:typename:void
zrangebyscoreCommand	src/t_zset.c	/^void zrangebyscoreCommand(client *c) {$/;"	f	typeref:typename:void
zrangespec	src/server.h	/^} zrangespec;$/;"	t	typeref:struct:__anon3ef696e90d08
zrangestoreCommand	src/t_zset.c	/^void zrangestoreCommand (client *c) {$/;"	f	typeref:typename:void
zrankCommand	src/t_zset.c	/^void zrankCommand(client *c) {$/;"	f	typeref:typename:void
zrankGenericCommand	src/t_zset.c	/^void zrankGenericCommand(client *c, int reverse) {$/;"	f	typeref:typename:void
zrealloc	src/zmalloc.c	/^void *zrealloc(void *ptr, size_t size) {$/;"	f	typeref:typename:void *
zrealloc_usable	src/zmalloc.c	/^void *zrealloc_usable(void *ptr, size_t size, size_t *usable) {$/;"	f	typeref:typename:void *
zremCommand	src/t_zset.c	/^void zremCommand(client *c) {$/;"	f	typeref:typename:void
zremrangeGenericCommand	src/t_zset.c	/^void zremrangeGenericCommand(client *c, zrange_type rangetype) {$/;"	f	typeref:typename:void
zremrangebylexCommand	src/t_zset.c	/^void zremrangebylexCommand(client *c) {$/;"	f	typeref:typename:void
zremrangebyrankCommand	src/t_zset.c	/^void zremrangebyrankCommand(client *c) {$/;"	f	typeref:typename:void
zremrangebyscoreCommand	src/t_zset.c	/^void zremrangebyscoreCommand(client *c) {$/;"	f	typeref:typename:void
zrevrangeCommand	src/t_zset.c	/^void zrevrangeCommand(client *c) {$/;"	f	typeref:typename:void
zrevrangebylexCommand	src/t_zset.c	/^void zrevrangebylexCommand(client *c) {$/;"	f	typeref:typename:void
zrevrangebyscoreCommand	src/t_zset.c	/^void zrevrangebyscoreCommand(client *c) {$/;"	f	typeref:typename:void
zrevrankCommand	src/t_zset.c	/^void zrevrankCommand(client *c) {$/;"	f	typeref:typename:void
zs	src/defrag.c	/^    zset *zs;$/;"	m	struct:__anon4ad273d60108	typeref:typename:zset *	file:
zs	src/t_zset.c	/^                zset *zs;$/;"	m	struct:__anon6fce03460408::__anon6fce0346050a::_iterzset::__anon6fce03460908	typeref:typename:zset *	file:
zscanCommand	src/t_zset.c	/^void zscanCommand(client *c) {$/;"	f	typeref:typename:void
zscoreCommand	src/t_zset.c	/^void zscoreCommand(client *c) {$/;"	f	typeref:typename:void
zset	src/module.c	/^        } zset;$/;"	m	union:RedisModuleKey::__anon967b4733010a	typeref:struct:RedisModuleKey::__anon967b4733010a::__anon967b47330208	file:
zset	src/server.h	/^typedef struct zset {$/;"	s
zset	src/server.h	/^} zset;$/;"	t	typeref:struct:zset
zset	src/t_zset.c	/^        } zset;$/;"	m	union:__anon6fce03460408::__anon6fce0346050a	typeref:union:__anon6fce03460408::__anon6fce0346050a::_iterzset	file:
zsetAdd	src/t_zset.c	/^int zsetAdd(robj *zobj, double score, sds ele, int in_flags, int *out_flags, double *newscore) {$/;"	f	typeref:typename:int
zsetChooseDiffAlgorithm	src/t_zset.c	/^static int zsetChooseDiffAlgorithm(zsetopsrc *src, long setnum) {$/;"	f	typeref:typename:int	file:
zsetConvert	src/t_zset.c	/^void zsetConvert(robj *zobj, int encoding) {$/;"	f	typeref:typename:void
zsetConvertToZiplistIfNeeded	src/t_zset.c	/^void zsetConvertToZiplistIfNeeded(robj *zobj, size_t maxelelen, size_t totelelen) {$/;"	f	typeref:typename:void
zsetDel	src/t_zset.c	/^int zsetDel(robj *zobj, sds ele) {$/;"	f	typeref:typename:int
zsetDictGetMaxElementLength	src/t_zset.c	/^static size_t zsetDictGetMaxElementLength(dict *d, size_t *totallen) {$/;"	f	typeref:typename:size_t	file:
zsetDictType	src/server.c	/^dictType zsetDictType = {$/;"	v	typeref:typename:dictType
zsetDup	src/t_zset.c	/^robj *zsetDup(robj *o) {$/;"	f	typeref:typename:robj *
zsetInitLexRange	src/module.c	/^int zsetInitLexRange(RedisModuleKey *key, RedisModuleString *min, RedisModuleString *max, int fi/;"	f	typeref:typename:int
zsetInitScoreRange	src/module.c	/^int zsetInitScoreRange(RedisModuleKey *key, double min, double max, int minex, int maxex, int fi/;"	f	typeref:typename:int
zsetKeyReset	src/module.c	/^void zsetKeyReset(RedisModuleKey *key) {$/;"	f	typeref:typename:void
zsetLength	src/t_zset.c	/^unsigned long zsetLength(const robj *zobj) {$/;"	f	typeref:typename:unsigned long
zsetRank	src/t_zset.c	/^long zsetRank(robj *zobj, sds ele, int reverse) {$/;"	f	typeref:typename:long
zsetRemoveFromSkiplist	src/t_zset.c	/^static int zsetRemoveFromSkiplist(zset *zs, sds ele) {$/;"	f	typeref:typename:int	file:
zsetReplyFromZiplistEntry	src/t_zset.c	/^void zsetReplyFromZiplistEntry(client *c, ziplistEntry *e) {$/;"	f	typeref:typename:void
zsetScore	src/t_zset.c	/^int zsetScore(robj *zobj, sds member, double *score) {$/;"	f	typeref:typename:int
zsetSdsFromZiplistEntry	src/t_zset.c	/^sds zsetSdsFromZiplistEntry(ziplistEntry *e) {$/;"	f	typeref:typename:sds
zsetTypeRandomElement	src/t_zset.c	/^void zsetTypeRandomElement(robj *zsetobj, unsigned long zsetsize, ziplistEntry *key, double *sco/;"	f	typeref:typename:void
zsetZiplistValidateIntegrity	src/t_zset.c	/^int zsetZiplistValidateIntegrity(unsigned char *zl, size_t size, int deep) {$/;"	f	typeref:typename:int
zset_max_ziplist_entries	src/server.h	/^    size_t zset_max_ziplist_entries;$/;"	m	struct:redisServer	typeref:typename:size_t
zset_max_ziplist_value	src/server.h	/^    size_t zset_max_ziplist_value;$/;"	m	struct:redisServer	typeref:typename:size_t
zset_rem	tests/modules/zset.c	/^int zset_rem(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {$/;"	f	typeref:typename:int
zsetopsrc	src/t_zset.c	/^} zsetopsrc;$/;"	t	typeref:struct:__anon6fce03460408	file:
zsetopval	src/t_zset.c	/^} zsetopval;$/;"	t	typeref:struct:__anon6fce03460a08	file:
zskiplist	src/server.h	/^typedef struct zskiplist {$/;"	s
zskiplist	src/server.h	/^} zskiplist;$/;"	t	typeref:struct:zskiplist
zskiplistLevel	src/server.h	/^    struct zskiplistLevel {$/;"	s	struct:zskiplistNode
zskiplistNode	src/server.h	/^typedef struct zskiplistNode {$/;"	s
zskiplistNode	src/server.h	/^} zskiplistNode;$/;"	t	typeref:struct:zskiplistNode
zsl	src/server.h	/^    zskiplist *zsl;$/;"	m	struct:zset	typeref:typename:zskiplist *
zslCreate	src/t_zset.c	/^zskiplist *zslCreate(void) {$/;"	f	typeref:typename:zskiplist *
zslCreateNode	src/t_zset.c	/^zskiplistNode *zslCreateNode(int level, double score, sds ele) {$/;"	f	typeref:typename:zskiplistNode *
zslDefrag	src/defrag.c	/^double *zslDefrag(zskiplist *zsl, double score, sds oldele, sds newele) {$/;"	f	typeref:typename:double *
zslDelete	src/t_zset.c	/^int zslDelete(zskiplist *zsl, double score, sds ele, zskiplistNode **node) {$/;"	f	typeref:typename:int
zslDeleteNode	src/t_zset.c	/^void zslDeleteNode(zskiplist *zsl, zskiplistNode *x, zskiplistNode **update) {$/;"	f	typeref:typename:void
zslDeleteRangeByLex	src/t_zset.c	/^unsigned long zslDeleteRangeByLex(zskiplist *zsl, zlexrangespec *range, dict *dict) {$/;"	f	typeref:typename:unsigned long
zslDeleteRangeByRank	src/t_zset.c	/^unsigned long zslDeleteRangeByRank(zskiplist *zsl, unsigned int start, unsigned int end, dict *d/;"	f	typeref:typename:unsigned long
zslDeleteRangeByScore	src/t_zset.c	/^unsigned long zslDeleteRangeByScore(zskiplist *zsl, zrangespec *range, dict *dict) {$/;"	f	typeref:typename:unsigned long
zslFirstInLexRange	src/t_zset.c	/^zskiplistNode *zslFirstInLexRange(zskiplist *zsl, zlexrangespec *range) {$/;"	f	typeref:typename:zskiplistNode *
zslFirstInRange	src/t_zset.c	/^zskiplistNode *zslFirstInRange(zskiplist *zsl, zrangespec *range) {$/;"	f	typeref:typename:zskiplistNode *
zslFree	src/t_zset.c	/^void zslFree(zskiplist *zsl) {$/;"	f	typeref:typename:void
zslFreeLexRange	src/t_zset.c	/^void zslFreeLexRange(zlexrangespec *spec) {$/;"	f	typeref:typename:void
zslFreeNode	src/t_zset.c	/^void zslFreeNode(zskiplistNode *node) {$/;"	f	typeref:typename:void
zslGetElementByRank	src/t_zset.c	/^zskiplistNode* zslGetElementByRank(zskiplist *zsl, unsigned long rank) {$/;"	f	typeref:typename:zskiplistNode *
zslGetRank	src/t_zset.c	/^unsigned long zslGetRank(zskiplist *zsl, double score, sds ele) {$/;"	f	typeref:typename:unsigned long
zslInsert	src/t_zset.c	/^zskiplistNode *zslInsert(zskiplist *zsl, double score, sds ele) {$/;"	f	typeref:typename:zskiplistNode *
zslIsInLexRange	src/t_zset.c	/^int zslIsInLexRange(zskiplist *zsl, zlexrangespec *range) {$/;"	f	typeref:typename:int
zslIsInRange	src/t_zset.c	/^int zslIsInRange(zskiplist *zsl, zrangespec *range) {$/;"	f	typeref:typename:int
zslLastInLexRange	src/t_zset.c	/^zskiplistNode *zslLastInLexRange(zskiplist *zsl, zlexrangespec *range) {$/;"	f	typeref:typename:zskiplistNode *
zslLastInRange	src/t_zset.c	/^zskiplistNode *zslLastInRange(zskiplist *zsl, zrangespec *range) {$/;"	f	typeref:typename:zskiplistNode *
zslLexValueGteMin	src/t_zset.c	/^int zslLexValueGteMin(sds value, zlexrangespec *spec) {$/;"	f	typeref:typename:int
zslLexValueLteMax	src/t_zset.c	/^int zslLexValueLteMax(sds value, zlexrangespec *spec) {$/;"	f	typeref:typename:int
zslParseLexRange	src/t_zset.c	/^int zslParseLexRange(robj *min, robj *max, zlexrangespec *spec) {$/;"	f	typeref:typename:int
zslParseLexRangeItem	src/t_zset.c	/^int zslParseLexRangeItem(robj *item, sds *dest, int *ex) {$/;"	f	typeref:typename:int
zslParseRange	src/t_zset.c	/^static int zslParseRange(robj *min, robj *max, zrangespec *spec) {$/;"	f	typeref:typename:int	file:
zslRandomLevel	src/t_zset.c	/^int zslRandomLevel(void) {$/;"	f	typeref:typename:int
zslUpdateNode	src/defrag.c	/^void zslUpdateNode(zskiplist *zsl, zskiplistNode *oldnode, zskiplistNode *newnode, zskiplistNode/;"	f	typeref:typename:void
zslUpdateScore	src/t_zset.c	/^zskiplistNode *zslUpdateScore(zskiplist *zsl, double curscore, sds ele, double newscore) {$/;"	f	typeref:typename:zskiplistNode *
zslValueGteMin	src/t_zset.c	/^int zslValueGteMin(double value, zrangespec *spec) {$/;"	f	typeref:typename:int
zslValueLteMax	src/t_zset.c	/^int zslValueLteMax(double value, zrangespec *spec) {$/;"	f	typeref:typename:int
zstrdup	src/zmalloc.c	/^char *zstrdup(const char *s) {$/;"	f	typeref:typename:char *
ztrycalloc	src/zmalloc.c	/^void *ztrycalloc(size_t size) {$/;"	f	typeref:typename:void *
ztrycalloc_usable	src/zmalloc.c	/^void *ztrycalloc_usable(size_t size, size_t *usable) {$/;"	f	typeref:typename:void *
ztrymalloc	src/zmalloc.c	/^void *ztrymalloc(size_t size) {$/;"	f	typeref:typename:void *
ztrymalloc_usable	src/zmalloc.c	/^void *ztrymalloc_usable(size_t size, size_t *usable) {$/;"	f	typeref:typename:void *
ztryrealloc	src/zmalloc.c	/^void *ztryrealloc(void *ptr, size_t size) {$/;"	f	typeref:typename:void *
ztryrealloc_usable	src/zmalloc.c	/^void *ztryrealloc_usable(void *ptr, size_t size, size_t *usable) {$/;"	f	typeref:typename:void *
zuiBufferFromValue	src/t_zset.c	/^int zuiBufferFromValue(zsetopval *val) {$/;"	f	typeref:typename:int
zuiClearIterator	src/t_zset.c	/^void zuiClearIterator(zsetopsrc *op) {$/;"	f	typeref:typename:void
zuiCompareByCardinality	src/t_zset.c	/^int zuiCompareByCardinality(const void *s1, const void *s2) {$/;"	f	typeref:typename:int
zuiCompareByRevCardinality	src/t_zset.c	/^static int zuiCompareByRevCardinality(const void *s1, const void *s2) {$/;"	f	typeref:typename:int	file:
zuiFind	src/t_zset.c	/^int zuiFind(zsetopsrc *op, zsetopval *val, double *score) {$/;"	f	typeref:typename:int
zuiInitIterator	src/t_zset.c	/^void zuiInitIterator(zsetopsrc *op) {$/;"	f	typeref:typename:void
zuiLength	src/t_zset.c	/^unsigned long zuiLength(zsetopsrc *op) {$/;"	f	typeref:typename:unsigned long
zuiLongLongFromValue	src/t_zset.c	/^int zuiLongLongFromValue(zsetopval *val) {$/;"	f	typeref:typename:int
zuiNewSdsFromValue	src/t_zset.c	/^sds zuiNewSdsFromValue(zsetopval *val) {$/;"	f	typeref:typename:sds
zuiNext	src/t_zset.c	/^int zuiNext(zsetopsrc *op, zsetopval *val) {$/;"	f	typeref:typename:int
zuiSdsFromValue	src/t_zset.c	/^sds zuiSdsFromValue(zsetopval *val) {$/;"	f	typeref:typename:sds
zunionCommand	src/t_zset.c	/^void zunionCommand(client *c) {$/;"	f	typeref:typename:void
zunionInterAggregate	src/t_zset.c	/^inline static void zunionInterAggregate(double *target, double val, int aggregate) {$/;"	f	typeref:typename:void	file:
zunionInterDictValue	src/t_zset.c	/^#define zunionInterDictValue(/;"	d	file:
zunionInterDiffGenericCommand	src/t_zset.c	/^void zunionInterDiffGenericCommand(client *c, robj *dstkey, int numkeysIndex, int op) {$/;"	f	typeref:typename:void
zunionInterDiffGetKeys	src/db.c	/^int zunionInterDiffGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult *resul/;"	f	typeref:typename:int
zunionInterDiffStoreGetKeys	src/db.c	/^int zunionInterDiffStoreGetKeys(struct redisCommand *cmd, robj **argv, int argc, getKeysResult */;"	f	typeref:typename:int
zunionstoreCommand	src/t_zset.c	/^void zunionstoreCommand(client *c) {$/;"	f	typeref:typename:void
zzlCompareElements	src/t_zset.c	/^int zzlCompareElements(unsigned char *eptr, unsigned char *cstr, unsigned int clen) {$/;"	f	typeref:typename:int
zzlDelete	src/t_zset.c	/^unsigned char *zzlDelete(unsigned char *zl, unsigned char *eptr) {$/;"	f	typeref:typename:unsigned char *
zzlDeleteRangeByLex	src/t_zset.c	/^unsigned char *zzlDeleteRangeByLex(unsigned char *zl, zlexrangespec *range, unsigned long *delet/;"	f	typeref:typename:unsigned char *
zzlDeleteRangeByRank	src/t_zset.c	/^unsigned char *zzlDeleteRangeByRank(unsigned char *zl, unsigned int start, unsigned int end, uns/;"	f	typeref:typename:unsigned char *
zzlDeleteRangeByScore	src/t_zset.c	/^unsigned char *zzlDeleteRangeByScore(unsigned char *zl, zrangespec *range, unsigned long *delete/;"	f	typeref:typename:unsigned char *
zzlFind	src/t_zset.c	/^unsigned char *zzlFind(unsigned char *zl, sds ele, double *score) {$/;"	f	typeref:typename:unsigned char *
zzlFirstInLexRange	src/t_zset.c	/^unsigned char *zzlFirstInLexRange(unsigned char *zl, zlexrangespec *range) {$/;"	f	typeref:typename:unsigned char *
zzlFirstInRange	src/t_zset.c	/^unsigned char *zzlFirstInRange(unsigned char *zl, zrangespec *range) {$/;"	f	typeref:typename:unsigned char *
zzlGetScore	src/t_zset.c	/^double zzlGetScore(unsigned char *sptr) {$/;"	f	typeref:typename:double
zzlInsert	src/t_zset.c	/^unsigned char *zzlInsert(unsigned char *zl, sds ele, double score) {$/;"	f	typeref:typename:unsigned char *
zzlInsertAt	src/t_zset.c	/^unsigned char *zzlInsertAt(unsigned char *zl, unsigned char *eptr, sds ele, double score) {$/;"	f	typeref:typename:unsigned char *
zzlIsInLexRange	src/t_zset.c	/^int zzlIsInLexRange(unsigned char *zl, zlexrangespec *range) {$/;"	f	typeref:typename:int
zzlIsInRange	src/t_zset.c	/^int zzlIsInRange(unsigned char *zl, zrangespec *range) {$/;"	f	typeref:typename:int
zzlLastInLexRange	src/t_zset.c	/^unsigned char *zzlLastInLexRange(unsigned char *zl, zlexrangespec *range) {$/;"	f	typeref:typename:unsigned char *
zzlLastInRange	src/t_zset.c	/^unsigned char *zzlLastInRange(unsigned char *zl, zrangespec *range) {$/;"	f	typeref:typename:unsigned char *
zzlLength	src/t_zset.c	/^unsigned int zzlLength(unsigned char *zl) {$/;"	f	typeref:typename:unsigned int
zzlLexValueGteMin	src/t_zset.c	/^int zzlLexValueGteMin(unsigned char *p, zlexrangespec *spec) {$/;"	f	typeref:typename:int
zzlLexValueLteMax	src/t_zset.c	/^int zzlLexValueLteMax(unsigned char *p, zlexrangespec *spec) {$/;"	f	typeref:typename:int
zzlNext	src/t_zset.c	/^void zzlNext(unsigned char *zl, unsigned char **eptr, unsigned char **sptr) {$/;"	f	typeref:typename:void
zzlPrev	src/t_zset.c	/^void zzlPrev(unsigned char *zl, unsigned char **eptr, unsigned char **sptr) {$/;"	f	typeref:typename:void
zzlStrtod	src/t_zset.c	/^double zzlStrtod(unsigned char *vstr, unsigned int vlen) {$/;"	f	typeref:typename:double
~RedisQtAdapter	deps/hiredis/adapters/qt.h	/^        ~RedisQtAdapter() {$/;"	f	class:RedisQtAdapter
